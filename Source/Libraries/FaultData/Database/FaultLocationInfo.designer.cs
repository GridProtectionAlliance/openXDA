#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FaultData.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="openXDA")]
	public partial class FaultLocationInfoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSegmentType(SegmentType instance);
    partial void UpdateSegmentType(SegmentType instance);
    partial void DeleteSegmentType(SegmentType instance);
    partial void InsertFaultSegment(FaultSegment instance);
    partial void UpdateFaultSegment(FaultSegment instance);
    partial void DeleteFaultSegment(FaultSegment instance);
    partial void InsertLineImpedance(LineImpedance instance);
    partial void UpdateLineImpedance(LineImpedance instance);
    partial void DeleteLineImpedance(LineImpedance instance);
    partial void InsertSourceImpedance(SourceImpedance instance);
    partial void UpdateSourceImpedance(SourceImpedance instance);
    partial void DeleteSourceImpedance(SourceImpedance instance);
    partial void InsertOutputChannel(OutputChannel instance);
    partial void UpdateOutputChannel(OutputChannel instance);
    partial void DeleteOutputChannel(OutputChannel instance);
    partial void InsertFaultLocationAlgorithm(FaultLocationAlgorithm instance);
    partial void UpdateFaultLocationAlgorithm(FaultLocationAlgorithm instance);
    partial void DeleteFaultLocationAlgorithm(FaultLocationAlgorithm instance);
    partial void InsertFaultDetectionLogic(FaultDetectionLogic instance);
    partial void UpdateFaultDetectionLogic(FaultDetectionLogic instance);
    partial void DeleteFaultDetectionLogic(FaultDetectionLogic instance);
    #endregion
		
		public FaultLocationInfoDataContext() : 
				base(global::FaultData.Properties.Settings.Default.openXDAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FaultLocationInfoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FaultLocationInfoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FaultLocationInfoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FaultLocationInfoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SegmentType> SegmentTypes
		{
			get
			{
				return this.GetTable<SegmentType>();
			}
		}
		
		public System.Data.Linq.Table<FaultSegment> FaultSegments
		{
			get
			{
				return this.GetTable<FaultSegment>();
			}
		}
		
		public System.Data.Linq.Table<LineImpedance> LineImpedances
		{
			get
			{
				return this.GetTable<LineImpedance>();
			}
		}
		
		public System.Data.Linq.Table<SourceImpedance> SourceImpedances
		{
			get
			{
				return this.GetTable<SourceImpedance>();
			}
		}
		
		public System.Data.Linq.Table<OutputChannel> OutputChannels
		{
			get
			{
				return this.GetTable<OutputChannel>();
			}
		}
		
		public System.Data.Linq.Table<FaultLocationAlgorithm> FaultLocationAlgorithms
		{
			get
			{
				return this.GetTable<FaultLocationAlgorithm>();
			}
		}
		
		public System.Data.Linq.Table<FaultDetectionLogic> FaultDetectionLogics
		{
			get
			{
				return this.GetTable<FaultDetectionLogic>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SegmentType")]
	public partial class SegmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<FaultSegment> _FaultSegments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SegmentType()
		{
			this._FaultSegments = new EntitySet<FaultSegment>(new Action<FaultSegment>(this.attach_FaultSegments), new Action<FaultSegment>(this.detach_FaultSegments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SegmentType_FaultSegment", Storage="_FaultSegments", ThisKey="ID", OtherKey="SegmentTypeID")]
		public EntitySet<FaultSegment> FaultSegments
		{
			get
			{
				return this._FaultSegments;
			}
			set
			{
				this._FaultSegments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FaultSegments(FaultSegment entity)
		{
			this.SendPropertyChanging();
			entity.SegmentType = this;
		}
		
		private void detach_FaultSegments(FaultSegment entity)
		{
			this.SendPropertyChanging();
			entity.SegmentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FaultSegment")]
	public partial class FaultSegment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _SegmentTypeID;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private int _StartSample;
		
		private int _EndSample;
		
		private EntityRef<SegmentType> _SegmentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnSegmentTypeIDChanging(int value);
    partial void OnSegmentTypeIDChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnStartSampleChanging(int value);
    partial void OnStartSampleChanged();
    partial void OnEndSampleChanging(int value);
    partial void OnEndSampleChanged();
    #endregion
		
		public FaultSegment()
		{
			this._SegmentType = default(EntityRef<SegmentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentTypeID", DbType="Int NOT NULL")]
		public int SegmentTypeID
		{
			get
			{
				return this._SegmentTypeID;
			}
			set
			{
				if ((this._SegmentTypeID != value))
				{
					if (this._SegmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSegmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SegmentTypeID = value;
					this.SendPropertyChanged("SegmentTypeID");
					this.OnSegmentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartSample", DbType="Int NOT NULL")]
		public int StartSample
		{
			get
			{
				return this._StartSample;
			}
			set
			{
				if ((this._StartSample != value))
				{
					this.OnStartSampleChanging(value);
					this.SendPropertyChanging();
					this._StartSample = value;
					this.SendPropertyChanged("StartSample");
					this.OnStartSampleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndSample", DbType="Int NOT NULL")]
		public int EndSample
		{
			get
			{
				return this._EndSample;
			}
			set
			{
				if ((this._EndSample != value))
				{
					this.OnEndSampleChanging(value);
					this.SendPropertyChanging();
					this._EndSample = value;
					this.SendPropertyChanged("EndSample");
					this.OnEndSampleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SegmentType_FaultSegment", Storage="_SegmentType", ThisKey="SegmentTypeID", OtherKey="ID", IsForeignKey=true)]
		public SegmentType SegmentType
		{
			get
			{
				return this._SegmentType.Entity;
			}
			set
			{
				SegmentType previousValue = this._SegmentType.Entity;
				if (((previousValue != value) 
							|| (this._SegmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SegmentType.Entity = null;
						previousValue.FaultSegments.Remove(this);
					}
					this._SegmentType.Entity = value;
					if ((value != null))
					{
						value.FaultSegments.Add(this);
						this._SegmentTypeID = value.ID;
					}
					else
					{
						this._SegmentTypeID = default(int);
					}
					this.SendPropertyChanged("SegmentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LineImpedance")]
	public partial class LineImpedance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LineID;
		
		private double _R0;
		
		private double _X0;
		
		private double _R1;
		
		private double _X1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLineIDChanging(int value);
    partial void OnLineIDChanged();
    partial void OnR0Changing(double value);
    partial void OnR0Changed();
    partial void OnX0Changing(double value);
    partial void OnX0Changed();
    partial void OnR1Changing(double value);
    partial void OnR1Changed();
    partial void OnX1Changing(double value);
    partial void OnX1Changed();
    #endregion
		
		public LineImpedance()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="Int NOT NULL")]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_R0", DbType="Float NOT NULL")]
		public double R0
		{
			get
			{
				return this._R0;
			}
			set
			{
				if ((this._R0 != value))
				{
					this.OnR0Changing(value);
					this.SendPropertyChanging();
					this._R0 = value;
					this.SendPropertyChanged("R0");
					this.OnR0Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X0", DbType="Float NOT NULL")]
		public double X0
		{
			get
			{
				return this._X0;
			}
			set
			{
				if ((this._X0 != value))
				{
					this.OnX0Changing(value);
					this.SendPropertyChanging();
					this._X0 = value;
					this.SendPropertyChanged("X0");
					this.OnX0Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_R1", DbType="Float NOT NULL")]
		public double R1
		{
			get
			{
				return this._R1;
			}
			set
			{
				if ((this._R1 != value))
				{
					this.OnR1Changing(value);
					this.SendPropertyChanging();
					this._R1 = value;
					this.SendPropertyChanged("R1");
					this.OnR1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X1", DbType="Float NOT NULL")]
		public double X1
		{
			get
			{
				return this._X1;
			}
			set
			{
				if ((this._X1 != value))
				{
					this.OnX1Changing(value);
					this.SendPropertyChanging();
					this._X1 = value;
					this.SendPropertyChanged("X1");
					this.OnX1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SourceImpedance")]
	public partial class SourceImpedance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeterLocationLineID;
		
		private double _RSrc;
		
		private double _XSrc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeterLocationLineIDChanging(int value);
    partial void OnMeterLocationLineIDChanged();
    partial void OnRSrcChanging(double value);
    partial void OnRSrcChanged();
    partial void OnXSrcChanging(double value);
    partial void OnXSrcChanged();
    #endregion
		
		public SourceImpedance()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterLocationLineID", DbType="Int NOT NULL")]
		public int MeterLocationLineID
		{
			get
			{
				return this._MeterLocationLineID;
			}
			set
			{
				if ((this._MeterLocationLineID != value))
				{
					this.OnMeterLocationLineIDChanging(value);
					this.SendPropertyChanging();
					this._MeterLocationLineID = value;
					this.SendPropertyChanged("MeterLocationLineID");
					this.OnMeterLocationLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSrc", DbType="Float NOT NULL")]
		public double RSrc
		{
			get
			{
				return this._RSrc;
			}
			set
			{
				if ((this._RSrc != value))
				{
					this.OnRSrcChanging(value);
					this.SendPropertyChanging();
					this._RSrc = value;
					this.SendPropertyChanged("RSrc");
					this.OnRSrcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XSrc", DbType="Float NOT NULL")]
		public double XSrc
		{
			get
			{
				return this._XSrc;
			}
			set
			{
				if ((this._XSrc != value))
				{
					this.OnXSrcChanging(value);
					this.SendPropertyChanging();
					this._XSrc = value;
					this.SendPropertyChanged("XSrc");
					this.OnXSrcChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutputChannel")]
	public partial class OutputChannel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SeriesID;
		
		private string _ChannelKey;
		
		private int _LoadOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSeriesIDChanging(int value);
    partial void OnSeriesIDChanged();
    partial void OnChannelKeyChanging(string value);
    partial void OnChannelKeyChanged();
    partial void OnLoadOrderChanging(int value);
    partial void OnLoadOrderChanged();
    #endregion
		
		public OutputChannel()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesID", DbType="Int NOT NULL")]
		public int SeriesID
		{
			get
			{
				return this._SeriesID;
			}
			set
			{
				if ((this._SeriesID != value))
				{
					this.OnSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._SeriesID = value;
					this.SendPropertyChanged("SeriesID");
					this.OnSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelKey", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ChannelKey
		{
			get
			{
				return this._ChannelKey;
			}
			set
			{
				if ((this._ChannelKey != value))
				{
					this.OnChannelKeyChanging(value);
					this.SendPropertyChanging();
					this._ChannelKey = value;
					this.SendPropertyChanged("ChannelKey");
					this.OnChannelKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadOrder", DbType="Int NOT NULL")]
		public int LoadOrder
		{
			get
			{
				return this._LoadOrder;
			}
			set
			{
				if ((this._LoadOrder != value))
				{
					this.OnLoadOrderChanging(value);
					this.SendPropertyChanging();
					this._LoadOrder = value;
					this.SendPropertyChanged("LoadOrder");
					this.OnLoadOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FaultLocationAlgorithm")]
	public partial class FaultLocationAlgorithm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AssemblyName;
		
		private string _TypeName;
		
		private string _MethodName;
		
		private int _ExecutionOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAssemblyNameChanging(string value);
    partial void OnAssemblyNameChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnMethodNameChanging(string value);
    partial void OnMethodNameChanged();
    partial void OnExecutionOrderChanging(int value);
    partial void OnExecutionOrderChanged();
    #endregion
		
		public FaultLocationAlgorithm()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this.OnAssemblyNameChanging(value);
					this.SendPropertyChanging();
					this._AssemblyName = value;
					this.SendPropertyChanged("AssemblyName");
					this.OnAssemblyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodName", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string MethodName
		{
			get
			{
				return this._MethodName;
			}
			set
			{
				if ((this._MethodName != value))
				{
					this.OnMethodNameChanging(value);
					this.SendPropertyChanging();
					this._MethodName = value;
					this.SendPropertyChanged("MethodName");
					this.OnMethodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionOrder", DbType="Int NOT NULL")]
		public int ExecutionOrder
		{
			get
			{
				return this._ExecutionOrder;
			}
			set
			{
				if ((this._ExecutionOrder != value))
				{
					this.OnExecutionOrderChanging(value);
					this.SendPropertyChanging();
					this._ExecutionOrder = value;
					this.SendPropertyChanged("ExecutionOrder");
					this.OnExecutionOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FaultDetectionLogic")]
	public partial class FaultDetectionLogic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeterLineID;
		
		private string _Expression;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeterLineIDChanging(int value);
    partial void OnMeterLineIDChanged();
    partial void OnExpressionChanging(string value);
    partial void OnExpressionChanged();
    #endregion
		
		public FaultDetectionLogic()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterLineID", DbType="Int NOT NULL")]
		public int MeterLineID
		{
			get
			{
				return this._MeterLineID;
			}
			set
			{
				if ((this._MeterLineID != value))
				{
					this.OnMeterLineIDChanging(value);
					this.SendPropertyChanging();
					this._MeterLineID = value;
					this.SendPropertyChanged("MeterLineID");
					this.OnMeterLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expression", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
