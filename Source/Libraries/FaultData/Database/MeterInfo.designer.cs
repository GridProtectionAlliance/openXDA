#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FaultData.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="openXDA")]
	public partial class MeterInfoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMeterLocation(MeterLocation instance);
    partial void UpdateMeterLocation(MeterLocation instance);
    partial void DeleteMeterLocation(MeterLocation instance);
    partial void InsertMeasurementType(MeasurementType instance);
    partial void UpdateMeasurementType(MeasurementType instance);
    partial void DeleteMeasurementType(MeasurementType instance);
    partial void InsertPhase(Phase instance);
    partial void UpdatePhase(Phase instance);
    partial void DeletePhase(Phase instance);
    partial void InsertSeriesType(SeriesType instance);
    partial void UpdateSeriesType(SeriesType instance);
    partial void DeleteSeriesType(SeriesType instance);
    partial void InsertMeterLocationLine(MeterLocationLine instance);
    partial void UpdateMeterLocationLine(MeterLocationLine instance);
    partial void DeleteMeterLocationLine(MeterLocationLine instance);
    partial void InsertMeterFileGroup(MeterFileGroup instance);
    partial void UpdateMeterFileGroup(MeterFileGroup instance);
    partial void DeleteMeterFileGroup(MeterFileGroup instance);
    partial void InsertSeries(Series instance);
    partial void UpdateSeries(Series instance);
    partial void DeleteSeries(Series instance);
    partial void InsertChannel(Channel instance);
    partial void UpdateChannel(Channel instance);
    partial void DeleteChannel(Channel instance);
    partial void InsertMeasurementCharacteristic(MeasurementCharacteristic instance);
    partial void UpdateMeasurementCharacteristic(MeasurementCharacteristic instance);
    partial void DeleteMeasurementCharacteristic(MeasurementCharacteristic instance);
    partial void InsertLine(Line instance);
    partial void UpdateLine(Line instance);
    partial void DeleteLine(Line instance);
    partial void InsertMeterLine(MeterLine instance);
    partial void UpdateMeterLine(MeterLine instance);
    partial void DeleteMeterLine(MeterLine instance);
    partial void InsertMeter(Meter instance);
    partial void UpdateMeter(Meter instance);
    partial void DeleteMeter(Meter instance);
    partial void InsertStructure(Structure instance);
    partial void UpdateStructure(Structure instance);
    partial void DeleteStructure(Structure instance);
    partial void InsertBreakerChannel(BreakerChannel instance);
    partial void UpdateBreakerChannel(BreakerChannel instance);
    partial void DeleteBreakerChannel(BreakerChannel instance);
    partial void InsertMeterMeterGroup(MeterMeterGroup instance);
    partial void UpdateMeterMeterGroup(MeterMeterGroup instance);
    partial void DeleteMeterMeterGroup(MeterMeterGroup instance);
    #endregion
		
		public MeterInfoDataContext() : 
				base(global::FaultData.Properties.Settings.Default.openXDAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MeterInfoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MeterInfoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MeterInfoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MeterInfoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MeterLocation> MeterLocations
		{
			get
			{
				return this.GetTable<MeterLocation>();
			}
		}
		
		public System.Data.Linq.Table<MeasurementType> MeasurementTypes
		{
			get
			{
				return this.GetTable<MeasurementType>();
			}
		}
		
		public System.Data.Linq.Table<Phase> Phases
		{
			get
			{
				return this.GetTable<Phase>();
			}
		}
		
		public System.Data.Linq.Table<SeriesType> SeriesTypes
		{
			get
			{
				return this.GetTable<SeriesType>();
			}
		}
		
		public System.Data.Linq.Table<MeterLocationLine> MeterLocationLines
		{
			get
			{
				return this.GetTable<MeterLocationLine>();
			}
		}
		
		public System.Data.Linq.Table<MeterFileGroup> MeterFileGroups
		{
			get
			{
				return this.GetTable<MeterFileGroup>();
			}
		}
		
		public System.Data.Linq.Table<Series> Series
		{
			get
			{
				return this.GetTable<Series>();
			}
		}
		
		public System.Data.Linq.Table<Channel> Channels
		{
			get
			{
				return this.GetTable<Channel>();
			}
		}
		
		public System.Data.Linq.Table<MeasurementCharacteristic> MeasurementCharacteristics
		{
			get
			{
				return this.GetTable<MeasurementCharacteristic>();
			}
		}
		
		public System.Data.Linq.Table<Line> Lines
		{
			get
			{
				return this.GetTable<Line>();
			}
		}
		
		public System.Data.Linq.Table<MeterLine> MeterLines
		{
			get
			{
				return this.GetTable<MeterLine>();
			}
		}
		
		public System.Data.Linq.Table<Meter> Meters
		{
			get
			{
				return this.GetTable<Meter>();
			}
		}
		
		public System.Data.Linq.Table<Structure> Structures
		{
			get
			{
				return this.GetTable<Structure>();
			}
		}
		
		public System.Data.Linq.Table<BreakerChannel> BreakerChannels
		{
			get
			{
				return this.GetTable<BreakerChannel>();
			}
		}
		
		public System.Data.Linq.Table<MeterMeterGroup> MeterMeterGroups
		{
			get
			{
				return this.GetTable<MeterMeterGroup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeterLocation")]
	public partial class MeterLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AssetKey;
		
		private string _Name;
		
		private string _Alias;
		
		private string _ShortName;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private string _Description;
		
		private EntitySet<MeterLocationLine> _MeterLocationLines;
		
		private EntitySet<Meter> _Meters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAssetKeyChanging(string value);
    partial void OnAssetKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MeterLocation()
		{
			this._MeterLocationLines = new EntitySet<MeterLocationLine>(new Action<MeterLocationLine>(this.attach_MeterLocationLines), new Action<MeterLocationLine>(this.detach_MeterLocationLines));
			this._Meters = new EntitySet<Meter>(new Action<Meter>(this.attach_Meters), new Action<Meter>(this.detach_Meters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetKey", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetKey
		{
			get
			{
				return this._AssetKey;
			}
			set
			{
				if ((this._AssetKey != value))
				{
					this.OnAssetKeyChanging(value);
					this.SendPropertyChanging();
					this._AssetKey = value;
					this.SendPropertyChanged("AssetKey");
					this.OnAssetKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alias", DbType="VarChar(200)")]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(50)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeterLocation_MeterLocationLine", Storage="_MeterLocationLines", ThisKey="ID", OtherKey="MeterLocationID")]
		public EntitySet<MeterLocationLine> MeterLocationLines
		{
			get
			{
				return this._MeterLocationLines;
			}
			set
			{
				this._MeterLocationLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeterLocation_Meter", Storage="_Meters", ThisKey="ID", OtherKey="MeterLocationID")]
		public EntitySet<Meter> Meters
		{
			get
			{
				return this._Meters;
			}
			set
			{
				this._Meters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeterLocationLines(MeterLocationLine entity)
		{
			this.SendPropertyChanging();
			entity.MeterLocation = this;
		}
		
		private void detach_MeterLocationLines(MeterLocationLine entity)
		{
			this.SendPropertyChanging();
			entity.MeterLocation = null;
		}
		
		private void attach_Meters(Meter entity)
		{
			this.SendPropertyChanging();
			entity.MeterLocation = this;
		}
		
		private void detach_Meters(Meter entity)
		{
			this.SendPropertyChanging();
			entity.MeterLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeasurementType")]
	public partial class MeasurementType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Channel> _Channels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MeasurementType()
		{
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeasurementType_Channel", Storage="_Channels", ThisKey="ID", OtherKey="MeasurementTypeID")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.MeasurementType = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.MeasurementType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phase")]
	public partial class Phase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Channel> _Channels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Phase()
		{
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phase_Channel", Storage="_Channels", ThisKey="ID", OtherKey="PhaseID")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Phase = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Phase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeriesType")]
	public partial class SeriesType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Series> _Series;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SeriesType()
		{
			this._Series = new EntitySet<Series>(new Action<Series>(this.attach_Series), new Action<Series>(this.detach_Series));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeriesType_Series", Storage="_Series", ThisKey="ID", OtherKey="SeriesTypeID")]
		public EntitySet<Series> Series
		{
			get
			{
				return this._Series;
			}
			set
			{
				this._Series.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Series(Series entity)
		{
			this.SendPropertyChanging();
			entity.SeriesType = this;
		}
		
		private void detach_Series(Series entity)
		{
			this.SendPropertyChanging();
			entity.SeriesType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeterLocationLine")]
	public partial class MeterLocationLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeterLocationID;
		
		private int _LineID;
		
		private EntityRef<MeterLocation> _MeterLocation;
		
		private EntityRef<Line> _Line;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeterLocationIDChanging(int value);
    partial void OnMeterLocationIDChanged();
    partial void OnLineIDChanging(int value);
    partial void OnLineIDChanged();
    #endregion
		
		public MeterLocationLine()
		{
			this._MeterLocation = default(EntityRef<MeterLocation>);
			this._Line = default(EntityRef<Line>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterLocationID", DbType="Int NOT NULL")]
		public int MeterLocationID
		{
			get
			{
				return this._MeterLocationID;
			}
			set
			{
				if ((this._MeterLocationID != value))
				{
					if (this._MeterLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterLocationIDChanging(value);
					this.SendPropertyChanging();
					this._MeterLocationID = value;
					this.SendPropertyChanged("MeterLocationID");
					this.OnMeterLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="Int NOT NULL")]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					if (this._Line.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeterLocation_MeterLocationLine", Storage="_MeterLocation", ThisKey="MeterLocationID", OtherKey="ID", IsForeignKey=true)]
		public MeterLocation MeterLocation
		{
			get
			{
				return this._MeterLocation.Entity;
			}
			set
			{
				MeterLocation previousValue = this._MeterLocation.Entity;
				if (((previousValue != value) 
							|| (this._MeterLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeterLocation.Entity = null;
						previousValue.MeterLocationLines.Remove(this);
					}
					this._MeterLocation.Entity = value;
					if ((value != null))
					{
						value.MeterLocationLines.Add(this);
						this._MeterLocationID = value.ID;
					}
					else
					{
						this._MeterLocationID = default(int);
					}
					this.SendPropertyChanged("MeterLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_MeterLocationLine", Storage="_Line", ThisKey="LineID", OtherKey="ID", IsForeignKey=true)]
		public Line Line
		{
			get
			{
				return this._Line.Entity;
			}
			set
			{
				Line previousValue = this._Line.Entity;
				if (((previousValue != value) 
							|| (this._Line.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Line.Entity = null;
						previousValue.MeterLocationLines.Remove(this);
					}
					this._Line.Entity = value;
					if ((value != null))
					{
						value.MeterLocationLines.Add(this);
						this._LineID = value.ID;
					}
					else
					{
						this._LineID = default(int);
					}
					this.SendPropertyChanged("Line");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeterFileGroup")]
	public partial class MeterFileGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeterID;
		
		private int _FileGroupID;
		
		private EntityRef<Meter> _Meter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeterIDChanging(int value);
    partial void OnMeterIDChanged();
    partial void OnFileGroupIDChanging(int value);
    partial void OnFileGroupIDChanged();
    #endregion
		
		public MeterFileGroup()
		{
			this._Meter = default(EntityRef<Meter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterID", DbType="Int NOT NULL")]
		public int MeterID
		{
			get
			{
				return this._MeterID;
			}
			set
			{
				if ((this._MeterID != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIDChanging(value);
					this.SendPropertyChanging();
					this._MeterID = value;
					this.SendPropertyChanged("MeterID");
					this.OnMeterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileGroupID", DbType="Int NOT NULL")]
		public int FileGroupID
		{
			get
			{
				return this._FileGroupID;
			}
			set
			{
				if ((this._FileGroupID != value))
				{
					this.OnFileGroupIDChanging(value);
					this.SendPropertyChanging();
					this._FileGroupID = value;
					this.SendPropertyChanged("FileGroupID");
					this.OnFileGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_MeterFileGroup", Storage="_Meter", ThisKey="MeterID", OtherKey="ID", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.MeterFileGroups.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.MeterFileGroups.Add(this);
						this._MeterID = value.ID;
					}
					else
					{
						this._MeterID = default(int);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Series")]
	public partial class Series : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ChannelID;
		
		private int _SeriesTypeID;
		
		private string _SourceIndexes;
		
		private EntityRef<SeriesType> _SeriesType;
		
		private EntityRef<Channel> _Channel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChannelIDChanging(int value);
    partial void OnChannelIDChanged();
    partial void OnSeriesTypeIDChanging(int value);
    partial void OnSeriesTypeIDChanged();
    partial void OnSourceIndexesChanging(string value);
    partial void OnSourceIndexesChanged();
    #endregion
		
		public Series()
		{
			this._SeriesType = default(EntityRef<SeriesType>);
			this._Channel = default(EntityRef<Channel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelID", DbType="Int NOT NULL")]
		public int ChannelID
		{
			get
			{
				return this._ChannelID;
			}
			set
			{
				if ((this._ChannelID != value))
				{
					if (this._Channel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelIDChanging(value);
					this.SendPropertyChanging();
					this._ChannelID = value;
					this.SendPropertyChanged("ChannelID");
					this.OnChannelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesTypeID", DbType="Int NOT NULL")]
		public int SeriesTypeID
		{
			get
			{
				return this._SeriesTypeID;
			}
			set
			{
				if ((this._SeriesTypeID != value))
				{
					if (this._SeriesType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeriesTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SeriesTypeID = value;
					this.SendPropertyChanged("SeriesTypeID");
					this.OnSeriesTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceIndexes", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string SourceIndexes
		{
			get
			{
				return this._SourceIndexes;
			}
			set
			{
				if ((this._SourceIndexes != value))
				{
					this.OnSourceIndexesChanging(value);
					this.SendPropertyChanging();
					this._SourceIndexes = value;
					this.SendPropertyChanged("SourceIndexes");
					this.OnSourceIndexesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeriesType_Series", Storage="_SeriesType", ThisKey="SeriesTypeID", OtherKey="ID", IsForeignKey=true)]
		public SeriesType SeriesType
		{
			get
			{
				return this._SeriesType.Entity;
			}
			set
			{
				SeriesType previousValue = this._SeriesType.Entity;
				if (((previousValue != value) 
							|| (this._SeriesType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SeriesType.Entity = null;
						previousValue.Series.Remove(this);
					}
					this._SeriesType.Entity = value;
					if ((value != null))
					{
						value.Series.Add(this);
						this._SeriesTypeID = value.ID;
					}
					else
					{
						this._SeriesTypeID = default(int);
					}
					this.SendPropertyChanged("SeriesType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Channel_Series", Storage="_Channel", ThisKey="ChannelID", OtherKey="ID", IsForeignKey=true)]
		public Channel Channel
		{
			get
			{
				return this._Channel.Entity;
			}
			set
			{
				Channel previousValue = this._Channel.Entity;
				if (((previousValue != value) 
							|| (this._Channel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Channel.Entity = null;
						previousValue.Series.Remove(this);
					}
					this._Channel.Entity = value;
					if ((value != null))
					{
						value.Series.Add(this);
						this._ChannelID = value.ID;
					}
					else
					{
						this._ChannelID = default(int);
					}
					this.SendPropertyChanged("Channel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Channel")]
	public partial class Channel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeterID;
		
		private int _LineID;
		
		private int _MeasurementTypeID;
		
		private int _MeasurementCharacteristicID;
		
		private int _PhaseID;
		
		private string _Name;
		
		private double _SamplesPerHour;
		
		private System.Nullable<double> _PerUnitValue;
		
		private int _HarmonicGroup;
		
		private string _Description;
		
		private int _Enabled;
		
		private EntitySet<Series> _Series;
		
		private EntitySet<BreakerChannel> _BreakerChannels;
		
		private EntityRef<MeasurementType> _MeasurementType;
		
		private EntityRef<Phase> _Phase;
		
		private EntityRef<MeasurementCharacteristic> _MeasurementCharacteristic;
		
		private EntityRef<Line> _Line;
		
		private EntityRef<Meter> _Meter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeterIDChanging(int value);
    partial void OnMeterIDChanged();
    partial void OnLineIDChanging(int value);
    partial void OnLineIDChanged();
    partial void OnMeasurementTypeIDChanging(int value);
    partial void OnMeasurementTypeIDChanged();
    partial void OnMeasurementCharacteristicIDChanging(int value);
    partial void OnMeasurementCharacteristicIDChanged();
    partial void OnPhaseIDChanging(int value);
    partial void OnPhaseIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSamplesPerHourChanging(double value);
    partial void OnSamplesPerHourChanged();
    partial void OnPerUnitValueChanging(System.Nullable<double> value);
    partial void OnPerUnitValueChanged();
    partial void OnHarmonicGroupChanging(int value);
    partial void OnHarmonicGroupChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEnabledChanging(int value);
    partial void OnEnabledChanged();
    #endregion
		
		public Channel()
		{
			this._Series = new EntitySet<Series>(new Action<Series>(this.attach_Series), new Action<Series>(this.detach_Series));
			this._BreakerChannels = new EntitySet<BreakerChannel>(new Action<BreakerChannel>(this.attach_BreakerChannels), new Action<BreakerChannel>(this.detach_BreakerChannels));
			this._MeasurementType = default(EntityRef<MeasurementType>);
			this._Phase = default(EntityRef<Phase>);
			this._MeasurementCharacteristic = default(EntityRef<MeasurementCharacteristic>);
			this._Line = default(EntityRef<Line>);
			this._Meter = default(EntityRef<Meter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterID", DbType="Int NOT NULL")]
		public int MeterID
		{
			get
			{
				return this._MeterID;
			}
			set
			{
				if ((this._MeterID != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIDChanging(value);
					this.SendPropertyChanging();
					this._MeterID = value;
					this.SendPropertyChanged("MeterID");
					this.OnMeterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="Int NOT NULL")]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					if (this._Line.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementTypeID", DbType="Int NOT NULL")]
		public int MeasurementTypeID
		{
			get
			{
				return this._MeasurementTypeID;
			}
			set
			{
				if ((this._MeasurementTypeID != value))
				{
					if (this._MeasurementType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasurementTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MeasurementTypeID = value;
					this.SendPropertyChanged("MeasurementTypeID");
					this.OnMeasurementTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementCharacteristicID", DbType="Int NOT NULL")]
		public int MeasurementCharacteristicID
		{
			get
			{
				return this._MeasurementCharacteristicID;
			}
			set
			{
				if ((this._MeasurementCharacteristicID != value))
				{
					if (this._MeasurementCharacteristic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasurementCharacteristicIDChanging(value);
					this.SendPropertyChanging();
					this._MeasurementCharacteristicID = value;
					this.SendPropertyChanged("MeasurementCharacteristicID");
					this.OnMeasurementCharacteristicIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhaseID", DbType="Int NOT NULL")]
		public int PhaseID
		{
			get
			{
				return this._PhaseID;
			}
			set
			{
				if ((this._PhaseID != value))
				{
					if (this._Phase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhaseIDChanging(value);
					this.SendPropertyChanging();
					this._PhaseID = value;
					this.SendPropertyChanged("PhaseID");
					this.OnPhaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SamplesPerHour", DbType="Float NOT NULL")]
		public double SamplesPerHour
		{
			get
			{
				return this._SamplesPerHour;
			}
			set
			{
				if ((this._SamplesPerHour != value))
				{
					this.OnSamplesPerHourChanging(value);
					this.SendPropertyChanging();
					this._SamplesPerHour = value;
					this.SendPropertyChanged("SamplesPerHour");
					this.OnSamplesPerHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerUnitValue", DbType="Float")]
		public System.Nullable<double> PerUnitValue
		{
			get
			{
				return this._PerUnitValue;
			}
			set
			{
				if ((this._PerUnitValue != value))
				{
					this.OnPerUnitValueChanging(value);
					this.SendPropertyChanging();
					this._PerUnitValue = value;
					this.SendPropertyChanged("PerUnitValue");
					this.OnPerUnitValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HarmonicGroup", DbType="Int NOT NULL")]
		public int HarmonicGroup
		{
			get
			{
				return this._HarmonicGroup;
			}
			set
			{
				if ((this._HarmonicGroup != value))
				{
					this.OnHarmonicGroupChanging(value);
					this.SendPropertyChanging();
					this._HarmonicGroup = value;
					this.SendPropertyChanged("HarmonicGroup");
					this.OnHarmonicGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Int NOT NULL")]
		public int Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Channel_Series", Storage="_Series", ThisKey="ID", OtherKey="ChannelID")]
		public EntitySet<Series> Series
		{
			get
			{
				return this._Series;
			}
			set
			{
				this._Series.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Channel_BreakerChannel", Storage="_BreakerChannels", ThisKey="ID", OtherKey="ChannelID")]
		public EntitySet<BreakerChannel> BreakerChannels
		{
			get
			{
				return this._BreakerChannels;
			}
			set
			{
				this._BreakerChannels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeasurementType_Channel", Storage="_MeasurementType", ThisKey="MeasurementTypeID", OtherKey="ID", IsForeignKey=true)]
		public MeasurementType MeasurementType
		{
			get
			{
				return this._MeasurementType.Entity;
			}
			set
			{
				MeasurementType previousValue = this._MeasurementType.Entity;
				if (((previousValue != value) 
							|| (this._MeasurementType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasurementType.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._MeasurementType.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._MeasurementTypeID = value.ID;
					}
					else
					{
						this._MeasurementTypeID = default(int);
					}
					this.SendPropertyChanged("MeasurementType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phase_Channel", Storage="_Phase", ThisKey="PhaseID", OtherKey="ID", IsForeignKey=true)]
		public Phase Phase
		{
			get
			{
				return this._Phase.Entity;
			}
			set
			{
				Phase previousValue = this._Phase.Entity;
				if (((previousValue != value) 
							|| (this._Phase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phase.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._Phase.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._PhaseID = value.ID;
					}
					else
					{
						this._PhaseID = default(int);
					}
					this.SendPropertyChanged("Phase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeasurementCharacteristic_Channel", Storage="_MeasurementCharacteristic", ThisKey="MeasurementCharacteristicID", OtherKey="ID", IsForeignKey=true)]
		public MeasurementCharacteristic MeasurementCharacteristic
		{
			get
			{
				return this._MeasurementCharacteristic.Entity;
			}
			set
			{
				MeasurementCharacteristic previousValue = this._MeasurementCharacteristic.Entity;
				if (((previousValue != value) 
							|| (this._MeasurementCharacteristic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasurementCharacteristic.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._MeasurementCharacteristic.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._MeasurementCharacteristicID = value.ID;
					}
					else
					{
						this._MeasurementCharacteristicID = default(int);
					}
					this.SendPropertyChanged("MeasurementCharacteristic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_Channel", Storage="_Line", ThisKey="LineID", OtherKey="ID", IsForeignKey=true)]
		public Line Line
		{
			get
			{
				return this._Line.Entity;
			}
			set
			{
				Line previousValue = this._Line.Entity;
				if (((previousValue != value) 
							|| (this._Line.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Line.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._Line.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._LineID = value.ID;
					}
					else
					{
						this._LineID = default(int);
					}
					this.SendPropertyChanged("Line");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Channel", Storage="_Meter", ThisKey="MeterID", OtherKey="ID", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._MeterID = value.ID;
					}
					else
					{
						this._MeterID = default(int);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Series(Series entity)
		{
			this.SendPropertyChanging();
			entity.Channel = this;
		}
		
		private void detach_Series(Series entity)
		{
			this.SendPropertyChanging();
			entity.Channel = null;
		}
		
		private void attach_BreakerChannels(BreakerChannel entity)
		{
			this.SendPropertyChanging();
			entity.Channel = this;
		}
		
		private void detach_BreakerChannels(BreakerChannel entity)
		{
			this.SendPropertyChanging();
			entity.Channel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeasurementCharacteristic")]
	public partial class MeasurementCharacteristic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _Display;
		
		private EntitySet<Channel> _Channels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDisplayChanging(bool value);
    partial void OnDisplayChanged();
    #endregion
		
		public MeasurementCharacteristic()
		{
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Display", DbType="Bit NOT NULL")]
		public bool Display
		{
			get
			{
				return this._Display;
			}
			set
			{
				if ((this._Display != value))
				{
					this.OnDisplayChanging(value);
					this.SendPropertyChanging();
					this._Display = value;
					this.SendPropertyChanged("Display");
					this.OnDisplayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeasurementCharacteristic_Channel", Storage="_Channels", ThisKey="ID", OtherKey="MeasurementCharacteristicID")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.MeasurementCharacteristic = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.MeasurementCharacteristic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Line")]
	public partial class Line : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AssetKey;
		
		private double _VoltageKV;
		
		private double _ThermalRating;
		
		private double _Length;
		
		private string _Description;
		
		private EntitySet<MeterLocationLine> _MeterLocationLines;
		
		private EntitySet<Channel> _Channels;
		
		private EntitySet<MeterLine> _MeterLines;
		
		private EntitySet<Structure> _Structures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAssetKeyChanging(string value);
    partial void OnAssetKeyChanged();
    partial void OnVoltageKVChanging(double value);
    partial void OnVoltageKVChanged();
    partial void OnThermalRatingChanging(double value);
    partial void OnThermalRatingChanged();
    partial void OnLengthChanging(double value);
    partial void OnLengthChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Line()
		{
			this._MeterLocationLines = new EntitySet<MeterLocationLine>(new Action<MeterLocationLine>(this.attach_MeterLocationLines), new Action<MeterLocationLine>(this.detach_MeterLocationLines));
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			this._MeterLines = new EntitySet<MeterLine>(new Action<MeterLine>(this.attach_MeterLines), new Action<MeterLine>(this.detach_MeterLines));
			this._Structures = new EntitySet<Structure>(new Action<Structure>(this.attach_Structures), new Action<Structure>(this.detach_Structures));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetKey", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetKey
		{
			get
			{
				return this._AssetKey;
			}
			set
			{
				if ((this._AssetKey != value))
				{
					this.OnAssetKeyChanging(value);
					this.SendPropertyChanging();
					this._AssetKey = value;
					this.SendPropertyChanged("AssetKey");
					this.OnAssetKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoltageKV", DbType="Float NOT NULL")]
		public double VoltageKV
		{
			get
			{
				return this._VoltageKV;
			}
			set
			{
				if ((this._VoltageKV != value))
				{
					this.OnVoltageKVChanging(value);
					this.SendPropertyChanging();
					this._VoltageKV = value;
					this.SendPropertyChanged("VoltageKV");
					this.OnVoltageKVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThermalRating", DbType="Float NOT NULL")]
		public double ThermalRating
		{
			get
			{
				return this._ThermalRating;
			}
			set
			{
				if ((this._ThermalRating != value))
				{
					this.OnThermalRatingChanging(value);
					this.SendPropertyChanging();
					this._ThermalRating = value;
					this.SendPropertyChanged("ThermalRating");
					this.OnThermalRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Float NOT NULL")]
		public double Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_MeterLocationLine", Storage="_MeterLocationLines", ThisKey="ID", OtherKey="LineID")]
		public EntitySet<MeterLocationLine> MeterLocationLines
		{
			get
			{
				return this._MeterLocationLines;
			}
			set
			{
				this._MeterLocationLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_Channel", Storage="_Channels", ThisKey="ID", OtherKey="LineID")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_MeterLine", Storage="_MeterLines", ThisKey="ID", OtherKey="LineID")]
		public EntitySet<MeterLine> MeterLines
		{
			get
			{
				return this._MeterLines;
			}
			set
			{
				this._MeterLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_Structure", Storage="_Structures", ThisKey="ID", OtherKey="LineID")]
		public EntitySet<Structure> Structures
		{
			get
			{
				return this._Structures;
			}
			set
			{
				this._Structures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeterLocationLines(MeterLocationLine entity)
		{
			this.SendPropertyChanging();
			entity.Line = this;
		}
		
		private void detach_MeterLocationLines(MeterLocationLine entity)
		{
			this.SendPropertyChanging();
			entity.Line = null;
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Line = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Line = null;
		}
		
		private void attach_MeterLines(MeterLine entity)
		{
			this.SendPropertyChanging();
			entity.Line = this;
		}
		
		private void detach_MeterLines(MeterLine entity)
		{
			this.SendPropertyChanging();
			entity.Line = null;
		}
		
		private void attach_Structures(Structure entity)
		{
			this.SendPropertyChanging();
			entity.Line = this;
		}
		
		private void detach_Structures(Structure entity)
		{
			this.SendPropertyChanging();
			entity.Line = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeterLine")]
	public partial class MeterLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeterID;
		
		private int _LineID;
		
		private string _LineName;
		
		private EntityRef<Line> _Line;
		
		private EntityRef<Meter> _Meter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeterIDChanging(int value);
    partial void OnMeterIDChanged();
    partial void OnLineIDChanging(int value);
    partial void OnLineIDChanged();
    partial void OnLineNameChanging(string value);
    partial void OnLineNameChanged();
    #endregion
		
		public MeterLine()
		{
			this._Line = default(EntityRef<Line>);
			this._Meter = default(EntityRef<Meter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterID", DbType="Int NOT NULL")]
		public int MeterID
		{
			get
			{
				return this._MeterID;
			}
			set
			{
				if ((this._MeterID != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIDChanging(value);
					this.SendPropertyChanging();
					this._MeterID = value;
					this.SendPropertyChanged("MeterID");
					this.OnMeterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="Int NOT NULL")]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					if (this._Line.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string LineName
		{
			get
			{
				return this._LineName;
			}
			set
			{
				if ((this._LineName != value))
				{
					this.OnLineNameChanging(value);
					this.SendPropertyChanging();
					this._LineName = value;
					this.SendPropertyChanged("LineName");
					this.OnLineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_MeterLine", Storage="_Line", ThisKey="LineID", OtherKey="ID", IsForeignKey=true)]
		public Line Line
		{
			get
			{
				return this._Line.Entity;
			}
			set
			{
				Line previousValue = this._Line.Entity;
				if (((previousValue != value) 
							|| (this._Line.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Line.Entity = null;
						previousValue.MeterLines.Remove(this);
					}
					this._Line.Entity = value;
					if ((value != null))
					{
						value.MeterLines.Add(this);
						this._LineID = value.ID;
					}
					else
					{
						this._LineID = default(int);
					}
					this.SendPropertyChanged("Line");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_MeterLine", Storage="_Meter", ThisKey="MeterID", OtherKey="ID", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.MeterLines.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.MeterLines.Add(this);
						this._MeterID = value.ID;
					}
					else
					{
						this._MeterID = default(int);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Meter")]
	public partial class Meter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AssetKey;
		
		private int _MeterLocationID;
		
		private string _Name;
		
		private string _Alias;
		
		private string _ShortName;
		
		private string _Make;
		
		private string _Model;
		
		private string _TimeZone;
		
		private string _Description;
		
		private EntitySet<MeterFileGroup> _MeterFileGroups;
		
		private EntitySet<Channel> _Channels;
		
		private EntitySet<MeterLine> _MeterLines;
		
		private EntitySet<MeterMeterGroup> _MeterMeterGroups;
		
		private EntityRef<MeterLocation> _MeterLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAssetKeyChanging(string value);
    partial void OnAssetKeyChanged();
    partial void OnMeterLocationIDChanging(int value);
    partial void OnMeterLocationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnMakeChanging(string value);
    partial void OnMakeChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnTimeZoneChanging(string value);
    partial void OnTimeZoneChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Meter()
		{
			this._MeterFileGroups = new EntitySet<MeterFileGroup>(new Action<MeterFileGroup>(this.attach_MeterFileGroups), new Action<MeterFileGroup>(this.detach_MeterFileGroups));
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			this._MeterLines = new EntitySet<MeterLine>(new Action<MeterLine>(this.attach_MeterLines), new Action<MeterLine>(this.detach_MeterLines));
			this._MeterMeterGroups = new EntitySet<MeterMeterGroup>(new Action<MeterMeterGroup>(this.attach_MeterMeterGroups), new Action<MeterMeterGroup>(this.detach_MeterMeterGroups));
			this._MeterLocation = default(EntityRef<MeterLocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetKey", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetKey
		{
			get
			{
				return this._AssetKey;
			}
			set
			{
				if ((this._AssetKey != value))
				{
					this.OnAssetKeyChanging(value);
					this.SendPropertyChanging();
					this._AssetKey = value;
					this.SendPropertyChanged("AssetKey");
					this.OnAssetKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterLocationID", DbType="Int NOT NULL")]
		public int MeterLocationID
		{
			get
			{
				return this._MeterLocationID;
			}
			set
			{
				if ((this._MeterLocationID != value))
				{
					if (this._MeterLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterLocationIDChanging(value);
					this.SendPropertyChanging();
					this._MeterLocationID = value;
					this.SendPropertyChanged("MeterLocationID");
					this.OnMeterLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alias", DbType="VarChar(200)")]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(50)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Make", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Make
		{
			get
			{
				return this._Make;
			}
			set
			{
				if ((this._Make != value))
				{
					this.OnMakeChanging(value);
					this.SendPropertyChanging();
					this._Make = value;
					this.SendPropertyChanged("Make");
					this.OnMakeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZone", DbType="VarChar(200)")]
		public string TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_MeterFileGroup", Storage="_MeterFileGroups", ThisKey="ID", OtherKey="MeterID")]
		public EntitySet<MeterFileGroup> MeterFileGroups
		{
			get
			{
				return this._MeterFileGroups;
			}
			set
			{
				this._MeterFileGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Channel", Storage="_Channels", ThisKey="ID", OtherKey="MeterID")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_MeterLine", Storage="_MeterLines", ThisKey="ID", OtherKey="MeterID")]
		public EntitySet<MeterLine> MeterLines
		{
			get
			{
				return this._MeterLines;
			}
			set
			{
				this._MeterLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_MeterMeterGroup", Storage="_MeterMeterGroups", ThisKey="ID", OtherKey="MeterID")]
		public EntitySet<MeterMeterGroup> MeterMeterGroups
		{
			get
			{
				return this._MeterMeterGroups;
			}
			set
			{
				this._MeterMeterGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeterLocation_Meter", Storage="_MeterLocation", ThisKey="MeterLocationID", OtherKey="ID", IsForeignKey=true)]
		public MeterLocation MeterLocation
		{
			get
			{
				return this._MeterLocation.Entity;
			}
			set
			{
				MeterLocation previousValue = this._MeterLocation.Entity;
				if (((previousValue != value) 
							|| (this._MeterLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeterLocation.Entity = null;
						previousValue.Meters.Remove(this);
					}
					this._MeterLocation.Entity = value;
					if ((value != null))
					{
						value.Meters.Add(this);
						this._MeterLocationID = value.ID;
					}
					else
					{
						this._MeterLocationID = default(int);
					}
					this.SendPropertyChanged("MeterLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeterFileGroups(MeterFileGroup entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_MeterFileGroups(MeterFileGroup entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
		
		private void attach_MeterLines(MeterLine entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_MeterLines(MeterLine entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
		
		private void attach_MeterMeterGroups(MeterMeterGroup entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_MeterMeterGroups(MeterMeterGroup entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Structure")]
	public partial class Structure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AssetKey;
		
		private int _LineID;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private EntityRef<Line> _Line;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAssetKeyChanging(string value);
    partial void OnAssetKeyChanged();
    partial void OnLineIDChanging(int value);
    partial void OnLineIDChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    #endregion
		
		public Structure()
		{
			this._Line = default(EntityRef<Line>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetKey", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetKey
		{
			get
			{
				return this._AssetKey;
			}
			set
			{
				if ((this._AssetKey != value))
				{
					this.OnAssetKeyChanging(value);
					this.SendPropertyChanging();
					this._AssetKey = value;
					this.SendPropertyChanged("AssetKey");
					this.OnAssetKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="Int NOT NULL")]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					if (this._Line.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_Structure", Storage="_Line", ThisKey="LineID", OtherKey="ID", IsForeignKey=true)]
		public Line Line
		{
			get
			{
				return this._Line.Entity;
			}
			set
			{
				Line previousValue = this._Line.Entity;
				if (((previousValue != value) 
							|| (this._Line.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Line.Entity = null;
						previousValue.Structures.Remove(this);
					}
					this._Line.Entity = value;
					if ((value != null))
					{
						value.Structures.Add(this);
						this._LineID = value.ID;
					}
					else
					{
						this._LineID = default(int);
					}
					this.SendPropertyChanged("Line");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BreakerChannel")]
	public partial class BreakerChannel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ChannelID;
		
		private string _BreakerNumber;
		
		private EntityRef<Channel> _Channel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChannelIDChanging(int value);
    partial void OnChannelIDChanged();
    partial void OnBreakerNumberChanging(string value);
    partial void OnBreakerNumberChanged();
    #endregion
		
		public BreakerChannel()
		{
			this._Channel = default(EntityRef<Channel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelID", DbType="Int NOT NULL")]
		public int ChannelID
		{
			get
			{
				return this._ChannelID;
			}
			set
			{
				if ((this._ChannelID != value))
				{
					if (this._Channel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelIDChanging(value);
					this.SendPropertyChanging();
					this._ChannelID = value;
					this.SendPropertyChanged("ChannelID");
					this.OnChannelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreakerNumber", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		public string BreakerNumber
		{
			get
			{
				return this._BreakerNumber;
			}
			set
			{
				if ((this._BreakerNumber != value))
				{
					this.OnBreakerNumberChanging(value);
					this.SendPropertyChanging();
					this._BreakerNumber = value;
					this.SendPropertyChanged("BreakerNumber");
					this.OnBreakerNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Channel_BreakerChannel", Storage="_Channel", ThisKey="ChannelID", OtherKey="ID", IsForeignKey=true)]
		public Channel Channel
		{
			get
			{
				return this._Channel.Entity;
			}
			set
			{
				Channel previousValue = this._Channel.Entity;
				if (((previousValue != value) 
							|| (this._Channel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Channel.Entity = null;
						previousValue.BreakerChannels.Remove(this);
					}
					this._Channel.Entity = value;
					if ((value != null))
					{
						value.BreakerChannels.Add(this);
						this._ChannelID = value.ID;
					}
					else
					{
						this._ChannelID = default(int);
					}
					this.SendPropertyChanged("Channel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeterMeterGroup")]
	public partial class MeterMeterGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MeterID;
		
		private int _MeterGroupID;
		
		private EntityRef<Meter> _Meter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMeterIDChanging(int value);
    partial void OnMeterIDChanged();
    partial void OnMeterGroupIDChanging(int value);
    partial void OnMeterGroupIDChanged();
    #endregion
		
		public MeterMeterGroup()
		{
			this._Meter = default(EntityRef<Meter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterID", DbType="Int NOT NULL")]
		public int MeterID
		{
			get
			{
				return this._MeterID;
			}
			set
			{
				if ((this._MeterID != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIDChanging(value);
					this.SendPropertyChanging();
					this._MeterID = value;
					this.SendPropertyChanged("MeterID");
					this.OnMeterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterGroupID", DbType="Int NOT NULL")]
		public int MeterGroupID
		{
			get
			{
				return this._MeterGroupID;
			}
			set
			{
				if ((this._MeterGroupID != value))
				{
					this.OnMeterGroupIDChanging(value);
					this.SendPropertyChanging();
					this._MeterGroupID = value;
					this.SendPropertyChanged("MeterGroupID");
					this.OnMeterGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_MeterMeterGroup", Storage="_Meter", ThisKey="MeterID", OtherKey="ID", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.MeterMeterGroups.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.MeterMeterGroups.Add(this);
						this._MeterID = value.ID;
					}
					else
					{
						this._MeterID = default(int);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
