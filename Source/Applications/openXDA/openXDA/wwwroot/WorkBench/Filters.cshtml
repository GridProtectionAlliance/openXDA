@*******************************************************************************************************
//  Index.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Workbench/Layout.cshtml";
    ViewBag.Title = "Filters";
    DateTime toDateTime = DateTime.Now;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-left"},
        new[] { "TimeRange", "Time Range", "text-left"},
        new[] { null, "Meter Count", "text-center valign-middle"},
        new[] { null, "Line Count" , "text-center valign-middle"},
        new[] { null, "Event Types Count", "text-center valign-middle"},
        new[] { "IsDefault", "Default", "text-center" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();

}
@section StyleSheets{
<link rel="stylesheet" href="/Content/fullscreenselect/bootstrap-fullscreen-select.css" />

    <style>
        button {
            margin: 2px;
        }

        .row {
            margin: 5px 0 5px 0;
        }
    </style>
}
@helper BodyRows()
{
    <td width="20%" class="text-left valign-middle"data-bind="text: Name"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: parseTimeRange(TimeRange)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: commaCount(Meters)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: commaCount(Lines)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: commaCount(EventTypes)"></td>
    <td width="5%" class="text-center valign-middle" data-bind="text: IsDefault"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>

}

@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<WorkbenchFilter>("Name"))
    <div class="form-group">
        <label>Time Range:</label>
        <div class="col-md-12">
            <div class="col-md-3">
                <select id="preDefinedTimeRange" class="form-control">
                    <option value="0">Pick a period:</option>
                    <option value="1">1 day</option>
                    <option value="2">3 days</option>
                    <option value="3">1 week</option>
                </select>
            </div>
            <div class="col-md-1" style="text-align: center">
                <span>or</span>
            </div>
            <div class="col-md-3">
                @*<input id="fromDate" class="form-control">*@
                <div class="input-group date">
                    <input id="fromDate" type="text" class="form-control">
                    <div class="input-group-addon">
                        <span class="glyphicon glyphicon-th"></span>
                    </div>
                </div>
            </div>
            <div class="col-md-1" style="text-align: center">
                <span>to</span>
            </div>
            <div class="col-md-3">
                @*<input id="toDate" class="form-control">*@
                <div class="input-group date">
                    <input id="toDate" type="text" class="form-control">
                    <div class="input-group-addon">
                        <span class="glyphicon glyphicon-th"></span>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <div id="metersFrame" class="form-group">
        <label>Meters:</label>
        <select id="meters" class="form-control mobileSelect" multiple></select>
    </div>
    <div id="linesFrame" class="form-group">
        <label>Lines:</label>
        <select id="lines" class="form-control mobileSelect" multiple></select>
    </div>

    <div id="typesFrame" class="form-group">
        <label>Event Types:</label>
        <select id="types" class="form-control mobileSelect" multiple></select>
    </div>

    @Raw(dataContext.AddCheckBoxField<WorkbenchFilter>("IsDefault"))
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts {
    <script type="text/javascript" src="/Scripts/fullscreenselect/bootstrap-fullscreen-select.js"></script>

    <script>
        @Raw(dataContext.RenderViewModelConfiguration<WorkbenchFilter, DataHub>(ViewBag))
        $(function () {
            var mobileSelectOptions = {
                padding: {
                    top: '5%',
                    left: '15%',
                    right: '15%',
                    bottom: '5%'
                },
                title: "",
                onOpen: function () {
                    $('.mobileSelect-container :visible .mobileSelect-buttons').prepend("<a href='#' class='selectAllBtn'>Select All </a>");
                    $('.selectAllBtn').click(function () {
                        $('.mobileSelect-container :visible .list-container').children().addClass('selected');
                    });


                },
                onClose: function () {
                    $('.selectAllBtn').remove();
                }
            };

            $('#addNewEditDialog').on('shown.bs.modal', function (event) {
                $('#toDate').datepicker({
                    format: 'mm/dd/yyyy',
                    orientation: "bottom auto",
                    autoclose: true,
                    todayHighlight: true

                });

                $('#fromDate').datepicker({
                    format: 'mm/dd/yyyy',
                    orientation: "bottom auto",
                    autoclose: true,
                    todayHighlight: true
                });

                if (viewModel.recordMode() === RecordMode.AddNew) {
                    $('#toDate').datepicker('update', new Date('@toDateTime').formatDate(DateFormat));
                    dataHub.getOldestEventDateTime().done(function (data) {
                        $('#fromDate').datepicker('update', new Date(data).formatDate(DateFormat));
                    });
                }
                else {
                    $('#preDefinedTimeRange').val(viewModel.currentRecord().TimeRange().split(';')[0]);
                    $('#toDate').datepicker('update', new Date(viewModel.currentRecord().TimeRange().split(';')[2]).formatDate(DateFormat));
                    $('#fromDate').datepicker('update', new Date(viewModel.currentRecord().TimeRange().split(';')[1]).formatDate(DateFormat));
                    if ($('#preDefinedTimeRange').val() != 0) {
                        $('#fromDate').prop('disabled', true);
                        $('#toDate').prop('disabled', true);
                    }
                    else {
                        $('#fromDate').prop('disabled', false);
                        $('#toDate').prop('disabled', false);
                    }

                }

                $('#preDefinedTimeRange').on('change', function (event) {
                    if ($(this).val() != 0) {
                        $('#fromDate').prop('disabled', true);
                        $('#toDate').prop('disabled', true);
                    }
                    else {
                        $('#fromDate').prop('disabled', false);
                        $('#toDate').prop('disabled', false);
                    }
                });

                mobileSelectOptions.title = "<div class='right-inner-addon'><i class='glyphicon glyphicon-search'></i><input class='form-control' type='search' id='typefilter' placeholder='Search Event Types' /></div>";
                $('#types').mobileSelect(mobileSelectOptions);
                $('#typesFrame .btn-mobileSelect-gen').addClass('form-control');

                $('#typesFrame .btn-mobileSelect-gen').off('click');
                $('#typesFrame .btn-mobileSelect-gen').on('click', function (event) {
                    event.preventDefault();
                    $('#types').mobileSelect('show');
                });


                $('#typefilter').on('keyup', function () {
                    var string = $('#typefilter').val();
                    if (string === "") {
                        $('.mobileSelect-container :visible .list-container').children().show();

                    }
                    else {
                        $('.mobileSelect-container :visible .list-container').children().hide();
                        $.each($('.mobileSelect-container :visible .list-container').children(), function (i, item) {
                            if ($(item).text().toLowerCase().indexOf($('#typefilter').val()) >= 0)
                                $(item).show();
                        });
                    }
                });
                
                mobileSelectOptions.title = "<div class='right-inner-addon'><i class='glyphicon glyphicon-search'></i><input class='form-control' type='search' id='meterfilter' placeholder='Search Meters' /></div>";
                $('#meters').mobileSelect(mobileSelectOptions);
                $('#metersFrame .btn-mobileSelect-gen').addClass('form-control');

                $('#metersFrame .btn-mobileSelect-gen').off('click');
                $('#metersFrame .btn-mobileSelect-gen').on('click', function (event) {
                    event.preventDefault();
                    $('#meters').mobileSelect('show');
                });

                $('#meterfilter').on('keyup', function () {
                    var string = $('#meterfilter').val();
                    if (string === "") {
                        $('.mobileSelect-container :visible .list-container').children().show();

                    }
                    else {
                        $('.mobileSelect-container :visible .list-container').children().hide();
                        $.each($('.mobileSelect-container :visible .list-container').children(), function (i, item) {
                            if ($(item).text().toLowerCase().indexOf($('#meterfilter').val()) >= 0)
                                $(item).show();
                        });
                    }
                });
                
                mobileSelectOptions.title = "<div class='right-inner-addon'><i class='glyphicon glyphicon-search'></i><input class='form-control' type='search' id='linefilter' placeholder='Search Lines' /></div>";
                $('#lines').mobileSelect(mobileSelectOptions);
                $('#linesFrame .btn-mobileSelect-gen').addClass('form-control');

                $('#linesFrame .btn-mobileSelect-gen').off('click');
                $('#linesFrame .btn-mobileSelect-gen').on('click', function (event) {
                    event.preventDefault();
                    $('#lines').mobileSelect('show');
                });



                $('#linefilter').on('keyup', function () {
                    var string = $('#linefilter').val();
                    if (string === "") {
                        $('.mobileSelect-container :visible .list-container').children().show();

                    }
                    else {
                        $('.mobileSelect-container :visible .list-container').children().hide();
                        $.each($('.mobileSelect-container :visible .list-container').children(), function (i, item) {
                            if ($(item).text().toLowerCase().indexOf($('#linefilter').val()) >= 0)
                                $(item).show();
                        });
                    }
                });


                dataHub.getEventTypesForSelect().done(function (data) {
                    $.each(data, function (index, type) {
                        $('#types').append($(new Option(type.Name, type.ID)));
                    });
                    if (viewModel.recordMode() !== RecordMode.AddNew) {
                        $.each(viewModel.currentRecord().EventTypes().split(','), function (i, val) {
                            $('#types').find('option[value="' + val + '"]').attr('selected', true);
                        });
                    }
                    $('#types').mobileSelect('refresh');

                });

                dataHub.getMetersForSelect().done(function (data) {
                    $.each(data, function (index, type) {
                        $('#meters').append($(new Option(type.Name, type.ID)));
                    });
                    if (viewModel.recordMode() !== RecordMode.AddNew) {
                        $.each(viewModel.currentRecord().Meters().split(','), function (i, val) {
                            $('#meters').find('option[value="' + val + '"]').attr('selected', true);
                        });
                    }
                    
                    $('#meters').mobileSelect('refresh');

                    if ($('#meters').val()) $('#linesFrame button').prop("disabled", true);
                    else $('#linesFrame button').prop("disabled", false);
                });
                
                dataHub.getLinesForSelect().done(function (data) {
                    $.each(data, function (index, type) {
                        $('#lines').append($(new Option(type.AssetKey, type.ID)));
                    });
                    if (viewModel.recordMode() !== RecordMode.AddNew) {
                        $.each(viewModel.currentRecord().Lines().split(','), function (i, val) {
                            $('#lines').find('option[value="' + val + '"]').attr('selected', true);
                        });

                    }
                    
                    $('#lines').mobileSelect('refresh');

                    if ($('#lines').val()) $('#metersFrame button').prop("disabled", true);
                    else $('#metersFrame button').prop("disabled", false);
                });
                
                
                $(window).on('mobileSelectSave mobileSelectClear', function () {
                    if ($('#meters').val()) $('#linesFrame button').prop("disabled", true);
                    else $('#linesFrame button').prop("disabled", false);
                    if ($('#lines').val()) $('#metersFrame button').prop("disabled", true);
                    else $('#metersFrame button').prop("disabled", false);

                });
            });


        });
        

        $(viewModel).on('beforeSave', function (event, observableRecord) {
            observableRecord.TimeRange($('#preDefinedTimeRange').val() + ';' + $('#fromDate').val().toString() + ';' + $('#toDate').val().toString());
            observableRecord.Meters(($('#meters').val()?$('#meters').val(): '' ).toString());
            observableRecord.EventTypes(($('#types').val()?$('#types').val(): '' ).toString());
            observableRecord.Lines(($('#lines').val()?$('#lines').val(): '' ).toString());

        });
        
        function parseTimeRange(string) {
            if (string.split(';')[0] != 0)
                return $('#preDefinedTimeRange option[value=' + string.split(';')[0] + ']').text();
            else 
                return string.split(';')[1] + ' - ' + string.split(';')[2]
        }
        
        function commaCount(string) {
            return (string == '' ? 0 :string.split(',').length)
        }
    </script>
}
