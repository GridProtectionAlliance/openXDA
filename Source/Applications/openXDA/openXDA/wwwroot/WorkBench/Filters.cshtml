@*******************************************************************************************************
//  Index.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Workbench/Layout.cshtml";
    ViewBag.Title = "Filters";
    DateTime toDateTime = DateTime.Now;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-left"},
        new[] { "TimeRange", "Time Range", "text-left"},
        new[] { null, "Meter Count", "text-center valign-middle"},
        new[] { null, "Line Count" , "text-center valign-middle"},
        new[] { null, "Event Types Count", "text-center valign-middle"},
        new[] { "IsDefault", "Default", "text-center" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();

}
@section StyleSheets{
<link rel="stylesheet" href="/Content/fullscreenselect/bootstrap-fullscreen-select.css" />

    <style>
        button {
            margin: 2px;
        }

        .row {
            margin: 5px 0 5px 0;
        }
    </style>
}
@helper BodyRows()
{
    <td width="20%" class="text-left valign-middle"data-bind="text: Name"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: parseTimeRange(TimeRange)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: commaCount(Meters)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: commaCount(Lines)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: commaCount(EventTypes)"></td>
    <td width="5%" class="text-center valign-middle" data-bind="text: IsDefault"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>

}

@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<WorkbenchFilter>("Name"))
    <div class="form-group">
        <label>Time Range:</label>
        <input id="dateRange" type="text" class="form-control"/>
    </div>
    <div id="metersFrame" class="form-group">
        <label>Meters:</label>
        <select id="meters" class="form-control mobileSelect" multiple></select>
    </div>
    <div id="linesFrame" class="form-group">
        <label>Lines:</label>
        <select id="lines" class="form-control mobileSelect" multiple></select>
    </div>

    <div id="typesFrame" class="form-group">
        <label>Event Types:</label>
        <select id="types" class="form-control mobileSelect" multiple></select>
    </div>

    @Raw(dataContext.AddCheckBoxField<WorkbenchFilter>("IsDefault"))
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts {
    <script type="text/javascript" src="/Scripts/fullscreenselect/bootstrap-fullscreen-select.js"></script>

    <script>
        @Raw(dataContext.RenderViewModelConfiguration<WorkbenchFilter, DataHub>(ViewBag))
        $('#selectedText').hide()
        $('#globalFilter').hide()

        var mobileSelectOptions = {
            padding: {
                top: '5%',
                left: '15%',
                right: '15%',
                bottom: '5%'
            },
            title: "",
            onOpen: function () {
                $('.mobileSelect-container :visible .mobileSelect-buttons').prepend("<a href='#' class='selectAllBtn'>Select All </a>");
                $('.selectAllBtn').click(function () {
                    $('.mobileSelect-container :visible .list-container').children().addClass('selected');
                });


            },
            onClose: function () {
                $('.selectAllBtn').remove();
            },
            filterable: true
        };
        var dateRangeOptions = {
            "timePicker": true,
            "timePicker24Hour": true,
            "timePickerSeconds": true,
            "locale": {
                "format": 'MM/DD/YYYY HH:mm:ss '
            },
            "autoApply": true,
            "ranges": {
                '1 Day': [moment().utc().startOf('day'), moment().utc().endOf('day')],
                'Last 3 Days': [moment().utc().startOf('day').subtract(2, 'days'), moment().utc().endOf('day')],
                'Last 7 Days': [moment().utc().startOf('day').subtract(6, 'days'), moment().utc().endOf('day')],
                'Last 30 Days': [moment().utc().startOf('day').subtract(29, 'days'), moment().utc().endOf('day')],
                'Last 90 Days': [moment().utc().startOf('day').subtract(89, 'days'), moment().utc().endOf('day')],
                'Last 365 Days': [moment().utc().startOf('day').subtract(364, 'days'), moment().utc().endOf('day')]
            },
            "startDate": moment().utc().subtract(29, 'days').startOf('day'),
            "endDate": moment.utc().endOf('day')
        };

        $(function () {



        });
        
        $('#addNewEditDialog').on('shown.bs.modal', function (event) {



            if (viewModel.recordMode() === RecordMode.AddNew) {
                dataHub.getOldestEventDateTime().done(function (data) {
                    dateRangeOptions.startDate = data.formatDate(DateTimeFormat);
                    $('#dateRange').daterangepicker(dateRangeOptions);
                });
            }
            else {
                if (viewModel.currentRecord().TimeRange().split(';')[0] == "-1") {
                    dateRangeOptions.startDate = moment(viewModel.currentRecord().TimeRange().split(';')[1] + (viewModel.currentRecord().TimeRange().split(';')[1].indexOf('Z') < 0 ? ' Z' : '')).utc();
                    dateRangeOptions.endDate = moment(viewModel.currentRecord().TimeRange().split(';')[2] + (viewModel.currentRecord().TimeRange().split(';')[1].indexOf('Z') < 0 ? ' Z' : '')).utc();
                }
                else {
                    var keys = Object.keys(dateRangeOptions.ranges);
                    dateRangeOptions.startDate = moment(dateRangeOptions.ranges[keys[viewModel.currentRecord().TimeRange().split(';')[0]]][0]._d).utc();
                    dateRangeOptions.endDate = moment(dateRangeOptions.ranges[keys[viewModel.currentRecord().TimeRange().split(';')[0]]][1]._d).utc();
                    dateRangeOptions.chosenLabel = keys[viewModel.currentRecord().TimeRange().split(';')[0]];
                }
                $('#dateRange').daterangepicker(dateRangeOptions);
            }

            $('#types').mobileSelect(mobileSelectOptions);
            $('#typesFrame .btn-mobileSelect-gen').addClass('form-control');

            $('#typesFrame .btn-mobileSelect-gen').off('click');
            $('#typesFrame .btn-mobileSelect-gen').on('click', function (event) {
                event.preventDefault();
                $('#types').mobileSelect('show');
            });



            $('#meters').mobileSelect(mobileSelectOptions);
            $('#metersFrame .btn-mobileSelect-gen').addClass('form-control');

            $('#metersFrame .btn-mobileSelect-gen').off('click');
            $('#metersFrame .btn-mobileSelect-gen').on('click', function (event) {
                event.preventDefault();
                $('#meters').mobileSelect('show');
            });


            $('#lines').mobileSelect(mobileSelectOptions);
            $('#linesFrame .btn-mobileSelect-gen').addClass('form-control');

            $('#linesFrame .btn-mobileSelect-gen').off('click');
            $('#linesFrame .btn-mobileSelect-gen').on('click', function (event) {
                event.preventDefault();
                $('#lines').mobileSelect('show');
            });


            dataHub.getEventTypesForSelect().done(function (data) {
                $.each(data, function (index, type) {
                    $('#types').append($(new Option(type.Name, type.ID)));
                });
                if (viewModel.recordMode() !== RecordMode.AddNew) {
                    $.each(viewModel.currentRecord().EventTypes().split(','), function (i, val) {
                        $('#types').find('option[value="' + val + '"]').attr('selected', true);
                    });
                }
                $('#types').mobileSelect('refresh');

            });

            dataHub.getMetersForSelect().done(function (data) {
                $.each(data, function (index, type) {
                    $('#meters').append($(new Option(type.Name, type.ID)));
                });
                if (viewModel.recordMode() !== RecordMode.AddNew) {
                    $.each(viewModel.currentRecord().Meters().split(','), function (i, val) {
                        $('#meters').find('option[value="' + val + '"]').attr('selected', true);
                    });
                }

                $('#meters').mobileSelect('refresh');

                if ($('#meters').val().length > 0) $('#linesFrame button').prop("disabled", true);
                else $('#linesFrame button').prop("disabled", false);
            });

            dataHub.getLinesForSelect().done(function (data) {
                $.each(data, function (index, type) {
                    $('#lines').append($(new Option(type.AssetKey, type.ID)));
                });
                if (viewModel.recordMode() !== RecordMode.AddNew) {
                    $.each(viewModel.currentRecord().Lines().split(','), function (i, val) {
                        $('#lines').find('option[value="' + val + '"]').attr('selected', true);
                    });

                }

                $('#lines').mobileSelect('refresh');

                if ($('#lines').val().length > 0) $('#metersFrame button').prop("disabled", true);
                else $('#metersFrame button').prop("disabled", false);
            });


            $(window).on('mobileSelectSave mobileSelectClear', function () {
                if ($('#meters').val().length > 0) $('#linesFrame button').prop("disabled", true);
                else $('#linesFrame button').prop("disabled", false);
                if ($('#lines').val().length > 0) $('#metersFrame button').prop("disabled", true);
                else $('#metersFrame button').prop("disabled", false);

            });
        });

        $('#addNewEditDialog').on('hidden.bs.modal', function (event) {
            if ($('#meters').mobileSelect('exists'))
                $('#meters').mobileSelect('destroy');
            if ($('#types').mobileSelect('exists'))
                $('#types').mobileSelect('destroy')
            if ($('#lines').mobileSelect('exists'))
                $('#lines').mobileSelect('destroy')
        });

        $(viewModel).on('beforeSave', function (event, observableRecord) {
            var keys = Object.keys(dateRangeOptions.ranges);

            observableRecord.TimeRange(keys.indexOf($('#dateRange').data('daterangepicker').chosenLabel) + ';' + $('#dateRange').data('daterangepicker').startDate._d.toISOString() + ';' + $('#dateRange').data('daterangepicker').endDate._d.toISOString());
            observableRecord.Meters(($('#meters').val()?$('#meters').val(): '' ).toString());
            observableRecord.EventTypes(($('#types').val()?$('#types').val(): '' ).toString());
            observableRecord.Lines(($('#lines').val()?$('#lines').val(): '' ).toString());

        });
        
        function parseTimeRange(string) {
            var keys = Object.keys(dateRangeOptions.ranges);
            if (string.split(';')[0] != '-1')
                return dateRangeOptions.ranges[keys[string.split(';')[0]]][0]._d.formatDate(DateTimeFormat) + ' - ' + dateRangeOptions.ranges[keys[string.split(';')[0]]][1]._d.formatDate(DateTimeFormat);
            else 
                return new Date(string.split(';')[1]).formatDate(DateTimeFormat) + ' - ' + new Date(string.split(';')[2]).formatDate(DateTimeFormat)
        }
        
        function commaCount(string) {
            return (string == '' ? 0 :string.split(',').length)
        }
    </script>
}
