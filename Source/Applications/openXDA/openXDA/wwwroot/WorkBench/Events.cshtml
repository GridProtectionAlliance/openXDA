@*******************************************************************************************************
//  Index.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using System.Security.AccessControl
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Workbench/Layout.cshtml";
    ViewBag.Title = "Events";

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("Date"))
    {
        ViewBag.Date = parameters["Date"].ToString();
    }
    if (parameters.ContainsKey("EventID"))
    {
        ViewBag.EventID = parameters["EventID"];
    }
    if (parameters.ContainsKey("time"))
    {
        ViewBag.time = parameters["time"];
    }


    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "ID", "Event ID", "text-left"},
        new[] { "MeterName", "Meter Name", "text-left"},
        new[] { "LineName", "Line Name", "text-left"},
        new[] { "EventTypeName", "Event Type" , "text-center"},
        new[] { "StartTime", "Start Time", "text-center"},
        new[] { "EndTime", "End Time", "text-center" },
        new[] { null, "Edited", "text-center"}

    };
    ViewBag.ShowSearchFilter = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.defaultFilter = dataContext.Connection.ExecuteScalar<int>("SELECT ID FROM WorkbenchFilter WHERE UserID = {0} AND IsDefault = 1", DataHub.GetCurrentUserID());
    ViewBag.HideAddNewButton = true;
    ViewBag.ParentKeys = "globalFilter";
}

@section StyleSheets{
<style>
</style>
}

@helper BodyRows()
{
    <td width="5%" class="text-left valign-middle"><a target="_blank" data-bind="attr: {href: '/OpenSEE.cshtml?eventid=' + ID + '&faultcurves=1' }, text: ID"></a>@*<button  type="button" class="btn btn-link" data-bind="click: goToOpenSEE.bind($data), text: ID"></button>*@</td>
    <td width="20%" class="text-left valign-middle" data-bind="text: MeterName"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: LineName.truncate(25), attr: {title: LineName}"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: EventTypeName"></td>
    <td width="20%" class="text-center valign-middle"><a target="_blank" data-bind="attr: {href: 'EventsForDate.cshtml?Date=' + StartTime + '&EventID=' + ID + '&time=1'}, text: StartTime.formatDate(DateTimeFormat)"></a></td>
    <td width="20%" class="text-center valign-middle"><a target="_blank" data-bind="attr: {href: 'EventsForDate.cshtml?Date=' + EndTime + '&EventID=' + ID  + '&time=2'}, text: EndTime.formatDate(DateTimeFormat)"></a></td>
    <td width="5%" class="text-left valign-middle" style="text-align: center"><span data-bind="visible: UpdatedBy" class="glyphicon glyphicon-check"></span></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        @*<button type="button" class="btn btn-xs" data-toggle="modal" data-target="#reprocessModal" data-bind="enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-repeat"></span></button>*@
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>

}

@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<EventView>("ID", customDataBinding: "enable: false"))
    @Raw(dataContext.AddInputField<EventView>("MeterName", "string", customDataBinding: "enable: false"))
    @Raw(dataContext.AddInputField<EventView>("LineName", "string", customDataBinding: "enable: false"))
    @Raw(dataContext.AddSelectField<EventView, EventType>("EventTypeID", "ID", "Name"))
    @Raw(dataContext.AddInputField<EventView>("StartTime", "string", customDataBinding: "type: text, enable: true"))
    @Raw(dataContext.AddInputField<EventView>("EndTime", "string", customDataBinding: "enable: false"))

    <div class="checkbox">
        <label><input id="allrecords" type="checkbox" class="" checked="checked" />Update timestamps for all events with associated record?</label>
    </div>
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")

<div id="reprocessModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg modal-wide">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Reprocess Event <span id="eventID"></span></h4>
            </div>
            <div class="modal-body">
                <label for="meterName">Meter</label>
                <span id="meterName" type="text" class="form-control"></span>
                <label for="lineName">Line</label>
                <span id="lineName" type="text" class="form-control"></span>
                <label for="eventType">Event Type</label>
                <span id="eventType" type="text" class="form-control"></span>
                <label for="startTime">Start Time</label>
                <span id="startTime" type="text" class="form-control"></span>
                <div class="col-md-6">
                    <label>Channels</label>
                    <div class="well form-control"></div>
                </div>
                <div class="col-md-6">
                    <label>Spares</label>
                    <div class="well form-control"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Reprocess</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script language="javascript" type="text/javascript" src="/Scripts/spin.js"></script>
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<EventView, DataHub>(ViewBag, "ID", null, ViewBag.defaultFilter))
        
        $('#addNewEditDialog').on('shown.bs.modal', function () {
        });
        
        $('#reprocessModal').on('shown.bs.modal', function (event) {
            $('#eventID').text($(event.relatedTarget).parent().parent().children().first().children().text());
            $('#meterName').text($(event.relatedTarget).parent().parent().children().first().next().text());
            $('#lineName').text($(event.relatedTarget).parent().parent().children().first().next().next().text());
            $('#eventType').text($(event.relatedTarget).parent().parent().children().first().next().next().next().text());
            $('#startTime').text($(event.relatedTarget).parent().parent().children().first().next().next().next().next().children().text());
        });

        $('#reprocessModal').on('hideen.bs.modal', function (event) {
            $('#eventID').text('');
            $('#meterName').text('');
            $('#lineName').text('');
            $('#eventType').text('');
            $('#startTime').text('');
        });

        
        $('#globalFilter').change(function (event) {
            viewModel.setQueryRecordCount(function (filterText) {
                return dataHub.queryEventCount($('#globalFilter').val(), filterText);
            });

            viewModel.setQueryRecords(function (sortField, ascending, page, pageSize, filterText) {
                return dataHub.queryEvents($('#globalFilter').val(), sortField, ascending, page, pageSize, filterText);
            });
            
            viewModel.queryPageRecords();
        });
        
        $(function () {
            viewModel.setUpdateRecord(function (record) {
                var opts = {
                    lines: 9 // The number of lines to draw
                    , length: 24 // The length of each line
                    , width: 18 // The line thickness
                    , radius: 42 // The radius of the inner circle
                    , scale: 1 // Scales overall size of the spinner
                    , corners: 1 // Corner roundness (0..1)
                    , color: '#000' // #rgb or #rrggbb or array of colors
                    , opacity: 0.05 // Opacity of the lines
                    , rotate: 9 // The rotation offset
                    , direction: 1 // 1: clockwise, -1: counterclockwise
                    , speed: 1 // Rounds per second
                    , trail: 60 // Afterglow percentage
                    , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
                    , zIndex: 2e9 // The z-index (defaults to 2000000000)
                    , className: 'spinner' // The CSS class to assign to the spinner
                    , top: '50%' // Top position relative to parent
                    , left: '50%' // Left position relative to parent
                    , shadow: false // Whether to render a shadow
                    , hwaccel: false // Whether to use hardware acceleration
                    , position: 'absolute' // Element positioning
                };
                var target = document.getElementById('contentWell');
                var spinner = new Spinner(opts).spin(target);

                return dataHub.updateEvent(record, $('#allrecords').prop('checked')).done(
                    function (data) {
                        spinner.stop();
                    });
            });

            if ('@ViewBag.EventID'.length > 0) {
                $('#searchFilter').val('@ViewBag.EventID');
                viewModel.filterText = '@ViewBag.EventID';
                viewModel.queryPageRecords();
            }

            $("#exportCSVLink").click(function () {
                var globalFilter = encodeURIComponent($("#globalFilter").val());
                var href = this.href.replace("globalFilter", globalFilter);
                $("#exportCSVLink").attr("href", href);
            });
        });
        
        function getUpdatedBy(data) {

        }
    </script>
}
