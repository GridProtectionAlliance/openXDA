@*//******************************************************************************************************
//  AuditLog.cshtml - Gbtc
//
//  Copyright © 2017, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2017 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using System.Security.AccessControl
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Workbench/Layout.cshtml";
    ViewBag.Title = "Audit Logs";

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("Date"))
    {
        ViewBag.Date = parameters["Date"].ToString();
    }
    if (parameters.ContainsKey("EventID"))
    {
        ViewBag.EventID = parameters["EventID"];
    }
    if (parameters.ContainsKey("time"))
    {
        ViewBag.time = parameters["time"];
    }


    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { null, "<input id='selectAll' type='checkbox' onclick='selectAll(this)'/> Select All", "text-left checkboxColumn"},
        new[] { "TableName", "Table", "text-left tableNameColumn"},
        new[] { "PrimaryKeyColumn", "Table Key", "text-left primaryKeyColumn"},
        new[] { "PrimaryKeyValue", "Key Value", "text-left primaryKeyValueColumn"},
        new[] { "ColumnName", "Column" , "text-left columnNameColumn"},
        new[] { "OriginalValue", "Original Value", "text-center orignialValueColumn"},
        new[] { "NewValue", "New Value", "text-center newValueColumn" },
        new[] { "UpdatedBy", "Updated By", "text-left updatedByColumn" },
        new[] { "UpdatedOn", "Updated On", "text-center updatedOnColumn" }

    };
    ViewBag.ShowSearchFilter = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.defaultFilter = dataContext.Connection.ExecuteScalar<int>("SELECT ID FROM WorkbenchFilter WHERE UserID = {0} AND IsDefault = 1", DataHub.GetCurrentUserID());
    ViewBag.HideAddNewButton = true;

}

@section StyleSheets{
<style>
        #recordsTable {
            table-layout: fixed;
            min-width: 1200px;
        }
        .checkboxColumn{ width: 100px;}
        .tableNameColumn { width: 130px; }
        .primaryKeyColumn { width: 100px; }
        .primaryKeyValueColumn { width: 120px; }
        .columnNameColumn { width: 150px; }
        .orignialValueColumn { width: auto; }
        .newValueColumn { width: auto; }
        .updatedByColumn { width: 150px; }
        .updatedOnColumn { width: 200px; }
        .buttonsColumn { width: 1px; }
        th{width: 100px}
</style>
}

@helper BodyRows()
{
    <td class="text-left valign-middle truncate checkboxColumn"><input type="checkbox" data-bind="attr: {id: 'checkbox' + ID}" onclick="checkButton(this)" /></td>
    <td class="text-left valign-middle truncate tableNameColumn" data-bind="text: TableName"></td>
    <td class="text-left valign-middle truncate primaryKeyColumn" data-bind="text: PrimaryKeyColumn"></td>
    <td class="text-left valign-middle truncate primaryKeyValueColumn " data-bind="text: PrimaryKeyValue"></td>
    <td class="text-left valign-middle truncate columnNameColumn" data-bind="text: ColumnName"></td>
    <td class="text-center valign-middle truncate orignialValueColumn" data-bind="text: OriginalValue"></td>
    <td class="text-center valign-middle truncate newValueColumn" data-bind="text: NewValue"></td>
    <td class="text-left valign-middle truncate updatedByColumn" data-bind="text: UpdatedBy.trim()"></td>
    <td class="text-center valign-middle truncate updatedOnColumn" data-bind="text: UpdatedOn.formatDate(DateTimeFormat)"></td>
    <td class="text-center valign-middle buttonsColumn" nowrap>
        <button type="button" class="btn btn-xs" data-toggle="modal" data-bind="enable: $parent.dataHubIsConnected(), click: reprocess.bind($data)" title="Restore data"><span class="glyphicon glyphicon-repeat"></span></button>
            @*<button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
            <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>*@
    </td>

}

@helper AddNewEditDialog(DataContext dataContext)
{

}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")


@section Scripts {
    <script>
        $('#selectedText').hide()
        $('#globalFilter').hide()

        @Raw(dataContext.RenderViewModelConfiguration<AuditLog, DataHub>(ViewBag))        

        $('#pageControlsRow').prepend("<button id='reprocessSelectedButton' class='btn btn-sm btn-primary' onclick='reprocessForRange()' disabled='disabled'>Reprocess Selected</button>");

        function reprocess(record) {
            dataHub.restoreDataAuditLog(record).done(function () {
                viewModel.queryPageRecords();
            });
        }

        function checkButton(control) {
            if ($.grep($('input[type=checkbox]'), function (a, i) { return $(a).prop('checked') }).length > 0)
                $('#reprocessSelectedButton').prop('disabled', false);
            else
                $('#reprocessSelectedButton').prop('disabled', true);
        }

        function selectAll(control) {
            $('td input').filter('[id*="checkbox"]').prop('checked', $('#selectAll').prop('checked'));
            if ($.grep($('input[type=checkbox]'), function (a, i) { return $(a).prop('checked') }).length > 0)
                $('#reprocessSelectedButton').prop('disabled', false);
            else
                $('#reprocessSelectedButton').prop('disabled', true);


        }

        function reprocessForRange() {
            var IDs = $('td input').filter('[id*="checkbox"]').filter(':checked').toArray().map(function (a) { return parseInt(a.id.split('checkbox')[1]) });
            dataHub.restoreMultipleDataAuditLog(IDs).done(function () {
                viewModel.queryPageRecords();
            });
        }
    </script>
}
