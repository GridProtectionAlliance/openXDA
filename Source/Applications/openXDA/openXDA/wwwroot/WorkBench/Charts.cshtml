@*******************************************************************************************************
//  Index.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Threading
@using GSF.Web
@using GSF.Web.Model
@using openXDA.Model
@using RazorEngine.Templating
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@{
    Layout = "Workbench/Layout.cshtml";
    ViewBag.Title = "Charts";
}
<div id="chart" style="width: 100%"></div>
@section Scripts {
<script type="text/javascript" src="/Scripts/D3/d3.js" charset="utf-8"></script>
<script type="text/javascript" src="/Scripts/D3/d3-color.v1.min.js"></script>
<script type="text/javascript" src="/Scripts/D3/d3-interpolate.v1.min.js"></script>
<script type="text/javascript" src="/Scripts/D3/d3-scale.v1.min.js"></script>
<script type="text/javascript" src="/Scripts/D3/d3-shape.v1.min.js"></script>
<script src="/Scripts/plotly-latest.min.js"></script>

    <script>
        var chartData = {
            Events: null,
            Disturbances: null,
            Faults: null,
            Breakers: null,
            SARFI: null
        }

        $(function () {
            $('#pageHeader').append('<select id="graphSelection" class="form-control"></select>');
            $('#graphSelection').append(new Option("Event Type by Date", "Events"));
            $('#graphSelection').append(new Option("Voltage Disturbances by Date", "Disturbances"));
            $('#graphSelection').append(new Option("Faults by Date", "Faults"));
            $('#graphSelection').append(new Option("Breaker Events by Date", "Breakers"));
            $('#graphSelection').append(new Option("Disturbance Magnitude Duration Plot", "SARFI"));
            
            $(window).one('globalFilterDone', function () {
                $('#chart').height($(window).innerHeight() - $('#menuBar').outerHeight() - $('#pageHeader').outerHeight() - 50);
                makeGraph($('#graphSelection').val());
            });
            
            $('#globalFilter').on('change', function (event) {
                chartData = {
                    Events: null,
                    Disturbances: null,
                    Fault: null,
                    Breakers: null,
                    SARFI: null
                }

                Plotly.purge('chart');
                makeGraph($('#graphSelection').val());
            });
            
            $('#graphSelection').on('change', function (event) {
                Plotly.purge('chart');
                makeGraph($('#graphSelection').val());
            });

            
            $(window).on('resize', function () {
                $('#chart').height($(window).innerHeight() - $('#menuBar').outerHeight() - $('#pageHeader').outerHeight() - 50);
                Plotly.purge('chart');
                makeGraph($('#graphSelection').val());
            });
        });
        
        function makeGraph(id) {
            if (id == "SARFI")
                makeSARFI();
            else
                makeChart(id);
        }
                
        function makeSARFI() {

            if (chartData.SARFI == null) {
                dataHub.getVoltageMagnitudeData($('#globalFilter').val()).done(function (data) {
                    chartData.SARFI = data;
                    initializeChart(data);
                });
            }
            else
                initializeChart(chartData.SARFI);

            function initializeChart(data) {
                var companyTrace = [{
                    x: [],
                    y: [],
                    name: 'Disturbances',
                    text: [],
                    type: 'scatter',
                    mode: 'markers'
                }];
                $.each(data, function (i, d) {
                    companyTrace[0].x.push(d.DurationSeconds);
                    companyTrace[0].y.push(d.PerUnitMagnitude * 100);
                    companyTrace[0].text.push(d.EventID)
                });

                var layout = {
                    title: 'Disturbance Magnitude Duration Scatter Plot',
                    hovermode: 'closest',
                    //showLink: false,
                    //displayLogo: false,
                    //autosize: false,
                    //width: $('#viewWindow').innerWidth(),
                    xaxis: { title: 'Duration (Seconds)', type: 'log', autorange: true, autotick: false, tickvals: [0, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000]/*, range: [-3, 4] */ },
                    yaxis: { side: 'left', overlaying: 'y', anchor: 'x', title: 'Voltage Magnitude(% of Nominal)'/*, range: [0, 150]*/ },
                    //margin: {
                    //    l: 15,
                    //    r: 15,
                    //    t: 50,
                    //    b: 50,
                    //    pad: 15
                    //},
                    //height: $('#viewWindow').height() * 0.85,
                };

                dataHub.getCurves().done(function (curves) {

                    var curveIds = [];
                    $.each(curves, function (index, points) {
                        if (curveIds.indexOf(points.ID) < 0)
                            curveIds.push(points.ID);
                    });
                    var lines = []
                    $.each(curveIds, function (index, id) {
                        companyTrace.push({
                            x: $.map(curves, function (curve) { if (curve.ID == id) return parseFloat(curve.DurationSeconds) }),
                            y: $.map(curves, function (curve) { if (curve.ID == id) return parseFloat(curve.PerUnitMagnitude) * 100 }),
                            name: $.map(curves, function (curve) { if (curve.ID == id) return curve.Name })[0], type: 'scatter', mode: 'lines',
                            visible: ($.map(curves, function (curve) { if (curve.ID == id) return curve.Visible })[0] ? true : 'legendonly')
                        });
                    });

                    var plot = Plotly.newPlot('chart', companyTrace, layout);

                    $('#chart').off('plotly_click');
                    $('#chart').on('plotly_click', function (event, data) {
                        window.open("../openSEE.cshtml?eventid=" + data.points[0].fullData.text[data.points[0].pointNumber] + "&faultcurves=1");
                    });
                });


            }
        }
        
        function makeChart(val) {
            if (chartData[val] == null) {
               dataHub.getDataForPeriod($('#globalFilter').val(), val).done(function (data) {
                    chartData[val] = data;
                    initializeChart(data)
                });
            }
            else 
                initializeChart(chartData[val])
            
            
            function initializeChart(data) {
                var fields = [];
                var startDate = new Date(data.StartDate);
                var endDate = new Date(data.EndDate);

                $.each(data.Types, function (i, types) {
                    fields.push({
                        x: types.Data.map(function (a) {
                            var now = new Date(a.Item1);
                            var utc = new Date(now.getTime() + now.getTimezoneOffset() * 60000);
                            return utc
                        }),
                        y: types.Data.map(function (a) { return a.Item2 }),
                        name: types.Name,
                        marker: {
                            color: types.Color,
                        },
                        type: 'bar'
                    });
                });

                var layout = {
                    title: val.slice(0, val.length - 1) + " Type by Date",
                    xaxis: {
                        title: 'Date',
                        type: 'date',
                        tickFormat: Plotly.d3.time.format.utc("%m-%d"),
                        range: [new Date(startDate.getTime() + startDate.getTimezoneOffset() * 60000).getTime(), new Date(endDate.getTime() + endDate.getTimezoneOffset() * 60000).getTime()]
                    },
                    yaxis: {
                        title: val.slice(0, val.length - 1) + ' Counts',
                        range: [0]
                    },
                    barmode: 'stack'
                };

                Plotly.newPlot('chart', fields.reverse(), layout);

                $('#chart').off('plotly_click');
                $('#chart').on('plotly_click', function (event, data) {
                    window.open(val + "ForDay.cshtml?Date=" + data.points[0].x + "&Types=" + data.points.map(function (d) { return d.data.name }).join(';') + "&Filter=" + $('#globalFilter').val());
                });
            }
        }
    
    </script>
}
