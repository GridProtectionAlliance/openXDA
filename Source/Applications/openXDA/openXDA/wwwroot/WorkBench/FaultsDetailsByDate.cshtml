@*******************************************************************************************************
//  Index.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Collections.Specialized
@using System.Net.Http
@using GSF.Data.Model
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Workbench/Layout.cshtml";
    ViewBag.Title = "Faults Details By Date";

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    string meterIds = "";
    string date = "";
    if (parameters.ContainsKey("MeterIDs"))
    {
        meterIds = parameters["MeterIDs"];
    }
    if(parameters.ContainsKey("Date"))
    {
        date = parameters["Date"];
    }

    string context = ( parameters.ContainsKey("context")?parameters["context"] : "day");

    ViewBag.ShowSearchFilter = true;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { null, "<input id='selectAll' type='checkbox' onclick='selectAll()'/> Select All", "text-left"},
        new[] { "theinceptiontime", "Start Time", "text-center"},
        new[] { "thelinename", "Line Name", "text-left"},
        new[] { "voltage", "Line KV" , "text-center"},
        new[] { "thefaulttype", "Phase", "text-center"},
        new[] { "thecurrentdistance", "Distance", "text-center" },
        new[] { "locationname", "Location", "text-left"},

    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.HideAddNewButton = false;
    ViewBag.HidePaginationButtons = true;
    ViewBag.CustomHeader = "Fault Details for " + (DateTime.Parse(date)).ToUniversalTime().ToString("MM/dd/yyyy");

}

@section StyleSheets{
<style>
</style>
}

@helper BodyRows()
{
    <td width="100px"><input type="checkbox" data-bind="attr: {id: 'checkbox' + theeventid}"/></td>
    <td width="200px" class="text-center valign-middle truncate"><a target="_blank" data-bind="attr: {href: '/OpenSEE.cshtml?eventid=' + theeventid + '&faultcurves=1' }, text: theinceptiontime"></a></td>
    <td width="auto" class="text-left valign-middle truncate" data-bind="text: thelinename.truncate(25), attr: {title: thelinename}"></td>
    <td width="150px" class="text-center valign-middle" data-bind="text: voltage"></td>
    <td width="150px" class="text-center valign-middle" data-bind="text: thefaulttype"></td>
    <td width="150px" class="text-center valign-middle" data-bind="text: thecurrentdistance"></td>
    <td width="10%" class="text-left valign-middle truncate" data-bind="text: locationname"></td>

    <td width="5%" class="text-center valign-middle" nowrap>
        @*<button type="button" class="btn btn-xs" data-toggle="modal" data-target="#reprocessModal" data-bind="enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-repeat"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>*@
    </td>

}

@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddSelectField<FaultsDetailsByDate, EventType>("theeventtype", "Name",fieldLabel: "Reclassify fault: "))
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts {
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<FaultsDetailsByDate, DataHub>(ViewBag, "theinceptiontime", null, meterIds, date, context ))
        var IDs;
        var lastChanges;
        $('#selectedText').hide()
        $('#globalFilter').hide()

        $('#pageControlsRow').prepend("<button id='undoBtn' class='btn btn-sm btn-primary' onclick='undoLastChange()'>Undo</button>");
        $('#undoBtn').hide();

        $(function () {
            $('#addRecordButton').text('Update Selected');
            
            viewModel.setAddNewRecord(function (record) {
                $('#undoBtn').show();
                lastChanges = IDs;
                return dataHub.updateFaultsDetailsByDate(IDs, record.theeventtype);
            });

        });
        
        $(viewModel).on('beforeSave', function (event, record) {
            IDs = $('td input').filter('[id*="checkbox"]').filter(':checked').toArray().map(function (a) { return parseInt(a.id.split('checkbox')[1]) });
        });

        function selectAll() {
            $('td input').filter('[id*="checkbox"]').prop('checked', $('#selectAll').prop('checked'))
        }

        function undoLastChange() {
            dataHub.undoChanges(lastChanges).done(function () {
                viewModel.queryPageRecords();
                $('#undoBtn').hide();
                lastChanges = null;
            });
        }
    </script>
}
