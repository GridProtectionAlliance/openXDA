@*******************************************************************************************************
//  Index.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using System.Security.AccessControl
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using RazorEngine.Templating
@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;

    Layout = "Workbench/Layout.cshtml";
    //ViewBag.ShowMenu = false;

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("Date"))
    {
        ViewBag.Date = parameters["Date"].ToString();
    }
    if (parameters.ContainsKey("EventID"))
    {
        ViewBag.EventID = parameters["EventID"];
    }
    if (parameters.ContainsKey("time"))
    {
        ViewBag.time = parameters["time"];
    }


    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { "ID", "Event ID", "text-left"},
        new[] { "MeterName", "Meter Name", "text-left"},
        new[] { "LineName", "Line Name", "text-left"},
        new[] { "EventTypeName", "Event Type" , "text-center"},
        new[] { "StartTime", "Start Time", "text-center"},
        new[] { "EndTime", "End Time", "text-center" },
        new[] { null, "Edited", "text-center"}
    };
    ViewBag.ShowSearchFilter = true;

    ViewBag.BodyRows = BodyRows(int.Parse(ViewBag.EventID)).ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.HideAddNewButton = true;


    int seconds = Model.DataContext.Connection.ExecuteScalar<int>("Select Value FROM Setting WHERE Name = 'WorkbenchTimeRangeInSeconds'");
    ViewBag.date = Convert.ToDateTime(ViewBag.Date);
    ViewBag.Title = "All Events for: " + ViewBag.date.ToUniversalTime() + " +/- " + seconds + " seconds";
    ViewBag.ParentKeys = ViewBag.EventID;

}

@section StyleSheets{
    <style>
        .rowhighlight {
            background-color: yellow;
        }         
    </style>
}

@helper BodyRows(int EventId)
{
    <td width="5%" class="text-left valign-middle" data-bind="css: ( ID == @EventId ? 'rowhighlight' : '')"><a target="_blank" data-bind="attr: {href: '/OpenSEE.cshtml?ID=' + ID + '&faultcurves=1' }, text: ID"></a></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: MeterName, css: ( ID == @EventId ? 'rowhighlight' : '')"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: LineName, css: ( ID == @EventId ? 'rowhighlight' : '')"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: EventTypeName, css: ( ID == @EventId ? 'rowhighlight' : '')"></td>
    <td width="20%" class="text-center valign-middle" data-bind="css: ( ID == @EventId ? 'rowhighlight' : '')"><a target="_blank" data-bind="attr: {href: 'EventsForDate.cshtml?Date=' + StartTime + '&EventID=' + ID + '&time=1'}, text: StartTime.formatDate(DateTimeFormat)"></a></td>
    <td width="20%" class="text-center valign-middle" data-bind="css: ( ID == @EventId ? 'rowhighlight' : '')"><a target="_blank" data-bind="attr: {href: 'EventsForDate.cshtml?Date=' + EndTime + '&EventID=' + ID  + '&time=2'}, text: EndTime.formatDate(DateTimeFormat)"></a></td>
    <td width="5%" class="text-left valign-middle" style="text-align: center"><span data-bind="visible: (UpdatedBy != null)" class="glyphicon glyphicon-check"></span></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>

}

@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<EventView>("ID", customDataBinding: "enable: false"))
    @Raw(dataContext.AddInputField<EventView>("MeterName", "string", customDataBinding: "enable: false"))
    @Raw(dataContext.AddInputField<EventView>("LineName", "string", customDataBinding: "enable: false"))
    @Raw(dataContext.AddSelectField<EventView, EventType>("EventTypeID", "ID", "Name"))
    @Raw(dataContext.AddInputField<EventView>("StartTime", "string", customDataBinding: "type: text, enable: true"))
    @Raw(dataContext.AddInputField<EventView>("EndTime", "string", customDataBinding: "enable: true"))

}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts {
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<EventForDate, DataHub>(ViewBag, "ID", null, ViewBag.EventID, ViewBag.time))

        $('#addNewEditDialog').on('shown.bs.modal', function () {
        });

        $('#globalFilter').change(function (event) {
            viewModel.setQueryRecordCount(function (filterText) {
                return dataHub.queryEventCount($('#globalFilter').val(), filterText);
            });

            viewModel.setQueryRecords(function (sortField, ascending, page, pageSize, filterText) {
                return dataHub.queryEvents($('#globalFilter').val(), sortField, ascending, page, pageSize, filterText);
            });

            viewModel.queryPageRecords();
        });
        
        $(viewModel).on('pageRecordsQueried', function (event) {

        });
    </script>
}
