@*******************************************************************************************************
//  Index.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Net.Http
@using System.Threading
@using GSF.Web
@using GSF.Web.Model
@using openXDA.Model
@using RazorEngine.Templating
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@{
    Layout = "Workbench/Layout.cshtml";
    ViewBag.ShowMenu = true;

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("Date"))
    {
        ViewBag.Date = parameters["Date"];
    }
    if (parameters.ContainsKey("Types"))
    {
        ViewBag.Types = parameters["Types"];
    }
    if (parameters.ContainsKey("Filter"))
    {
        ViewBag.Filter = parameters["Filter"];
    }

    ViewBag.Title = "Fault for date: " + ViewBag.Date;
}

@section StyleSheets{
<style>
    table, th, td {
        border: 1px solid grey;
        border-collapse: collapse;
        padding: 5px;
    }

    table tr:nth-child(odd) {
        background-color: #f1f1f1;
    }

    table tr:nth-child(even) {
        background-color: #ffffff;
    }
</style>
}

<div ng-app="myApp">
    <div ng-controller="TableCtrl">
        <div class="input-group">
            <input class="form-control" ng-model="searchText" placeholder="Search" type="search" ng-change="search()" /> <span class="input-group-addon">
                <span class="glyphicon glyphicon-search"></span>
            </span>
        </div>
        <table class="table  table-hover data-table myTable">
            <thead>
                <tr>
                    <th class="EmpId">
                        <a href="#" ng-click="sort('MeterName')">
                            MeterName
                            <span class="{{Header[0]}}"></span>
                        </a>

                    </th>
                    <th class="name">
                        <a ng-click="sort('EventID')" href="#">
                            Event ID
                            <span class="{{Header[1]}}"></span>
                        </a>
                    </th>
                    <th class="name">
                        <a ng-click="sort('LineName')" href="#">
                            Line
                            <span class="{{Header[2]}}"></span>
                        </a>
                    </th>
                    <th class="Email">
                        <a ng-click="sort('Voltage')" href="#">
                            kV
                            <span class="{{Header[3]}}"></span>
                        </a>
                    </th>
                    <th class="Email">
                        <a ng-click="sort('FaultType')" href="#">
                            Type
                            <span class="{{Header[4]}}"></span>
                        </a>
                    </th>

                    <th class="Email">
                        <a ng-click="sort('CurrentDistance')" href="#">
                            Miles
                            <span class="{{Header[5]}}"></span>
                        </a>
                    </th>
                    <th class="Email">
                        <a ng-click="sort('InceptionTime')" href="#">
                            Time
                            <span class="{{Header[6]}}"></span>
                        </a>
                    </th>

                </tr>
            </thead>
            <tbody>
            <tr ng-repeat="item in events">
                <td>{{item.MeterName}}</td>
                <td><a href="~/OpenSEE.cshtml?eventid={{item.EventID.toString()}}&faultcurves=1" target="_blank">{{item.EventID}}</a></td>
                <td>{{item.LineName}}</td>
                <td>{{item.Voltage}}</td>
                <td>{{item.FaultType}}</td>
                <td>{{item.CurrentDistance}}</td>
                <td>{{getDateTimeFormat(item.InceptionTime)}}</td>
            </tr>
            </tbody>
        </table>
        @*<ul class="pagination pagination-md pull-left">
            <li ng-class="{active:0}">
                <a href="#" ng-click="firstPage()"><<</a>
            </li>
            <li ng-class="{active:0}">
                <a href="#" ng-if="getAbsDiff(0, currentPage) > 5" ng-click="minusPage()"><</a>
            </li>
            <li ng-repeat="n in [] | range:count" ng-class="{active: n == currentPage}">
                <a href="#" ng-if="n > 0 && n <= count && getAbsDiff(n, currentPage) <= 5 " ng-click="setPage(n, this)" ng-bind="n"></a>
            </li>
            <li ng-class="{active:0}">
                <a href="#" ng-if="getAbsDiff(count, currentPage) > 5" ng-click="plusPage()">></a>
            </li>
            <li>
                <a href="#" ng-click="lastPage()">>></a>
            </li>
        </ul>*@

        <div class="pull-left">
            <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-default" ng-disabled="currentPage == 1" ng-click="firstPage()"><span class="glyphicon glyphicon-backward"></span></button>
                <button type="button" class="btn btn-default" ng-disabled="currentPage == 1" ng-click="minusPage()"><span class="glyphicon glyphicon-triangle-left"></span></button>
            </div>
            <input type="number" class="content input-sm" style="padding: 0 0 0 5px; width: 55px" ng-model="currentPage" ng-change="setPage(currentPage)">
            <em class="validationMessage small" style="display: none;"></em>
            &nbsp;of&nbsp;
            <span ng-bind="pageCount"></span>
            &nbsp;
            <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-default" ng-disabled="currentPage == pageCount" ng-click="plusPage()"><span class="glyphicon glyphicon-triangle-right"></span></button>
                <button type="button" class="btn btn-default" ng-disabled="currentPage == pageCount" ng-click="lastPage()"><span class="glyphicon glyphicon-forward"></span></button>
            </div>
        </div>

        <div class="pull-right">
            Rows:
            <div class="btn-group">
                <button ng-class="{active: pageSize == 10}" class="btn btn-default" ng-click="setPageSize(10)">10</button>
                <button ng-class="{active: pageSize == 25}" class="btn btn-default" ng-click="setPageSize(25)">25</button>
                <button ng-class="{active: pageSize == 50}" class="btn btn-default" ng-click="setPageSize(50)">50</button>
                <button ng-class="{active: pageSize == 100}" class="btn btn-default" ng-click="setPageSize(100)">100</button>
            </div>
        </div>
    </div>
    <!-- Ends Controller -->
</div>

@section Scripts {
    <script>
        @Raw(AppModel.RenderAbstract<EventType>("Name", "ID", "lookupEventTypeName", "eventTypeName"))
        
        $(function () {
            $('#pageHeader h3').append("<small class='pull-right' style='margin-top: 8px' >Faults: <span id='recordCount'></span></small>")
        });

         var myApp = angular.module('myApp', []);

         myApp.filter('range', function () {
             return function (input, total) {
                 total = parseInt(total);
                 for (var i = 0; i <= total; ++i) {
                     input.push(i);
                 }
                 return input;
             }
         });

         var TableCtrl = myApp.controller('TableCtrl', function ($scope) {
             $scope.sortBy = 'ID';
             $scope.sortDirection = true;  // true for ascending and false for descending
             $scope.Header = ['glyphicon glyphicon-chevron-up', '', '', '', '', ''];
             $scope.searchText = '';
             $scope.pageSize = 10;
             $scope.currentPage = 1;
             $scope.pageCount;



             $(window).one('globalFilterDone', function (event) {
                 dataHub.getFaultsForDay(new Date('@ViewBag.Date 00:00Z'), '@ViewBag.Types', '@ViewBag.Filter', $scope.sortBy, $scope.sortDirection, 1, $scope.pageSize, ($scope.searchText === '' ? '%' : '%' + $scope.searchText + '%')).done(function (data) {
                     $scope.events = data;
                     $scope.$apply();

                 });

                 dataHub.getCountFaultsForDay(new Date('@ViewBag.Date 00:00Z'), '@ViewBag.Types', ($scope.searchText === '' ? '%' : '%' + $scope.searchText + '%'), '@ViewBag.Filter').done(function (count) {
                     $('#recordCount').text(count);

                     $scope.pageCount = Math.ceil(count / $scope.pageSize);
                     $scope.$apply();
                 });
             });


             $scope.getDateTimeFormat = function (date) {
                 return new Date(date).formatDate(DateTimeFormat);
             }


             $scope.search = function () {
                 dataHub.getFaultsForDay(new Date('@ViewBag.Date 00:00Z'), '@ViewBag.Types', '@ViewBag.Filter', $scope.sortBy, $scope.sortDirection, 1, $scope.pageSize, ($scope.searchText === '' ? '%' : '%' + $scope.searchText + '%')).done(function (data) {
                     $scope.events = data;
                     $scope.currentPage = 1;
                     $scope.$apply();

                 });

                 dataHub.getCountFaultsForDay(new Date('@ViewBag.Date 00:00Z'), '@ViewBag.Types', ($scope.searchText === '' ? '%' : '%' + $scope.searchText + '%'), '@ViewBag.Filter').done(function (count) {
                     $('#recordCount').text(count);

                     $scope.pageCount = Math.ceil(count / $scope.pageSize);
                     $scope.$apply();
                 });



             }


             $scope.setPage = function (pageNumber) {
                 dataHub.getFaultsForDay(new Date('@ViewBag.Date 00:00Z'), '@ViewBag.Types', '@ViewBag.Filter', $scope.sortBy, $scope.sortDirection, pageNumber, $scope.pageSize, ($scope.searchText === '' ? '%' : '%' + $scope.searchText + '%')).done(function (data) {
                     //$('.pagination li a').parent().removeClass("active");
                     //$('.pagination li a:contains('+pageNumber+')').parent().addClass("active")
                     $scope.events = data;
                     $scope.currentPage = pageNumber;
                     $scope.$apply();

                 });
             };

             $scope.firstPage = function () {
                 dataHub.getFaultsForDay(new Date('@ViewBag.Date 00:00Z'), '@ViewBag.Types', '@ViewBag.Filter', $scope.sortBy, $scope.sortDirection, 1, $scope.pageSize, ($scope.searchText === '' ? '%' : '%' + $scope.searchText + '%')).done(function (data) {
                     $scope.events = data;
                     //$('.pagination li a').parent().removeClass("active");
                     //$('.pagination li a:contains(1)').parent().addClass("active")
                     $scope.currentPage = 1;
                     $scope.$apply();

                 });
             };

             $scope.lastPage = function () {
                 dataHub.getFaultsForDay(new Date('@ViewBag.Date 00:00Z'), '@ViewBag.Types', '@ViewBag.Filter', $scope.sortBy, $scope.sortDirection, $scope.pageCount, $scope.pageSize, ($scope.searchText === '' ? '%' : '%' + $scope.searchText + '%')).done(function (data) {
                     $scope.events = data;
                     //$('.pagination li a').parent().removeClass("active");
                     //$('.pagination li a:contains('+$scope.pageCount+')').parent().addClass("active")
                     $scope.currentPage = $scope.pageCount;
                     $scope.$apply();

                 });
             };

             $scope.plusPage = function () {
                 $scope.setPage(++$scope.currentPage);

             }
             $scope.minusPage = function () {
                 $scope.setPage(--$scope.currentPage);
             }

             $scope.sort = function (sortBy) {
                 if (sortBy === $scope.sortBy) {
                     $scope.sortDirection = !$scope.sortDirection;
                 }
                 $scope.sortBy = sortBy;
                 $scope.Header = ['', '', '', '', '', ''];

                 if ($scope.sortDirection)
                     iconName = 'glyphicon glyphicon-chevron-up';
                 else
                     iconName = 'glyphicon glyphicon-chevron-down';

                 if (sortBy === 'MeterName') {
                     $scope.Header[0] = iconName;
                 }
                 else if (sortBy === 'EventID') {
                     $scope.Header[1] = iconName;
                 } else if (sortBy === 'LineName') {
                     $scope.Header[2] = iconName;
                 }
                 else if (sortBy === 'Voltage') {
                     $scope.Header[3] = iconName;
                 } else if (sortBy === 'FaultType') {
                     $scope.Header[4] = iconName;
                 } else if (sortBy === 'CurrentDistance') {
                     $scope.Header[5] = iconName;
                 } else {
                     $scope.Header[6] = iconName;
                 }

                 dataHub.getFaultsForDay(new Date('@ViewBag.Date 00:00Z'), '@ViewBag.Types', '@ViewBag.Filter', $scope.sortBy, $scope.sortDirection, 1, $scope.pageSize, ($scope.searchText === '' ? '%' : '%' + $scope.searchText + '%')).done(function (data) {
                     $scope.events = data;
                     $scope.currentPage = 1;
                     $scope.$apply();

                 });


             };

             $scope.setPageSize = function (size) {
                 $scope.pageSize = size;
                 dataHub.getFaultsForDay(new Date('@ViewBag.Date 00:00Z'), '@ViewBag.Types', '@ViewBag.Filter', $scope.sortBy, $scope.sortDirection, 1, $scope.pageSize, ($scope.searchText === '' ? '%' : '%' + $scope.searchText + '%')).done(function (data) {
                     $scope.events = data;
                     $scope.$apply();

                 });

                 dataHub.getCountFaultsForDay(new Date('@ViewBag.Date 00:00Z'), '@ViewBag.Types', ($scope.searchText === '' ? '%' : '%' + $scope.searchText + '%'), '@ViewBag.Filter').done(function (count) {
                     $('#recordCount').text(count);

                     $scope.pageCount = Math.ceil(count / $scope.pageSize);
                     $scope.$apply();
                 });
             };
             
             $scope.getAbsDiff = function (a, b) {
                 return Math.abs(a - b);
             };



         });



         //Inject Services for DI
         //$scope is standard service provided by framework
         TableCtrl.$inject = ['$scope'];


    </script>
}
