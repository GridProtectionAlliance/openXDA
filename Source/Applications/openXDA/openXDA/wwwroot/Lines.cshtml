@*******************************************************************************************************
//  Settings.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Threading
@using RazorEngine.Templating
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model

@inherits TemplateBase<AppModel>

@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Layout.cshtml";
    ViewBag.Title = "Lines";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { "AssetKey", "Name", "text-Left" },
        new[] { "VoltageKV", "Voltage", "text-left"},
        new[] { "ThermalRating", "Thermal Rating", "text-left" },
        new[] { "Length", "Length", "text-left" },
        new[] { null, "Meter-to-Line", "text-center valign-middle"}

    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();



}
@helper BodyRows()
{
    <td width="25%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: AssetKey, click: $parent.viewPageRecord"></button></td>
    <td width="25%" class="text-left valign-middle" data-bind="text: VoltageKV"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: ThermalRating"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: Length"></td>
    <td width="5%" class="text-center valign-middle"><button type="button" id="newWindow" data-bind="click: openMeters.bind($data), enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">MeterLine&nbsp;&nbsp;<span class="badge" data-bind="text: getMeterCount(ID, $($element)), attr: {id: 'meterCount' + ID}">0</span></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-6">
        @Raw(dataContext.AddInputField<Lines>("AssetKey"))
        @Raw(dataContext.AddInputField<Lines>("VoltageKV"))
        @Raw(dataContext.AddInputField<Lines>("ThermalRating"))
        @Raw(dataContext.AddInputField<Lines>("Length"))
    </div>

    <div class="col-md-6">
        @Raw(dataContext.AddTextAreaField<Lines>("Description", 4))
    </div>

}

<div id="metersDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body" style="overflow-y: hidden">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none; overflow-y: hidden" id="metersFrame" marginheight="0" marginwidth="0"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@Include("PagedViewModel.cshtml")

@section Scripts 
{
    @Raw(ViewBag.PageControlScripts.ToString())
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<Lines, DataHub>(ViewBag))
        
        function getMeterCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryMeterLineCount(sourceID,-1, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

        function openMeters(record) {
            ////console.log(record);
            //$("#metersFrame").attr({
            //    "src": "/MeterLine.cshtml?LineID=" + record.ID + "&MeterID=-1",
            //    "height": ($(document).height() - 150) + "px",
            //    "width": "100%"
            //});

            //$("#metersDialog").modal("show");
            location.href = "/MeterLine.cshtml?LineID=" + record.ID + "&MeterID=-1" + "&Title=" + record.AssetKey;


        }

        $("#metersDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#metersFrame").attr("src", "about:blank");
        });

        $(window).resize(function () {
            setTimeout(function () {
                $("#metersFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });


        $(function () {
            $("#metersDialog").modal({ show: false, backdrop: "static", keyboard: false });
        });

    </script>
}
