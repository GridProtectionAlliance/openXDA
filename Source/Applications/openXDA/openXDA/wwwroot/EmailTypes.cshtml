@*******************************************************************************************************
//  Settings.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Layout.cshtml";
    ViewBag.Title = "Email Types";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "EmailCategoryID", "Category", "text-Left" },
        new[] { "XSLTemplateID", "XSL Template", "text-left"},
        new[] { null, "Event ID: <input id='eventID'class='' type='text'/>", "text-left valign-middle"},

    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Email Type";
}

@helper BodyRows()
{
    <td width="25%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: lookupEmailCategoryName(EmailCategoryID), click: $parent.viewPageRecord"></button></td>
    <td width="25%" class="text-left valign-middle" data-bind="text: lookupXSLTemplateName(XSLTemplateID)"></td>
    <td width="25%"><button class="btn btn-primary" data-bind="click: viewTemplate.bind($data)">View</button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddSelectField<EmailType,EmailCategory>("EmailCategoryID", "ID", "Name"))
    @Raw(dataContext.AddSelectField<EmailType, XSLTemplate>("XSLTemplateID", "ID", "Name"))
    <div class="form-group">
        <button class="btn btn-primary" data-bind="visible: $parent.recordMode()!==RecordMode.View, click: createXSLTemplate">Create New XSL Template</button>
        <button class="btn btn-primary" data-bind="visible: $parent.recordMode()!==RecordMode.View, click: editXSLTemplate">Edit XSL Template</button>
    </div>

    <div id="textArea" class="form-group" data-bind="visible: false">
        <div class="form-group">
            <div id="xslID" style="display: none"></div>
            <label>XSL Template Name:</label>
            <input id="templateName" class="form-control" type="text"/>
        </div>
        <div class="form-group">
            <textarea id="template" class="form-control"></textarea>
        </div>
        <button id="saveNew" class="btn btn-primary pull-right" data-bind="visible: false, click: saveXSLTemplateNew">Save XSL Template</button>
        <button id="saveEdit" class="btn btn-primary pull-right" data-bind="visible: false, click: saveXSLTemplateEdit">Save XSL Template</button>
    </div>
        
 }
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<EmailType, DataHub>(ViewBag))
        @Raw(Model.RenderAbstract<EmailCategory>("Name", "ID", "lookupEmailCategoryName", "emailCategoryName"))
        @Raw(Model.RenderAbstract<XSLTemplate>("Name", "ID", "lookupXSLTemplateName", "xslTemplateName"))

        $(function () {
        });

        function createXSLTemplate() {
            $('#templateName').val('');
            $('#template').val('');
            $('#template').height($(window).height() / 3);
            $('#saveNew').show();
            $('#saveEdit').hide();

            if ($('#textArea').css('display') === 'none')
                $('#textArea').slideToggle();
        }

        function editXSLTemplate() {
            dataHub.queryXSLTemplateByID($('#selectXSLTemplateID').val()).done(function (data) {
                $('#templateName').val(data.Name);
                $('#template').val(data.Template);
                $('#template').height($(window).height() / 3);
                $('#xslID').html(data.ID);
                $('#saveEdit').show();
                $('#saveNew').hide();
                if ($('#textArea').css('display') === 'none')
                    $('#textArea').slideToggle();
                

            });
        }
        
        function saveXSLTemplateNew() {
            var record = { Name: $('#templateName').val(), Template: $('#template').val() };
            
            dataHub.addNewXSLTemplate(record).done(function (data) {
                dataHub.queryXSLTemplate("Name", true, 1, 10000000000, '%').done(function (data2) {
                    $('#selectXSLTemplateID').children().remove();
                    $.each(data2, function (i, d) {
                        $('#selectXSLTemplateID').append(new Option(d.Name, d.ID));
                    });
                });
            });
        }
        
        function saveXSLTemplateEdit() {
            var record = { ID: $('#xslID').html(), Name: $('#templateName').val(), Template: $('#template').val() };
            dataHub.updateXSLTemplate(record).done(function (data) {
                dataHub.queryXSLTemplate("Name", true, 1, 10000000000, '%').done(function (data2) {
                    $('#selectXSLTemplateID').children().remove();
                    $.each(data2, function (i, d) {
                        $('#selectXSLTemplateID').append(new Option(d.Name, d.ID));
                    });
                });
            });
        }
        
        $('#addNewEditDialog').on('shown.bs.modal', function () {
            dataHub.queryXSLTemplate("Name", true, 1, 1000000000000, '%').done(function (data2) {
                $('#selectXSLTemplateID').children().remove();
                $.each(data2, function (i, d) {
                    $('#selectXSLTemplateID').append(new Option(d.Name, d.ID));
                });
            });
        });
        
        function viewTemplate(data) {
            window.open("@Url.Content("~/EmailTemplateHandler.ashx")?EventID= " + $("#eventID").val() + "&TemplateID=" + data.XSLTemplateID);
        }
    </script>
}
