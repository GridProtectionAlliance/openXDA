@*******************************************************************************************************
//  Settings.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("MeterID"))
    {
        ViewBag.meterID = int.Parse(parameters["MeterID"]);
    }
    else
    {
        ViewBag.meterID = -1;
    }

    if (parameters.ContainsKey("LineID"))
    {
        ViewBag.lineID = int.Parse(parameters["LineID"]);
    }
    else
    {
        ViewBag.lineID = -1;
    }

    string meterName = dataContext.Connection.ExecuteScalar<string>("SELECT Name FROM Meter WHERE ID = {0}", ViewBag.meterID);
    string lineKey = dataContext.Connection.ExecuteScalar<string>("SELECT AssetKey FROM Line WHERE ID = {0}", ViewBag.lineID);
    string lineName = dataContext.Connection.ExecuteScalar<string>("SELECT LineName FROM MeterLine WHERE MeterID = {0} AND LineID = {1}", ViewBag.meterID, ViewBag.lineID);
    ViewBag.CustomHeader = "Channels for <a href=\"/Assets/Meters.cshtml?Meter=" + meterName + "\">" + meterName + "</a> and <a href=\"/Assets/Lines.cshtml?Line=" + lineKey + "\">" + lineName + "</a>";

    Layout = "Assets/Layout.cshtml";
    ViewBag.Title = "Channels for " + meterName + " and " + lineName;
    ViewBag.ShowSearchFilter = true;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-left"},
        new[] { "MeasurementType", "Meas Type", "text-left"},
        new[] { "MeasurementCharacteristic", "Meas Char", "text-left"},
        new[] { "Phase", "Phase", "text-center"},
        new[] { "HarmonicGroup", "HG", "text-center"}
    };

    ViewBag.ParentKeys = ViewBag.meterID + "," + ViewBag.lineID;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
}
@*@helper Filters()
{
    <div class='row'>
        <div class='col-md-4'>
            <div class='form-group'>
                <label for='channelfilter'>Channel Name Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='channelfilter' placeholder='Search' />
                </div>
            </div>
        </div>
        <div class='col-md-4'>
            <div class='form-group'>
                <label for='typefilter'>Measurement Type Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='typefilter' placeholder='Search' />
                </div>
            </div>
        </div>
        <div class='col-md-4'>
            <div class='form-group'>
                <label for='characteristicfilter'>Measurement Characteristic Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='characteristicfilter' placeholder='Search' />
                </div>
            </div>
        </div>
    </div>
}*@
@helper BodyRows()
{
    <td width="20%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="click: $parent.viewPageRecord, text: Name"></button></td>
    <td width="10%" class="text-left valign-middle" data-bind="text: MeasurementType"></td>
    <td width="10%" class="text-left valign-middle" data-bind="text: MeasurementCharacteristic"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: Phase"></td>
    <td width="5%" class="text-center valign-middle" data-bind="text: HarmonicGroup"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-6">
        @Raw(dataContext.AddInputField<Channel>("Mapping", fieldLabel: "Channel Number"))
        @Raw(dataContext.AddInputField<Channel>("Name"))
        @Raw(dataContext.AddSelectField<Channel, Meter>("MeterID", "ID", "Name"))
        @Raw(dataContext.AddSelectField<Channel, Line>("LineID", "ID", "AssetKey"))
        @Raw(dataContext.AddSelectField<Channel, MeasurementType>("MeasurementTypeID", "ID", "Name"))
        @Raw(dataContext.AddSelectField<Channel, MeasurementCharacteristic>("MeasurementCharacteristicID", "ID", "Name"))
        @Raw(dataContext.AddSelectField<ChannelDetail, SeriesType>("SeriesTypeID", "ID", "Name"))
    </div>
    <div class="col-md-6">
        @Raw(dataContext.AddSelectField<Channel, Phase>("PhaseID", "ID", "Name"))
        @Raw(dataContext.AddInputField<Channel>("SamplesPerHour"))
        @Raw(dataContext.AddInputField<Channel>("PerUnitValue"))
        @Raw(dataContext.AddInputField<Channel>("HarmonicGroup"))
        @Raw(dataContext.AddTextAreaField<Channel>("Description"))
    </div>
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts 
{
    <script src="@("/@GSF/Web/Model/Scripts/gsf.web.primeui.js")"></script>
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<Channel, DataHub>(ViewBag, "ID", null, ViewBag.meterID, ViewBag.lineID))

        $(viewModel).on("newRecord", function (event, observableRecord) {
            if (@ViewBag.meterID !== -1)
                observableRecord.MeterID = @ViewBag.meterID;

            if (@ViewBag.lineID !== -1)
                observableRecord.LineID = @ViewBag.lineID;
        });

        $(function () {

            $("#addNewEditDialog").on("shown.bs.modal", function () {
                if (viewModel.dataHubIsConnected()) {
                }
            });

        });
    </script>
}
