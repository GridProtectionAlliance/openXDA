@*******************************************************************************************************
    //  MeterLines.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //  12/24/2019 - C. Lackner
    //       Updated To account for Model changes whn moving to Assets.
    //
    //*****************************************************************************************************@
@using System
@using System.Collections.Generic
@using System.Net.Http
@using System.Threading
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>

@{
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    ViewBag.meterID = int.Parse(parameters["MeterID"] ?? "-1");
    ViewBag.assetID = int.Parse(parameters["AssetID"] ?? "-1");

    Layout = "Assets/Layout.cshtml";

    if (ViewBag.meterID != -1)
    {
        string meterName = dataContext.Connection.ExecuteScalar<string>("SELECT AssetKey FROM Meter WHERE ID = {0}", ViewBag.meterID);
        ViewBag.Title = "Lines monitored by " + meterName;
        ViewBag.CustomHeader = "Lines monitored by <a href=\"/Assets/Meters.cshtml?Meter=" + meterName + "\">" + meterName + "</a>";

        // Define column headers, use null for field name to make column non-sortable
        ViewBag.HeaderColumns = new[]
        {   //    { "Field", "Label", "Classes" }
    new[] { "MeterKey", "Meter", "text-left"},
    new[] { "AssetKey", "Asset", "text-left" },
    new[] { "AssetKey", "", "text-left" },
    new[] { "AssetType", "Asset Type", "text-left" },
    new[] { "FaultDetectionLogic", "Logic", "text-left"},
    new[] { null, "Channel", "text-center valign-middle"},
    new[] { null, "Alarms", "text-center valign-middle"},
};
    }
    else
    {
        string lineKey = dataContext.Connection.ExecuteScalar<string>("SELECT AssetKey FROM Asset WHERE ID = {0}", ViewBag.assetID);
        ViewBag.Title = "Meters monitoring " + lineKey;
        ViewBag.CustomHeader = "Meters monitoring <a href=\"/Assets/Asset.cshtml?Asset=" + lineKey + "\">" + lineKey + "</a>";

        // Define column headers, use null for field name to make column non-sortable
        ViewBag.HeaderColumns = new[]
        {   //    { "Field", "Label", "Classes" }
    new[] { "AssetKey", "Asset", "text-left" },
    new[] { "AssetKey", "", "text-left" },
    new[] { "AssetType", "Asset Type", "text-left" },
    new[] { "MeterKey", "Meter", "text-left"},
    new[] { "FaultDetectionLogic", "Logic", "text-left"},
    new[] { null, "Channel", "text-center valign-middle"},
    new[] { null, "Alarms", "text-center valign-middle"},
};
    }

    ViewBag.ParentKeys = ViewBag.meterID + "," + ViewBag.assetID;
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.ShowSearchFilter = true;
}
@helper BodyRows()
{
    if (ViewBag.meterID != -1)
    {
        <td width="15%" class="text-left valign-middle"><a class="btn btn-link" data-bind="text: MeterKey, attr: { href: '/Assets/Meters.cshtml?Meter=' + MeterKey }"></a></td>
        <td width="15%" class="text-left valign-middle"><a class="btn btn-link" data-bind="text: AssetKey, attr: { href: '/Assets/Asset.cshtml?Asset=' + AssetKey }"></a></td>
        <td width="20%" class="text-left valign-middle" data-bind="text: AssetName"></td>
        <td width="15%" class="text-left valign-middle" data-bind="text: AssetType"></td>
    }
    else
    {
        <td width="15%" class="text-left valign-middle"><a class="btn btn-link" data-bind="text: AssetKey, attr: { href: '/Assets/Asset.cshtml?Asset=' + AssetKey }"></a></td>
        <td width="20%" class="text-left valign-middle" data-bind="text: AssetName"></td>
        <td width="15%" class="text-left valign-middle" data-bind="text: AssetType"></td>
        <td width="15%" class="text-left valign-middle"><a class="btn btn-link" data-bind="text: MeterKey, attr: { href: '/Assets/Meters.cshtml?Meter=' + MeterKey }"></a></td>

    }

    <td width="20%" class="text-left valign-middle" data-bind="text: FaultDetectionLogic"></td>
    <td width="5%" class="text-center valign-middle"><a id="newWindow" data-bind="attr: { href: '/Assets/Channels.cshtml?AssetID=' + AssetID + '&MeterID=' + MeterID }, enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Channels&nbsp;&nbsp;<span class="badge" data-bind="text: getChannelCount(MeterID, AssetID, $($element)), attr: {id: 'channelCount' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle"><a data-bind="attr: { href: '/Config/ChannelsWithNormalLimits.cshtml?MeterID=' + MeterID }, enable: $parent.dataHubIsConnected" target="_blank" class="btn btn-default  form-control">Alarms&nbsp;&nbsp;<span class="badge" data-bind="text: getAlarmCount(MeterID, AssetID, $($element)), attr: {id: 'alarmCount' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddSelectField<MeterAssetDetail, Asset>("AssetID", "ID", "AssetKey", fieldLabel: "Asset Key"))
    @Raw(dataContext.AddSelectField<MeterAssetDetail, Meter>("MeterID", "ID", "AssetKey", fieldLabel: "Meter Name"))
    @Raw(dataContext.AddInputField<MeterAssetDetail>("FaultDetectionLogic", fieldLabel: "Detection Logic"))

}
<div id="channelsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body" style="overflow-y: hidden">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none; overflow-y: hidden" id="channelsFrame" marginheight="0" marginwidth="0"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<MeterAsset, DataHub>(ViewBag, "ID", null, ViewBag.assetID, ViewBag.meterID))

        $(viewModel).on("beforeSave", function (event, observableRecord) {
            if (@ViewBag.assetID !== -1)
                observableRecord.AssetID = @ViewBag.assetID;
            if (@ViewBag.meterID !== -1)
                observableRecord.MeterID = @ViewBag.meterID;
        });

        $(viewModel).on("newRecord", function (event, observableRecord) {
            if (@ViewBag.assetID !== -1)
                observableRecord.AssetID = @ViewBag.assetID;
            if (@ViewBag.meterID !== -1)
                observableRecord.MeterID = @ViewBag.meterID;
        });

            function getChannelCount(meterID, assetID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryChannelCount(meterID, assetID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

            function getAlarmCount(meterID, assetID, element){
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryAlarmRangeLimitViewCount(meterID, assetID, '%').done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

        $("#channelsDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#channelsFrame").attr("src", "about:blank");
        });

        $(window).resize(function () {
            setTimeout(function () {
                $("#channelsFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });


        $(function () {
            $("#channelsDialog").modal({ show: false, backdrop: "static", keyboard: false });

            $("#addNewEditDialog").on("shown.bs.modal", function () {
                if (viewModel.dataHubIsConnected()) {
                }
            });
        });

    </script>
}
