@*******************************************************************************************************
    //  Index.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System
@using System.Threading
@using GSF
@using GSF.Data
@using GSF.Identity
@using GSF.IO
@using GSF.Reflection
@using GSF.Web
@using GSF.Web.Model
@using openXDA.Model
@using openXDA.Hubs
@using System.Net.Http


@inherits ExtendedTemplateBase<AppModel>
@{
    Layout = "Reports/Layout.cshtml";
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("ID"))
    {
        ViewBag.ID = parameters["ID"];
    }

    Report report = dataContext.Table<Report>().QueryRecordWhere("ID = {0}", ViewBag.ID);
    string pdf = Convert.ToBase64String(report.PDF);
    Meter meter = dataContext.Table<Meter>().QueryRecordWhere("ID = {0}", report.MeterID);

}
<embed id="pdfContent"  width="100%" height="700">

@section StyleSheets {
    <style>
        body {
            overflow-y: hidden;
        }
    </style>
}

@section Scripts {
    <script>
        var file = base64ToArrayBuffer('@Raw(pdf)');
        showFile(file,  "@(meter.AssetKey + "_" + report.Month.ToString() + "_" + report.Year.ToString()).pdf");

        $('#bodyContainer').removeClass('container');

        function resizePDFContent() {
            $("#pdfContent").attr("height", (calculateRemainingBodyHeight() + 56) + "px");
        }

        $(window).resize(function () {
            resizePDFContent();
        });

        $(function () {
            setTimeout(resizePDFContent, 50);
        });

        function base64ToArrayBuffer(base64) {
            var binary_string = window.atob(base64);
            var len = binary_string.length;
            var bytes = new Uint8Array(len);
            for (var i = 0; i < len; i++) {
                bytes[i] = binary_string.charCodeAt(i);
            }
            return bytes.buffer;
        }

        function openlink(file) {
            if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                window.navigator.msSaveOrOpenBlob(file);
            } else {
                var fileUrl = URL.createObjectURL(file);
                document.getElementById('pdfContent').src = fileUrl;
            }
        }

        function showFile(blob, fileName){
            // It is necessary to create a new blob object with mime-type explicitly set
            // otherwise only Chrome works like it should
            var newBlob = new Blob([blob], { type: "application/pdf" })

            // IE doesn't allow using a blob object directly as link href
            // instead it is necessary to use msSaveOrOpenBlob
            if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                window.navigator.msSaveOrOpenBlob(newBlob, fileName);
                return;
            }

            // For other browsers: 
            // Create a link pointing to the ObjectURL containing the blob.
            newBlob.fileName = fileName;
            const data = window.URL.createObjectURL(newBlob);
            document.getElementById('pdfContent').src = data;
            //var link = document.createElement('a');
            //link.href = data;
            //link.download = fileName;
            //link.click();
            setTimeout(function () {
                // For Firefox it is necessary to delay revoking the ObjectURL
                window.URL.revokeObjectURL(data);
            }, 10000);
        }
    </script>
}
