@*******************************************************************************************************
//  PQViewDataLoader.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Threading
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Config/Layout.cshtml";
    ViewBag.Title = "PQ View Data Loader Mappings";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "SiteID", "PQView Site ID", "text-left" },
        new[] { "StationKey", "Station", "text-left" },
        new[] { "LineKey", "Line", "text-left" },
        new[] { "PQIFacility", "PQI Facility", "text-left" },
        new[] { "Enabled", "Enabled", "text-center" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.HideAddNewButton = false;
    ViewBag.ShowSearchFilter = true;

}
@helper BodyRows()
{
    <td width="30%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: SiteID, click: $parent.viewPageRecord"></button></td>
    <td width="30%" class="text-left valign-middle" data-bind="text: StationKey"></td>
    <td width="30%" class="text-left valign-middle" data-bind="text: LineKey"></td>
    <td width="30%" class="text-left valign-middle" data-bind="text: PQIFacility"></td>
    <td width="30%" class="text-center valign-middle" data-bind="text: (Enabled? 'True': 'False')"></td>

    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<PQViewSite>("SiteID", "number"))
    @Raw(dataContext.AddInputField<PQViewSite>("StationKey"))
    @Raw(dataContext.AddInputField<PQViewSite>("LineKey"))
    @Raw(dataContext.AddInputField<PQViewSite>("PQIFacility"))
    @Raw(dataContext.AddCheckBoxField<PQViewSite>("Enabled", "Enable?"))

}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts 
{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<PQViewSite, DataHub>(ViewBag))
        
        function truncate(string) {
            if (string != null && string.length > 40)
                string = string.slice(0, 37) + '...';
            return string;
        }
    </script>
}
