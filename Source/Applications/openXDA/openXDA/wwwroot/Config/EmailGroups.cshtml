@*//******************************************************************************************************
//  EmailGroups.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  09/12/2016 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@

@using System.Collections.Generic
@using System.Net.Http
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Config/Layout.cshtml";
    ViewBag.Title = "Email Groups";
    HttpRequestMessage request = ViewBag.Request;

    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("GroupID"))
    {
        ViewBag.GroupID = parameters["GroupID"];
    }
    else
    {
        ViewBag.GroupID = "-1";
    }

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Group Name", "text-Left" },
        new[] { null, "Email Types", "text-center valign-middle"},
        new[] { null, "Meter Groups", "text-center valign-middle"},
        new[] { null, "Line Groups", "text-center valign-middle"},
        new[] { null, "User Accounts", "text-center valign-middle"},
        new[] { null, "Event Criteria", "text-center valign-middle"},

    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Email Group Type";
    ViewBag.ShowSearchFilter = true;

}

@helper BodyRows()
{
    <td width="25%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Name, click: $parent.viewPageRecord"></button></td>
    <td width="5%" class="text-center valign-middle"><a data-bind="attr: { href: '/Config/EmailGroupType.cshtml?GroupID=' + ID}, enable: $parent.dataHubIsConnected" class="btn btn-default form-control">Email Types&nbsp;&nbsp;<span class="badge" data-bind="text: getTypesCount(ID, $($element)), attr: {id: 'typesCount' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle"><a data-bind="attr: { href: '/Config/EmailGroupMeterGroup.cshtml?EmailGroupID=' + ID}, enable: $parent.dataHubIsConnected" class="btn btn-default form-control">Meter Groups&nbsp;&nbsp;<span class="badge" data-bind="text: getMeterGroupCount(ID, $($element)), attr: {id: 'meterGroupCount' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle"><a data-bind="attr: { href: '/Config/EmailGroupLineGroup.cshtml?EmailGroupID=' + ID}, enable: $parent.dataHubIsConnected" class="btn btn-default form-control">Line Groups&nbsp;&nbsp;<span class="badge" data-bind="text: getLineGroupCount(ID, $($element)), attr: {id: 'lineGroupCount' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle"><a data-bind="attr: { href: '/Config/EmailGroupUserAccount.cshtml?EmailGroupID=' + ID}, enable: $parent.dataHubIsConnected" class="btn btn-default form-control">User Accounts&nbsp;&nbsp;<span class="badge" data-bind="text: getUserCount(ID, $($element)), attr: {id: 'userCount' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle"><button data-bind="click: openEventCriterionModal.bind($data), enable: $parent.dataHubIsConnected" class="btn btn-default form-control">Event Criteria</button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<EmailGroup>("Name"))
}
<div id="manageEventCriterion" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Event Criteria</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <input type="checkbox" id="distubanceCheck"/><label>Disturbances</label>
                        <div class="row" style="margin-left: 10px">
                            <input type="checkbox" id="fiveCheck" /><label>5</label>
                        </div>
                        <div class="row" style="margin-left: 10px">
                            <input type="checkbox" id="fourCheck" /><label>4</label>
                        </div>
                        <div class="row" style="margin-left: 10px">
                            <input type="checkbox" id="threeCheck" /><label>3</label>
                        </div>
                        <div class="row" style="margin-left: 10px">
                            <input type="checkbox" id="twoCheck" /><label>2</label>
                        </div>
                        <div class="row" style="margin-left: 10px">
                            <input type="checkbox" id="oneCheck" /><label>1</label>
                        </div>
                        <div class="row" style="margin-left: 10px">
                            <input type="checkbox" id="zeroCheck" /><label>0</label>
                        </div>

                    </div>
                    <div class="col-md-6">
                        <input type="checkbox" id="faultCheck"/><label>Faults</label>
                    </div>
                    <div id="emailGroup" style="display: none"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="updateEventCriterion()">Save</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>

        </div>
    </div>
</div>

@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<EmailGroup, DataHub>(ViewBag, null, null, int.Parse(ViewBag.GroupID)))
        
        function getTypesCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryEmailGroupTypeCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }
        
        function getMeterGroupCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryEmailGroupMeterGroupCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }
        
        function getLineGroupCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryEmailGroupLineGroupCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

        
        function getUserCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryEmailGroupUserAccountCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }
        
        function openEventCriterionModal(record) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.getEventCriterion(record.ID).done(function (data) {
                    $('#distubanceCheck').prop('checked', data.disturbances);
                    $('#faultCheck').prop('checked', data.fault);
                    $('#fiveCheck').prop('checked', data.five);
                    $('#fourCheck').prop('checked', data.four);
                    $('#threeCheck').prop('checked', data.three);
                    $('#twoCheck').prop('checked', data.two);
                    $('#oneCheck').prop('checked', data.one);
                    $('#zeroCheck').prop('checked', data.zero);
                    $('#emailGroup').html(record.ID);
                });
            }
            $("#manageEventCriterion").modal({ show: true});
        }
        
        function updateEventCriterion() {
            var record = {
                disturbances: $('#distubanceCheck').prop('checked'),
                fault: $('#faultCheck').prop('checked'),
                five: $('#fiveCheck').prop('checked'),
                four: $('#fourCheck').prop('checked'),
                three: $('#threeCheck').prop('checked'),
                two: $('#twoCheck').prop('checked'),
                one: $('#oneCheck').prop('checked'),
                zero: $('#zeroCheck').prop('checked')
            }
            
            if (viewModel.dataHubIsConnected()) {
                dataHub.updateEventCriterion(record, $('#emailGroup').html());
            }
        }
        
        $(function () {
            viewModel.queryPageRecords();
            
            $("#manageEventCriterion").modal({ show: false, backdrop: "static", keyboard: false });

        });

    </script>
}
