@*******************************************************************************************************
//  DashSettings.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using RazorEngine.Templating
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Config/Layout.cshtml";
    ViewBag.Title = "Default Alarm Limit Settings";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "MeasurementType", "Meas Type", "text-left"},
        new[] { "MeasurementCharacteristic", "Meas Char", "text-left"},
        new[] { "AlarmType", "Alarm Type", "text-left"},
        //new[] { "HarmonicGroup", "Harmonic Group", "text-left"},
        //new[] { "Severity", "Severity", "text-left" },
        new[] { "High", "High", "text-left" },
        new[] { "Low", "Low", "text-left" },
        //new[] { "RangeInclusive", "Severity", "text-left" },
        //new[] { "DefaultValue", "Default Value", "text-center" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.ShowSearchFilter = true;

}
@helper BodyRows()
{
    <td width="5%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: MeasurementType, click: $parent.viewPageRecord"></button></td>
    <td width="10%" class="text-left valign-middle" data-bind="text: MeasurementCharacteristic"></td>
    <td width="10%" class="text-left valign-middle" data-bind="text: AlarmType"></td>
    <td width="10%" class="text-left valign-middle" data-bind="text: High"></td>
    <td width="10%" class="text-left valign-middle" data-bind="text: Low"></td>
    @*<td width="30%" class="text-left valign-middle" data-bind="text: truncate(DefaultValue)"></td>*@

    <td width="10%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" title="Reset to Default Limits" data-bind="click: resetLimits.bind($data), enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-repeat"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-6">
        @Raw(dataContext.AddSelectField<DefaultAlarmRangeLimitView, MeasurementType>("MeasurementTypeID", "ID", "Name"))
        @Raw(dataContext.AddSelectField<DefaultAlarmRangeLimitView, MeasurementCharacteristic>("MeasurementCharacteristicID", "ID", "Name"))
        @Raw(dataContext.AddSelectField<DefaultAlarmRangeLimitView, AlarmType>("AlarmTypeID", "ID", "Name"))
        @Raw(dataContext.AddInputField<DefaultAlarmRangeLimitView>("Severity"))
    </div>

    <div class="col-md-6">
        @Raw(dataContext.AddInputField<DefaultAlarmRangeLimitView>("High"))
        @Raw(dataContext.AddInputField<DefaultAlarmRangeLimitView>("Low"))
        @Raw(dataContext.AddCheckBoxField<DefaultAlarmRangeLimitView>("RangeInclusive"))
        @Raw(dataContext.AddCheckBoxField<DefaultAlarmRangeLimitView>("PerUnit"))
    </div>
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<DefaultAlarmRangeLimitView, DataHub>(ViewBag, "ID"))

        function truncate(string) {
            if (string != null && string.length > 25)
                string = string.slice(0, 23) + '...';
            return string;
        }
        
        function resetLimits(record) {
            var confirmation = confirm("You are about to reset all alarms based on this default type. Press OK to continue.");
            if (confirmation) {
                dataHub.resetDefaultLimits(record);
            }
        }
        
        $(viewModel).on("beforeSave", function (event, observableRecord) {
            observableRecord.PerUnit = ($('#checkPerUnit').prop('checked') ? 1 : 0);
            observableRecord.RangeInclusive = ($('#checkRangeInclusive').prop('checked') ? 1 : 0);
        });

    </script>
}
