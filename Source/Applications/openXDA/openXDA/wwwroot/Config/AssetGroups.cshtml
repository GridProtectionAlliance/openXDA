@*******************************************************************************************************
//  AssetGroups.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using GSF.Web
@using GSF.Security.Model
@using GSF.Web.Model
@using openXDA.Model
@using openXDA.Hubs
@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <link rel="stylesheet" href="/Content/fullscreenselect/bootstrap-fullscreen-select.css" />
    <style>


        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Config/Layout.cshtml";
    ViewBag.Title = "Asset Groups";
    HttpRequestMessage request = ViewBag.Request;

    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("AssetGroupID"))
    {
        ViewBag.AssetGroupID = parameters["AssetGroupID"];
    }
    else
    {
        ViewBag.AssetGroupID = "-1";
    }

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-Left" },
        new[] { null, "Asset Groups", "text-center valign-middle"},
        new[] { null, "Meters", "text-center valign-middle"},
        new[] { null, "Assets", "text-center valign-middle"},
        new[] {null, "Users", "text-center valign-middle"}
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.ShowSearchFilter = true;
    IEnumerable<Meter> meters = dataContext.Table<Meter>().QueryRecords().OrderBy(x => x.Name);
    IEnumerable<Line> lines = dataContext.Table<Line>().QueryRecords().OrderBy(x => x.AssetKey);
    IEnumerable<UserAccount> users = dataContext.Table<UserAccount>().QueryRecords().OrderBy(x => x.AccountName);
    IEnumerable<AssetGroup> assetGroups = dataContext.Table<AssetGroup>().QueryRecords().OrderBy(x => x.Name);

    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext, meters, lines, users).ToString();


}
@helper BodyRows()
{
    <td width="75%" class="text-left valign-middle" nowrap data-bind="text: Name"></td>
    <td width="5%" class="text-center valign-middle"><button type="button" id="newWindow" data-bind="click: openAssetGroups.bind($data), enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Asset Groups&nbsp;&nbsp;<span class="badge" data-bind="text: AssetGroups"></span></button></td>
    <td width="5%" class="text-center valign-middle"><button type="button" id="newWindow" data-bind="click: openMeters.bind($data), enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Meters&nbsp;&nbsp;<span class="badge" data-bind="text: Meters"></span></button></td>
    <td width="5%" class="text-center valign-middle"><button type="button" id="newWindow" data-bind="click: openLines.bind($data), enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Assets&nbsp;&nbsp;<span class="badge" data-bind="text: Assets"></span></button></td>
    <td width="5%" class="text-center valign-middle"><button type="button" id="userWindow" data-bind="click: openUsers.bind($data), enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Users&nbsp;&nbsp;<span class="badge" data-bind="text: Users"></span></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext, IEnumerable<Meter> meters, IEnumerable<Line> lines, IEnumerable<UserAccount> users)
{
    <div>
        @Raw(dataContext.AddInputField<AssetGroup>("Name"))
    </div>
    <div data-bind="visible: $parent.recordMode()!==RecordMode.View">
        <div id="assetGroupSelectFrame" class="form-group">
            <label>Asset Groups:</label>
            <select id="assetGroupSelect" class="form-control mobileSelect" multiple></select>
        </div>

        <div id="metersSelectFrame" class="form-group">
            <label>Meters:</label>
            <select id="meterSelect" class="form-control mobileSelect" multiple>
                @foreach(Meter meter in meters)
                {
                    <option value="@meter.ID">@meter.Name</option>
                }
            </select>
        </div>
        <div id="linesSelectFrame" class="form-group">
            <label>Lines:</label>
            <select id="lineSelect" class="form-control mobileSelect" multiple>
                @foreach(Line line in lines)
                {
                    <option value="@line.ID">@line.AssetKey</option>
                }
            </select>
        </div>
        <div id="userSelectFrame" class="form-group">
            <label>Users:</label>
            <select id="userSelect" class="form-control mobileSelect" multiple>
                @foreach(UserAccount user in users)
                {
                    <option value="@user.ID">@user.AccountName</option>
                }
            </select>
        </div>
    </div>
}
<div id="assetGroupsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body" style="overflow-y: hidden">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none; overflow-y: hidden" id="assetGroupsFrame" marginheight="0" marginwidth="0"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<div id="metersDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body" style="overflow-y: hidden">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none; overflow-y: hidden" id="metersFrame" marginheight="0" marginwidth="0"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
<div id="linesDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body" style="overflow-y: hidden">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none; overflow-y: hidden" id="linesFrame" marginheight="0" marginwidth="0"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
<div id="usersDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body" style="overflow-y: hidden">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none; overflow-y: hidden" id="usersFrame" marginheight="0" marginwidth="0"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script type="text/javascript" src="/Scripts/fullscreenselect/bootstrap-fullscreen-select.js"></script>
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<AssetGroup, DataHub>(ViewBag, null, null, ViewBag.AssetGroupID))

        function openAssetGroups(record) {
            //console.log(record);
            $("#assetGroupsFrame").attr({
                "src": "/Config/AssetGroupAssetGroupView.cshtml?GroupID=" + record.ID + "&Title=" + encodeURIComponent(record.Name),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
            });

            $("#assetGroupsDialog").modal("show");
        }



        function openMeters(record) {
            //console.log(record);
            $("#metersFrame").attr({
                "src": "/Config/MeterAssetGroupView.cshtml?GroupID=" + record.ID + "&Title=" + encodeURIComponent(record.Name),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
            });

            $("#metersDialog").modal("show");
        }

        function openLines(record) {
            //console.log(record);
            $("#linesFrame").attr({
                "src": "/Config/LineAssetGroupView.cshtml?GroupID=" + record.ID + "&Title=" + encodeURIComponent(record.Name),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
            });

            $("#linesDialog").modal("show");
        }

        function openUsers(record) {
            //console.log(record);
            $("#usersFrame").attr({
                "src": "/Config/UserAccountAssetGroupView.cshtml?GroupID=" + record.ID + "&Title=" + encodeURIComponent(record.Name),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
            });

            $("#usersDialog").modal("show");
        }

        $("#assetGroupsDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#assetGroupsFrame").attr("src", "about:blank");
        });


        $("#metersDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#metersFrame").attr("src", "about:blank");
        });

        $("#linesDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#linesFrame").attr("src", "about:blank");
        });

        $("#usersDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#usersFrame").attr("src", "about:blank");
        });

        $(window).resize(function () {
            setTimeout(function () {
                $("#assetGroupsFrame").attr("height", ($(document).height() - 150) + "px");
                $("#metersFrame").attr("height", ($(document).height() - 150) + "px");
                $("#linesFrame").attr("height", ($(document).height() - 150) + "px");
                $("#usersFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });

        var meters;
        var lines;
        var users;
        var assetGroups;

        $(viewModel).on('beforeSave', function (event, record) {
            assetGroups = ($('#assetGroupSelect').val() == null ? [] : $('#assetGroupSelect').val());
            meters = ($('#meterSelect').val() == null ? [] : $('#meterSelect').val());
            lines = ($('#lineSelect').val() == null ? [] : $('#lineSelect').val());
            users = ($('#userSelect').val() == null ? [] : $('#userSelect').val());
        });

        $(viewModel).on('recordSaved', function (event, record) {
            if (viewModel.dataHubIsConnected()) {
                if (record.ID == 0) {
                    dataHub.getLastAssetGroupID().done(function (id) {
                        dataHub.updateAssetGroups(assetGroups, id);
                        dataHub.updateMeters(meters, id);
                        dataHub.updateLines(lines, id);
                        dataHub.updateUsers(users, id).done(function () {
                            viewModel.queryPageRecords();
                        })
                    });
                }
                else {
                    dataHub.updateAssetGroups(assetGroups, record.ID);
                    dataHub.updateMeters(meters, record.ID);
                    dataHub.updateLines(lines, record.ID);
                    dataHub.updateUsers(users, record.ID).done(function () {
                        viewModel.queryPageRecords();
                    })

                }
            }
        });

        var mobileSelectOptions = {
            filterable: true,
            padding: {
                top: '5%',
                left: '15%',
                right: '15%',
                bottom: '5%'
            }
        };

        $('#addNewEditDialog').on('shown.bs.modal', function () {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryGroups(-1, "Name", true, 1, 10000000, null).done(function (assetGroups) {
                    $('#assetGroupSelect').children().remove();

                    $.each(assetGroups, function (i, d) {
                        $('#assetGroupSelect').append(new Option(d.Name, d.ID));
                    });

                    if (viewModel.recordMode() === RecordMode.Edit) {
                        dataHub.queryAssetGroupAssetGroupViews(viewModel.currentRecord().ID(), "ID", true, 1, 1000000, null).done(function (assetGroupsInGroup) {
                            $.each(assetGroupsInGroup, function (i, assetGroup) {
                                $('#assetGroupSelect').find('option[value="' + assetGroup.ChildAssetGroupID + '"]').attr('selected', true);
                            });

                            $('#assetGroupSelect').mobileSelect(mobileSelectOptions);
                            $('#assetGroupSelectFrame .btn-mobileSelect-gen').addClass('form-control');

                            $('#assetGroupSelectFrame .btn-mobileSelect-gen').off('click');
                            $('#assetGroupSelectFrame .btn-mobileSelect-gen').on('click', function (event) {
                                event.preventDefault();
                                $('#assetGroupSelect').mobileSelect('show');
                            });
                        });
                    }
                    else {
                        $('#assetGroupSelect').mobileSelect(mobileSelectOptions);
                        $('#assetGroupSelectFrame .btn-mobileSelect-gen').addClass('form-control');

                        $('#assetGroupSelectFrame .btn-mobileSelect-gen').off('click');
                        $('#assetGroupSelectFrame .btn-mobileSelect-gen').on('click', function (event) {
                            event.preventDefault();
                            $('#assetGroupSelect').mobileSelect('show');
                        });
                    }
                });

                if (viewModel.recordMode() === RecordMode.Edit) {
                    dataHub.queryGroupMeterViews(viewModel.currentRecord().ID(), "ID", true, 1, 1000000, null).done(function (metersInGroup) {
                        $.each(metersInGroup, function (i, meter) {
                            $('#meterSelect').find('option[value="' + meter.MeterID + '"]').attr('selected', true);
                        });

                        $('#meterSelect').mobileSelect(mobileSelectOptions);
                        $('#metersSelectFrame .btn-mobileSelect-gen').addClass('form-control');

                        $('#metersSelectFrame .btn-mobileSelect-gen').off('click');
                        $('#metersSelectFrame .btn-mobileSelect-gen').on('click', function (event) {
                            event.preventDefault();
                            $('#meterSelect').mobileSelect('show');
                        });
                    });
                }
                else {
                    $('#meterSelect').mobileSelect(mobileSelectOptions);
                    $('#metersSelectFrame .btn-mobileSelect-gen').addClass('form-control');

                    $('#metersSelectFrame .btn-mobileSelect-gen').off('click');
                    $('#metersSelectFrame .btn-mobileSelect-gen').on('click', function (event) {
                        event.preventDefault();
                        $('#meterSelect').mobileSelect('show');
                    });
                }

                if (viewModel.recordMode() === RecordMode.Edit) {
                    dataHub.queryLineAssetGroupViews(viewModel.currentRecord().ID(), "ID", true, 1, 1000000, null).done(function (linesInGroup) {
                        $.each(linesInGroup, function (i, line) {
                            $('#lineSelect').find('option[value="' + line.LineID + '"]').attr('selected', true);
                        });

                        $('#lineSelect').mobileSelect(mobileSelectOptions);
                        $('#linesSelectFrame .btn-mobileSelect-gen').addClass('form-control');

                        $('#linesSelectFrame .btn-mobileSelect-gen').off('click');
                        $('#linesSelectFrame .btn-mobileSelect-gen').on('click', function (event) {
                            event.preventDefault();
                            $('#lineSelect').mobileSelect('show');
                        });
                    });
                }
                else {
                    $('#lineSelect').mobileSelect(mobileSelectOptions);
                    $('#linesSelectFrame .btn-mobileSelect-gen').addClass('form-control');

                    $('#linesSelectFrame .btn-mobileSelect-gen').off('click');
                    $('#linesSelectFrame .btn-mobileSelect-gen').on('click', function (event) {
                        event.preventDefault();
                        $('#lineSelect').mobileSelect('show');
                    });
                }

                if (viewModel.recordMode() === RecordMode.Edit) {
                    dataHub.queryUserAccountAssetGroups(viewModel.currentRecord().ID(), "ID", true, 1, 1000000, null).done(function (usersInGroup) {
                        $.each(usersInGroup, function (i, user) {
                            $('#userSelect').find('option[value="' + user.UserAccountID + '"]').attr('selected', true);
                        });

                        $('#userSelect').mobileSelect(mobileSelectOptions);
                        $('#userSelectFrame .btn-mobileSelect-gen').addClass('form-control');

                        $('#userSelectFrame .btn-mobileSelect-gen').off('click');
                        $('#userSelectFrame .btn-mobileSelect-gen').on('click', function (event) {
                            event.preventDefault();
                            $('#userSelect').mobileSelect('refresh');
                            $('#userSelect').mobileSelect('show');
                        });
                    });
                }
                else {
                    $('#userSelect').mobileSelect(mobileSelectOptions);
                    $('#userSelectFrame .btn-mobileSelect-gen').addClass('form-control');

                    $('#userSelectFrame .btn-mobileSelect-gen').off('click');
                    $('#userSelectFrame .btn-mobileSelect-gen').on('click', function (event) {
                        event.preventDefault();
                        $('#userSelect').mobileSelect('refresh');
                        $('#userSelect').mobileSelect('show');
                    });
                }
            }
        });

        $(function () {
            viewModel.queryPageRecords();
            $("#metersDialog").modal({ show: false, backdrop: "static", keyboard: false });
            $("#linesDialog").modal({ show: false, backdrop: "static", keyboard: false });
            $("#usersDialog").modal({ show: false, backdrop: "static", keyboard: false });

        });
    </script>
}
