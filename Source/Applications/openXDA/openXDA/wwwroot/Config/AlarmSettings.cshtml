@*******************************************************************************************************
//  DashSettings.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using System.Text.RegularExpressions
@using GSF.Web

@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <link href="/Content/fileinput.css" rel="stylesheet">
    <style>
        html, body {
            height: 100%;
        }

        .modal-backdrop {
            z-index: 950;
        }
        .modal {
            z-index: 951;
            top: 10%;
        }

        .ui-autocomplete {
            width: 100%;
            height: 100%;
        }

        #channelnamediv {
            padding: 0;
            border: none;
        }

        #channelname {
            height: 100%;
            width: 100%;
        }

        .ui-autocomplete button {
            right: 0;
            border: 1px solid #cccccc;
        }
    </style>
}

@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Config/Layout.cshtml";
    ViewBag.Title = "Alarm Limit Settings";
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();
    ViewBag.meterID = -1;
    ViewBag.lineID = -1;
    string lineKey = "";
    if (parameters.ContainsKey("MeterID"))
    {
        ViewBag.meterID = int.Parse(parameters["MeterID"] ?? "-1");
    }
    if (parameters.ContainsKey("LineID"))
    {
        ViewBag.lineID = int.Parse(parameters["LineID"] ?? "-1");
    }
    if (parameters.ContainsKey("Title"))
    {
        lineKey = parameters["Title"];
    }


    ViewBag.CustomHeader = (lineKey == "" ? null :"Alarms for <a href=\"/Config/Lines.cshtml?LineID=" + ViewBag.lineID + "\">" + lineKey + "</a>");
    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { "ChannelID", "Channel ID", "text-left"},
        new[] { "MeterName", "Meter Name", "text-left"},
        new[] { "Name", "Channel Name", "text-left" },
        new[] { "MeasurementType", "Meas Type", "text-left"},
        new[] { "MeasurementCharacteristic", "Meas Char", "text-left"},
        new[] { "Phase", "PH", "text-left"},
        new[] { "HarmonicGroup", "HG", "text-left"},
        new[] { "High", "High", "text-left" },
        new[] { "Low", "Low", "text-left" },
        new[] { "IsDefault", "Custom Limits", "text-left" },
        //new[] { "RangeInclusive", "Severity", "text-left" },
        //new[] { "DefaultValue", "Default Value", "text-center" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();



}

@helper Filters()
{
    <div class='row'>
        <div class='col-md-3'>
            <div class='form-group'>
                <label for='meterfilter'>Meter Name Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='meterfilter' placeholder='Search' />
                </div>
            </div>
        </div>
        <div class='col-md-3'>
            <div class='form-group'>
                <label for='channelfilter'>Channel Name Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='channelfilter' placeholder='Search'/>
                </div>
            </div>
        </div>
        <div class='col-md-3'>
            <div class='form-group'>
                <label for='typefilter'>Measurement Type Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='typefilter' placeholder='Search'/>
                </div>
            </div>
        </div>
        <div class='col-md-3'>
            <div class='form-group'>
                <label for='characteristicfilter'>Measurement Characteristic Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='characteristicfilter' placeholder='Search'/>
                </div>
            </div>
        </div>
    </div>
}


@helper BodyRows()
{
    <td width="5%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: ChannelID, click: $parent.viewPageRecord"></button></td>
    <td width="10%" class="text-left valign-middle" data-bind="text: MeterName"></td>
    <td width="25%" class="text-left valign-middle" data-bind="text: truncate(Name, 20)"></td>
    <td width="10%" class="text-left valign-middle" data-bind="text: MeasurementType"></td>
    <td width="10%" class="text-left valign-middle" data-bind="text: MeasurementCharacteristic"></td>
    <td width="5%" class="text-left valign-middle" data-bind="text: Phase"></td>
    <td width="5%" class="text-left valign-middle" data-bind="text: HarmonicGroup"></td>
    <td width="5%" class="text-left valign-middle" data-bind="text: High"></td>
    <td width="5%" class="text-left valign-middle" data-bind="text: Low"></td>
    <td width="5%" class="text-left valign-middle" style="text-align: center"><span data-bind="visible: !(IsDefault)" class="glyphicon glyphicon-check"></span></td>
    <td width="15%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" title="Generate Smart Alarm Limits" data-bind="click: smartLimits.bind($data), enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-stats"></span></button>
        <button type="button" class="btn btn-xs" title="Reset to Default Limits" data-bind="click: resetLimits.bind($data), enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-repeat"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-6" data-bind="visible: $parent.recordMode()==RecordMode.View || $parent.recordMode()==RecordMode.Edit">
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("ChannelID", customDataBinding: "enable: false"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("MeterName", customDataBinding: "enable: false"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("Name", customDataBinding: "enable: false"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("MeasurementType", customDataBinding: "enable: false"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("MeasurementCharacteristic", customDataBinding: "enable: false"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("Phase", customDataBinding: "enable: false"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("HarmonicGroup", customDataBinding: "enable: false"))
    </div>
    <div class="col-md-6" data-bind="visible: $parent.recordMode()==RecordMode.AddNew ">
        @*@Raw(dataContext.AddInputField<AlarmRangeLimitView>("ChannelID"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("Name", customDataBinding: "enable: false"))*@
        <label for="channelid">Channel ID:</label>
        <div id="channelid" class="form-control readonly inputtext"></div>
        @Raw(dataContext.AddSelectField<AlarmRangeLimitView, Meter>("MeterID", "ID", "Name"))
        <label for="channelname">Channel Name:</label>
        <div id="channelnamediv" class="form-control">
            @*<button type="button" class="ui-autocomplete-dropdown ui-button ui-widget ui-state-default ui-corner-right ui-button-icon-only">
                <span class="fa fa-fw fa-caret-down"></span>
            </button>*@
            <input id="channelname"  autocomplete="off" />
            @*<input id="hidden" style="display: none" autocomplete="off"/>*@
        </div>
        <label for="meastype">Measurement Type: </label>
        <div id="meastype" class="form-control readonly inputtext"></div>
        <label for="measchar">Measurement Characteristic: </label>
        <div id="measchar" class="form-control readonly inputtext"></div>
        <label for="phase">Phase: </label>
        <div id="phase" class="form-control readonly inputtext"></div>
        <label for="harmonicgroup">Harmonic Group: </label>
        <div id="harmonicgroup" class="form-control readonly inputtext"></div>
        @*@Raw(dataContext.AddSelectField<AlarmRangeLimitView, MeasurementCharacteristic>("MeasurementCharacteristic", "ID", "Name"))
        @Raw(dataContext.AddSelectField<AlarmRangeLimitView, Phase>("Phase", "ID", "Name"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("HarmonicGroup"))
        @Raw(dataContext.AddSelectField<AlarmRangeLimitView, MeasurementType>("MeasurementTypeID", "ID", "Name"))*@
    </div>

    <div class="col-md-6">
        @Raw(dataContext.AddSelectField<AlarmRangeLimitView, AlarmType>("AlarmTypeID", "ID", "Name"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("Severity"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("High", "number"))
        @Raw(dataContext.AddInputField<AlarmRangeLimitView>("Low"))
        @Raw(dataContext.AddCheckBoxField<AlarmRangeLimitView>("RangeInclusive"))
        @Raw(dataContext.AddCheckBoxField<AlarmRangeLimitView>("PerUnit"))
        @Raw(dataContext.AddCheckBoxField<AlarmRangeLimitView>("Enabled"))
        @Raw(dataContext.AddCheckBoxField<AlarmRangeLimitView>("IsDefault", fieldLabel: "Use Default Values"))
    </div>

}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
<form id="uploadCSVFile" action="AlarmRangeLimitCSVUploadHandler.ashx" method="post" enctype="multipart/form-data" style="display: none">
    <input id="importCSVFile" name="importCSVFile" type="file" accept=".csv" multiple>
    <input type="submit"/>
</form>

<!-- Modal -->
<div id="smartAlarmsModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Smart Alarm Settings</h4>
            </div>
            <div class="modal-body">
                <p>Use this screen to calculate and apply smart alarm limits.  You can choose the number of standard deviations to use and whether you want to include zero values in the calculation.</p>
                <div class="row">
                    <div class="col-md-5">
                        <label>Start Date</label>
                        <div class="input-group date">
                            <input id="startDate" type="text" class="form-control">
                            <div class="input-group-addon">
                                <span class="glyphicon glyphicon-th"></span>
                            </div>
                        </div>
                        <label>Sigma Level</label>
                        <select class="form-control" id="sigmaValue">
                            <option value="6">6 (99.9999998%)</option>
                            <option value="5">5 (99.99994%)</option>
                            <option value="4">4 (99.994%)</option>
                            <option value="3">3 (99.7%)</option>
                            <option value="2">2 (95%)</option>
                            <option value="1" selected="selected">1 (68%)</option>
                        </select>

                    </div>
                    <div class="col-md-5">
                        <label> End Date</label>
                        <div class="input-group date">
                            <input id="endDate" type="text" class="form-control">
                            <div class="input-group-addon">
                                <span class="glyphicon glyphicon-th"></span>
                            </div>
                        </div>
                        <div style="float: left">
                            <div class="input-group">
                                <label>Decimals in Result</label>
                                <select class="form-control" id="significance">
                                    <option>9</option>
                                    <option>8</option>
                                    <option>7</option>
                                    <option>6</option>
                                    <option>5</option>
                                    <option selected="selected">4</option>
                                    <option>3</option>
                                    <option>2</option>
                                    <option>1</option>
                                    <option>0</option>
                                </select>
                            </div>
                        </div>
                        <div class="checkbox" style="margin-left: 60%">
                            <label><input type="checkbox" id="zeroValues" class="" checked="checked" />Ignore Zero Values</label>
                        </div>

                    </div>
                    <div class="col-md-1">
                        <br/>
                        <button class="btn btn-primary" onclick="getTrendingData()">Calculate</button>
                    </div>

                </div>
                <div class="row">
                    <div id="alert" class="alert alert-danger fade in" style="margin: 5px; display: none" >
                        @*<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>*@
                        <strong>Warning!!!</strong> No records found...
                    </div>
                    <div id="smartAlarmsWindow" style="display: block">
                        <div id="flotchart" style="height: 200px"></div>
                    </div>
                    <div class="col-md-5">
                        <label>Upper Limit</label>
                        <input id="upperLimit" type="text" class="form-control">
                    </div>

                    <div class="col-md-5">
                        <label>Lower Limit</label>
                        <input id="lowerLimit" type="text" class="form-control">
                    </div>
                    <div class="col-md-1">
                        <br/>
                        <button class="btn btn-primary" data-dismiss="modal" onclick="applyLimits()">Apply Limits</button>
                    </div>

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
@section Scripts
{
    <script language="javascript" type="text/javascript" src="/Scripts/flot/jquery.flot.js"></script>
    <script language="javascript" type="text/javascript" src="/Scripts/flot/jquery.flot.time.js"></script>
    <script language="javascript" type="text/javascript" src="/Scripts/spin.js"></script>
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<AlarmRangeLimitView, DataHub>(ViewBag, "ID", null, ViewBag.meterID, ViewBag.lineID))
        @Raw(Model.RenderAbstract<MeasurementType>("Name", "ID", "renderMeasurementTypeName", "measurementTypeName"))
        @Raw(Model.RenderAbstract<MeasurementCharacteristic>("Name", "ID", "renderMeasurementCharacteristicName", "measurementCharacteristicName"))
        @Raw(Model.RenderAbstract<Phase>("Name", "ID", "renderPhaseName", "phaseName"))
        var plot;

        function truncate(string, num) {
            if (string != null && string.length > num)
                string = string.slice(0, num - 3) + '...';
            return string;
        }

        function resetLimits(record) {
            dataHub.resetAlarmToDefault(record).
                done(function() {
                    if ($('#channelfilter').val().length + $('#typefilter').val().length + $('#characteristicfilter').val().length == 0) {
                        viewModel.filterText = '%';
                        viewModel.queryPageRecords();
                    } else {
                        viewModel.filterText = $('#channelfilter').val() + ';' + $('#typefilter').val() + ';' + $('#characteristicfilter').val();
                        viewModel.queryPageRecords();

                    }


                });
        }
        
        var currentRecord;
        function smartLimits(record) {
            $('#sigmaValue').val("1");
            $('#startDate').val("");
            $('#endDate').val("");
            if (plot)
                plot.destroy();
            $('#alert').css('display', 'none');
            $('#upperLimit').val("");
            $('#lowerLimit').val("");
            $('#zeroValues').prop('checked', true);
            $('#smartAlarmsModal').modal('show');
            $('#smartAlarmsModal .modal-title').text($('#smartAlarmsModal .modal-title').text() + ' - Channel: ' + record.ChannelID + ' - ' + record.Name);
            currentRecord = record;
        }
        
        function getTrendingData() {
            $('#flotchart').width($('#smartAlarmsModal .modal-body').width() - 30);
            var opts = {
                lines: 9 // The number of lines to draw
            , length: 24 // The length of each line
            , width: 18 // The line thickness
            , radius: 42 // The radius of the inner circle
            , scale: 1 // Scales overall size of the spinner
            , corners: 1 // Corner roundness (0..1)
            , color: '#000' // #rgb or #rrggbb or array of colors
            , opacity: 0.05 // Opacity of the lines
            , rotate: 9 // The rotation offset
            , direction: 1 // 1: clockwise, -1: counterclockwise
            , speed: 1 // Rounds per second
            , trail: 60 // Afterglow percentage
            , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
            , zIndex: 2e9 // The z-index (defaults to 2000000000)
            , className: 'spinner' // The CSS class to assign to the spinner
            , top: '50%' // Top position relative to parent
            , left: '50%' // Left position relative to parent
            , shadow: false // Whether to render a shadow
            , hwaccel: false // Whether to use hardware acceleration
            , position: 'absolute' // Element positioning
            };

            var target = document.getElementById('smartAlarmsModal');
            var spinner = new Spinner(opts).spin(target);

            dataHub.getTrendingData($('#startDate').val(), $('#endDate').val(), currentRecord.ChannelID).done(function (data) {
                if (data.length === 0) {
                    $('#alert').css('display', 'block');
                    spinner.stop();
                } else {
                    $('#alert').css('display', 'none');

                    var maxes = [];
                    var mins = [];
                    var averages = { data: [], color: "#000080" };
                    var dataPoints = [];
                    var startDate = new Date(data[0].Time);
                    var endDate = new Date(data[data.length - 1].Time);
                    var flotOptions = {
                        xaxis: {
                            mode: "time",
                            timeformat: "%m/%d/%Y",
                            minTickSize: [1, "day"]
                        }
                    };

                    $.each(data, function (i, d) {
                        if (d.SeriesType === "Average") {
                            averages.data.push([new Date(d.Time), d.Value]);
                            if (!$('#zeroValues').is(":checked") || d.Value != 0)
                                dataPoints.push(d.Value);
                        }
                        //else if (d.SeriesType === "Minimum")
                        //    mins.push([i,d.Value]);
                        //else if (d.SeriesType === "Maximum")
                        //    maxes.push([i,d.Value]);
                    });

                    var averageValue = average(dataPoints);
                    var minusonesigma = { data: [[startDate, averageValue.mean - averageValue.deviation], [endDate, averageValue.mean - averageValue.deviation]], lines: { lineWidth: 1 }, color: "red" };
                    var plusonesigma = { data: [[startDate, averageValue.mean + averageValue.deviation], [endDate, averageValue.mean + averageValue.deviation]], lines: { lineWidth: 1 }, color: "red" };
                    var minustwosigma = { data: [[startDate, averageValue.mean - averageValue.deviation * 2], [endDate, averageValue.mean - averageValue.deviation * 2]], lines: { lineWidth: 1 }, color: "red" };
                    var plustwosigma = { data: [[startDate, averageValue.mean + averageValue.deviation * 2], [endDate, averageValue.mean + averageValue.deviation * 2]], lines: { lineWidth: 1 }, color: "red" };
                    var minusthreesigma = { data: [[startDate, averageValue.mean - averageValue.deviation * 3], [endDate, averageValue.mean - averageValue.deviation * 3]], lines: { lineWidth: 1 }, color: "red" };
                    var plusthreesigma = { data: [[startDate, averageValue.mean + averageValue.deviation * 3], [endDate, averageValue.mean + averageValue.deviation * 3]], lines: { lineWidth: 1 }, color: "red" };
                    var minusfoursigma = { data: [[startDate, averageValue.mean - averageValue.deviation * 4], [endDate, averageValue.mean - averageValue.deviation * 4]], lines: { lineWidth: 1 }, color: "red" };
                    var plusfoursigma = { data: [[startDate, averageValue.mean + averageValue.deviation * 4], [endDate, averageValue.mean + averageValue.deviation * 4]], lines: { lineWidth: 1 }, color: "red" };
                    var minusfivesigma = { data: [[startDate, averageValue.mean - averageValue.deviation * 5], [endDate, averageValue.mean - averageValue.deviation * 5]], lines: { lineWidth: 1 }, color: "red" };
                    var plusfivesigma = { data: [[startDate, averageValue.mean + averageValue.deviation * 5], [endDate, averageValue.mean + averageValue.deviation * 5]], lines: { lineWidth: 1 }, color: "red" };
                    var minussixsigma = { data: [[startDate, averageValue.mean - averageValue.deviation * 6], [endDate, averageValue.mean - averageValue.deviation * 6]], lines: { lineWidth: 1 }, color: "red" };
                    var plussixsigma = { data: [[startDate, averageValue.mean + averageValue.deviation * 6], [endDate, averageValue.mean + averageValue.deviation * 6]], lines: { lineWidth: 1 }, color: "red" };

                    displayLimits();
                    //plot = $.plot("#flotchart", [ minusonesigma, averages, plusonesigma ], flotOptions);
                    $('#sigmaValue').on('change', function (event) {
                        displayLimits();
                        plot.setupGrid();
                        plot.draw();
                        

                    });
                    
                    $('#significance').on('change', function (event) {
                        displayLimits();
                        plot.setupGrid();
                        plot.draw();

                    });

                    spinner.stop();
                    //$('#smartAlarmsWindow').toggle();
                    
                    function displayLimits() {
                        if ($('#sigmaValue').val() == 6) {
                            plot = $.plot("#flotchart", [minussixsigma, averages, plussixsigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation * 6).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation * 6).toFixed($('#significance').val()));
                        } else if ($('#sigmaValue').val() == 5) {
                            plot = $.plot("#flotchart", [minusfivesigma, averages, plusfivesigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation * 5).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation * 5).toFixed($('#significance').val()));
                        } else if ($('#sigmaValue').val() == 4) {
                            plot = $.plot("#flotchart", [minusfoursigma, averages, plusfoursigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation * 4).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation * 4).toFixed($('#significance').val()));
                        } else if ($('#sigmaValue').val() == 3) {
                            plot = $.plot("#flotchart", [minusthreesigma, averages, plusthreesigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation * 3).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation * 3).toFixed($('#significance').val()));
                        } else if ($('#sigmaValue').val() == 2) {
                            plot = $.plot("#flotchart", [minustwosigma, averages, plustwosigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation * 2).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation * 2).toFixed($('#significance').val()));
                        } else if ($('#sigmaValue').val() == 1) {
                            plot = $.plot("#flotchart", [minusonesigma, averages, plusonesigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation).toFixed($('#significance').val()));
                        } else {
                            plot = $.plot("#flotchart", [minusonesigma, averages, plusonesigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation).toFixed($('#significance').val()));
                        }

                    }

                }
            });
        }
        
        function applyLimits() {
            currentRecord.High = $('#upperLimit').val();
            currentRecord.Low = $('#lowerLimit').val();
            currentRecord.IsDefault = false;
            dataHub.updateAlarmRangeLimitView(currentRecord).done(function () {
                viewModel.queryPageRecords();
            });
        }

        average = function (a) {
            var r = { mean: 0, variance: 0, deviation: 0 }, t = a.length;
            for (var m, s = 0, l = t; l--; s += a[l]);
            for (m = r.mean = s / t, l = t, s = 0; l--; s += Math.pow(a[l] - m, 2));
            return r.deviation = Math.sqrt(r.variance = s / t), r;
        }

        $(function() {

            $("#pageHeader").append("@Raw(Regex.Replace(Filters().ToString(), @"\r|\n", ""))");

            $('#pageControlsRow').prepend('<button class="btn btn-sm btn-primary" onclick="importCSV()" id="importBtn"><span class="glyphicon glyphicon-upload"></span>&nbsp;&nbsp;Import&nbsp;CSV</button>');
            
            $('.date').datepicker({
                format: 'mm/dd/yyyy',
                autoClose: true,
                orientation: 'bottom'
            });


            $('#pageControlsRow').prepend('<input type="file" id="fileInput" accept=".csv, text/csv " style="display: none"/>');
                        
            $("input[id*=filter]").on('keyup', function (e) {
                if ($('#meterfilter').val().length + $('#channelfilter').val().length + $('#typefilter').val().length + $('#characteristicfilter').val().length == 0) {
                    viewModel.filterText = '%';
                    viewModel.queryPageRecords();
                } else {
                    viewModel.filterText = $('#meterfilter').val() + ';' + $('#channelfilter').val() + ';' + $('#typefilter').val() + ';' + $('#characteristicfilter').val();
                    viewModel.queryPageRecords();

                }
            });


            $(viewModel).on("beforeSave", function (event, observableRecord) {
                if (viewModel.recordMode() == RecordMode.AddNew) {
                    observableRecord.ChannelID = $('#channelid').text();
                    observableRecord.MeasurementTypeID = measurementTypeName.indexOf($('#meastype').text());
                    observableRecord.MeasurementCharacteristicID = measurementCharacteristicName.indexOf($('#measchar').text());
                }
                observableRecord.Enabled = ($('#checkEnabled').prop('checked') ? 1 : 0);
                observableRecord.PerUnit = ($('#checkPerUnit').prop('checked') ? 1 : 0);
                observableRecord.RangeInclusive = ($('#checkRangeInclusive').prop('checked') ? 1 : 0);
                observableRecord.IsDefault = false;

            });

            $("#addNewEditDialog").on("shown.bs.modal", function () {

                if (viewModel.recordMode() == RecordMode.AddNew) {
                    $('#channelname').puiautocomplete({
                        dropdown: true,
                        completeSource: function (request, response) {
                            var that = this;
                            dataHub.queryChannelsForDropDown($("#channelname").val() + '%', $('#selectMeterID').val()).done(function (data) {
                                response.call(that, data);
                            });
                        },
                        content: function (data) {
                            return '<span id="' + data.ID + '" title="MT: ' + renderMeasurementTypeName(data.MeasurementTypeID) + ', MC: ' + renderMeasurementCharacteristicName(data.MeasurementCharacteristicID) + ', PH: ' + renderPhaseName(data.PhaseID) + ', HG: ' + data.HarmonicGroup + '" value="' + data.MeasurementTypeID + ';' + data.MeasurementCharacteristicID + ';' + data.PhaseID + ';' + data.HarmonicGroup + '">' + data.Name + '</span>';
                        },
                        select: function (event, item) {
                            $('#channelname').val(item[0].innerText);
                            $('#channelid').text($(item[0].innerHTML)[0].attributes.id.value);
                            var list = $(item[0].innerHTML)[0].attributes.value.value.split(';');
                            $('#meastype').text(renderMeasurementTypeName(list[0]));
                            $('#measchar').text(renderMeasurementCharacteristicName(list[1]));
                            $('#phase').text(renderPhaseName(list[2]));
                            $('#harmonicgroup').text(list[3]);
                        }
                    });

                    $('.ui-autocomplete button').removeClass("ui-button ui-widget ui-state-default ui-corner-right");
                    $('.ui-autocomplete button').addClass("ui-state-hover");
                    
                    $('#selectMeterID').on("change", function (event) {
                        $('#channelname').val("");
                    });

                }
            });
            

            $("#importCSVFile").on("change", function (event) {
                $("#uploadCSVFile").submit();
            });


        });
    </script>
}