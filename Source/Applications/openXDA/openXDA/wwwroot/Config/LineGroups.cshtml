@*******************************************************************************************************
//  Settings.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Collections.Generic
@using System.Net.Http
@using System.Security.Policy
@using System.Threading
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <link rel="stylesheet" href="/Content/fullscreenselect/bootstrap-fullscreen-select.css"/>
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Config/Layout.cshtml";
    ViewBag.Title = "Line Groups";
    HttpRequestMessage request = ViewBag.Request;

    Dictionary<string, string> parameters = request.QueryParameters();
    ViewBag.ShowSearchFilter = true;

    if (parameters.ContainsKey("LineGroupID"))
    {
        ViewBag.LineGroupID = parameters["LineGroupID"];
    }
    else
    {
        ViewBag.LineGroupID = '%';
    }


    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-Left" },
        new[] { null, "Lines", "text-center valign-middle"}

    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
}
@helper BodyRows()
{
    <td width="80%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Name, click: $parent.viewPageRecord"></button></td>
    <td width="5%" class="text-center valign-middle"><button type="button" id="newWindow" data-bind="click: openLines.bind($data), enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Lines&nbsp;&nbsp;<span class="badge" data-bind="text: getLineCount(ID, $($element)), attr: {id: 'meterCount' + ID}">0</span></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div>
        @Raw(dataContext.AddInputField<MeterGroup>("Name"))
    </div>
    <div data-bind="visible: $parent.recordMode()!==RecordMode.View">
        <div id="linesSelectFrame" class="form-group">
            <label>Lines:</label>
            <select id="linesSelect" class="form-control mobileSelect" multiple></select>
        </div>
    </div>
}
<div id="linesDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body" style="overflow-y: hidden">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none; overflow-y: hidden" id="linesFrame" marginheight="0" marginwidth="0"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script type="text/javascript" src="/Scripts/fullscreenselect/bootstrap-fullscreen-select.js"></script>
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<LineGroup, DataHub>(ViewBag))
                
        function getLineCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryLineLineGroupViewCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }
        
        function openLines(record) {
            //console.log(record);
            $("#linesFrame").attr({
                "src": "/Config/LineLineGroupView.cshtml?GroupID=" + record.ID + "&Title=" + encodeURIComponent(record.Name),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
            });
            
            $("#linesDialog").modal("show");
        }
        
        $("#linesDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#linesFrame").attr("src", "about:blank");
        });
        
        $(window).resize(function () {
            setTimeout(function () {
                $("#linesFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });
        
        var lines;
        $(viewModel).on('beforeSave', function (event, record) {
            lines = ($('#linesFrame').val() == null ? [] : $('#linesSelect').val());
        });

        $(viewModel).on('recordSaved', function (event, record) {
            if (viewModel.dataHubIsConnected()) {
                if (record.ID == 0) {
                    dataHub.getLastLineGroupID().done(function (id) {
                        dataHub.updateLines(lines, id).done(function () {
                            viewModel.queryPageRecords();
                        });
                    });
                }
                else {
                    dataHub.updateLines(lines, record.ID).done(function () {
                        viewModel.queryPageRecords();
                    })

                }
            }
        });
        
        $('#addNewEditDialog').on('shown.bs.modal', function () {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryLines("AssetKey", true, 1, 10000000, null).done(function (lines) {
                    
                    $('#linesSelect').children().remove();
                    $.each(lines, function (i, l) {
                        $('#linesSelect').append(new Option(l.AssetKey, l.ID));
                    });


                    var mobileSelectOptions = {
                        filterable: true,
                        padding: {
                            top: '5%',
                            left: '15%',
                            right: '15%',
                            bottom: '5%'
                        }
                    };

                    if (viewModel.recordMode() === RecordMode.Edit) {
                        dataHub.queryLineLineGroupViews(viewModel.currentRecord().ID(), "ID", true, 1, 1000000, null).done(function (linesInGroup) {

                            $.each(linesInGroup, function (i, line) {
                                $('#linesSelect').find('option[value="' + line.LineID + '"]').attr('selected', true);
                            });
                            $('#linesSelect').mobileSelect(mobileSelectOptions);
                            $('#linesSelectFrame .btn-mobileSelect-gen').addClass('form-control');

                            $('#linesSelectFrame .btn-mobileSelect-gen').off('click');
                            $('#linesSelectFrame .btn-mobileSelect-gen').on('click', function (event) {
                                event.preventDefault();
                                $('#linesSelect').mobileSelect('show');
                            });

                        });
                    }
                    else {
                        $('#linesSelect').mobileSelect(mobileSelectOptions);
                        $('#linesSelectFrame .btn-mobileSelect-gen').addClass('form-control');

                        $('#linesSelectFrame .btn-mobileSelect-gen').off('click');
                        $('#linesSelectFrame .btn-mobileSelect-gen').on('click', function (event) {
                            event.preventDefault();
                            $('#linesSelect').mobileSelect('show');
                        });

                    }

                });

            }
        });
        
        $('#addNewEditDialog').on('hidden.bs.modal', function () {
            if ($('#linesSelect').mobileSelect('exists'))
                $('#linesSelect').mobileSelect('destroy');
        });

        $(function () {
            viewModel.filterText = '@ViewBag.MeterGroupID';
            viewModel.queryPageRecords();
            $("#linesDialog").modal({ show: false, backdrop: "static", keyboard: false });

        });
    </script>
}
