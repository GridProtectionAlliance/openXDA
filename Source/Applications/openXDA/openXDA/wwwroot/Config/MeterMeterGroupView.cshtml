@*******************************************************************************************************
//  Settings.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Collections.Generic
@using System.Net.Http
@using System.Threading
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();
    int groupID = int.Parse(parameters["GroupID"] ?? "-1");
    string title = parameters["Title"];

    Layout = "Config/Layout.cshtml";
    ViewBag.Title = "Meters in " + title;
    ViewBag.ShowMenu = false;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "MeterName", "Meter Name", "text-Left" },
        new[] { "Location", "Site", "text-left"}
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
}
@helper BodyRows()
{
    <td width="20%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: MeterName, click: $parent.viewPageRecord"></button></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: Location"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<MeterMeterGroupView>("MeterName"))
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts 
{
    <script src="@("/@GSF/Web/Model/Scripts/gsf.web.primeui.js")"></script>
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<MeterMeterGroup, DataHub>(ViewBag, "ID", null, groupID))
        
        $(viewModel).on("beforeSave", function (event, observableRecord) {
            observableRecord.MeterGroupID = @groupID;
        });
        
        $(function(){
            $("#addNewEditDialog").on("shown.bs.modal", function () {
                if (viewModel.dataHubIsConnected()) {
                    function searchMeters(searchText, limit) {
                        return dataHub.searchMetersByGroup(@groupID, searchText, limit);
                    }

                    initializeAutoCompleteLookupField("MeterName", searchMeters, false);

                    $('#inputMeterName').puiautocomplete({
                        select: function (event, item) {
                            var id = Number(item.data("id"));
                            viewModel.currentRecord().MeterID(id);
                        }
                    });
                }
            });

            $('#bodyContainer').removeClass("container theme-showcase");
            $('body').css({'paddingTop': '0px', 'overflow-y': 'hidden'});
        });
    </script>
}