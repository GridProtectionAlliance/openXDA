@*//******************************************************************************************************
    //  EventEmailConfiguration.cshtml - Gbtc
    //
    //  Copyright © 2018, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  07/26/2018 - Billy Ernest
    //       Generated original version of source code.
    //
    //*******************************************************************************************************@

@using System
@using System.Threading
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Config/Layout.cshtml";
    ViewBag.Title = "Event Email Configuration";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
new[] { "Name", "Name", "text-left" },
new[] { "SMS", "SMS", "text-left" },
new[] { "MinDelay", "Min Delay", "text-left" },
new[] { "MaxDelay", "Max Delay", "text-center" }
};

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.HideAddNewButton = false;
    ViewBag.ShowSearchFilter = true;

}
@helper BodyRows()
    {
        <td width="30%" class="text-left valign-middle" nowrap><a target="_blank" data-bind="text: Name, attr: {href: './EditEventEmailParameters.cshtml?ID=' + ID +'&Name=' + Name}"></a></td>
        <td width="30%" class="text-left valign-middle" data-bind="text: SMS"></td>
        <td width="30%" class="text-left valign-middle" data-bind="text: MinDelay"></td>
        <td width="30%" class="text-center valign-middle" data-bind="text: MaxDelay"></td>

        <td width="10%" class="text-center valign-middle" nowrap>
            <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
            <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
        </td>
}
@helper AddNewEditDialog(DataContext dataContext)
    {
        @Raw(dataContext.AddInputField("Name", true, fieldLabel: "Name"))
        @Raw(dataContext.AddInputField("MinDelay", false, fieldLabel: "Minimum Delay (seconds)"))
        @Raw(dataContext.AddInputField("MaxDelay", false, fieldLabel: "Maximum Delay (seconds)"))
        @Raw(dataContext.AddCheckBoxField("SMS", "Is SMS"))
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<EventEmailParameters, DataHub>(ViewBag))
    </script>
}
