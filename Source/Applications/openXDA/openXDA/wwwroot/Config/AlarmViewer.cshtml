@*//******************************************************************************************************
//  AlarmViewer.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  10/28/2016 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@

@using System.Data
@using System.Net.Http
@using openXDA.Model
@using System.Data;
@using System.Collections.Generic;
@using System.Linq
@using GSF.Web
@using GSF.Web.Model
@using Newtonsoft.Json
@using openHistorian.XDALink;

@inherits ExtendedTemplateBase<AppModel>

@{
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    int channelId = 0;
    double normalHighLimit = 0;
    double normalLowLimit = 0;
    IEnumerable<Tuple<int, double>> hourlyHighLimits = new List<Tuple<int, double>>();
    IEnumerable<Tuple<int, double>> hourlyLowLimits = new List<Tuple<int, double>>();
    string historianServer;
    string historianInstance;
    IEnumerable<int> channelIDs;
    List<Tuple<int, double>> trendingData = new List<Tuple<int, double>>();

    if (parameters.ContainsKey("ChannelID"))
    {
        channelId = int.Parse(parameters["ChannelID"]);
        channelIDs = new List<int> { channelId };

        DateTime endDate = DateTime.Now;
        DateTime startDate = endDate.AddDays(-365);
        using (DataContext dataContext = new DataContext("systemSettings"))
        {
            historianServer = dataContext.Connection.ExecuteScalar<string>("SELECT Value FROM Setting WHERE Name = 'Historian.Server'") ?? "127.0.0.1";
            historianInstance = dataContext.Connection.ExecuteScalar<string>("SELECT Value FROM Setting WHERE Name = 'Historian.Instance'") ?? "XDA";
            normalHighLimit = dataContext.Table<AlarmRangeLimit>().QueryRecordWhere("ChannelID = {0}", channelId).High ?? 0;
            normalLowLimit = dataContext.Table<AlarmRangeLimit>().QueryRecordWhere("ChannelID = {0}", channelId).Low ?? 0;
            hourlyHighLimits = dataContext.Table<HourOfWeekLimit>().QueryRecordsWhere("ChannelID = {0}", channelId).OrderBy(x => x.HourOfWeek).Select(x => Tuple.Create(x.HourOfWeek, (double)x.High));
            hourlyLowLimits = dataContext.Table<HourOfWeekLimit>().QueryRecordsWhere("ChannelID = {0}", channelId).OrderBy(x => x.HourOfWeek).Select(x => Tuple.Create(x.HourOfWeek, (double)x.Low));
        }


        using (Historian historian = new Historian(historianServer, historianInstance))
        {
            foreach (openHistorian.XDALink.TrendingDataPoint point in historian.Read(channelIDs, startDate, endDate))
            {
                if (point.SeriesID == SeriesID.Average)
                {
                    trendingData.Add(new Tuple<int, double>((int)point.Timestamp.DayOfWeek * 24 + point.Timestamp.Hour, point.Value));
                }
            }
        }

    }

}


<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">

<head id="Head1">

    <title>Alarm Creation Viewer System Trending Explorer</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="utf-8" />
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <link rel="stylesheet" href="@("/@GSF/Web/Shared/Content/bootstrap.css")" />
    <link rel="stylesheet" href="../Content/themes/redmond/jquery-ui.css" />
    <link rel="stylesheet" href="../Content/jquery.multiselect.css" />
    <link rel="stylesheet" href="../Content/jquery.multiselect.filter.css" />


    <script type="text/javascript" src="@("/@GSF/Web/Shared/Scripts/jquery.js")"></script>
    <script type="text/javascript" src="@("/@GSF/Web/Shared/Scripts/jquery-ui.js")"></script>
    <script type="text/javascript" src="../Scripts/jquery.blockUI.js"></script>
    <script type="text/javascript" src="../Scripts/jquery.multiselect.js"></script>
    <script type="text/javascript" src="../Scripts/jquery.multiselect.filter.js"></script>
    <script type="text/javascript" src="@("/@GSF/Web/Shared/Scripts/flot/jquery.flot.js")"></script>
    <script type="text/javascript" src="@("/@GSF/Web/Shared/Scripts/flot/jquery.flot.errorbars.js")"></script>
    <script type="text/javascript" src="@("/@GSF/Web/Shared/Scripts/flot/jquery.flot.navigate.js")"></script>
    <script type="text/javascript" src="@("/@GSF/Web/Shared/Scripts/flot/jquery.flot.resize.js")"></script>
    <script type="text/javascript" src="@("/@GSF/Web/Shared/Scripts/flot/jquery.flot.time.js")"></script>
    <script type="text/javascript" src="@("/@GSF/Web/Shared/Scripts/flot/jquery.flot.selection.js")"></script>


    <link rel="stylesheet" href="../Content/OpenSTE.css" type="text/css" />
</head>
<body>
    <div style="width: 100%; height: 32px;">
        <table width="100%">
            <tr>
                <td width="33%" align="left"><img src="../images/GPA-Logo---30-pix(on-white).png" /></td>
                <td width="33%" align="right" valign="top" nowrap><img src="../images/GPA-Logo.png" /></td>
            </tr>
        </table>
    </div>

    <div class="DockWaveformHeader">
        <h4 style="text-align: center" id="chartTitle"></h4>
    </div>

    <div class="row" id="DockWaveformTrending">
        <div class="row" style="height: 100%">
            <div class="col-md-1" style="height: 100%">
                <div id="ChartYAxis"><span>Trend Magnitude</span></div>
            </div>
            <div class="col-md-9" style="height: 95%">
                <div id="WaveformTrending"></div>
            </div>
            <div class="col-md-2" style="height: 100%">
                <div id="legend"></div>
            </div>
        </div>
    </div>
</body>
</html>

<script>
    var globalcolors = ['#ff0000', '#FF9600', '#90ed7d', '#f7a35c', '#FF9600', '#ff0000'];

    //////////////////////////////////////////////////////////////////////////////////////////////

    function buildPage() {
        $(window).on('resize', function () {
            resizecontents();
        });
    }

    //////////////////////////////////////////////////////////////////////////////////////////////

    function resizecontents() {
        var columnheight = $(window).height() - 110;
        resizeDocklet($("#DockWaveformTrending"), columnheight);
    }

    //////////////////////////////////////////////////////////////////////////////////////////////

    function resizeDocklet(theparent, chartheight) {
        theparent.css("height", chartheight);
        var Child = $("#WaveformTrending");
        Child.css("height", chartheight);
    }

    //////////////////////////////////////////////////////////////////////////////////////////////

    $(document).ready(function () {
        buildPage();

        // Lets build a label for this chart
        var label = "";
        resizecontents();

        $("#chartTitle").text(label);
        populateDivWithLineChartByChannelID("WaveformTrending",label);
    });

    //////////////////////////////////////////////////////////////////////////////////////////////

    function populateDivWithLineChartByChannelID(thediv, label) {
        var hourlyUpperLimit
        var dataPoints = {
            show: true,
            radius: 2
        }

        var data = JSON.parse('@Raw(JsonConvert.SerializeObject(trendingData).ToString())');
        var dataHourlyHigh = JSON.parse('@Raw(JsonConvert.SerializeObject(hourlyHighLimits).ToString())');
        var dataHourlyLow = JSON.parse('@Raw(JsonConvert.SerializeObject(hourlyLowLimits).ToString())');

        var graphData = [
            { color: "red", lines: dataPoints, data: [[0, @normalHighLimit], [167, @normalHighLimit]], label: 'Alarm Limit High', visible: true, type: 'lines' },
            { color: "orange", lines: dataPoints, data: [], label: 'Off Normal High', visible: true, type: 'lines' },
            { color: "#90ed7d", points: dataPoints, data: [], label: 'Average', visible: true, type: 'points' },
            { color: "orange", lines: dataPoints, data: [], label: 'Off Normal Low', visible: true, type: 'lines' },
            { color: "red", lines: dataPoints, data: [[0, @normalLowLimit],[167, @normalLowLimit]], label: 'Alarm Limit Low', visible: true, type: 'lines' },
        ];


        $.each(data, function (_, point) {
            graphData[2].data.push([point.Item1, point.Item2]);
        });


        $.each(dataHourlyHigh, function (index, point) {
            graphData[1].data.push([point.Item1, point.Item2]);
            if(index < dataHourlyHigh.length - 1 )
                graphData[1].data.push([point.Item1 + 1, point.Item2]);
        });

        $.each(dataHourlyLow, function (index, point) {
            graphData[3].data.push([point.Item1, point.Item2]);
            if (index < dataHourlyLow.length - 1)
                graphData[3].data.push([point.Item1 + 1, point.Item2]);
        });


        //initiate plot
        var plot = $.plot($("#WaveformTrending"), graphData, {
            legend: {
                show: false
            },
            series: {
                lines: {
                    show: false
                }
            },
            xaxis: {
                //mode: "time",
                zoomRange: [0, 167],
                panRange: [0, 167],
            },
            yaxis: {
                zoomRange: false /*[0.5, yMax+1]*/,
                //panRange: [yMin-1,yMax+1],
            },
            zoom: {
                interactive: true
            },
            pan: {
                interactive: false
            },
            grid: {
                hoverable: true
            },
            selection: { mode: "x" }
        });

        $("<div id='tooltip'></div>").css({
            position: "absolute",
            display: "none",
            border: "1px solid #fdd",
            padding: "2px",
            "background-color": "#fee",
            opacity: 0.80
        }).appendTo("body");

        $("#WaveformTrending").bind("plothover", function (event, pos, item) {
            if (item) {
                var time = item.datapoint[0];
                var html = '<div>Hour of Week: ' + time + '</div>';
                html += '<div>Value: ' + item.series.label + ': <span style="font-weight:bold">' + (item.series.label !== 'Range' ? item.datapoint[1] : item.datapoint[1] - item.datapoint[2] + ' - ' + (item.datapoint[1] + item.datapoint[3])) + '</span></div>';
                $("#tooltip").html(html)
                    .css({ top: item.pageY + -50, left: item.pageX - 100, border: '1px solid ' + item.series.color })
                    .fadeIn(200);
            } else {
                $("#tooltip").hide();
            }

        });

        $("#WaveformTrending").bind("plotselected", function (event, ranges) {
            var xAxis = plot.getXAxes();

            $.each(xAxis, function (_, axis) {
                var opts = axis.options;
                opts.min = ranges.xaxis.from;
                opts.max = ranges.xaxis.to;
            });

            scaleYAxis(plot, ranges.xaxis.from, ranges.xaxis.to);
            plot.clearSelection();
        });

        $('#WaveformTrending').bind("plotzoom", function (event, stuff) {
            scaleYAxis(plot);
            plot.clearSelection();
        });

        initLegend(plot);
        scaleYAxis(plot);

    }

    //////////////////////////////////////////////////////////////////////////////////////////////

    function initLegend(plot) {
        var graphData = plot.getData();
        var table = $('<table>');

        $("#legend").append(table);

        table.css({
            "width": "100%",
            "font-size": "smaller",
            "font-weight": "bold"
        });

        $.each(graphData, function (_, series) {
            if (series.visible !== false) {
                var row = $('<tr>');
                var checkbox = $('<input type="checkbox">');
                var borderDiv = $('<div>');
                var colorDiv = $('<div>');
                var labelSpan = $('<span>');
                var color;

                if (series.visible)
                    color = series.color;
                else
                    color = "#CCC";

                table.append(
                    row.append(
                        $('<td class="legendCheckbox" title="Show/hide in tooltip">').append(
                            checkbox),
                        $('<td class="legendColorBox" title="Show/hide in chart">').append(
                            borderDiv.append(colorDiv)),
                        $('<td class="legendLabel">').append(
                            labelSpan.append(series.label))));

                checkbox.prop("checked", series.checked);

                borderDiv.css({
                    "border": "1px solid #CCC",
                    "padding": "1px"
                });

                colorDiv.css({
                    "width": "4px",
                    "height": "0",
                    "border": "5px solid " + color,
                    "overflow": "hidden"
                });

                labelSpan.prop("title", series.label);
                labelSpan.css("color", series.color);

                checkbox.click(function () {
                    series.checked = !series.checked;

                });

                row.children().slice(1).click(function () {
                    series.visible = !series.visible;

                    if (series.visible)
                        colorDiv.css("border", "5px solid " + series.color);
                    else
                        colorDiv.css("border", "5px solid #CCC");

                    if (series.type === 'lines')
                        series.lines.show = series.visible;
                    else if (series.type === 'points')
                        series.points.show = series.visible;
                    else if (series.type === 'errorbar') {
                        series.points.yerr.show = series.visible;
                        graphData[2].points.show = series.visible;
                        graphData[4].points.show = series.visible;
                    }

                    plot.setData(graphData);
                    scaleYAxis(plot);
                });
            }
        });

        $(".legendCheckbox").hide();
    }

    function scaleYAxis(plot, xMin, xMax) {
        var data = plot.getData();
        var yMin = null, yMax = null;

        $.each(plot.getXAxes(), function (_, xAxis) {
            if (!xMin)
                xMin = xAxis.min;

            if (!xMax)
                xMax = xAxis.max;
        });

        $.each(data, function (i, d) {
            if (d.visible === true) {
                var isAlarmData = (i == 0) || (i == 6);

                $.each(d.data, function (j, e) {
                    if (isAlarmData || (e[0] >= xMin && e[0] <= xMax)) {
                        var eMin = (d.label !== "Range") ? e[1] : e[1] - e[2];
                        var eMax = (d.label !== "Range") ? e[1] : e[1] + e[3];

                        if (yMin == null || yMin > eMin)
                            yMin = eMin;
                        if (yMax == null || yMax < eMax)
                            yMax = eMax;
                    }
                });
            }
        });

        $.each(plot.getYAxes(), function (_, axis) {
            var opts = axis.options;
            var pad = (yMax - yMin) * 0.1;
            opts.min = yMin - pad;
            opts.max = yMax + pad;
        });

        plot.setupGrid();
        plot.draw();
    }

</script>