@*//******************************************************************************************************
    //  ChannelsWithNormalLimits.cshtml - Gbtc
    //
    //  Copyright © 2017, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
    //  not use this file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  05/02/2017 - Billy Ernest
    //       Generated original version of source code.
    //
    //*******************************************************************************************************@
@using openXDA.Model
@using GSF.Web.Model
@using GSF.Web
@using openXDA
@using openXDA.Hubs
@using System.Collections.Generic;
@using System.Net.Http

@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("MeterID"))
    {
        ViewBag.meterID = int.Parse(parameters["MeterID"]);
    }
    if (parameters.ContainsKey("Name"))
    {
        ViewBag.name = parameters["Name"];
    }

    Layout = "Config/Layout.cshtml";
    string title = ViewBag.CustomTitle = "Channels for " + ViewBag.name + " With Alarm Limits";
    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-left" },
        new[] { "MeasurementType", "Meas Type", "text-left" },
        new[] { "MeasurementCharacteristic", "Meas Char", "text-left" },
        new[] { "Phase", "Phase", "text-left" },
        new[] { "HarmonicGroup", "Harmonic", "text-left" },
        new[] { "High", "High", "text-left"},
        new[] { "Low", "Low", "text-left"},
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.ShowSearchFilter = true;
    ViewBag.HideAddNewButton = true;

}
@helper BodyRows()
{
    <td width="25%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Name, click: $parent.viewPageRecord"></button></td>
    <td width="10%" class="text-left valign-middle" nowrap data-bind="text: MeasurementType"></td>
    <td width="10%" class="text-left valign-middle" nowrap data-bind="text: MeasurementCharacteristic"></td>
    <td width="10%" class="text-left valign-middle" nowrap data-bind="text: Phase"></td>
    <td width="10%" class="text-left valign-middle" nowrap data-bind="text: HarmonicGroup"></td>
    <td width="10%" class="text-left valign-middle" nowrap data-bind="text: High"></td>
    <td width="10%" class="text-left valign-middle" nowrap data-bind="text: Low"></td>
    <td width="10%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" title="Generate Smart Alarm Limits" data-bind="click: smartLimits.bind($data), enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-stats"></span></button>
        <button type="button" class="btn btn-xs" title="Reset to Default Limits" data-bind="click: resetLimits.bind($data), enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-repeat"></span></button>
        <a type="button" title="View Limits against trending data." target="_blank" data-bind="attr: { href: '/Config/AlarmViewer.cshtml?ChannelID=' +ID }, enable: $parent.dataHubIsConnected" style="color:black; background-color:ButtonFace" class="btn btn-xs"><i class="glyphicon glyphicon-eye-open"></i></a>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<ChannelsWithNormalLimits>("Name"))
    @Raw(dataContext.AddInputField<ChannelsWithNormalLimits>("MeasurementType"))
    @Raw(dataContext.AddInputField<ChannelsWithNormalLimits>("MeasurementCharacteristic"))
    @Raw(dataContext.AddInputField<ChannelsWithNormalLimits>("Phase"))
    @Raw(dataContext.AddInputField<ChannelsWithNormalLimits>("HarmonicGroup"))
    @Raw(dataContext.AddInputField<ChannelsWithNormalLimits>("High"))
    @Raw(dataContext.AddInputField<ChannelsWithNormalLimits>("Low"))
    @Raw(dataContext.AddCheckBoxField<ChannelsWithNormalLimits>("RangeInclusive"))
    @Raw(dataContext.AddCheckBoxField<ChannelsWithNormalLimits>("PerUnit"))
    @Raw(dataContext.AddCheckBoxField<ChannelsWithNormalLimits>("Enabled"))
    @Raw(dataContext.AddCheckBoxField<ChannelsWithNormalLimits>("IsDefault"))


}
<!-- Modal -->
<div id="smartAlarmsModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Smart Alarm Settings</h4>
            </div>
            <div class="modal-body">
                <p>Use this screen to calculate and apply smart alarm limits.  You can choose the number of standard deviations to use and whether you want to include zero values in the calculation.</p>
                <div class="row">
                    <div class="col-md-5">
                        <label>Start Date</label>
                        <div class="input-group date">
                            <input id="startDate" type="text" class="form-control">
                            <div class="input-group-addon">
                                <span class="glyphicon glyphicon-th"></span>
                            </div>
                        </div>
                        <label>Sigma Level</label>
                        <select class="form-control" id="sigmaValue">
                            <option value="6">6 (99.9999998%)</option>
                            <option value="5">5 (99.99994%)</option>
                            <option value="4">4 (99.994%)</option>
                            <option value="3">3 (99.7%)</option>
                            <option value="2">2 (95%)</option>
                            <option value="1" selected="selected">1 (68%)</option>
                        </select>

                    </div>
                    <div class="col-md-5">
                        <label> End Date</label>
                        <div class="input-group date">
                            <input id="endDate" type="text" class="form-control">
                            <div class="input-group-addon">
                                <span class="glyphicon glyphicon-th"></span>
                            </div>
                        </div>
                        <div style="float: left">
                            <div class="input-group">
                                <label>Decimals in Result</label>
                                <select class="form-control" id="significance">
                                    <option>9</option>
                                    <option>8</option>
                                    <option>7</option>
                                    <option>6</option>
                                    <option>5</option>
                                    <option selected="selected">4</option>
                                    <option>3</option>
                                    <option>2</option>
                                    <option>1</option>
                                    <option>0</option>
                                </select>
                            </div>
                        </div>
                        <div class="checkbox" style="margin-left: 60%">
                            <label><input type="checkbox" id="zeroValues" class="" checked="checked" />Ignore Zero Values</label>
                        </div>

                    </div>
                    <div class="col-md-1">
                        <br />
                        <button class="btn btn-primary" onclick="getTrendingData()">Calculate</button>
                    </div>

                </div>
                <div id="alert" class="alert alert-danger fade in" style="margin: 5px; display: none">
                    @*<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>*@
                    <strong>Warning!!!</strong> No records found...
                </div>

                <div id="graphViewer" class="collapse">
                    <div class="row">
                        <div id="smartAlarmsWindow" style="display: block">
                            <div id="flotchart" style="height: 200px"></div>
                        </div>
                        <div class="col-md-5">
                            <label>Upper Limit</label>
                            <input id="upperLimit" type="text" class="form-control">
                        </div>

                        <div class="col-md-5">
                            <label>Lower Limit</label>
                            <input id="lowerLimit" type="text" class="form-control">
                        </div>
                        <div class="col-md-1">
                            <br />
                            <button class="btn btn-primary" data-dismiss="modal" onclick="applyLimits()">Apply Limits</button>
                        </div>


                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
<form id="uploadCSVFile" action="HowlCSVUploadHandler.ashx" method="post" enctype="multipart/form-data" style="display: none">
    <input id="importCSVFile" name="importCSVFile" type="file" accept=".csv" multiple>
    <input type="submit" />
</form>
@section Scripts{
<script language="javascript" type="text/javascript" src="@("/@GSF/Web/Shared/Scripts/flot/jquery.flot.js")"></script>
<script language="javascript" type="text/javascript" src="@("/@GSF/Web/Shared/Scripts/flot/jquery.flot.time.js")"></script>
<script language="javascript" type="text/javascript" src="/Scripts/spin.js"></script>

<script>
        @Raw(dataContext.RenderViewModelConfiguration<ChannelsWithNormalLimits, DataHub>(ViewBag, "Name", null, ViewBag.meterID))

        var plot;
        var currentRecord;

        $(document).ready(function () {
            $('#exportCSVButton').off('click');
            $('#exportCSVButton').click(function () {
                if (!hubIsConnected)
                    return;

                dataHub.getConnectionID().done(function (connectionID) {
                    $("#exportCSVLink").attr("href", "/HowlCSVDownloadHandler.ashx" +
                        "?ModelName=" + encodeURIComponent(viewModel.modelName) +
                        "&HubName=" + encodeURIComponent(viewModel.hubName) +
                        "&ConnectionID=" + encodeURIComponent(connectionID) +
                        "&CallingFrom=ChannelsWithNormalLimits" +
                        "&ID=" + @ViewBag.meterID +
                        "&FilterText=" + encodeURIComponent(viewModel.filterText) +
                        "&SortField=" + encodeURIComponent(viewModel.sortField()) +
                        "&SortAscending=" + encodeURIComponent(viewModel.sortAscending()) +
                        "&ShowDeleted=False&ParentKeys=");

                    $("#exportCSVLink")[0].click();
                }).
                fail(function (error) {
                    showErrorMessage(error);
                });
            });

            $('.date').datepicker({
                format: 'mm/dd/yyyy',
                autoClose: true,
                orientation: 'bottom'
            });

        });

        $(function () {
            $('#pageControlsRow').prepend('<button class="btn btn-sm btn-primary" onclick="importCSV()" id="importBtn"><span class="glyphicon glyphicon-upload"></span>&nbsp;&nbsp;Import&nbsp;CSV</button>');
            $('#pageControlsRow').prepend('<input type="file" id="fileInput" accept=".csv, text/csv " style="display: none"/>');

            $("#importCSVFile").on("change", function (event) {
                $("#uploadCSVFile").submit();
            });
        });

        function importCSV() {
            $('#importCSVFile').click();
        }

        function smartLimits(record) {
            $('#sigmaValue').val("1");
            $('#graphViewer').toggle(false);
            $('#startDate').val("");
            $('#endDate').val("");
            if (plot !== undefined) {
                plot.destroy();
                plot = undefined;
            }
            $('#alert').css('display', 'none');
            $('#upperLimit').val("");
            $('#lowerLimit').val("");
            $('#zeroValues').prop('checked', true);
            $('#smartAlarmsModal').modal('show');
            $('#smartAlarmsModal .modal-title').text('Smart Alarm Settings - Channel: ' + record.ID + ' - ' + record.Name);
            currentRecord = record;
        }

        function getTrendingData() {
            $('#flotchart').width($('#smartAlarmsModal .modal-body').width() - 30);
            var opts = {
                lines: 9 // The number of lines to draw
            , length: 24 // The length of each line
            , width: 18 // The line thickness
            , radius: 42 // The radius of the inner circle
            , scale: 1 // Scales overall size of the spinner
            , corners: 1 // Corner roundness (0..1)
            , color: '#000' // #rgb or #rrggbb or array of colors
            , opacity: 0.05 // Opacity of the lines
            , rotate: 9 // The rotation offset
            , direction: 1 // 1: clockwise, -1: counterclockwise
            , speed: 1 // Rounds per second
            , trail: 60 // Afterglow percentage
            , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
            , zIndex: 2e9 // The z-index (defaults to 2000000000)
            , className: 'spinner' // The CSS class to assign to the spinner
            , top: '50%' // Top position relative to parent
            , left: '50%' // Left position relative to parent
            , shadow: false // Whether to render a shadow
            , hwaccel: false // Whether to use hardware acceleration
            , position: 'absolute' // Element positioning
            };

            var target = document.getElementById('smartAlarmsModal');
            var spinner = new Spinner(opts).spin(target);

            dataHub.getTrendingData($('#startDate').val(), $('#endDate').val(), currentRecord.ID).done(function (data) {
                if (data.length === 0) {
                    $('#alert').css('display', 'block');
                    spinner.stop();
                } else {
                    $('#alert').css('display', 'none');

                    var maxes = [];
                    var mins = [];
                    var averages = { data: [], color: "#000080" };
                    var dataPoints = [];
                    var startDate = new Date(data[0].Time);
                    var endDate = new Date(data[data.length - 1].Time);
                    var flotOptions = {
                        xaxis: {
                            mode: "time",
                            timeformat: "%m/%d/%Y",
                            minTickSize: [1, "day"]
                        }
                    };

                    $.each(data, function (i, d) {
                        if (d.SeriesType === "Average") {
                            averages.data.push([new Date(d.Time), d.Value]);
                            if (!$('#zeroValues').is(":checked") || d.Value != 0)
                                dataPoints.push(d.Value);
                        }
                        //else if (d.SeriesType === "Minimum")
                        //    mins.push([i,d.Value]);
                        //else if (d.SeriesType === "Maximum")
                        //    maxes.push([i,d.Value]);
                    });

                    var averageValue = average(dataPoints);
                    var minusonesigma = { data: [[startDate, averageValue.mean - averageValue.deviation], [endDate, averageValue.mean - averageValue.deviation]], lines: { lineWidth: 1 }, color: "red" };
                    var plusonesigma = { data: [[startDate, averageValue.mean + averageValue.deviation], [endDate, averageValue.mean + averageValue.deviation]], lines: { lineWidth: 1 }, color: "red" };
                    var minustwosigma = { data: [[startDate, averageValue.mean - averageValue.deviation * 2], [endDate, averageValue.mean - averageValue.deviation * 2]], lines: { lineWidth: 1 }, color: "red" };
                    var plustwosigma = { data: [[startDate, averageValue.mean + averageValue.deviation * 2], [endDate, averageValue.mean + averageValue.deviation * 2]], lines: { lineWidth: 1 }, color: "red" };
                    var minusthreesigma = { data: [[startDate, averageValue.mean - averageValue.deviation * 3], [endDate, averageValue.mean - averageValue.deviation * 3]], lines: { lineWidth: 1 }, color: "red" };
                    var plusthreesigma = { data: [[startDate, averageValue.mean + averageValue.deviation * 3], [endDate, averageValue.mean + averageValue.deviation * 3]], lines: { lineWidth: 1 }, color: "red" };
                    var minusfoursigma = { data: [[startDate, averageValue.mean - averageValue.deviation * 4], [endDate, averageValue.mean - averageValue.deviation * 4]], lines: { lineWidth: 1 }, color: "red" };
                    var plusfoursigma = { data: [[startDate, averageValue.mean + averageValue.deviation * 4], [endDate, averageValue.mean + averageValue.deviation * 4]], lines: { lineWidth: 1 }, color: "red" };
                    var minusfivesigma = { data: [[startDate, averageValue.mean - averageValue.deviation * 5], [endDate, averageValue.mean - averageValue.deviation * 5]], lines: { lineWidth: 1 }, color: "red" };
                    var plusfivesigma = { data: [[startDate, averageValue.mean + averageValue.deviation * 5], [endDate, averageValue.mean + averageValue.deviation * 5]], lines: { lineWidth: 1 }, color: "red" };
                    var minussixsigma = { data: [[startDate, averageValue.mean - averageValue.deviation * 6], [endDate, averageValue.mean - averageValue.deviation * 6]], lines: { lineWidth: 1 }, color: "red" };
                    var plussixsigma = { data: [[startDate, averageValue.mean + averageValue.deviation * 6], [endDate, averageValue.mean + averageValue.deviation * 6]], lines: { lineWidth: 1 }, color: "red" };

                    displayLimits();
                    //plot = $.plot("#flotchart", [ minusonesigma, averages, plusonesigma ], flotOptions);
                    $('#sigmaValue').on('change', function (event) {
                        displayLimits();
                        plot.setupGrid();
                        plot.draw();


                    });

                    $('#significance').on('change', function (event) {
                        displayLimits();
                        plot.setupGrid();
                        plot.draw();

                    });

                    spinner.stop();
                    //$('#smartAlarmsWindow').toggle();

                    function displayLimits() {
                        if ($('#sigmaValue').val() == 6) {
                            plot = $.plot("#flotchart", [minussixsigma, averages, plussixsigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation * 6).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation * 6).toFixed($('#significance').val()));
                        } else if ($('#sigmaValue').val() == 5) {
                            plot = $.plot("#flotchart", [minusfivesigma, averages, plusfivesigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation * 5).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation * 5).toFixed($('#significance').val()));
                        } else if ($('#sigmaValue').val() == 4) {
                            plot = $.plot("#flotchart", [minusfoursigma, averages, plusfoursigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation * 4).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation * 4).toFixed($('#significance').val()));
                        } else if ($('#sigmaValue').val() == 3) {
                            plot = $.plot("#flotchart", [minusthreesigma, averages, plusthreesigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation * 3).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation * 3).toFixed($('#significance').val()));
                        } else if ($('#sigmaValue').val() == 2) {
                            plot = $.plot("#flotchart", [minustwosigma, averages, plustwosigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation * 2).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation * 2).toFixed($('#significance').val()));
                        } else if ($('#sigmaValue').val() == 1) {
                            plot = $.plot("#flotchart", [minusonesigma, averages, plusonesigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation).toFixed($('#significance').val()));
                        } else {
                            plot = $.plot("#flotchart", [minusonesigma, averages, plusonesigma], flotOptions);
                            $('#upperLimit').val((averageValue.mean + averageValue.deviation).toFixed($('#significance').val()));
                            $('#lowerLimit').val((averageValue.mean - averageValue.deviation).toFixed($('#significance').val()));
                        }

                    }
                    $('#graphViewer').toggle(true);

                }

            });
        }

        function applyLimits() {
            var high = $('#upperLimit').val();
            var low = $('#lowerLimit').val();

            dataHub.updateAlarmRangeLimit(currentRecord.ID, high, low).done(function () {
                viewModel.queryPageRecords();
            });
        }

        function resetLimits(record) {
            dataHub.resetAlarmToDefault2(record.ID).done(function () {
                    viewModel.queryPageRecords();
                });
        }

        average = function (a) {
            var r = { mean: 0, variance: 0, deviation: 0 }, t = a.length;
            for (var m, s = 0, l = t; l--; s += a[l]);
            for (m = r.mean = s / t, l = t, s = 0; l--; s += Math.pow(a[l] - m, 2));
            return r.deviation = Math.sqrt(r.variance = s / t), r;
        }


</script>
}