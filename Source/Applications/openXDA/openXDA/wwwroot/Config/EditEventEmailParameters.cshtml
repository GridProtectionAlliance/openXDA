@*//******************************************************************************************************
//  EditEventEmailParameters.cshtml - Gbtc
//
//  Copyright © 2018, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  07/27/2018 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@

@using System.Net.Http
@using GSF.Web
@using GSF.Web.Model
@using openXDA.Model

@inherits ExtendedTemplateBase<AppModel>

@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Config/Layout.cshtml";
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("ID"))
    {
        ViewBag.ID = int.Parse(parameters["ID"]);
    }

    if (parameters.ContainsKey("Name"))
    {
        ViewBag.Name = parameters["Name"];
    }

    ViewBag.Title = ViewBag.Name + " Email Configuration";

    ViewBag.HideAddNewButton = false;
    ViewBag.ShowSearchFilter = false;

    EventEmailParameters eventEmailParameters = dataContext.Table<EventEmailParameters>().QueryRecordWhere("ID = {0}", ViewBag.ID);
    XSLTemplate xslTemplate = dataContext.Table<XSLTemplate>().QueryRecordWhere("ID = (SELECT XSLTemplateID FROM EmailType WHERE ID = {0})", eventEmailParameters.EmailTypeID);
    EmailType emailType = dataContext.Table<EmailType>().QueryRecordWhere("ID = {0}", eventEmailParameters.EmailTypeID);
}

<ul id="email-tabs" class="nav nav-tabs">
    <li class="active"><a data-toggle="tab" href="#config">Configuration</a></li>
    <li><a data-toggle="tab" href="#template">Template</a></li>
    <li><a data-toggle="tab" href="#trigger">Trigger SQL</a></li>
    <li><a data-toggle="tab" href="#event">Event SQL</a></li>
    <li><a data-toggle="tab" href="#test">Test</a></li>
</ul>

<div id="xslTemplate" hidden>@xslTemplate.Template</div>
<div id="triggerTemplate" hidden>@eventEmailParameters.TriggersEmailSQL</div>
<div id="eventTemplate" hidden>@eventEmailParameters.EventDetailSQL</div>

<div class="tab-content">
    <div id="config" class="tab-pane fade in active">
        <div style="width: 100%; margin-top: 20px">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" class="form-control" id="name" value="@xslTemplate.Name" />
            </div>
            <div class="form-group">
                <label for="src">Trigger source:</label>
                <input type="text" class="form-control" id="src" value="@eventEmailParameters.TriggerSource" />
            </div>
            <div class="form-group">
                <label for="min">Minimum Delay:</label>
                <input type="number" class="form-control" id="min" value="@eventEmailParameters.MinDelay" />
            </div>
            <div class="form-group">
                <label for="max">Maximum Delay:</label>
                <input type="number" class="form-control" id="max" value="@eventEmailParameters.MaxDelay" />
            </div>
            <div class="form-group">
                <input type="checkbox" class="" id="sms" @(emailType.SMS ? "checked='checked'" : null) />Is SMS
            </div>

            <button id="updateConfigBtn" type="submit" style="float: right" class="btn btn-primary" onclick="updateConfiguration()">Update</button>
        </div>
    </div>

    <div id="template" class="tab-pane fade">
        <div class="form-group">
            <div id="templateEditor" class="form-control"></div>
        </div>
        <button id="updateTemplateBtn" type="submit" style="float: right" class="btn btn-primary" onclick="updateTemplate()">Update</button>

    </div>
    <div id="trigger" class="tab-pane fade">
        <div class="form-group">
            <div id="triggerEditor" class="form-control"></div>
        </div>
        <button id="updateTriggerBtn" type="submit" style="float: right" class="btn btn-primary" onclick="updateTrigger()">Update</button>

    </div>
    <div id="event" class="tab-pane fade">
        <div class="form-group">
            <div id="eventEditor" class="form-control"></div>
        </div>
        <button id="updateEventBtn" type="submit" style="float: right" class="btn btn-primary" onclick="updateEvent()">Update</button>
    </div>
    <div id="test" class="tab-pane fade" />
</div>
@section Scripts
{
    <script src="../Scripts/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
    <script>
        $(function () {
            $('#templateEditor').height(calculateRemainingBodyHeight() - 100);
            var editor = ace.edit("templateEditor");
            editor.setTheme("ace/theme/monokai");
            editor.getSession().setMode("ace/mode/xml");
            editor.setFontSize("14px");
            editor.setValue($('#xslTemplate').text());

            $('#triggerEditor').height(calculateRemainingBodyHeight() - 100);
            editor = ace.edit("triggerEditor");
            editor.setTheme("ace/theme/monokai");
            editor.getSession().setMode("ace/mode/sql");
            editor.setFontSize("14px");
            editor.setValue($('#triggerTemplate').text());

            $('#eventEditor').height(calculateRemainingBodyHeight() - 100);
            editor = ace.edit("eventEditor");
            editor.setTheme("ace/theme/monokai");
            editor.getSession().setMode("ace/mode/sql");
            editor.setFontSize("14px");
            editor.setValue($('#eventTemplate').text());

            $('#email-tabs a').on('click', function (e) {
                if (e.target.innerText !== "Test")
                    return;

                $('#test').empty();

                $.ajax('@Url.Content("~/api/Config/EmailTemplate/" + @xslTemplate.ID)').done(function (events) {
                    if (events.length === 0) {
                        var baseURL = '@request.RequestUri.GetLeftPart(UriPartial.Authority)';
                        var path = '@Url.Content("~/Config/EmailTemplateHandler.ashx")';
                        var query = '?EventID=<span style="background-color: yellow">##</span>&TemplateID=@xslTemplate.ID';

                        $('#test')
                            .append('No events found that match the trigger SQL. ')
                            .append('To test an arbitrary event, copy the following URL ')
                            .append('with the ID of the event you would like to test.')
                            .append('<br>')
                            .append(baseURL + path + query);

                        return;
                    }

                    var table = $('<table class="table table-condensed table-hover">');
                    var tableHeader = $('<thead>');
                    var tableBody = $('<tbody>');

                    var headerRow = $('<tr>');
                    headerRow.append('<th>Start Time</th>');
                    headerRow.append('<th>Event Type</th>');
                    headerRow.append('<th>Meter</th>');
                    headerRow.append('<th>Line</th>');
                    headerRow.appendTo(tableHeader);

                    $.each(events, function (_, evt) {
                        var row = $('<tr>');
                        row.append('<td><a target="_blank" href="@Url.Content("~/Config/EmailTemplateHandler.ashx")?EventID=' + evt.ID + '&TemplateID=@xslTemplate.ID">' + evt.StartTime + '</a></td>');
                        row.append('<td>' + evt.MeterName + '</td>');
                        row.append('<td>' + evt.EventTypeName + '</td>');
                        row.append('<td>' + evt.LineName + '</td>');
                        row.appendTo(tableBody);
                    });

                    table.append(tableHeader);
                    table.append(tableBody);
                    table.appendTo('#test');
                }).fail(function (err) {
                    var pre = $('<pre>');
                    pre.append(err.responseJSON.ExceptionType).append('<br>');
                    pre.append(err.responseJSON.ExceptionMessage).append('<br>');
                    pre.append(err.responseJSON.StackTrace);
                    pre.appendTo('#test');
                });
            });
        });

        function updateConfiguration() {
            var data = {
                ID: '@eventEmailParameters.ID',
                Name: $('#name').val(),
                TriggerSource: $('#src').val(),
                MinDelay: $('#min').val(),
                MaxDelay: $('#max').val(),
                SMS: $('#sms').prop('checked')
            };

            $('#updateConfigBtn').prop('disabled', true);
            dataHub.updateEventEmailConfiguration(data).done(function () {
                $('#updateConfigBtn').prop('disabled', false);
                showInfoMessage($('#name').val() + " record updated.", 2000);
            });
        }

        function updateTemplate() {
            var data = {
                ID: '@eventEmailParameters.ID',
                template: ace.edit('templateEditor').getValue()
            };

            $('#updateTemplateBtn').prop('disabled', true);
            dataHub.updateEventEmailTemplates(data).done(function () {
                $('#updateTemplateBtn').prop('disabled', false);
                showInfoMessage($('#name').val() + " record updated.", 2000);
            });
        }

        function updateTrigger() {
            var data = {
                ID: '@eventEmailParameters.ID',
                trigger: ace.edit('triggerEditor').getValue()
            };

            $('#updateTriggerBtn').prop('disabled', true);
            dataHub.updateEventEmailTemplates(data).done(function () {
                $('#updateTriggerBtn').prop('disabled', false);
                showInfoMessage($('#name').val() + " record updated.", 2000);
            });
        }

        function updateEvent() {
            var data = {
                ID: '@eventEmailParameters.ID',
                event: ace.edit('eventEditor').getValue()
            };

            $('#updateEventBtn').prop('disabled', true);
            dataHub.updateEventEmailTemplates(data).done(function () {
                $('#updateEventBtn').prop('disabled', false);
                showInfoMessage($('#name').val() + " record updated.", 2000);
            });
        }

    </script>
}
