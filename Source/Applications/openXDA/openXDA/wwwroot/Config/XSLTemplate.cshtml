@*//******************************************************************************************************
//  XSLTemplate.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  12/12/2016 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@
@using System.Net.Http
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>

@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Config/Layout.cshtml";
    ViewBag.Title = "XSL Templates";
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   
        //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-left"},
        new[] { "Template", "Template", "text-left"}
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.ShowSearchFilter = true;


}
@section StyleSheets{
    <style>
        .modal-dialog {
            width: 100%;
        }
    </style>
}
@helper BodyRows()
{
    <td width="10%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Name, click: $parent.viewPageRecord"></button></td>
    <td width="85%" class="text-left valign-middle" data-bind="text: truncate(Template, 100)"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        @*<button type="button" class="btn btn-xs" data-bind="attr: { href: '/Config/ChannelsWithHourlyLimits.cshtml?MeterID=' +ID +'&Name=' + Name }, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>*@
        <a type="button" title="View Limits against trending data." target="_blank" data-bind="attr: { href: '/Config/TemplateEditor.cshtml?ID=' +ID }, enable: $parent.canEdit() && $parent.dataHubIsConnected" style="color:black; background-color:ButtonFace" class="btn btn-xs"><i class="glyphicon glyphicon-pencil"></i></a>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}

@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<XSLTemplate>("Name"))
    <label>Template:</label>
    <div class="form-group">
        <div id="template" class="form-control"></div>
    </div>
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")

@section Scripts
{
    <script src="../Scripts/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>

    <script>
        @Raw(dataContext.RenderViewModelConfiguration<XSLTemplate, DataHub>(ViewBag))
        
        $(function () {
            $('#addRecordButton').off('click');
            $('#addRecordButton').on('click', function () {
                window.open('TemplateEditor.cshtml')
            })
        });
        function truncate(str, length) {
            if (str.length > length) {
                return str.substring(0, length - 3) + '...';
            } else {
                return str;
            }
        }
        
        $('#addNewEditDialog').on('shown.bs.modal', function () {
            $('#template').height($(window).height() *.73);
            var editor = ace.edit("template");
            editor.setTheme("ace/theme/monokai");
            editor.getSession().setMode("ace/mode/xml");
            editor.setFontSize("14px");
            editor.setValue((viewModel.currentRecord().Template() == null ? '' : viewModel.currentRecord().Template()));

        });
        
        $(viewModel).on('beforeSave', function (event,record) {
            record.Template = ace.edit('template').getValue();
        })

    </script>    
}
