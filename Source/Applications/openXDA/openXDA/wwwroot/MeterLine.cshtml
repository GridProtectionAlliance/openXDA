@*******************************************************************************************************
//  Settings.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Collections.Generic
@using System.Net.Http
@using System.Threading
@using RazorEngine.Templating
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model

@inherits TemplateBase<AppModel>

@{
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    ViewBag.lineID = int.Parse(parameters["LineID"] ?? "-1");
    ViewBag.meterID = int.Parse(parameters["MeterID"] ?? "-1");

    Layout = "Layout.cshtml";
    ViewBag.Title = "Meter to Line for " + parameters["Title"];

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { "LineID", "Line", "text-left" },
        new[] { "MeterID", "Meter", "text-left"},
        new[] { "LineName", "Line Name", "text-left"},
        new[] { null, "Channel", "text-center valign-middle"}
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();



}
@helper BodyRows()
{
    <td width="30%" class="text-left valign-middle"data-bind="text: lookupAssetKeyValue(LineID)"></td>
    <td width="30%" class="text-left valign-middle" data-bind="text: lookupNameValue(MeterID)"></td>
    <td width="30%" class="text-left valign-middle" data-bind="text: LineName"></td>
    <td width="5%" class="text-center valign-middle"><button type="button" id="newWindow" data-bind="click: openChannels.bind($data), enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Channels&nbsp;&nbsp;<span class="badge" data-bind="text: getChannelCount(LineID, MeterID, $($element)), attr: {id: 'channelCount' + ID}">0</span></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    if (ViewBag.lineID == -1)
    {
        @Raw(dataContext.AddSelectField<MeterLine, Lines>("LineID", "ID", "AssetKey"))
}
else
{
        @Raw(dataContext.AddSelectField<MeterLine, Lines>("LineID", "ID", "AssetKey", customDataBinding: "enable: false"))
}
if (ViewBag.meterID == -1)
{
        @Raw(dataContext.AddSelectField<MeterLine, Meter>("MeterID", "ID", "Name"))
}
else
{
        @Raw(dataContext.AddSelectField<MeterLine, Meter>("MeterID", "ID", "Name", customDataBinding: "enable: false"))
}

    @Raw(dataContext.AddInputField<MeterLine>("LineName"))

}
<div id="channelsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body" style="overflow-y: hidden">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none; overflow-y: hidden" id="channelsFrame" marginheight="0" marginwidth="0"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@Include("PagedViewModel.cshtml")

@section Scripts 
{
    @Raw(ViewBag.PageControlScripts.ToString())
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<MeterLine, DataHub>(ViewBag, "ID", null, ViewBag.lineID, ViewBag.meterID))
        @Raw(Model.RenderAbstract<Meter>("Name"))
        @Raw(Model.RenderAbstract<Lines>("AssetKey"))
        
        $(viewModel).on("beforeSave", function (event, observableRecord) {
            if (@ViewBag.lineID !== -1)
                observableRecord.LineID = @ViewBag.lineID;
            if (@ViewBag.meterID !== -1)
                observableRecord.MeterID = @ViewBag.meterID;
        });

        
        function getChannelCount(lineID, meterID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryChannelCount(lineID,meterID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

        function openChannels(record) {
            //console.log(record);
            //$("#channelsFrame").attr({
            //    "src": "/Channel.cshtml?LineID=" + record.LineID + "&MeterID="+record.MeterID,
            //    "height": ($(document).height() - 150) + "px",
            //    "width": "100%"
            //});

            //$("#channelsDialog").modal("show");
            location.href =  "/Channel.cshtml?LineID=" + record.LineID + "&MeterID="+record.MeterID + "&Title=" + lookupAssetKeyValue(record.LineID) + " and " + lookupNameValue(record.MeterID) ;

        }

        $("#channelsDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#channelsFrame").attr("src", "about:blank");
        });

        $(window).resize(function () {
            setTimeout(function () {
                $("#channelsFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });


        $(function () {
            $("#channelsDialog").modal({ show: false, backdrop: "static", keyboard: false });
            $("#addNewEditDialog").on("shown.bs.modal", function () {
                if(@ViewBag.lineID !== -1)
                    $('#selectLineID').val(@ViewBag.lineID);
                    $('#selectMeterID').val(@ViewBag.meterID);

            });
        });

    </script>
}
