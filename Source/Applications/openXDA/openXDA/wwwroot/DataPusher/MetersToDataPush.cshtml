@*******************************************************************************************************
    //  Meters.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs
@using RazorEngine.Templating

@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;

    Layout = "DataPusher/Layout.cshtml";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "LocalXDAAssetKey", "Local Name", "text-Left" },
        new[] { "RemoteXDAName", "Remote Name", "text-left"},
        new[] { "RemoteXDAAssetKey", "Remote Guid", "text-left"},
    };
    ViewBag.ShowSearchFilter = true;
    ViewBag.Title = "Selected Meters For Data Pushing";
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();

}
@helper BodyRows()
{
    <td width="35%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: LocalXDAAssetKey, click: $parent.viewPageRecord"></button></td>
    <td width="30%" class="text-left valign-middle" data-bind="text: RemoteXDAName"></td>
    <td width="30%" class="text-left valign-middle" data-bind="text: RemoteXDAAssetKey"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
//if (viewModel.recordMode() == RecordMode.AddNew) {

//}
    <div data-bind="visible: $parent.recordMode() == RecordMode.AddNew">
        @Raw(dataContext.AddInputField<MetersToDataPush>("MeterSelection", fieldLabel: "Meter"))
    </div>
    @Raw(dataContext.AddInputField<MetersToDataPush>("LocalXDAAssetKey", fieldLabel: "Local Asset Key", customDataBinding: "enable: false"))
    @Raw(dataContext.AddInputField<MetersToDataPush>("RemoteXDAName", fieldLabel: "Remote Name"))
    @Raw(dataContext.AddInputField<MetersToDataPush>("RemoteXDAAssetKey", fieldLabel: "Remote Asset Guid", customDataBinding: "enable: false"))
    @Raw(dataContext.AddInputField<MetersToDataPush>("LocalXDAMeterID", fieldLabel: "Local Meter ID", customDataBinding: "enable: false"))
    @Raw(dataContext.AddInputField<MetersToDataPush>("RemoteXDAMeterID", fieldLabel: "Remote Meter ID", customDataBinding: "enable: false"))


}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script src="@("/@GSF/Web/Model/Scripts/gsf.web.primeui.js")"></script>
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<MetersToDataPush, DataHub>(ViewBag))
        var localMeters;
        $(function () {
            $('#addNewEditDialog').on('shown.bs.modal', function () {
                if (viewModel.dataHubIsConnected()) {
                    initializeAutoCompleteLookupField("MeterSelection", dataHub.searchMetersToDataPushs, false);

                    $('#inputMeterSelection').puiautocomplete({
                        select: function (event, item) {
                            var id = Number(item.data("id"));
                            viewModel.currentRecord().LocalXDAMeterID(id);
                            viewModel.currentRecord().LocalXDAAssetKey(item.data("label"));
                            viewModel.currentRecord().RemoteXDAMeterID(0);
                            viewModel.currentRecord().RemoteXDAName("Site" + id);

                        }
                    });
                }
            });
        });

        @*$(viewModel).on('newRecord', function (event, newRecord) {
            newRecord.MeterLocationID = @ViewBag.MeterLocationID;
        });*@

    </script>
}