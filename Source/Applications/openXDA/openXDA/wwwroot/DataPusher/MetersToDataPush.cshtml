@*******************************************************************************************************
    //  Meters.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System.Collections.Generic
@using System.Net.Http
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs
@using RazorEngine.Templating
@using openXDA.DataPusher

@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    string companyName = WebAPIHub.CompanyName;
    Dictionary<string, string> parameters = request.QueryParameters();
    if (parameters.ContainsKey("XDAInstance"))
    {
        ViewBag.XDAInstance = parameters["XDAInstance"];
    }
    if (parameters.ContainsKey("Name"))
    {
        ViewBag.Name = parameters["Name"];
    }

    Layout = "DataPusher/Layout.cshtml";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "LocalXDAAssetKey", "Local Name", "text-Left" },
        new[] { "RemoteXDAName", "Remote Name", "text-left"},
        new[] { "RemoteXDAAssetKey", "Remote Asset Key", "text-left"},
        new[] {null, "Export", "text-center"}
    };
    ViewBag.ShowSearchFilter = true;
    ViewBag.Title = "Selected Meters For Sync With " + ViewBag.Name;
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();

}
@helper BodyRows()
{
    <td width="20%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: LocalXDAAssetKey, click: $parent.viewPageRecord"></button></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: RemoteXDAName"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: RemoteXDAAssetKey"></td>
    <td width="10%" class="text-center valign-middle">
        <button type="button" class="btn btn-primary" title="Manually sync to remote device using set meters" data-bind="click: syncConfiguration.bind($data), enable: $parent.canEdit() && $parent.dataHubIsConnected()">Config Data</button>
        @*<button type="button" class="btn btn-primary" title="Manually sync to remote device using set meters" data-bind="click: syncFiles.bind($data), enable: Synced && $parent.canEdit() && $parent.dataHubIsConnected()">Files</button>*@
    </td>
    <td width="5%" class="text-center valign-middle">
        <a data-bind="attr: { href: '/DataPusher/FilesToDataPush.cshtml?MeterID=' + LocalXDAMeterID + '&Name=' + LocalXDAAssetKey  + '&XDAInstance=@ViewBag.XDAInstance' }, enable: $parent.dataHubIsConnected" class="btn btn-default form-control">Files&nbsp;&nbsp;<span class="badge" data-bind="text: getFileCount(LocalXDAMeterID, $($element)), attr: {id: 'meterCount' + ID}">0</span></a>
    </td>

    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
//if (viewModel.recordMode() == RecordMode.AddNew) {

//}
    <div data-bind="visible: $parent.recordMode() == RecordMode.AddNew">
        @Raw(dataContext.AddSelectField<MetersToDataPush, Meter>("MeterSelection", "ID", "AssetKey", fieldLabel: "Meter", restriction: new GSF.Data.Model.RecordRestriction("ID NOT IN (SELECT LocalXDAMeterID FROM MetersToDataPush WHERE ID IN (SELECT MetersToDataPushID FROM RemoteXDAInstanceMeter WHERE RemoteXDAInstanceID = {0}))", int.Parse(ViewBag.XDAInstance))))
    </div>
    @Raw(dataContext.AddInputField<MetersToDataPush>("LocalXDAAssetKey", fieldLabel: "Local Asset Key", customDataBinding: "enable: false"))
    @Raw(dataContext.AddInputField<MetersToDataPush>("RemoteXDAName", fieldLabel: "Remote Name"))
    @Raw(dataContext.AddInputField<MetersToDataPush>("RemoteXDAAssetKey", fieldLabel: "Remote Asset Key"))
    @Raw(dataContext.AddInputField<MetersToDataPush>("LocalXDAMeterID", fieldLabel: "Local Meter ID", customDataBinding: "enable: false"))
    @Raw(dataContext.AddInputField<MetersToDataPush>("RemoteXDAMeterID", fieldLabel: "Remote Meter ID", customDataBinding: "enable: false"))
    @Raw(dataContext.AddCheckBoxField<MetersToDataPush>("Obsfucate", customDataBinding: "click: handleObsfucateClick($element, $data)",fieldLabel: "Obsfucate meter information?"))
}

<div id="notify" style="height: 175px">
    <h4 id="meterName"></h4>
    <div id="stepProgress" class="progress"></div>
    <h4 id="message"></h4>
    <div id="overallProgress" class="progress"></div>
</div>

@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script src="@("/@GSF/Web/Shared/Scripts/gsf.web.primeui.js")"></script>
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<MetersToDataPush, DataHub>(ViewBag, "LocalXDAAssetKey", null, ViewBag.XDAInstance))

        function getFileCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryFilesToDataPushCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

        var localMeters;
        $(function () {
            $('#addNewEditDialog').on('shown.bs.modal', function () {
                if (viewModel.dataHubIsConnected()) {
                    if (viewModel.recordMode() == RecordMode.AddNew) {
                        dataHub.getMeterRecord($('#selectMeterSelection').val()).done(function (record) {
                            var id = Number($('#selectMeterSelection').val());
                            viewModel.currentRecord().LocalXDAMeterID(id);
                            viewModel.currentRecord().LocalXDAAssetKey(record.AssetKey);
                            if ($('#checkObsfucate').prop('checked')) {
                                viewModel.currentRecord().RemoteXDAAssetKey("00000000-0000-0000-0000-000000000000");
                                viewModel.currentRecord().RemoteXDAName("Site" + id);
                            }
                            else {
                                viewModel.currentRecord().RemoteXDAAssetKey('@(companyName + "-")' + record.AssetKey);
                                viewModel.currentRecord().RemoteXDAName('@(companyName + "-")' + record.Name);
                            }
                            viewModel.currentRecord().RemoteXDAMeterID(0);

                        });
                    }

                    $('#selectMeterSelection').off('change');
                    $('#selectMeterSelection').on('change', function (event) {
                        dataHub.getMeterRecord($('#selectMeterSelection').val()).done(function(record){
                            var id = Number($('#selectMeterSelection').val());
                            viewModel.currentRecord().LocalXDAMeterID(id);
                            viewModel.currentRecord().LocalXDAAssetKey(record.AssetKey);
                            if($('#checkObsfucate').prop('checked')){
                                viewModel.currentRecord().RemoteXDAAssetKey("00000000-0000-0000-0000-000000000000");
                                viewModel.currentRecord().RemoteXDAName("Site" + id);
                            }
                            else{
                                viewModel.currentRecord().RemoteXDAAssetKey('@(companyName + "-")' + record.AssetKey);
                                viewModel.currentRecord().RemoteXDAName('@(companyName + "-")' + record.Name);
                            }
                            viewModel.currentRecord().RemoteXDAMeterID(0);

                        });
                    });
                }
            });
            $('#notify').puinotify({position: 'bottom'});


            
        });

        $(viewModel).on('newRecord', function (event, newRecord) {
            newRecord.RemoteXDAInstanceId = @ViewBag.XDAInstance;
        });

        function syncConfiguration(record) {
            $('#meterName').text(record.LocalXDAAssetKey);
            $('#stepProgress').html('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%">0%</div>');
            $('#overallProgress').html('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%">0%</div>');
            $('#message').text('');

            $('#notify').puinotify('show');

            $.ajax({
                    type: "GET",
                    url: '@Url.Content("~/")' + "api/DataPusher/Send/XML/" + @ViewBag.XDAInstance + "/" + record.ID,
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    cache: false,
                    async: true

            }).done(function (connectionID) {
                var timeout = setInterval(function () {
                    $.ajax({
                        type: "GET",
                        url: '@Url.Content("~/")' + "api/DataPusher/LoaderStatus/XML/"+ @ViewBag.XDAInstance + "/" + connectionID,
                        contentType: "application/json; charset=utf-8",
                        dataType: 'json',
                        cache: false,
                        async: true

                    }).done(function (status) {
                        status = JSON.parse(status);
                        $('#stepProgress').html('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="' + status.Percent + '" aria-valuemin="0" aria-valuemax="100" style="width:' + status.Percent + '%">' + status.Percent + '%</div>');
                        $("#message").text(status.Step + " : " + status.Message);
                        $('#overallProgress').html('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="' + status.OverallPercent + '" aria-valuemin="0" aria-valuemax="100" style="width:' + status.OverallPercent + '%">' + status.OverallPercent + '%</div>');

                        if (status.Complete) {
                            clearInterval(timeout)
                            $('#notify').puinotify('hide');
                            $('.ui-notify-close').off('click')
                            $('.ui-notify-close').on('click', function (event) {
                                $('#notify').hide();
                            });
                            viewModel.queryPageRecords();

                        }
                    })

                }, 250);

            }).fail(function (msg) {
                    $("#message").text("Sync Failed : " + msg.message);
                    $('.ui-notify-close').off('click')
                    $('.ui-notify-close').on('click', function (event) {
                        $('#notify').hide();
                    });

                })


        }

        function syncFiles(record) {
            var ajaxHandle = null;

            $('#notify').puinotify('show', '<div class="progress">' +
                                    '<div class="progress-bar progress-bar-striped active" role="progressbar"' +
                                            ' aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%">0%</div>' +
                                '</div>');

            dataHub.getConnectionID().done(function (connectionId) {
                ajaxHandle = $.ajax({
                    type: "GET",
                    url: '@Url.Content("~/")' + "api/DataPusher/SyncMeterFiles/" + connectionId + "/" + @ViewBag.XDAInstance + "/" + record.ID,
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    cache: false,
                    async: true

                }).done(function () {
                    $('#notify').puinotify('hide');
                    $('.ui-notify-close').off('click')
                    $('.ui-notify-close').on('click', function (event) {
                        $('#notify').hide();
                    });
                    viewModel.queryPageRecords();
                }).fail(function (msg) {
                    $('#notify').puinotify('update', '<span>Sync Failed - : ' + msg.message + '</span>')
                    $('.ui-notify-close').off('click')
                    $('.ui-notify-close').on('click', function (event) {
                        $('#notify').hide();
                    });

                });


            });

            $('.ui-notify-close').on('click', function (event) {
                if (ajaxHandle != null && ajaxHandle.abort != null) ajaxHandle.abort();
            });

        }


        function handleObsfucateClick(control, record){
            if($(control).prop('checked'))
                viewModel.currentRecord().RemoteXDAAssetKey("00000000-0000-0000-0000-000000000000");
            else{
                if(viewModel.recordMode() == RecordMode.AddNew)
                    viewModel.currentRecord().RemoteXDAAssetKey($('#inputMeterSelection').val());
                else
                    viewModel.currentRecord().RemoteXDAAssetKey($('#inputLocalXDAAssetKey').val());
            }
        }

    </script>
}