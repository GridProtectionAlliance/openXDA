@*******************************************************************************************************
//  Meters.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF.Web.Model
@using GSF.Security.Model
@using openXDA.Model
@using openXDA.Hubs

@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
        .ui-notify{
            height: auto;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;

    Layout = "DataPusher/Layout.cshtml";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-Left" },
        new[] { "Address", "Remote Address", "text-left"},
        new[] { "Freqency", "Freqency", "text-left"},
        new[] {null, "Export", "text-center"},
        new[] { null, "", ""}

    };
    ViewBag.ShowSearchFilter = true;
    ViewBag.Title = "Remote XDA Instances";
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();

}
@helper BodyRows()
{
    <td width="20%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Name, click: $parent.viewPageRecord"></button></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: Address"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: Frequency"></td>

    <td width="30%" class="text-center valign-middle">
        <button type="button" class="btn btn-primary" title="Manually sync to remote device using set meters" data-bind="click: syncConfiguration.bind($data), enable: $parent.canEdit() && $parent.dataHubIsConnected()">Config Data</button>
        <button type="button" class="btn btn-primary" title="Manually sync to remote device using set meters" data-bind="click: syncFiles.bind($data), enable: $parent.canEdit() && $parent.dataHubIsConnected()">Files</button>
    </td>
    <td width="5%" class="text-center valign-middle"><a data-bind="attr: { href: '/DataPusher/MetersToDataPush.cshtml?XDAInstance=' + ID + '&Name=' + Name }, enable: $parent.dataHubIsConnected" class="btn btn-default form-control">Meters&nbsp;&nbsp;<span class="badge" data-bind="text: getMeterCount(ID, $($element)), attr: {id: 'meterCount' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<RemoteXDAInstance>("Name"))
    @Raw(dataContext.AddInputField<RemoteXDAInstance>("Address"))
    @Raw(dataContext.AddInputField<RemoteXDAInstance>("Frequency", fieldLabel: "Schedule Cron<span class=\"pull-right\">&nbsp;&nbsp;<a href=\"#\" data-toggle=\"modal\" data-target=\"#cronHelpDialog\" data-backdrop=\"static\"><small><em>Syntax Help</em></small></a></span>"))
    @Raw(dataContext.AddSelectField<RemoteXDAInstance, UserAccount>("UserAccountID", "ID", "AccountName", "Name"))

}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
<div id="cronHelpDialog" class="modal fade" role="dialog">
    <div class="modal-vertical-align-container">
        <div class="modal-dialog modal-md modal-vertical-align-center">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Cron Syntax</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="center-block" style="width: 380px">
                            <pre>
 # ┌───────────── min (0 - 59)
 # │ ┌────────────── hour (0 - 23)
 # │ │ ┌─────────────── day of month (1 - 31)
 # │ │ │ ┌──────────────── month (1 - 12)
 # │ │ │ │ ┌───────────────── day of week (0 - 6):
 # │ │ │ │ │        0 to 6 are Sunday to Saturday,
 # │ │ │ │ │        or 7 is Sunday, the same as 0
 # * * * * *
</pre>
                        </div>
                        <table class="small table-condensed table-center">
                            <tr>
                                <td style="text-align: right" nowrap>Never:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('')"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></button></td>
                                <td style="text-align: right" nowrap>Instantaneous:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('*')"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></button></td>
                            </tr>

                            <tr>
                                <td style="text-align: right" nowrap>Every minute:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('* * * * *')"><code>&nbsp;&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;</code></button></td>
                                <td style="text-align: right" nowrap>Every five minutes:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('*/5 * * * *')"><code>&nbsp;*/5&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;</code></button></td>
                            </tr>
                            <tr>
                                <td style="text-align: right" nowrap>Every half-hour:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0,30 * * * *')"><code>0,30&nbsp;*&nbsp;*&nbsp;*&nbsp;*</code></button></td>
                                <td style="text-align: right" nowrap>Every hour:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0 * * * *')"><code>&nbsp;&nbsp;0&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;&nbsp;</code></button></td>
                            <tr>
                                <td style="text-align: right" nowrap>Every four hours:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0 */4 * * *')"><code>&nbsp;0&nbsp;*/4&nbsp;*&nbsp;*&nbsp;*</code></button></td>
                                <td style="text-align: right" nowrap>Every day:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0 0 * * *')"><code>&nbsp;&nbsp;0&nbsp;0&nbsp;*&nbsp;*&nbsp;*&nbsp;&nbsp;</code></button></td>
                            </tr>
                            <tr>
                                <td style="text-align: right" nowrap>Every month:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0 0 1 * *')"><code>&nbsp;&nbsp;0&nbsp;0&nbsp;1&nbsp;*&nbsp;*&nbsp;</code></button></td>
                                <td style="text-align: right" nowrap>Every six months:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0 0 1 */6 *')"><code>&nbsp;0&nbsp;0&nbsp;1&nbsp;*/6&nbsp;*&nbsp;</code></button></td>
                            </tr>
                            <tr>
                                <td style="text-align: right" nowrap>Every year:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0 0 1 1 *')"><code>&nbsp;&nbsp;0&nbsp;0&nbsp;1&nbsp;1&nbsp;*&nbsp;</code></button></td>
                            </tr>

                        </table>
                        <br />
                        <div class="text-center">
                            <a href="https://en.wikipedia.org/wiki/Cron" target="_blank">https://en.wikipedia.org/wiki/Cron</a>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="notify">
    <h4 id="meterName"></h4>
    <div id="meterProgress" class="progress"></div>
    <h4 id="instanceName"></h4>
    <div id="instanceProgress" class="progress"></div>
</div>

@section Scripts
{
    <script src="@("/@GSF/Web/Shared/Scripts/gsf.web.primeui.js")"></script>
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<RemoteXDAInstance, DataHub>(ViewBag))
        var localMeters;
        $(function () {
            $('#notify').puinotify({position: 'bottom'});
            $('#addNewEditDialog').on('shown.bs.modal', function () {
                if (viewModel.recordMode() == RecordMode.AddNew) {
                    var options = $('#selectUserAccountID').children().remove()
                    options.sort(function (a, b) {
                        if (a.label.toLowerCase() < b.label.toLowerCase()) return -1;
                        if (a.label.toLowerCase() > b.label.toLowerCase()) return 1;
                        return 0;
                    });
                    $.each(options, function (i, option) {
                        $('#selectUserAccountID').append(option);
                    });
                    $('#selectUserAccountID').val($('#selectUserAccountID option').first().val());
                }
            });

            dataHubClient.updateProgressBarForInstance = function (instanceName, update) {
                $('#instanceName').text(instanceName);
                $('#instanceProgress').html('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="' + update + '" aria-valuemin="0" aria-valuemax="100" style="width:' + update + '%">' + update + '%</div>');

            }

            dataHubClient.updateProgressBarForMeter = function (meterName, update) {
                $('#meterName').text(meterName);
                $('#meterProgress').html('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="' + update + '" aria-valuemin="0" aria-valuemax="100" style="width:' + update + '%">' + update + '%</div>');
            }


        });

        @*$(viewModel).on('newRecord', function (event, newRecord) {
            newRecord.MeterLocationID = @ViewBag.MeterLocationID;
        });*@

        function updateSchedule(schedule) {
            if (viewModel.recordMode() !== RecordMode.View)
                viewModel.currentRecord().Frequency(schedule);
        }

        function getMeterCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryMetersToDataPushCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

        function sync(record) {
            dataHub.syncInstance(record.ID);
        }

        function syncConfiguration(record) {
            $('#notify').puinotify('show');
            dataHub.syncInstanceConfiguration(record.ID)
                .done(function () { $('#notify').puinotify('hide'); viewModel.queryPageRecords(); })
                .fail(function (msg) { $('#notify').puinotify('update', '<span>Sync Failed - : ' + msg.message + '</span>') });

        }

        function syncFiles(record) {
            $('#notify').puinotify('show');
            dataHub.syncFilesForInstance(record.ID)
                .done(function () { $('#notify').puinotify('hide'); viewModel.queryPageRecords(); })
                .fail(function (msg) { $('#notify').puinotify('update', '<span>Sync Failed - : ' + msg.message + '</span>') });
        }

    </script>
}