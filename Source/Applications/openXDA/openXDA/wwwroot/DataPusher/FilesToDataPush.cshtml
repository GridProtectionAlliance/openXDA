@*//******************************************************************************************************
//  FilesToDataPush.cshtml - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  10/27/2021 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@


@using System.Collections.Generic
@using System.Net.Http
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@using openXDA.Hubs
@using RazorEngine.Templating
@using openXDA.DataPusher

@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    string companyName = WebAPIHub.CompanyName;
    Dictionary<string, string> parameters = request.QueryParameters();
    
    if (parameters.ContainsKey("MeterID"))
    {
        ViewBag.MeterID = parameters["MeterID"];
    }

    if (parameters.ContainsKey("XDAInstance"))
    {
        ViewBag.XDAInstance = parameters["XDAInstance"];
    }


    if (parameters.ContainsKey("Name"))
    {
        ViewBag.Name = parameters["Name"];
    }

    Layout = "DataPusher/Layout.cshtml";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "DataStartTime", "File Time", "text-Left" },
        new[] { "LargestFile", "Largest File", "text-left"},
        new[] { "FilesInGroup", "Files", "text-center"},
        new[] { "Events", "Events", "text-center"},
        new[] { "Synced", "Synced", "text-center"},
        new[] { "ProcessingError", "Processing Error", "text-center"},


    };
    ViewBag.ShowSearchFilter = true;
    ViewBag.HideAddNewButton = true;
    ViewBag.HideExportCSVButton = true;

    ViewBag.Title = "Selected Files For " + ViewBag.Name;
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();


}
@helper BodyRows()
{
    <td width="20%" class="text-left valign-middle" data-bind="text: DataStartTime"></td>
    <td width="auto" class="text-left valign-middle" data-bind="text: LargestFile"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: FilesInGroup"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: Events"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: Synced"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: ProcessingError"></td>

    <td width="10%" class="text-center valign-middle">
        <button type="button" class="btn btn-primary" title="Manually sync to remote device using set meters" data-bind="click: syncFiles.bind($data), enable: $parent.canEdit() && $parent.dataHubIsConnected()">Sync</button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
}

<div id="notify">
    <h4 id="fileName"></h4>
    <div id="progress" class="progress"></div>
</div>

@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script src="@("/@GSF/Web/Shared/Scripts/gsf.web.primeui.js")"></script>
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<FilesToDataPush, DataHub>(ViewBag, "-DataStartTime", null, ViewBag.MeterID))

        $(function () {
            $('#notify').puinotify({position: 'bottom'});           
        });

        function syncFiles(record) {
            $('#progress').html('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%">0%</div>');
            $('#fileName').text(record.LargestFile);
            $('#notify').puinotify('show');

            var xhr = new XMLHttpRequest();
            xhr.open('GET', '@Url.Content("~/")' + "api/DataPusher/Send/Files/" + @ViewBag.XDAInstance + "/" + @ViewBag.MeterID + "/" + record.ID)
            xhr.send();
            xhr.onload = function () {
                //console.log(xhr);

                $('#progress').html('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width:100%">100%</div>');
                $('#fileName').text(record.LargestFile + " : " + xhr.responseText.replace("\"", ""));

                $('#notify').puinotify('hide');
                $('.ui-notify-close').off('click')
                $('.ui-notify-close').on('click', function (event) {
                    $('#notify').hide();
                });
                viewModel.queryPageRecords();

            }

            xhr.onprogress = function (event) {
                $('#progress').html('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width:50%">50%</div>');
                $('#fileName').text(record.LargestFile + " : Request sent to server.  Processing ...");

                //console.log(event);

            }

            xhr.onerror = function () {
                $('#fileName').text(record.LargestFile + " : Request failed.");
            }
        }
    </script>
}