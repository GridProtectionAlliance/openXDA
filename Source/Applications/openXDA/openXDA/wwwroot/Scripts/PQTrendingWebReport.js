!function(n){var r={};function o(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.m=n,o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=158)}([function(e,t,n){e.exports=n(37)()},function(e,t){e.exports=React},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(114),a=(r=o)&&r.__esModule?r:{default:r};t.default=a.default||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(93),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,a.default)(t))&&"function"!=typeof t?e:t}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(188)),o=i(n(192)),a=i(n(93));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,a.default)(t)));e.prototype=(0,o.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(r.default?(0,r.default)(e,t):e.__proto__=t)}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n={};for(var r in e)0<=t.indexOf(r)||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var i={}.hasOwnProperty;function s(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var r=typeof n;if("string"==r||"number"==r)e.push(n);else if(Array.isArray(n)&&n.length){var o=s.apply(null,n);o&&e.push(o)}else if("object"==r)for(var a in n)i.call(n,a)&&n[a]&&e.push(a)}}return e.join(" ")}e.exports?(s.default=s,e.exports=s):void 0===(r=function(){return s}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(1)),s=n(201),r=o(n(72));function o(e){return e&&e.__esModule?e:{default:e}}t.default=(0,r.default)(function(e,t,n,r,o){var a=e[t];return i.default.isValidElement(a)?new Error("Invalid "+r+" `"+o+"` of type ReactElement supplied to `"+n+"`,expected an element type (a string , component class, or function component)."):(0,s.isValidElementType)(a)?null:new Error("Invalid "+r+" `"+o+"` of value `"+a+"` supplied to `"+n+"`, expected an element type (a string , component class, or function component).")}),e.exports=t.default},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";var r=n(1),o=n(41);if(void 0===r)throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");var a=(new r.Component).updater;e.exports=o(r.Component,r.isValidElement,a)},function(e,t){e.exports=moment},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";n.r(t),n.d(t,"IGNORE_CLASS_NAME",function(){return f});var i=n(1),s=n(9);var r,l,u=(void 0===r&&(r=0),function(){return++r}),c={},p={},o=["touchstart","touchmove"],f="ignore-react-onclickoutside";function d(e,t){var n=null;return-1!==o.indexOf(t)&&l&&(n={passive:!e.props.preventDefault}),n}t.default=function(r,o){var e,t,a=r.displayName||r.name||"Component";return t=e=function(t){function e(e){var n;return(n=t.call(this,e)||this).__outsideClickHandler=function(e){if("function"!=typeof n.__clickOutsideHandlerProp){var t=n.getInstance();if("function"!=typeof t.props.handleClickOutside){if("function"!=typeof t.handleClickOutside)throw new Error("WrappedComponent: "+a+" lacks a handleClickOutside(event) function for processing outside click events.");t.handleClickOutside(e)}else t.props.handleClickOutside(e)}else n.__clickOutsideHandlerProp(e)},n.__getComponentNode=function(){var e=n.getInstance();return o&&"function"==typeof o.setClickOutsideRef?o.setClickOutsideRef()(e):"function"==typeof e.setClickOutsideRef?e.setClickOutsideRef():Object(s.findDOMNode)(e)},n.enableOnClickOutside=function(){if("undefined"!=typeof document&&!p[n._uid]){void 0===l&&(l=function(){if("undefined"!=typeof window&&"function"==typeof window.addEventListener){var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}}),n=function(){};return window.addEventListener("testPassiveEventSupport",n,t),window.removeEventListener("testPassiveEventSupport",n,t),e}}()),p[n._uid]=!0;var e=n.props.eventTypes;e.forEach||(e=[e]),c[n._uid]=function(e){null!==n.componentNode&&(n.props.preventDefault&&e.preventDefault(),n.props.stopPropagation&&e.stopPropagation(),n.props.excludeScrollbar&&function(e){return document.documentElement.clientWidth<=e.clientX||document.documentElement.clientHeight<=e.clientY}(e)||function(e,t,n){if(e===t)return!0;for(;e.parentNode;){if(o=n,(r=e)===t||(r.correspondingElement?r.correspondingElement.classList.contains(o):r.classList.contains(o)))return!0;e=e.parentNode}var r,o;return e}(e.target,n.componentNode,n.props.outsideClickIgnoreClass)===document&&n.__outsideClickHandler(e))},e.forEach(function(e){document.addEventListener(e,c[n._uid],d(n,e))})}},n.disableOnClickOutside=function(){delete p[n._uid];var t=c[n._uid];if(t&&"undefined"!=typeof document){var e=n.props.eventTypes;e.forEach||(e=[e]),e.forEach(function(e){return document.removeEventListener(e,t,d(n,e))}),delete c[n._uid]}},n.getRef=function(e){return n.instanceRef=e},n._uid=u(),n}!function(e,t){e.prototype=Object.create(t.prototype),(e.prototype.constructor=e).__proto__=t}(e,t);var n=e.prototype;return n.getInstance=function(){if(!r.prototype.isReactComponent)return this;var e=this.instanceRef;return e.getInstance?e.getInstance():e},n.componentDidMount=function(){if("undefined"!=typeof document&&document.createElement){var e=this.getInstance();if(o&&"function"==typeof o.handleClickOutside&&(this.__clickOutsideHandlerProp=o.handleClickOutside(e),"function"!=typeof this.__clickOutsideHandlerProp))throw new Error("WrappedComponent: "+a+" lacks a function for processing outside click events specified by the handleClickOutside config option.");this.componentNode=this.__getComponentNode(),this.props.disableOnClickOutside||this.enableOnClickOutside()}},n.componentDidUpdate=function(){this.componentNode=this.__getComponentNode()},n.componentWillUnmount=function(){this.disableOnClickOutside()},n.render=function(){var e=this.props,t=(e.excludeScrollbar,function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],0<=t.indexOf(n)||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],0<=t.indexOf(n)||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["excludeScrollbar"]));return r.prototype.isReactComponent?t.ref=this.getRef:t.wrappedRef=this.getRef,t.disableOnClickOutside=this.disableOnClickOutside,t.enableOnClickOutside=this.enableOnClickOutside,Object(i.createElement)(r,t)},e}(i.Component),e.displayName="OnClickOutside("+a+")",e.defaultProps={eventTypes:["mousedown","touchstart"],excludeScrollbar:o&&o.excludeScrollbar||!1,outsideClickIgnoreClass:f,preventDefault:!1,stopPropagation:!1},e.getClass=function(){return r.getClass?r.getClass():r},t}},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,K,$){(function(z,B){var H;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var ri,oi="Expected a function",ai="__lodash_hash_undefined__",ii="__lodash_placeholder__",si=128,li=9007199254740991,ui=NaN,ci=4294967295,pi=[["ary",si],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],fi="[object Arguments]",di="[object Array]",hi="[object Boolean]",mi="[object Date]",vi="[object Error]",yi="[object Function]",gi="[object GeneratorFunction]",bi="[object Map]",xi="[object Number]",_i="[object Object]",Ei="[object Promise]",Ci="[object RegExp]",wi="[object Set]",Oi="[object String]",ki="[object Symbol]",Ti="[object WeakMap]",Si="[object ArrayBuffer]",Ni="[object DataView]",Mi="[object Float32Array]",Pi="[object Float64Array]",Di="[object Int8Array]",Ii="[object Int16Array]",Ai="[object Int32Array]",ji="[object Uint8Array]",Ri="[object Uint8ClampedArray]",Li="[object Uint16Array]",Fi="[object Uint32Array]",Wi=/\b__p \+= '';/g,Ui=/\b(__p \+=) '' \+/g,zi=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Bi=/&(?:amp|lt|gt|quot|#39);/g,Hi=/[&<>"']/g,Ki=RegExp(Bi.source),$i=RegExp(Hi.source),Yi=/<%-([\s\S]+?)%>/g,Vi=/<%([\s\S]+?)%>/g,qi=/<%=([\s\S]+?)%>/g,Gi=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Xi=/^\w*$/,Ji=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Zi=/[\\^$.*+?()[\]{}|]/g,Qi=RegExp(Zi.source),es=/^\s+|\s+$/g,ts=/^\s+/,ns=/\s+$/,rs=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,os=/\{\n\/\* \[wrapped with (.+)\] \*/,as=/,? & /,is=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ss=/\\(\\)?/g,ls=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,us=/\w*$/,cs=/^[-+]0x[0-9a-f]+$/i,ps=/^0b[01]+$/i,fs=/^\[object .+?Constructor\]$/,ds=/^0o[0-7]+$/i,hs=/^(?:0|[1-9]\d*)$/,ms=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,vs=/($^)/,ys=/['\n\r\u2028\u2029\\]/g,e="\\ud800-\\udfff",t="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",n="\\u2700-\\u27bf",r="a-z\\xdf-\\xf6\\xf8-\\xff",o="A-Z\\xc0-\\xd6\\xd8-\\xde",a="\\ufe0e\\ufe0f",i="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",s="['’]",l="["+e+"]",u="["+i+"]",c="["+t+"]",p="\\d+",f="["+n+"]",d="["+r+"]",h="[^"+e+i+p+n+r+o+"]",m="\\ud83c[\\udffb-\\udfff]",v="[^"+e+"]",y="(?:\\ud83c[\\udde6-\\uddff]){2}",g="[\\ud800-\\udbff][\\udc00-\\udfff]",b="["+o+"]",x="\\u200d",_="(?:"+d+"|"+h+")",E="(?:"+b+"|"+h+")",C="(?:['’](?:d|ll|m|re|s|t|ve))?",w="(?:['’](?:D|LL|M|RE|S|T|VE))?",O="(?:"+c+"|"+m+")"+"?",k="["+a+"]?",T=k+O+("(?:"+x+"(?:"+[v,y,g].join("|")+")"+k+O+")*"),S="(?:"+[f,y,g].join("|")+")"+T,N="(?:"+[v+c+"?",c,y,g,l].join("|")+")",gs=RegExp(s,"g"),bs=RegExp(c,"g"),M=RegExp(m+"(?="+m+")|"+N+T,"g"),xs=RegExp([b+"?"+d+"+"+C+"(?="+[u,b,"$"].join("|")+")",E+"+"+w+"(?="+[u,b+_,"$"].join("|")+")",b+"?"+_+"+"+C,b+"+"+w,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",p,S].join("|"),"g"),P=RegExp("["+x+e+t+a+"]"),_s=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Es=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Cs=-1,ws={};ws[Mi]=ws[Pi]=ws[Di]=ws[Ii]=ws[Ai]=ws[ji]=ws[Ri]=ws[Li]=ws[Fi]=!0,ws[fi]=ws[di]=ws[Si]=ws[hi]=ws[Ni]=ws[mi]=ws[vi]=ws[yi]=ws[bi]=ws[xi]=ws[_i]=ws[Ci]=ws[wi]=ws[Oi]=ws[Ti]=!1;var Os={};Os[fi]=Os[di]=Os[Si]=Os[Ni]=Os[hi]=Os[mi]=Os[Mi]=Os[Pi]=Os[Di]=Os[Ii]=Os[Ai]=Os[bi]=Os[xi]=Os[_i]=Os[Ci]=Os[wi]=Os[Oi]=Os[ki]=Os[ji]=Os[Ri]=Os[Li]=Os[Fi]=!0,Os[vi]=Os[yi]=Os[Ti]=!1;var D={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ks=parseFloat,Ts=parseInt,I="object"==typeof z&&z&&z.Object===Object&&z,A="object"==typeof self&&self&&self.Object===Object&&self,Ss=I||A||Function("return this")(),j=K&&!K.nodeType&&K,R=j&&"object"==typeof B&&B&&!B.nodeType&&B,Ns=R&&R.exports===j,L=Ns&&I.process,F=function(){try{var e=R&&R.require&&R.require("util").types;return e||L&&L.binding&&L.binding("util")}catch(e){}}(),Ms=F&&F.isArrayBuffer,Ps=F&&F.isDate,Ds=F&&F.isMap,Is=F&&F.isRegExp,As=F&&F.isSet,js=F&&F.isTypedArray;function Rs(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Ls(e,t,n,r){for(var o=-1,a=null==e?0:e.length;++o<a;){var i=e[o];t(r,i,n(i),e)}return r}function Fs(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Ws(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Us(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function zs(e,t){for(var n=-1,r=null==e?0:e.length,o=0,a=[];++n<r;){var i=e[n];t(i,n,e)&&(a[o++]=i)}return a}function Bs(e,t){return!!(null==e?0:e.length)&&-1<Js(e,t,0)}function Hs(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}function Ks(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}function $s(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function Ys(e,t,n,r){var o=-1,a=null==e?0:e.length;for(r&&a&&(n=e[++o]);++o<a;)n=t(n,e[o],o,e);return n}function Vs(e,t,n,r){var o=null==e?0:e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function qs(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var W=tl("length");function Gs(e,r,t){var o;return t(e,function(e,t,n){if(r(e,t,n))return o=t,!1}),o}function Xs(e,t,n,r){for(var o=e.length,a=n+(r?1:-1);r?a--:++a<o;)if(t(e[a],a,e))return a;return-1}function Js(e,t,n){return t==t?function(e,t,n){var r=n-1,o=e.length;for(;++r<o;)if(e[r]===t)return r;return-1}(e,t,n):Xs(e,Qs,n)}function Zs(e,t,n,r){for(var o=n-1,a=e.length;++o<a;)if(r(e[o],t))return o;return-1}function Qs(e){return e!=e}function el(e,t){var n=null==e?0:e.length;return n?rl(e,t)/n:ui}function tl(t){return function(e){return null==e?ri:e[t]}}function U(t){return function(e){return null==t?ri:t[e]}}function nl(e,r,o,a,t){return t(e,function(e,t,n){o=a?(a=!1,e):r(o,e,t,n)}),o}function rl(e,t){for(var n,r=-1,o=e.length;++r<o;){var a=t(e[r]);a!==ri&&(n=n===ri?a:n+a)}return n}function ol(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function al(t){return function(e){return t(e)}}function il(t,e){return Ks(e,function(e){return t[e]})}function sl(e,t){return e.has(t)}function ll(e,t){for(var n=-1,r=e.length;++n<r&&-1<Js(t,e[n],0););return n}function ul(e,t){for(var n=e.length;n--&&-1<Js(t,e[n],0););return n}var cl=U({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),pl=U({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function fl(e){return"\\"+D[e]}function dl(e){return P.test(e)}function hl(e){var n=-1,r=Array(e.size);return e.forEach(function(e,t){r[++n]=[t,e]}),r}function ml(t,n){return function(e){return t(n(e))}}function vl(e,t){for(var n=-1,r=e.length,o=0,a=[];++n<r;){var i=e[n];i!==t&&i!==ii||(e[n]=ii,a[o++]=n)}return a}function yl(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function gl(e){return dl(e)?function(e){var t=M.lastIndex=0;for(;M.test(e);)++t;return t}(e):W(e)}function bl(e){return dl(e)?function(e){return e.match(M)||[]}(e):function(e){return e.split("")}(e)}var xl=U({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var _l=function e(t){var n,O=(t=null==t?Ss:_l.defaults(Ss.Object(),t,_l.pick(Ss,Es))).Array,r=t.Date,o=t.Error,v=t.Function,a=t.Math,m=t.Object,y=t.RegExp,c=t.String,g=t.TypeError,i=O.prototype,s=v.prototype,p=m.prototype,l=t["__core-js_shared__"],u=s.toString,x=p.hasOwnProperty,f=0,d=(n=/[^.]+$/.exec(l&&l.keys&&l.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",h=p.toString,b=u.call(m),_=Ss._,E=y("^"+u.call(x).replace(Zi,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),C=Ns?t.Buffer:ri,w=t.Symbol,k=t.Uint8Array,T=C?C.allocUnsafe:ri,S=ml(m.getPrototypeOf,m),N=m.create,M=p.propertyIsEnumerable,P=i.splice,D=w?w.isConcatSpreadable:ri,I=w?w.iterator:ri,A=w?w.toStringTag:ri,j=function(){try{var e=zn(m,"defineProperty");return e({},"",{}),e}catch(e){}}(),R=t.clearTimeout!==Ss.clearTimeout&&t.clearTimeout,L=r&&r.now!==Ss.Date.now&&r.now,F=t.setTimeout!==Ss.setTimeout&&t.setTimeout,W=a.ceil,U=a.floor,z=m.getOwnPropertySymbols,B=C?C.isBuffer:ri,H=t.isFinite,K=i.join,$=ml(m.keys,m),Y=a.max,V=a.min,q=r.now,G=t.parseInt,X=a.random,J=i.reverse,Z=zn(t,"DataView"),Q=zn(t,"Map"),ee=zn(t,"Promise"),te=zn(t,"Set"),ne=zn(t,"WeakMap"),re=zn(m,"create"),oe=ne&&new ne,ae={},ie=mr(Z),se=mr(Q),le=mr(ee),ue=mr(te),ce=mr(ne),pe=w?w.prototype:ri,fe=pe?pe.valueOf:ri,de=pe?pe.toString:ri;function he(e){if(Io(e)&&!Eo(e)&&!(e instanceof be)){if(e instanceof ge)return e;if(x.call(e,"__wrapped__"))return vr(e)}return new ge(e)}var me=function(e){if(!Do(e))return{};if(N)return N(e);ve.prototype=e;var t=new ve;return ve.prototype=ri,t};function ve(){}function ye(){}function ge(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=ri}function be(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=ci,this.__views__=[]}function xe(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function _e(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ee(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ce(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Ee;++t<n;)this.add(e[t])}function we(e){var t=this.__data__=new _e(e);this.size=t.size}function Oe(e,t){var n=Eo(e),r=!n&&_o(e),o=!n&&!r&&ko(e),a=!n&&!r&&!o&&zo(e),i=n||r||o||a,s=i?ol(e.length,c):[],l=s.length;for(var u in e)!t&&!x.call(e,u)||i&&("length"==u||o&&("offset"==u||"parent"==u)||a&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||qn(u,l))||s.push(u);return s}function ke(e){var t=e.length;return t?e[Ct(0,t-1)]:ri}function Te(e,t){return cr(on(e),Re(t,0,e.length))}function Se(e){return cr(on(e))}function Ne(e,t,n){(n===ri||go(e[t],n))&&(n!==ri||t in e)||Ae(e,t,n)}function Me(e,t,n){var r=e[t];x.call(e,t)&&go(r,n)&&(n!==ri||t in e)||Ae(e,t,n)}function Pe(e,t){for(var n=e.length;n--;)if(go(e[n][0],t))return n;return-1}function De(e,r,o,a){return ze(e,function(e,t,n){r(a,e,o(e),n)}),a}function Ie(e,t){return e&&an(t,ua(t),e)}function Ae(e,t,n){"__proto__"==t&&j?j(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function je(e,t){for(var n=-1,r=t.length,o=O(r),a=null==e;++n<r;)o[n]=a?ri:oa(e,t[n]);return o}function Re(e,t,n){return e==e&&(n!==ri&&(e=e<=n?e:n),t!==ri&&(e=t<=e?e:t)),e}function Le(n,r,o,e,t,a){var i,s=1&r,l=2&r,u=4&r;if(o&&(i=t?o(n,e,t,a):o(n)),i!==ri)return i;if(!Do(n))return n;var c=Eo(n);if(c){if(i=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&x.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(n),!s)return on(n,i)}else{var p=Kn(n),f=p==yi||p==gi;if(ko(n))return Zt(n,s);if(p==_i||p==fi||f&&!t){if(i=l||f?{}:Yn(n),!s)return l?function(e,t){return an(e,Hn(e),t)}(n,function(e,t){return e&&an(t,ca(t),e)}(i,n)):function(e,t){return an(e,Bn(e),t)}(n,Ie(i,n))}else{if(!Os[p])return t?n:{};i=function(e,t,n){var r=e.constructor;switch(t){case Si:return Qt(e);case hi:case mi:return new r(+e);case Ni:return function(e,t){var n=t?Qt(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case Mi:case Pi:case Di:case Ii:case Ai:case ji:case Ri:case Li:case Fi:return en(e,n);case bi:return new r;case xi:case Oi:return new r(e);case Ci:return function(e){var t=new e.constructor(e.source,us.exec(e));return t.lastIndex=e.lastIndex,t}(e);case wi:return new r;case ki:return function(e){return fe?m(fe.call(e)):{}}(e)}}(n,p,s)}}var d=(a=a||new we).get(n);if(d)return d;a.set(n,i),Fo(n)?n.forEach(function(e){i.add(Le(e,r,o,e,n,a))}):Ao(n)&&n.forEach(function(e,t){i.set(t,Le(e,r,o,t,n,a))});var h=c?ri:(u?l?An:In:l?ca:ua)(n);return Fs(h||n,function(e,t){h&&(e=n[t=e]),Me(i,t,Le(e,r,o,t,n,a))}),i}function Fe(e,t,n){var r=n.length;if(null==e)return!r;for(e=m(e);r--;){var o=n[r],a=t[o],i=e[o];if(i===ri&&!(o in e)||!a(i))return!1}return!0}function We(e,t,n){if("function"!=typeof e)throw new g(oi);return ir(function(){e.apply(ri,n)},t)}function Ue(e,t,n,r){var o=-1,a=Bs,i=!0,s=e.length,l=[],u=t.length;if(!s)return l;n&&(t=Ks(t,al(n))),r?(a=Hs,i=!1):200<=t.length&&(a=sl,i=!1,t=new Ce(t));e:for(;++o<s;){var c=e[o],p=null==n?c:n(c);if(c=r||0!==c?c:0,i&&p==p){for(var f=u;f--;)if(t[f]===p)continue e;l.push(c)}else a(t,p,r)||l.push(c)}return l}he.templateSettings={escape:Yi,evaluate:Vi,interpolate:qi,variable:"",imports:{_:he}},(he.prototype=ye.prototype).constructor=he,(ge.prototype=me(ye.prototype)).constructor=ge,(be.prototype=me(ye.prototype)).constructor=be,xe.prototype.clear=function(){this.__data__=re?re(null):{},this.size=0},xe.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},xe.prototype.get=function(e){var t=this.__data__;if(re){var n=t[e];return n===ai?ri:n}return x.call(t,e)?t[e]:ri},xe.prototype.has=function(e){var t=this.__data__;return re?t[e]!==ri:x.call(t,e)},xe.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=re&&t===ri?ai:t,this},_e.prototype.clear=function(){this.__data__=[],this.size=0},_e.prototype.delete=function(e){var t=this.__data__,n=Pe(t,e);return!(n<0)&&(n==t.length-1?t.pop():P.call(t,n,1),--this.size,!0)},_e.prototype.get=function(e){var t=this.__data__,n=Pe(t,e);return n<0?ri:t[n][1]},_e.prototype.has=function(e){return-1<Pe(this.__data__,e)},_e.prototype.set=function(e,t){var n=this.__data__,r=Pe(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Ee.prototype.clear=function(){this.size=0,this.__data__={hash:new xe,map:new(Q||_e),string:new xe}},Ee.prototype.delete=function(e){var t=Wn(this,e).delete(e);return this.size-=t?1:0,t},Ee.prototype.get=function(e){return Wn(this,e).get(e)},Ee.prototype.has=function(e){return Wn(this,e).has(e)},Ee.prototype.set=function(e,t){var n=Wn(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Ce.prototype.add=Ce.prototype.push=function(e){return this.__data__.set(e,ai),this},Ce.prototype.has=function(e){return this.__data__.has(e)},we.prototype.clear=function(){this.__data__=new _e,this.size=0},we.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},we.prototype.get=function(e){return this.__data__.get(e)},we.prototype.has=function(e){return this.__data__.has(e)},we.prototype.set=function(e,t){var n=this.__data__;if(n instanceof _e){var r=n.__data__;if(!Q||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Ee(r)}return n.set(e,t),this.size=n.size,this};var ze=un(Ge),Be=un(Xe,!0);function He(e,r){var o=!0;return ze(e,function(e,t,n){return o=!!r(e,t,n)}),o}function Ke(e,t,n){for(var r=-1,o=e.length;++r<o;){var a=e[r],i=t(a);if(null!=i&&(s===ri?i==i&&!Uo(i):n(i,s)))var s=i,l=a}return l}function $e(e,r){var o=[];return ze(e,function(e,t,n){r(e,t,n)&&o.push(e)}),o}function Ye(e,t,n,r,o){var a=-1,i=e.length;for(n=n||Vn,o=o||[];++a<i;){var s=e[a];0<t&&n(s)?1<t?Ye(s,t-1,n,r,o):$s(o,s):r||(o[o.length]=s)}return o}var Ve=cn(),qe=cn(!0);function Ge(e,t){return e&&Ve(e,t,ua)}function Xe(e,t){return e&&qe(e,t,ua)}function Je(t,e){return zs(e,function(e){return No(t[e])})}function Ze(e,t){for(var n=0,r=(t=qt(t,e)).length;null!=e&&n<r;)e=e[hr(t[n++])];return n&&n==r?e:ri}function Qe(e,t,n){var r=t(e);return Eo(e)?r:$s(r,n(e))}function et(e){return null==e?e===ri?"[object Undefined]":"[object Null]":A&&A in m(e)?function(e){var t=x.call(e,A),n=e[A];try{e[A]=ri;var r=!0}catch(e){}var o=h.call(e);r&&(t?e[A]=n:delete e[A]);return o}(e):function(e){return h.call(e)}(e)}function tt(e,t){return t<e}function nt(e,t){return null!=e&&x.call(e,t)}function rt(e,t){return null!=e&&t in m(e)}function ot(e,t,n){for(var r=n?Hs:Bs,o=e[0].length,a=e.length,i=a,s=O(a),l=1/0,u=[];i--;){var c=e[i];i&&t&&(c=Ks(c,al(t))),l=V(c.length,l),s[i]=!n&&(t||120<=o&&120<=c.length)?new Ce(i&&c):ri}c=e[0];var p=-1,f=s[0];e:for(;++p<o&&u.length<l;){var d=c[p],h=t?t(d):d;if(d=n||0!==d?d:0,!(f?sl(f,h):r(u,h,n))){for(i=a;--i;){var m=s[i];if(!(m?sl(m,h):r(e[i],h,n)))continue e}f&&f.push(h),u.push(d)}}return u}function at(e,t,n){var r=null==(e=rr(e,t=qt(t,e)))?e:e[hr(Tr(t))];return null==r?ri:Rs(r,e,n)}function it(e){return Io(e)&&et(e)==fi}function st(e,t,n,r,o){return e===t||(null==e||null==t||!Io(e)&&!Io(t)?e!=e&&t!=t:function(e,t,n,r,o,a){var i=Eo(e),s=Eo(t),l=i?di:Kn(e),u=s?di:Kn(t),c=(l=l==fi?_i:l)==_i,p=(u=u==fi?_i:u)==_i,f=l==u;if(f&&ko(e)){if(!ko(t))return!1;c=!(i=!0)}if(f&&!c)return a=a||new we,i||zo(e)?Pn(e,t,n,r,o,a):function(e,t,n,r,o,a,i){switch(n){case Ni:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case Si:return!(e.byteLength!=t.byteLength||!a(new k(e),new k(t)));case hi:case mi:case xi:return go(+e,+t);case vi:return e.name==t.name&&e.message==t.message;case Ci:case Oi:return e==t+"";case bi:var s=hl;case wi:var l=1&r;if(s=s||yl,e.size!=t.size&&!l)return!1;var u=i.get(e);if(u)return u==t;r|=2,i.set(e,t);var c=Pn(s(e),s(t),r,o,a,i);return i.delete(e),c;case ki:if(fe)return fe.call(e)==fe.call(t)}return!1}(e,t,l,n,r,o,a);if(!(1&n)){var d=c&&x.call(e,"__wrapped__"),h=p&&x.call(t,"__wrapped__");if(d||h){var m=d?e.value():e,v=h?t.value():t;return a=a||new we,o(m,v,n,r,a)}}return f&&(a=a||new we,function(e,t,n,r,o,a){var i=1&n,s=In(e),l=s.length,u=In(t).length;if(l!=u&&!i)return!1;var c=l;for(;c--;){var p=s[c];if(!(i?p in t:x.call(t,p)))return!1}var f=a.get(e);if(f&&a.get(t))return f==t;var d=!0;a.set(e,t),a.set(t,e);var h=i;for(;++c<l;){p=s[c];var m=e[p],v=t[p];if(r)var y=i?r(v,m,p,t,e,a):r(m,v,p,e,t,a);if(!(y===ri?m===v||o(m,v,n,r,a):y)){d=!1;break}h=h||"constructor"==p}if(d&&!h){var g=e.constructor,b=t.constructor;g!=b&&"constructor"in e&&"constructor"in t&&!("function"==typeof g&&g instanceof g&&"function"==typeof b&&b instanceof b)&&(d=!1)}return a.delete(e),a.delete(t),d}(e,t,n,r,o,a))}(e,t,n,r,st,o))}function lt(e,t,n,r){var o=n.length,a=o,i=!r;if(null==e)return!a;for(e=m(e);o--;){var s=n[o];if(i&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++o<a;){var l=(s=n[o])[0],u=e[l],c=s[1];if(i&&s[2]){if(u===ri&&!(l in e))return!1}else{var p=new we;if(r)var f=r(u,c,l,e,t,p);if(!(f===ri?st(c,u,3,r,p):f))return!1}}return!0}function ut(e){return!(!Do(e)||function(e){return!!d&&d in e}(e))&&(No(e)?E:fs).test(mr(e))}function ct(e){return"function"==typeof e?e:null==e?ja:"object"==typeof e?Eo(e)?vt(e[0],e[1]):mt(e):Ka(e)}function pt(e){if(!Qn(e))return $(e);var t=[];for(var n in m(e))x.call(e,n)&&"constructor"!=n&&t.push(n);return t}function ft(e){if(!Do(e))return function(e){var t=[];if(null!=e)for(var n in m(e))t.push(n);return t}(e);var t=Qn(e),n=[];for(var r in e)("constructor"!=r||!t&&x.call(e,r))&&n.push(r);return n}function dt(e,t){return e<t}function ht(e,r){var o=-1,a=wo(e)?O(e.length):[];return ze(e,function(e,t,n){a[++o]=r(e,t,n)}),a}function mt(t){var n=Un(t);return 1==n.length&&n[0][2]?tr(n[0][0],n[0][1]):function(e){return e===t||lt(e,t,n)}}function vt(n,r){return Xn(n)&&er(r)?tr(hr(n),r):function(e){var t=oa(e,n);return t===ri&&t===r?aa(e,n):st(r,t,3)}}function yt(r,o,a,i,s){r!==o&&Ve(o,function(e,t){if(s=s||new we,Do(e))!function(e,t,n,r,o,a,i){var s=or(e,n),l=or(t,n),u=i.get(l);if(u)return Ne(e,n,u);var c=a?a(s,l,n+"",e,t,i):ri,p=c===ri;if(p){var f=Eo(l),d=!f&&ko(l),h=!f&&!d&&zo(l);c=l,f||d||h?c=Eo(s)?s:Oo(s)?on(s):d?Zt(l,!(p=!1)):h?en(l,!(p=!1)):[]:Ro(l)||_o(l)?_o(c=s)?c=Go(s):Do(s)&&!No(s)||(c=Yn(l)):p=!1}p&&(i.set(l,c),o(c,l,r,a,i),i.delete(l));Ne(e,n,c)}(r,o,t,a,yt,i,s);else{var n=i?i(or(r,t),e,t+"",r,o,s):ri;n===ri&&(n=e),Ne(r,t,n)}},ca)}function gt(e,t){var n=e.length;if(n)return qn(t+=t<0?n:0,n)?e[t]:ri}function bt(e,r,n){var o=-1;return r=Ks(r.length?r:[ja],al(Fn())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(ht(e,function(t,e,n){return{criteria:Ks(r,function(e){return e(t)}),index:++o,value:t}}),function(e,t){return function(e,t,n){var r=-1,o=e.criteria,a=t.criteria,i=o.length,s=n.length;for(;++r<i;){var l=tn(o[r],a[r]);if(l){if(s<=r)return l;var u=n[r];return l*("desc"==u?-1:1)}}return e.index-t.index}(e,t,n)})}function xt(e,t,n){for(var r=-1,o=t.length,a={};++r<o;){var i=t[r],s=Ze(e,i);n(s,i)&&St(a,qt(i,e),s)}return a}function _t(e,t,n,r){var o=r?Zs:Js,a=-1,i=t.length,s=e;for(e===t&&(t=on(t)),n&&(s=Ks(e,al(n)));++a<i;)for(var l=0,u=t[a],c=n?n(u):u;-1<(l=o(s,c,l,r));)s!==e&&P.call(s,l,1),P.call(e,l,1);return e}function Et(e,t){for(var n=e?t.length:0,r=n-1;n--;){var o=t[n];if(n==r||o!==a){var a=o;qn(o)?P.call(e,o,1):Ut(e,o)}}return e}function Ct(e,t){return e+U(X()*(t-e+1))}function wt(e,t){var n="";if(!e||t<1||li<t)return n;for(;t%2&&(n+=e),(t=U(t/2))&&(e+=e),t;);return n}function Ot(e,t){return sr(nr(e,t,ja),e+"")}function kt(e){return ke(ga(e))}function Tt(e,t){var n=ga(e);return cr(n,Re(t,0,n.length))}function St(e,t,n,r){if(!Do(e))return e;for(var o=-1,a=(t=qt(t,e)).length,i=a-1,s=e;null!=s&&++o<a;){var l=hr(t[o]),u=n;if(o!=i){var c=s[l];(u=r?r(c,l,s):ri)===ri&&(u=Do(c)?c:qn(t[o+1])?[]:{})}Me(s,l,u),s=s[l]}return e}var Nt=oe?function(e,t){return oe.set(e,t),e}:ja,Mt=j?function(e,t){return j(e,"toString",{configurable:!0,enumerable:!1,value:Da(t),writable:!0})}:ja;function Pt(e){return cr(ga(e))}function Dt(e,t,n){var r=-1,o=e.length;t<0&&(t=o<-t?0:o+t),(n=o<n?o:n)<0&&(n+=o),o=n<t?0:n-t>>>0,t>>>=0;for(var a=O(o);++r<o;)a[r]=e[r+t];return a}function It(e,r){var o;return ze(e,function(e,t,n){return!(o=r(e,t,n))}),!!o}function At(e,t,n){var r=0,o=null==e?r:e.length;if("number"==typeof t&&t==t&&o<=2147483647){for(;r<o;){var a=r+o>>>1,i=e[a];null!==i&&!Uo(i)&&(n?i<=t:i<t)?r=1+a:o=a}return o}return jt(e,t,ja,n)}function jt(e,t,n,r){t=n(t);for(var o=0,a=null==e?0:e.length,i=t!=t,s=null===t,l=Uo(t),u=t===ri;o<a;){var c=U((o+a)/2),p=n(e[c]),f=p!==ri,d=null===p,h=p==p,m=Uo(p);if(i)var v=r||h;else v=u?h&&(r||f):s?h&&f&&(r||!d):l?h&&f&&!d&&(r||!m):!d&&!m&&(r?p<=t:p<t);v?o=c+1:a=c}return V(a,4294967294)}function Rt(e,t){for(var n=-1,r=e.length,o=0,a=[];++n<r;){var i=e[n],s=t?t(i):i;if(!n||!go(s,l)){var l=s;a[o++]=0===i?0:i}}return a}function Lt(e){return"number"==typeof e?e:Uo(e)?ui:+e}function Ft(e){if("string"==typeof e)return e;if(Eo(e))return Ks(e,Ft)+"";if(Uo(e))return de?de.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Wt(e,t,n){var r=-1,o=Bs,a=e.length,i=!0,s=[],l=s;if(n)i=!1,o=Hs;else if(200<=a){var u=t?null:On(e);if(u)return yl(u);i=!1,o=sl,l=new Ce}else l=t?[]:s;e:for(;++r<a;){var c=e[r],p=t?t(c):c;if(c=n||0!==c?c:0,i&&p==p){for(var f=l.length;f--;)if(l[f]===p)continue e;t&&l.push(p),s.push(c)}else o(l,p,n)||(l!==s&&l.push(p),s.push(c))}return s}function Ut(e,t){return null==(e=rr(e,t=qt(t,e)))||delete e[hr(Tr(t))]}function zt(e,t,n,r){return St(e,t,n(Ze(e,t)),r)}function Bt(e,t,n,r){for(var o=e.length,a=r?o:-1;(r?a--:++a<o)&&t(e[a],a,e););return n?Dt(e,r?0:a,r?a+1:o):Dt(e,r?a+1:0,r?o:a)}function Ht(e,t){var n=e;return n instanceof be&&(n=n.value()),Ys(t,function(e,t){return t.func.apply(t.thisArg,$s([e],t.args))},n)}function Kt(e,t,n){var r=e.length;if(r<2)return r?Wt(e[0]):[];for(var o=-1,a=O(r);++o<r;)for(var i=e[o],s=-1;++s<r;)s!=o&&(a[o]=Ue(a[o]||i,e[s],t,n));return Wt(Ye(a,1),t,n)}function $t(e,t,n){for(var r=-1,o=e.length,a=t.length,i={};++r<o;){var s=r<a?t[r]:ri;n(i,e[r],s)}return i}function Yt(e){return Oo(e)?e:[]}function Vt(e){return"function"==typeof e?e:ja}function qt(e,t){return Eo(e)?e:Xn(e,t)?[e]:dr(Xo(e))}var Gt=Ot;function Xt(e,t,n){var r=e.length;return n=n===ri?r:n,!t&&r<=n?e:Dt(e,t,n)}var Jt=R||function(e){return Ss.clearTimeout(e)};function Zt(e,t){if(t)return e.slice();var n=e.length,r=T?T(n):new e.constructor(n);return e.copy(r),r}function Qt(e){var t=new e.constructor(e.byteLength);return new k(t).set(new k(e)),t}function en(e,t){var n=t?Qt(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function tn(e,t){if(e!==t){var n=e!==ri,r=null===e,o=e==e,a=Uo(e),i=t!==ri,s=null===t,l=t==t,u=Uo(t);if(!s&&!u&&!a&&t<e||a&&i&&l&&!s&&!u||r&&i&&l||!n&&l||!o)return 1;if(!r&&!a&&!u&&e<t||u&&n&&o&&!r&&!a||s&&n&&o||!i&&o||!l)return-1}return 0}function nn(e,t,n,r){for(var o=-1,a=e.length,i=n.length,s=-1,l=t.length,u=Y(a-i,0),c=O(l+u),p=!r;++s<l;)c[s]=t[s];for(;++o<i;)(p||o<a)&&(c[n[o]]=e[o]);for(;u--;)c[s++]=e[o++];return c}function rn(e,t,n,r){for(var o=-1,a=e.length,i=-1,s=n.length,l=-1,u=t.length,c=Y(a-s,0),p=O(c+u),f=!r;++o<c;)p[o]=e[o];for(var d=o;++l<u;)p[d+l]=t[l];for(;++i<s;)(f||o<a)&&(p[d+n[i]]=e[o++]);return p}function on(e,t){var n=-1,r=e.length;for(t=t||O(r);++n<r;)t[n]=e[n];return t}function an(e,t,n,r){var o=!n;n=n||{};for(var a=-1,i=t.length;++a<i;){var s=t[a],l=r?r(n[s],e[s],s,n,e):ri;l===ri&&(l=e[s]),o?Ae(n,s,l):Me(n,s,l)}return n}function sn(o,a){return function(e,t){var n=Eo(e)?Ls:De,r=a?a():{};return n(e,o,Fn(t,2),r)}}function ln(s){return Ot(function(e,t){var n=-1,r=t.length,o=1<r?t[r-1]:ri,a=2<r?t[2]:ri;for(o=3<s.length&&"function"==typeof o?(r--,o):ri,a&&Gn(t[0],t[1],a)&&(o=r<3?ri:o,r=1),e=m(e);++n<r;){var i=t[n];i&&s(e,i,n,o)}return e})}function un(a,i){return function(e,t){if(null==e)return e;if(!wo(e))return a(e,t);for(var n=e.length,r=i?n:-1,o=m(e);(i?r--:++r<n)&&!1!==t(o[r],r,o););return e}}function cn(l){return function(e,t,n){for(var r=-1,o=m(e),a=n(e),i=a.length;i--;){var s=a[l?i:++r];if(!1===t(o[s],s,o))break}return e}}function pn(o){return function(e){var t=dl(e=Xo(e))?bl(e):ri,n=t?t[0]:e.charAt(0),r=t?Xt(t,1).join(""):e.slice(1);return n[o]()+r}}function fn(t){return function(e){return Ys(Na(_a(e).replace(gs,"")),t,"")}}function dn(r){return function(){var e=arguments;switch(e.length){case 0:return new r;case 1:return new r(e[0]);case 2:return new r(e[0],e[1]);case 3:return new r(e[0],e[1],e[2]);case 4:return new r(e[0],e[1],e[2],e[3]);case 5:return new r(e[0],e[1],e[2],e[3],e[4]);case 6:return new r(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new r(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var t=me(r.prototype),n=r.apply(t,e);return Do(n)?n:t}}function hn(i){return function(e,t,n){var r=m(e);if(!wo(e)){var o=Fn(t,3);e=ua(e),t=function(e){return o(r[e],e,r)}}var a=i(e,t,n);return-1<a?r[o?e[a]:a]:ri}}function mn(l){return Dn(function(o){var a=o.length,e=a,t=ge.prototype.thru;for(l&&o.reverse();e--;){var n=o[e];if("function"!=typeof n)throw new g(oi);if(t&&!i&&"wrapper"==Rn(n))var i=new ge([],!0)}for(e=i?e:a;++e<a;){var r=Rn(n=o[e]),s="wrapper"==r?jn(n):ri;i=s&&Jn(s[0])&&424==s[1]&&!s[4].length&&1==s[9]?i[Rn(s[0])].apply(i,s[3]):1==n.length&&Jn(n)?i[r]():i.thru(n)}return function(){var e=arguments,t=e[0];if(i&&1==e.length&&Eo(t))return i.plant(t).value();for(var n=0,r=a?o[n].apply(this,e):t;++n<a;)r=o[n].call(this,r);return r}})}function vn(u,c,p,f,d,h,m,v,y,g){var b=c&si,x=1&c,_=2&c,E=24&c,C=512&c,w=_?ri:dn(u);return function e(){for(var t=arguments.length,n=O(t),r=t;r--;)n[r]=arguments[r];if(E)var o=Ln(e),a=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(n,o);if(f&&(n=nn(n,f,d,E)),h&&(n=rn(n,h,m,E)),t-=a,E&&t<g){var i=vl(n,o);return Cn(u,c,vn,e.placeholder,p,n,i,v,y,g-t)}var s=x?p:this,l=_?s[u]:u;return t=n.length,v?n=function(e,t){for(var n=e.length,r=V(t.length,n),o=on(e);r--;){var a=t[r];e[r]=qn(a,n)?o[a]:ri}return e}(n,v):C&&1<t&&n.reverse(),b&&y<t&&(n.length=y),this&&this!==Ss&&this instanceof e&&(l=w||dn(l)),l.apply(s,n)}}function yn(n,r){return function(e,t){return function(e,r,o,a){return Ge(e,function(e,t,n){r(a,o(e),t,n)}),a}(e,n,r(t),{})}}function gn(r,o){return function(e,t){var n;if(e===ri&&t===ri)return o;if(e!==ri&&(n=e),t!==ri){if(n===ri)return t;t="string"==typeof e||"string"==typeof t?(e=Ft(e),Ft(t)):(e=Lt(e),Lt(t)),n=r(e,t)}return n}}function bn(r){return Dn(function(e){return e=Ks(e,al(Fn())),Ot(function(t){var n=this;return r(e,function(e){return Rs(e,n,t)})})})}function xn(e,t){var n=(t=t===ri?" ":Ft(t)).length;if(n<2)return n?wt(t,e):t;var r=wt(t,W(e/gl(t)));return dl(t)?Xt(bl(r),0,e).join(""):r.slice(0,e)}function _n(r){return function(e,t,n){return n&&"number"!=typeof n&&Gn(e,t,n)&&(t=n=ri),e=$o(e),t===ri?(t=e,e=0):t=$o(t),function(e,t,n,r){for(var o=-1,a=Y(W((t-e)/(n||1)),0),i=O(a);a--;)i[r?a:++o]=e,e+=n;return i}(e,t,n=n===ri?e<t?1:-1:$o(n),r)}}function En(n){return function(e,t){return"string"==typeof e&&"string"==typeof t||(e=qo(e),t=qo(t)),n(e,t)}}function Cn(e,t,n,r,o,a,i,s,l,u){var c=8&t;t|=c?32:64,4&(t&=~(c?64:32))||(t&=-4);var p=[e,t,o,c?a:ri,c?i:ri,c?ri:a,c?ri:i,s,l,u],f=n.apply(ri,p);return Jn(e)&&ar(f,p),f.placeholder=r,lr(f,e,t)}function wn(e){var r=a[e];return function(e,t){if(e=qo(e),(t=null==t?0:V(Yo(t),292))&&H(e)){var n=(Xo(e)+"e").split("e");return+((n=(Xo(r(n[0]+"e"+(+n[1]+t)))+"e").split("e"))[0]+"e"+(+n[1]-t))}return r(e)}}var On=te&&1/yl(new te([,-0]))[1]==1/0?function(e){return new te(e)}:Ua;function kn(n){return function(e){var t=Kn(e);return t==bi?hl(e):t==wi?function(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}(e):function(t,e){return Ks(e,function(e){return[e,t[e]]})}(e,n(e))}}function Tn(e,t,n,r,o,a,i,s){var l=2&t;if(!l&&"function"!=typeof e)throw new g(oi);var u=r?r.length:0;if(u||(t&=-97,r=o=ri),i=i===ri?i:Y(Yo(i),0),s=s===ri?s:Yo(s),u-=o?o.length:0,64&t){var c=r,p=o;r=o=ri}var f=l?ri:jn(e),d=[e,t,n,r,o,c,p,a,i,s];if(f&&function(e,t){var n=e[1],r=t[1],o=n|r,a=o<131,i=r==si&&8==n||r==si&&256==n&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!a&&!i)return;1&r&&(e[2]=t[2],o|=1&n?0:4);var s=t[3];if(s){var l=e[3];e[3]=l?nn(l,s,t[4]):s,e[4]=l?vl(e[3],ii):t[4]}(s=t[5])&&(l=e[5],e[5]=l?rn(l,s,t[6]):s,e[6]=l?vl(e[5],ii):t[6]);(s=t[7])&&(e[7]=s);r&si&&(e[8]=null==e[8]?t[8]:V(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=o}(d,f),e=d[0],t=d[1],n=d[2],r=d[3],o=d[4],!(s=d[9]=d[9]===ri?l?0:e.length:Y(d[9]-u,0))&&24&t&&(t&=-25),t&&1!=t)h=8==t||16==t?function(i,s,l){var u=dn(i);return function e(){for(var t=arguments.length,n=O(t),r=t,o=Ln(e);r--;)n[r]=arguments[r];var a=t<3&&n[0]!==o&&n[t-1]!==o?[]:vl(n,o);return(t-=a.length)<l?Cn(i,s,vn,e.placeholder,ri,n,a,ri,ri,l-t):Rs(this&&this!==Ss&&this instanceof e?u:i,this,n)}}(e,t,s):32!=t&&33!=t||o.length?vn.apply(ri,d):function(s,e,l,u){var c=1&e,p=dn(s);return function e(){for(var t=-1,n=arguments.length,r=-1,o=u.length,a=O(o+n),i=this&&this!==Ss&&this instanceof e?p:s;++r<o;)a[r]=u[r];for(;n--;)a[r++]=arguments[++t];return Rs(i,c?l:this,a)}}(e,t,n,r);else var h=function(t,e,n){var r=1&e,o=dn(t);return function e(){return(this&&this!==Ss&&this instanceof e?o:t).apply(r?n:this,arguments)}}(e,t,n);return lr((f?Nt:ar)(h,d),e,t)}function Sn(e,t,n,r){return e===ri||go(e,p[n])&&!x.call(r,n)?t:e}function Nn(e,t,n,r,o,a){return Do(e)&&Do(t)&&(a.set(t,e),yt(e,t,ri,Nn,a),a.delete(t)),e}function Mn(e){return Ro(e)?ri:e}function Pn(e,t,n,r,o,a){var i=1&n,s=e.length,l=t.length;if(s!=l&&!(i&&s<l))return!1;var u=a.get(e);if(u&&a.get(t))return u==t;var c=-1,p=!0,f=2&n?new Ce:ri;for(a.set(e,t),a.set(t,e);++c<s;){var d=e[c],h=t[c];if(r)var m=i?r(h,d,c,t,e,a):r(d,h,c,e,t,a);if(m!==ri){if(m)continue;p=!1;break}if(f){if(!qs(t,function(e,t){if(!sl(f,t)&&(d===e||o(d,e,n,r,a)))return f.push(t)})){p=!1;break}}else if(d!==h&&!o(d,h,n,r,a)){p=!1;break}}return a.delete(e),a.delete(t),p}function Dn(e){return sr(nr(e,ri,Er),e+"")}function In(e){return Qe(e,ua,Bn)}function An(e){return Qe(e,ca,Hn)}var jn=oe?function(e){return oe.get(e)}:Ua;function Rn(e){for(var t=e.name+"",n=ae[t],r=x.call(ae,t)?n.length:0;r--;){var o=n[r],a=o.func;if(null==a||a==e)return o.name}return t}function Ln(e){return(x.call(he,"placeholder")?he:e).placeholder}function Fn(){var e=he.iteratee||Ra;return e=e===Ra?ct:e,arguments.length?e(arguments[0],arguments[1]):e}function Wn(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function Un(e){for(var t=ua(e),n=t.length;n--;){var r=t[n],o=e[r];t[n]=[r,o,er(o)]}return t}function zn(e,t){var n=function(e,t){return null==e?ri:e[t]}(e,t);return ut(n)?n:ri}var Bn=z?function(t){return null==t?[]:(t=m(t),zs(z(t),function(e){return M.call(t,e)}))}:Va,Hn=z?function(e){for(var t=[];e;)$s(t,Bn(e)),e=S(e);return t}:Va,Kn=et;function $n(e,t,n){for(var r=-1,o=(t=qt(t,e)).length,a=!1;++r<o;){var i=hr(t[r]);if(!(a=null!=e&&n(e,i)))break;e=e[i]}return a||++r!=o?a:!!(o=null==e?0:e.length)&&Po(o)&&qn(i,o)&&(Eo(e)||_o(e))}function Yn(e){return"function"!=typeof e.constructor||Qn(e)?{}:me(S(e))}function Vn(e){return Eo(e)||_o(e)||!!(D&&e&&e[D])}function qn(e,t){var n=typeof e;return!!(t=null==t?li:t)&&("number"==n||"symbol"!=n&&hs.test(e))&&-1<e&&e%1==0&&e<t}function Gn(e,t,n){if(!Do(n))return!1;var r=typeof t;return!!("number"==r?wo(n)&&qn(t,n.length):"string"==r&&t in n)&&go(n[t],e)}function Xn(e,t){if(Eo(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Uo(e))||(Xi.test(e)||!Gi.test(e)||null!=t&&e in m(t))}function Jn(e){var t=Rn(e),n=he[t];if("function"!=typeof n||!(t in be.prototype))return!1;if(e===n)return!0;var r=jn(n);return!!r&&e===r[0]}(Z&&Kn(new Z(new ArrayBuffer(1)))!=Ni||Q&&Kn(new Q)!=bi||ee&&Kn(ee.resolve())!=Ei||te&&Kn(new te)!=wi||ne&&Kn(new ne)!=Ti)&&(Kn=function(e){var t=et(e),n=t==_i?e.constructor:ri,r=n?mr(n):"";if(r)switch(r){case ie:return Ni;case se:return bi;case le:return Ei;case ue:return wi;case ce:return Ti}return t});var Zn=l?No:qa;function Qn(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||p)}function er(e){return e==e&&!Do(e)}function tr(t,n){return function(e){return null!=e&&(e[t]===n&&(n!==ri||t in m(e)))}}function nr(a,i,s){return i=Y(i===ri?a.length-1:i,0),function(){for(var e=arguments,t=-1,n=Y(e.length-i,0),r=O(n);++t<n;)r[t]=e[i+t];t=-1;for(var o=O(i+1);++t<i;)o[t]=e[t];return o[i]=s(r),Rs(a,this,o)}}function rr(e,t){return t.length<2?e:Ze(e,Dt(t,0,-1))}function or(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var ar=ur(Nt),ir=F||function(e,t){return Ss.setTimeout(e,t)},sr=ur(Mt);function lr(e,t,n){var r=t+"";return sr(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(1<n?"& ":"")+t[r],t=t.join(2<n?", ":" "),e.replace(rs,"{\n/* [wrapped with "+t+"] */\n")}(r,function(n,r){return Fs(pi,function(e){var t="_."+e[0];r&e[1]&&!Bs(n,t)&&n.push(t)}),n.sort()}(function(e){var t=e.match(os);return t?t[1].split(as):[]}(r),n)))}function ur(n){var r=0,o=0;return function(){var e=q(),t=16-(e-o);if(o=e,0<t){if(800<=++r)return arguments[0]}else r=0;return n.apply(ri,arguments)}}function cr(e,t){var n=-1,r=e.length,o=r-1;for(t=t===ri?r:t;++n<t;){var a=Ct(n,o),i=e[a];e[a]=e[n],e[n]=i}return e.length=t,e}var pr,fr,dr=(fr=(pr=po(function(e){var o=[];return 46===e.charCodeAt(0)&&o.push(""),e.replace(Ji,function(e,t,n,r){o.push(n?r.replace(ss,"$1"):t||e)}),o},function(e){return 500===fr.size&&fr.clear(),e})).cache,pr);function hr(e){if("string"==typeof e||Uo(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function mr(e){if(null!=e){try{return u.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function vr(e){if(e instanceof be)return e.clone();var t=new ge(e.__wrapped__,e.__chain__);return t.__actions__=on(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var yr=Ot(function(e,t){return Oo(e)?Ue(e,Ye(t,1,Oo,!0)):[]}),gr=Ot(function(e,t){var n=Tr(t);return Oo(n)&&(n=ri),Oo(e)?Ue(e,Ye(t,1,Oo,!0),Fn(n,2)):[]}),br=Ot(function(e,t){var n=Tr(t);return Oo(n)&&(n=ri),Oo(e)?Ue(e,Ye(t,1,Oo,!0),ri,n):[]});function xr(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:Yo(n);return o<0&&(o=Y(r+o,0)),Xs(e,Fn(t,3),o)}function _r(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return n!==ri&&(o=Yo(n),o=n<0?Y(r+o,0):V(o,r-1)),Xs(e,Fn(t,3),o,!0)}function Er(e){return(null==e?0:e.length)?Ye(e,1):[]}function Cr(e){return e&&e.length?e[0]:ri}var wr=Ot(function(e){var t=Ks(e,Yt);return t.length&&t[0]===e[0]?ot(t):[]}),Or=Ot(function(e){var t=Tr(e),n=Ks(e,Yt);return t===Tr(n)?t=ri:n.pop(),n.length&&n[0]===e[0]?ot(n,Fn(t,2)):[]}),kr=Ot(function(e){var t=Tr(e),n=Ks(e,Yt);return(t="function"==typeof t?t:ri)&&n.pop(),n.length&&n[0]===e[0]?ot(n,ri,t):[]});function Tr(e){var t=null==e?0:e.length;return t?e[t-1]:ri}var Sr=Ot(Nr);function Nr(e,t){return e&&e.length&&t&&t.length?_t(e,t):e}var Mr=Dn(function(e,t){var n=null==e?0:e.length,r=je(e,t);return Et(e,Ks(t,function(e){return qn(e,n)?+e:e}).sort(tn)),r});function Pr(e){return null==e?e:J.call(e)}var Dr=Ot(function(e){return Wt(Ye(e,1,Oo,!0))}),Ir=Ot(function(e){var t=Tr(e);return Oo(t)&&(t=ri),Wt(Ye(e,1,Oo,!0),Fn(t,2))}),Ar=Ot(function(e){var t=Tr(e);return t="function"==typeof t?t:ri,Wt(Ye(e,1,Oo,!0),ri,t)});function jr(t){if(!t||!t.length)return[];var n=0;return t=zs(t,function(e){if(Oo(e))return n=Y(e.length,n),!0}),ol(n,function(e){return Ks(t,tl(e))})}function Rr(e,t){if(!e||!e.length)return[];var n=jr(e);return null==t?n:Ks(n,function(e){return Rs(t,ri,e)})}var Lr=Ot(function(e,t){return Oo(e)?Ue(e,t):[]}),Fr=Ot(function(e){return Kt(zs(e,Oo))}),Wr=Ot(function(e){var t=Tr(e);return Oo(t)&&(t=ri),Kt(zs(e,Oo),Fn(t,2))}),Ur=Ot(function(e){var t=Tr(e);return t="function"==typeof t?t:ri,Kt(zs(e,Oo),ri,t)}),zr=Ot(jr);var Br=Ot(function(e){var t=e.length,n=1<t?e[t-1]:ri;return n="function"==typeof n?(e.pop(),n):ri,Rr(e,n)});function Hr(e){var t=he(e);return t.__chain__=!0,t}function Kr(e,t){return t(e)}var $r=Dn(function(t){function e(e){return je(e,t)}var n=t.length,r=n?t[0]:0,o=this.__wrapped__;return!(1<n||this.__actions__.length)&&o instanceof be&&qn(r)?((o=o.slice(r,+r+(n?1:0))).__actions__.push({func:Kr,args:[e],thisArg:ri}),new ge(o,this.__chain__).thru(function(e){return n&&!e.length&&e.push(ri),e})):this.thru(e)});var Yr=sn(function(e,t,n){x.call(e,n)?++e[n]:Ae(e,n,1)});var Vr=hn(xr),qr=hn(_r);function Gr(e,t){return(Eo(e)?Fs:ze)(e,Fn(t,3))}function Xr(e,t){return(Eo(e)?Ws:Be)(e,Fn(t,3))}var Jr=sn(function(e,t,n){x.call(e,n)?e[n].push(t):Ae(e,n,[t])});var Zr=Ot(function(e,t,n){var r=-1,o="function"==typeof t,a=wo(e)?O(e.length):[];return ze(e,function(e){a[++r]=o?Rs(t,e,n):at(e,t,n)}),a}),Qr=sn(function(e,t,n){Ae(e,n,t)});function eo(e,t){return(Eo(e)?Ks:ht)(e,Fn(t,3))}var to=sn(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var no=Ot(function(e,t){if(null==e)return[];var n=t.length;return 1<n&&Gn(e,t[0],t[1])?t=[]:2<n&&Gn(t[0],t[1],t[2])&&(t=[t[0]]),bt(e,Ye(t,1),[])}),ro=L||function(){return Ss.Date.now()};function oo(e,t,n){return t=n?ri:t,t=e&&null==t?e.length:t,Tn(e,si,ri,ri,ri,ri,t)}function ao(e,t){var n;if("function"!=typeof t)throw new g(oi);return e=Yo(e),function(){return 0<--e&&(n=t.apply(this,arguments)),e<=1&&(t=ri),n}}var io=Ot(function(e,t,n){var r=1;if(n.length){var o=vl(n,Ln(io));r|=32}return Tn(e,r,t,n,o)}),so=Ot(function(e,t,n){var r=3;if(n.length){var o=vl(n,Ln(so));r|=32}return Tn(t,r,e,n,o)});function lo(r,n,e){var o,a,i,s,l,u,c=0,p=!1,f=!1,t=!0;if("function"!=typeof r)throw new g(oi);function d(e){var t=o,n=a;return o=a=ri,c=e,s=r.apply(n,t)}function h(e){var t=e-u;return u===ri||n<=t||t<0||f&&i<=e-c}function m(){var e=ro();if(h(e))return v(e);l=ir(m,function(e){var t=n-(e-u);return f?V(t,i-(e-c)):t}(e))}function v(e){return l=ri,t&&o?d(e):(o=a=ri,s)}function y(){var e=ro(),t=h(e);if(o=arguments,a=this,u=e,t){if(l===ri)return function(e){return c=e,l=ir(m,n),p?d(e):s}(u);if(f)return Jt(l),l=ir(m,n),d(u)}return l===ri&&(l=ir(m,n)),s}return n=qo(n)||0,Do(e)&&(p=!!e.leading,i=(f="maxWait"in e)?Y(qo(e.maxWait)||0,n):i,t="trailing"in e?!!e.trailing:t),y.cancel=function(){l!==ri&&Jt(l),c=0,o=u=a=l=ri},y.flush=function(){return l===ri?s:v(ro())},y}var uo=Ot(function(e,t){return We(e,1,t)}),co=Ot(function(e,t,n){return We(e,qo(t)||0,n)});function po(o,a){if("function"!=typeof o||null!=a&&"function"!=typeof a)throw new g(oi);var i=function(){var e=arguments,t=a?a.apply(this,e):e[0],n=i.cache;if(n.has(t))return n.get(t);var r=o.apply(this,e);return i.cache=n.set(t,r)||n,r};return i.cache=new(po.Cache||Ee),i}function fo(t){if("function"!=typeof t)throw new g(oi);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}po.Cache=Ee;var ho=Gt(function(r,o){var a=(o=1==o.length&&Eo(o[0])?Ks(o[0],al(Fn())):Ks(Ye(o,1),al(Fn()))).length;return Ot(function(e){for(var t=-1,n=V(e.length,a);++t<n;)e[t]=o[t].call(this,e[t]);return Rs(r,this,e)})}),mo=Ot(function(e,t){var n=vl(t,Ln(mo));return Tn(e,32,ri,t,n)}),vo=Ot(function(e,t){var n=vl(t,Ln(vo));return Tn(e,64,ri,t,n)}),yo=Dn(function(e,t){return Tn(e,256,ri,ri,ri,t)});function go(e,t){return e===t||e!=e&&t!=t}var bo=En(tt),xo=En(function(e,t){return t<=e}),_o=it(function(){return arguments}())?it:function(e){return Io(e)&&x.call(e,"callee")&&!M.call(e,"callee")},Eo=O.isArray,Co=Ms?al(Ms):function(e){return Io(e)&&et(e)==Si};function wo(e){return null!=e&&Po(e.length)&&!No(e)}function Oo(e){return Io(e)&&wo(e)}var ko=B||qa,To=Ps?al(Ps):function(e){return Io(e)&&et(e)==mi};function So(e){if(!Io(e))return!1;var t=et(e);return t==vi||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!Ro(e)}function No(e){if(!Do(e))return!1;var t=et(e);return t==yi||t==gi||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Mo(e){return"number"==typeof e&&e==Yo(e)}function Po(e){return"number"==typeof e&&-1<e&&e%1==0&&e<=li}function Do(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Io(e){return null!=e&&"object"==typeof e}var Ao=Ds?al(Ds):function(e){return Io(e)&&Kn(e)==bi};function jo(e){return"number"==typeof e||Io(e)&&et(e)==xi}function Ro(e){if(!Io(e)||et(e)!=_i)return!1;var t=S(e);if(null===t)return!0;var n=x.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&u.call(n)==b}var Lo=Is?al(Is):function(e){return Io(e)&&et(e)==Ci};var Fo=As?al(As):function(e){return Io(e)&&Kn(e)==wi};function Wo(e){return"string"==typeof e||!Eo(e)&&Io(e)&&et(e)==Oi}function Uo(e){return"symbol"==typeof e||Io(e)&&et(e)==ki}var zo=js?al(js):function(e){return Io(e)&&Po(e.length)&&!!ws[et(e)]};var Bo=En(dt),Ho=En(function(e,t){return e<=t});function Ko(e){if(!e)return[];if(wo(e))return Wo(e)?bl(e):on(e);if(I&&e[I])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[I]());var t=Kn(e);return(t==bi?hl:t==wi?yl:ga)(e)}function $o(e){return e?(e=qo(e))!==1/0&&e!==-1/0?e==e?e:0:17976931348623157e292*(e<0?-1:1):0===e?e:0}function Yo(e){var t=$o(e),n=t%1;return t==t?n?t-n:t:0}function Vo(e){return e?Re(Yo(e),0,ci):0}function qo(e){if("number"==typeof e)return e;if(Uo(e))return ui;if(Do(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Do(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(es,"");var n=ps.test(e);return n||ds.test(e)?Ts(e.slice(2),n?2:8):cs.test(e)?ui:+e}function Go(e){return an(e,ca(e))}function Xo(e){return null==e?"":Ft(e)}var Jo=ln(function(e,t){if(Qn(t)||wo(t))an(t,ua(t),e);else for(var n in t)x.call(t,n)&&Me(e,n,t[n])}),Zo=ln(function(e,t){an(t,ca(t),e)}),Qo=ln(function(e,t,n,r){an(t,ca(t),e,r)}),ea=ln(function(e,t,n,r){an(t,ua(t),e,r)}),ta=Dn(je);var na=Ot(function(e,t){e=m(e);var n=-1,r=t.length,o=2<r?t[2]:ri;for(o&&Gn(t[0],t[1],o)&&(r=1);++n<r;)for(var a=t[n],i=ca(a),s=-1,l=i.length;++s<l;){var u=i[s],c=e[u];(c===ri||go(c,p[u])&&!x.call(e,u))&&(e[u]=a[u])}return e}),ra=Ot(function(e){return e.push(ri,Nn),Rs(fa,ri,e)});function oa(e,t,n){var r=null==e?ri:Ze(e,t);return r===ri?n:r}function aa(e,t){return null!=e&&$n(e,t,rt)}var ia=yn(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=h.call(t)),e[t]=n},Da(ja)),sa=yn(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=h.call(t)),x.call(e,t)?e[t].push(n):e[t]=[n]},Fn),la=Ot(at);function ua(e){return wo(e)?Oe(e):pt(e)}function ca(e){return wo(e)?Oe(e,!0):ft(e)}var pa=ln(function(e,t,n){yt(e,t,n)}),fa=ln(function(e,t,n,r){yt(e,t,n,r)}),da=Dn(function(t,e){var n={};if(null==t)return n;var r=!1;e=Ks(e,function(e){return e=qt(e,t),r=r||1<e.length,e}),an(t,An(t),n),r&&(n=Le(n,7,Mn));for(var o=e.length;o--;)Ut(n,e[o]);return n});var ha=Dn(function(e,t){return null==e?{}:function(n,e){return xt(n,e,function(e,t){return aa(n,t)})}(e,t)});function ma(e,n){if(null==e)return{};var t=Ks(An(e),function(e){return[e]});return n=Fn(n),xt(e,t,function(e,t){return n(e,t[0])})}var va=kn(ua),ya=kn(ca);function ga(e){return null==e?[]:il(e,ua(e))}var ba=fn(function(e,t,n){return t=t.toLowerCase(),e+(n?xa(t):t)});function xa(e){return Sa(Xo(e).toLowerCase())}function _a(e){return(e=Xo(e))&&e.replace(ms,cl).replace(bs,"")}var Ea=fn(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),Ca=fn(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),wa=pn("toLowerCase");var Oa=fn(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var ka=fn(function(e,t,n){return e+(n?" ":"")+Sa(t)});var Ta=fn(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Sa=pn("toUpperCase");function Na(e,t,n){return e=Xo(e),(t=n?ri:t)===ri?function(e){return _s.test(e)}(e)?function(e){return e.match(xs)||[]}(e):function(e){return e.match(is)||[]}(e):e.match(t)||[]}var Ma=Ot(function(e,t){try{return Rs(e,ri,t)}catch(e){return So(e)?e:new o(e)}}),Pa=Dn(function(t,e){return Fs(e,function(e){e=hr(e),Ae(t,e,io(t[e],t))}),t});function Da(e){return function(){return e}}var Ia=mn(),Aa=mn(!0);function ja(e){return e}function Ra(e){return ct("function"==typeof e?e:Le(e,1))}var La=Ot(function(t,n){return function(e){return at(e,t,n)}}),Fa=Ot(function(t,n){return function(e){return at(t,e,n)}});function Wa(r,t,e){var n=ua(t),o=Je(t,n);null!=e||Do(t)&&(o.length||!n.length)||(e=t,t=r,r=this,o=Je(t,ua(t)));var a=!(Do(e)&&"chain"in e&&!e.chain),i=No(r);return Fs(o,function(e){var n=t[e];r[e]=n,i&&(r.prototype[e]=function(){var e=this.__chain__;if(a||e){var t=r(this.__wrapped__);return(t.__actions__=on(this.__actions__)).push({func:n,args:arguments,thisArg:r}),t.__chain__=e,t}return n.apply(r,$s([this.value()],arguments))})}),r}function Ua(){}var za=bn(Ks),Ba=bn(Us),Ha=bn(qs);function Ka(e){return Xn(e)?tl(hr(e)):function(t){return function(e){return Ze(e,t)}}(e)}var $a=_n(),Ya=_n(!0);function Va(){return[]}function qa(){return!1}var Ga=gn(function(e,t){return e+t},0),Xa=wn("ceil"),Ja=gn(function(e,t){return e/t},1),Za=wn("floor");var Qa,ei=gn(function(e,t){return e*t},1),ti=wn("round"),ni=gn(function(e,t){return e-t},0);return he.after=function(e,t){if("function"!=typeof t)throw new g(oi);return e=Yo(e),function(){if(--e<1)return t.apply(this,arguments)}},he.ary=oo,he.assign=Jo,he.assignIn=Zo,he.assignInWith=Qo,he.assignWith=ea,he.at=ta,he.before=ao,he.bind=io,he.bindAll=Pa,he.bindKey=so,he.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Eo(e)?e:[e]},he.chain=Hr,he.chunk=function(e,t,n){t=(n?Gn(e,t,n):t===ri)?1:Y(Yo(t),0);var r=null==e?0:e.length;if(!r||t<1)return[];for(var o=0,a=0,i=O(W(r/t));o<r;)i[a++]=Dt(e,o,o+=t);return i},he.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,o=[];++t<n;){var a=e[t];a&&(o[r++]=a)}return o},he.concat=function(){var e=arguments.length;if(!e)return[];for(var t=O(e-1),n=arguments[0],r=e;r--;)t[r-1]=arguments[r];return $s(Eo(n)?on(n):[n],Ye(t,1))},he.cond=function(r){var o=null==r?0:r.length,t=Fn();return r=o?Ks(r,function(e){if("function"!=typeof e[1])throw new g(oi);return[t(e[0]),e[1]]}):[],Ot(function(e){for(var t=-1;++t<o;){var n=r[t];if(Rs(n[0],this,e))return Rs(n[1],this,e)}})},he.conforms=function(e){return function(t){var n=ua(t);return function(e){return Fe(e,t,n)}}(Le(e,1))},he.constant=Da,he.countBy=Yr,he.create=function(e,t){var n=me(e);return null==t?n:Ie(n,t)},he.curry=function e(t,n,r){var o=Tn(t,8,ri,ri,ri,ri,ri,n=r?ri:n);return o.placeholder=e.placeholder,o},he.curryRight=function e(t,n,r){var o=Tn(t,16,ri,ri,ri,ri,ri,n=r?ri:n);return o.placeholder=e.placeholder,o},he.debounce=lo,he.defaults=na,he.defaultsDeep=ra,he.defer=uo,he.delay=co,he.difference=yr,he.differenceBy=gr,he.differenceWith=br,he.drop=function(e,t,n){var r=null==e?0:e.length;return r?Dt(e,(t=n||t===ri?1:Yo(t))<0?0:t,r):[]},he.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Dt(e,0,(t=r-(t=n||t===ri?1:Yo(t)))<0?0:t):[]},he.dropRightWhile=function(e,t){return e&&e.length?Bt(e,Fn(t,3),!0,!0):[]},he.dropWhile=function(e,t){return e&&e.length?Bt(e,Fn(t,3),!0):[]},he.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&Gn(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=Yo(n))<0&&(n=o<-n?0:o+n),(r=r===ri||o<r?o:Yo(r))<0&&(r+=o),r=r<n?0:Vo(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},he.filter=function(e,t){return(Eo(e)?zs:$e)(e,Fn(t,3))},he.flatMap=function(e,t){return Ye(eo(e,t),1)},he.flatMapDeep=function(e,t){return Ye(eo(e,t),1/0)},he.flatMapDepth=function(e,t,n){return n=n===ri?1:Yo(n),Ye(eo(e,t),n)},he.flatten=Er,he.flattenDeep=function(e){return(null==e?0:e.length)?Ye(e,1/0):[]},he.flattenDepth=function(e,t){return(null==e?0:e.length)?Ye(e,t=t===ri?1:Yo(t)):[]},he.flip=function(e){return Tn(e,512)},he.flow=Ia,he.flowRight=Aa,he.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r},he.functions=function(e){return null==e?[]:Je(e,ua(e))},he.functionsIn=function(e){return null==e?[]:Je(e,ca(e))},he.groupBy=Jr,he.initial=function(e){return(null==e?0:e.length)?Dt(e,0,-1):[]},he.intersection=wr,he.intersectionBy=Or,he.intersectionWith=kr,he.invert=ia,he.invertBy=sa,he.invokeMap=Zr,he.iteratee=Ra,he.keyBy=Qr,he.keys=ua,he.keysIn=ca,he.map=eo,he.mapKeys=function(e,r){var o={};return r=Fn(r,3),Ge(e,function(e,t,n){Ae(o,r(e,t,n),e)}),o},he.mapValues=function(e,r){var o={};return r=Fn(r,3),Ge(e,function(e,t,n){Ae(o,t,r(e,t,n))}),o},he.matches=function(e){return mt(Le(e,1))},he.matchesProperty=function(e,t){return vt(e,Le(t,1))},he.memoize=po,he.merge=pa,he.mergeWith=fa,he.method=La,he.methodOf=Fa,he.mixin=Wa,he.negate=fo,he.nthArg=function(t){return t=Yo(t),Ot(function(e){return gt(e,t)})},he.omit=da,he.omitBy=function(e,t){return ma(e,fo(Fn(t)))},he.once=function(e){return ao(2,e)},he.orderBy=function(e,t,n,r){return null==e?[]:(Eo(t)||(t=null==t?[]:[t]),Eo(n=r?ri:n)||(n=null==n?[]:[n]),bt(e,t,n))},he.over=za,he.overArgs=ho,he.overEvery=Ba,he.overSome=Ha,he.partial=mo,he.partialRight=vo,he.partition=to,he.pick=ha,he.pickBy=ma,he.property=Ka,he.propertyOf=function(t){return function(e){return null==t?ri:Ze(t,e)}},he.pull=Sr,he.pullAll=Nr,he.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?_t(e,t,Fn(n,2)):e},he.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?_t(e,t,ri,n):e},he.pullAt=Mr,he.range=$a,he.rangeRight=Ya,he.rearg=yo,he.reject=function(e,t){return(Eo(e)?zs:$e)(e,fo(Fn(t,3)))},he.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,o=[],a=e.length;for(t=Fn(t,3);++r<a;){var i=e[r];t(i,r,e)&&(n.push(i),o.push(r))}return Et(e,o),n},he.rest=function(e,t){if("function"!=typeof e)throw new g(oi);return Ot(e,t=t===ri?t:Yo(t))},he.reverse=Pr,he.sampleSize=function(e,t,n){return t=(n?Gn(e,t,n):t===ri)?1:Yo(t),(Eo(e)?Te:Tt)(e,t)},he.set=function(e,t,n){return null==e?e:St(e,t,n)},he.setWith=function(e,t,n,r){return r="function"==typeof r?r:ri,null==e?e:St(e,t,n,r)},he.shuffle=function(e){return(Eo(e)?Se:Pt)(e)},he.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n=n&&"number"!=typeof n&&Gn(e,t,n)?(t=0,r):(t=null==t?0:Yo(t),n===ri?r:Yo(n)),Dt(e,t,n)):[]},he.sortBy=no,he.sortedUniq=function(e){return e&&e.length?Rt(e):[]},he.sortedUniqBy=function(e,t){return e&&e.length?Rt(e,Fn(t,2)):[]},he.split=function(e,t,n){return n&&"number"!=typeof n&&Gn(e,t,n)&&(t=n=ri),(n=n===ri?ci:n>>>0)?(e=Xo(e))&&("string"==typeof t||null!=t&&!Lo(t))&&!(t=Ft(t))&&dl(e)?Xt(bl(e),0,n):e.split(t,n):[]},he.spread=function(r,o){if("function"!=typeof r)throw new g(oi);return o=null==o?0:Y(Yo(o),0),Ot(function(e){var t=e[o],n=Xt(e,0,o);return t&&$s(n,t),Rs(r,this,n)})},he.tail=function(e){var t=null==e?0:e.length;return t?Dt(e,1,t):[]},he.take=function(e,t,n){return e&&e.length?Dt(e,0,(t=n||t===ri?1:Yo(t))<0?0:t):[]},he.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Dt(e,(t=r-(t=n||t===ri?1:Yo(t)))<0?0:t,r):[]},he.takeRightWhile=function(e,t){return e&&e.length?Bt(e,Fn(t,3),!1,!0):[]},he.takeWhile=function(e,t){return e&&e.length?Bt(e,Fn(t,3)):[]},he.tap=function(e,t){return t(e),e},he.throttle=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new g(oi);return Do(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),lo(e,t,{leading:r,maxWait:t,trailing:o})},he.thru=Kr,he.toArray=Ko,he.toPairs=va,he.toPairsIn=ya,he.toPath=function(e){return Eo(e)?Ks(e,hr):Uo(e)?[e]:on(dr(Xo(e)))},he.toPlainObject=Go,he.transform=function(e,r,o){var t=Eo(e),n=t||ko(e)||zo(e);if(r=Fn(r,4),null==o){var a=e&&e.constructor;o=n?t?new a:[]:Do(e)&&No(a)?me(S(e)):{}}return(n?Fs:Ge)(e,function(e,t,n){return r(o,e,t,n)}),o},he.unary=function(e){return oo(e,1)},he.union=Dr,he.unionBy=Ir,he.unionWith=Ar,he.uniq=function(e){return e&&e.length?Wt(e):[]},he.uniqBy=function(e,t){return e&&e.length?Wt(e,Fn(t,2)):[]},he.uniqWith=function(e,t){return t="function"==typeof t?t:ri,e&&e.length?Wt(e,ri,t):[]},he.unset=function(e,t){return null==e||Ut(e,t)},he.unzip=jr,he.unzipWith=Rr,he.update=function(e,t,n){return null==e?e:zt(e,t,Vt(n))},he.updateWith=function(e,t,n,r){return r="function"==typeof r?r:ri,null==e?e:zt(e,t,Vt(n),r)},he.values=ga,he.valuesIn=function(e){return null==e?[]:il(e,ca(e))},he.without=Lr,he.words=Na,he.wrap=function(e,t){return mo(Vt(t),e)},he.xor=Fr,he.xorBy=Wr,he.xorWith=Ur,he.zip=zr,he.zipObject=function(e,t){return $t(e||[],t||[],Me)},he.zipObjectDeep=function(e,t){return $t(e||[],t||[],St)},he.zipWith=Br,he.entries=va,he.entriesIn=ya,he.extend=Zo,he.extendWith=Qo,Wa(he,he),he.add=Ga,he.attempt=Ma,he.camelCase=ba,he.capitalize=xa,he.ceil=Xa,he.clamp=function(e,t,n){return n===ri&&(n=t,t=ri),n!==ri&&(n=(n=qo(n))==n?n:0),t!==ri&&(t=(t=qo(t))==t?t:0),Re(qo(e),t,n)},he.clone=function(e){return Le(e,4)},he.cloneDeep=function(e){return Le(e,5)},he.cloneDeepWith=function(e,t){return Le(e,5,t="function"==typeof t?t:ri)},he.cloneWith=function(e,t){return Le(e,4,t="function"==typeof t?t:ri)},he.conformsTo=function(e,t){return null==t||Fe(e,t,ua(t))},he.deburr=_a,he.defaultTo=function(e,t){return null==e||e!=e?t:e},he.divide=Ja,he.endsWith=function(e,t,n){e=Xo(e),t=Ft(t);var r=e.length,o=n=n===ri?r:Re(Yo(n),0,r);return 0<=(n-=t.length)&&e.slice(n,o)==t},he.eq=go,he.escape=function(e){return(e=Xo(e))&&$i.test(e)?e.replace(Hi,pl):e},he.escapeRegExp=function(e){return(e=Xo(e))&&Qi.test(e)?e.replace(Zi,"\\$&"):e},he.every=function(e,t,n){var r=Eo(e)?Us:He;return n&&Gn(e,t,n)&&(t=ri),r(e,Fn(t,3))},he.find=Vr,he.findIndex=xr,he.findKey=function(e,t){return Gs(e,Fn(t,3),Ge)},he.findLast=qr,he.findLastIndex=_r,he.findLastKey=function(e,t){return Gs(e,Fn(t,3),Xe)},he.floor=Za,he.forEach=Gr,he.forEachRight=Xr,he.forIn=function(e,t){return null==e?e:Ve(e,Fn(t,3),ca)},he.forInRight=function(e,t){return null==e?e:qe(e,Fn(t,3),ca)},he.forOwn=function(e,t){return e&&Ge(e,Fn(t,3))},he.forOwnRight=function(e,t){return e&&Xe(e,Fn(t,3))},he.get=oa,he.gt=bo,he.gte=xo,he.has=function(e,t){return null!=e&&$n(e,t,nt)},he.hasIn=aa,he.head=Cr,he.identity=ja,he.includes=function(e,t,n,r){e=wo(e)?e:ga(e),n=n&&!r?Yo(n):0;var o=e.length;return n<0&&(n=Y(o+n,0)),Wo(e)?n<=o&&-1<e.indexOf(t,n):!!o&&-1<Js(e,t,n)},he.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:Yo(n);return o<0&&(o=Y(r+o,0)),Js(e,t,o)},he.inRange=function(e,t,n){return t=$o(t),n===ri?(n=t,t=0):n=$o(n),function(e,t,n){return e>=V(t,n)&&e<Y(t,n)}(e=qo(e),t,n)},he.invoke=la,he.isArguments=_o,he.isArray=Eo,he.isArrayBuffer=Co,he.isArrayLike=wo,he.isArrayLikeObject=Oo,he.isBoolean=function(e){return!0===e||!1===e||Io(e)&&et(e)==hi},he.isBuffer=ko,he.isDate=To,he.isElement=function(e){return Io(e)&&1===e.nodeType&&!Ro(e)},he.isEmpty=function(e){if(null==e)return!0;if(wo(e)&&(Eo(e)||"string"==typeof e||"function"==typeof e.splice||ko(e)||zo(e)||_o(e)))return!e.length;var t=Kn(e);if(t==bi||t==wi)return!e.size;if(Qn(e))return!pt(e).length;for(var n in e)if(x.call(e,n))return!1;return!0},he.isEqual=function(e,t){return st(e,t)},he.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:ri)?n(e,t):ri;return r===ri?st(e,t,ri,n):!!r},he.isError=So,he.isFinite=function(e){return"number"==typeof e&&H(e)},he.isFunction=No,he.isInteger=Mo,he.isLength=Po,he.isMap=Ao,he.isMatch=function(e,t){return e===t||lt(e,t,Un(t))},he.isMatchWith=function(e,t,n){return n="function"==typeof n?n:ri,lt(e,t,Un(t),n)},he.isNaN=function(e){return jo(e)&&e!=+e},he.isNative=function(e){if(Zn(e))throw new o("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return ut(e)},he.isNil=function(e){return null==e},he.isNull=function(e){return null===e},he.isNumber=jo,he.isObject=Do,he.isObjectLike=Io,he.isPlainObject=Ro,he.isRegExp=Lo,he.isSafeInteger=function(e){return Mo(e)&&-li<=e&&e<=li},he.isSet=Fo,he.isString=Wo,he.isSymbol=Uo,he.isTypedArray=zo,he.isUndefined=function(e){return e===ri},he.isWeakMap=function(e){return Io(e)&&Kn(e)==Ti},he.isWeakSet=function(e){return Io(e)&&"[object WeakSet]"==et(e)},he.join=function(e,t){return null==e?"":K.call(e,t)},he.kebabCase=Ea,he.last=Tr,he.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return n!==ri&&(o=(o=Yo(n))<0?Y(r+o,0):V(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):Xs(e,Qs,o,!0)},he.lowerCase=Ca,he.lowerFirst=wa,he.lt=Bo,he.lte=Ho,he.max=function(e){return e&&e.length?Ke(e,ja,tt):ri},he.maxBy=function(e,t){return e&&e.length?Ke(e,Fn(t,2),tt):ri},he.mean=function(e){return el(e,ja)},he.meanBy=function(e,t){return el(e,Fn(t,2))},he.min=function(e){return e&&e.length?Ke(e,ja,dt):ri},he.minBy=function(e,t){return e&&e.length?Ke(e,Fn(t,2),dt):ri},he.stubArray=Va,he.stubFalse=qa,he.stubObject=function(){return{}},he.stubString=function(){return""},he.stubTrue=function(){return!0},he.multiply=ei,he.nth=function(e,t){return e&&e.length?gt(e,Yo(t)):ri},he.noConflict=function(){return Ss._===this&&(Ss._=_),this},he.noop=Ua,he.now=ro,he.pad=function(e,t,n){e=Xo(e);var r=(t=Yo(t))?gl(e):0;if(!t||t<=r)return e;var o=(t-r)/2;return xn(U(o),n)+e+xn(W(o),n)},he.padEnd=function(e,t,n){e=Xo(e);var r=(t=Yo(t))?gl(e):0;return t&&r<t?e+xn(t-r,n):e},he.padStart=function(e,t,n){e=Xo(e);var r=(t=Yo(t))?gl(e):0;return t&&r<t?xn(t-r,n)+e:e},he.parseInt=function(e,t,n){return t=n||null==t?0:t&&+t,G(Xo(e).replace(ts,""),t||0)},he.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Gn(e,t,n)&&(t=n=ri),n===ri&&("boolean"==typeof t?(n=t,t=ri):"boolean"==typeof e&&(n=e,e=ri)),e===ri&&t===ri?(e=0,t=1):(e=$o(e),t===ri?(t=e,e=0):t=$o(t)),t<e){var r=e;e=t,t=r}if(n||e%1||t%1){var o=X();return V(e+o*(t-e+ks("1e-"+((o+"").length-1))),t)}return Ct(e,t)},he.reduce=function(e,t,n){var r=Eo(e)?Ys:nl,o=arguments.length<3;return r(e,Fn(t,4),n,o,ze)},he.reduceRight=function(e,t,n){var r=Eo(e)?Vs:nl,o=arguments.length<3;return r(e,Fn(t,4),n,o,Be)},he.repeat=function(e,t,n){return t=(n?Gn(e,t,n):t===ri)?1:Yo(t),wt(Xo(e),t)},he.replace=function(){var e=arguments,t=Xo(e[0]);return e.length<3?t:t.replace(e[1],e[2])},he.result=function(e,t,n){var r=-1,o=(t=qt(t,e)).length;for(o||(o=1,e=ri);++r<o;){var a=null==e?ri:e[hr(t[r])];a===ri&&(r=o,a=n),e=No(a)?a.call(e):a}return e},he.round=ti,he.runInContext=e,he.sample=function(e){return(Eo(e)?ke:kt)(e)},he.size=function(e){if(null==e)return 0;if(wo(e))return Wo(e)?gl(e):e.length;var t=Kn(e);return t==bi||t==wi?e.size:pt(e).length},he.snakeCase=Oa,he.some=function(e,t,n){var r=Eo(e)?qs:It;return n&&Gn(e,t,n)&&(t=ri),r(e,Fn(t,3))},he.sortedIndex=function(e,t){return At(e,t)},he.sortedIndexBy=function(e,t,n){return jt(e,t,Fn(n,2))},he.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=At(e,t);if(r<n&&go(e[r],t))return r}return-1},he.sortedLastIndex=function(e,t){return At(e,t,!0)},he.sortedLastIndexBy=function(e,t,n){return jt(e,t,Fn(n,2),!0)},he.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=At(e,t,!0)-1;if(go(e[n],t))return n}return-1},he.startCase=ka,he.startsWith=function(e,t,n){return e=Xo(e),n=null==n?0:Re(Yo(n),0,e.length),t=Ft(t),e.slice(n,n+t.length)==t},he.subtract=ni,he.sum=function(e){return e&&e.length?rl(e,ja):0},he.sumBy=function(e,t){return e&&e.length?rl(e,Fn(t,2)):0},he.template=function(i,e,t){var n=he.templateSettings;t&&Gn(i,e,t)&&(e=ri),i=Xo(i),e=Qo({},e,n,Sn);var s,l,r=Qo({},e.imports,n.imports,Sn),o=ua(r),a=il(r,o),u=0,c=e.interpolate||vs,p="__p += '",f=y((e.escape||vs).source+"|"+c.source+"|"+(c===qi?ls:vs).source+"|"+(e.evaluate||vs).source+"|$","g"),d="//# sourceURL="+(x.call(e,"sourceURL")?(e.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Cs+"]")+"\n";i.replace(f,function(e,t,n,r,o,a){return n=n||r,p+=i.slice(u,a).replace(ys,fl),t&&(s=!0,p+="' +\n__e("+t+") +\n'"),o&&(l=!0,p+="';\n"+o+";\n__p += '"),n&&(p+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),u=a+e.length,e}),p+="';\n";var h=x.call(e,"variable")&&e.variable;h||(p="with (obj) {\n"+p+"\n}\n"),p=(l?p.replace(Wi,""):p).replace(Ui,"$1").replace(zi,"$1;"),p="function("+(h||"obj")+") {\n"+(h?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(s?", __e = _.escape":"")+(l?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var m=Ma(function(){return v(o,d+"return "+p).apply(ri,a)});if(m.source=p,So(m))throw m;return m},he.times=function(e,t){if((e=Yo(e))<1||li<e)return[];var n=ci,r=V(e,ci);t=Fn(t),e-=ci;for(var o=ol(r,t);++n<e;)t(n);return o},he.toFinite=$o,he.toInteger=Yo,he.toLength=Vo,he.toLower=function(e){return Xo(e).toLowerCase()},he.toNumber=qo,he.toSafeInteger=function(e){return e?Re(Yo(e),-li,li):0===e?e:0},he.toString=Xo,he.toUpper=function(e){return Xo(e).toUpperCase()},he.trim=function(e,t,n){if((e=Xo(e))&&(n||t===ri))return e.replace(es,"");if(!e||!(t=Ft(t)))return e;var r=bl(e),o=bl(t);return Xt(r,ll(r,o),ul(r,o)+1).join("")},he.trimEnd=function(e,t,n){if((e=Xo(e))&&(n||t===ri))return e.replace(ns,"");if(!e||!(t=Ft(t)))return e;var r=bl(e);return Xt(r,0,ul(r,bl(t))+1).join("")},he.trimStart=function(e,t,n){if((e=Xo(e))&&(n||t===ri))return e.replace(ts,"");if(!e||!(t=Ft(t)))return e;var r=bl(e);return Xt(r,ll(r,bl(t))).join("")},he.truncate=function(e,t){var n=30,r="...";if(Do(t)){var o="separator"in t?t.separator:o;n="length"in t?Yo(t.length):n,r="omission"in t?Ft(t.omission):r}var a=(e=Xo(e)).length;if(dl(e)){var i=bl(e);a=i.length}if(a<=n)return e;var s=n-gl(r);if(s<1)return r;var l=i?Xt(i,0,s).join(""):e.slice(0,s);if(o===ri)return l+r;if(i&&(s+=l.length-s),Lo(o)){if(e.slice(s).search(o)){var u,c=l;for(o.global||(o=y(o.source,Xo(us.exec(o))+"g")),o.lastIndex=0;u=o.exec(c);)var p=u.index;l=l.slice(0,p===ri?s:p)}}else if(e.indexOf(Ft(o),s)!=s){var f=l.lastIndexOf(o);-1<f&&(l=l.slice(0,f))}return l+r},he.unescape=function(e){return(e=Xo(e))&&Ki.test(e)?e.replace(Bi,xl):e},he.uniqueId=function(e){var t=++f;return Xo(e)+t},he.upperCase=Ta,he.upperFirst=Sa,he.each=Gr,he.eachRight=Xr,he.first=Cr,Wa(he,(Qa={},Ge(he,function(e,t){x.call(he.prototype,t)||(Qa[t]=e)}),Qa),{chain:!1}),he.VERSION="4.17.15",Fs(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){he[e].placeholder=he}),Fs(["drop","take"],function(n,r){be.prototype[n]=function(e){e=e===ri?1:Y(Yo(e),0);var t=this.__filtered__&&!r?new be(this):this.clone();return t.__filtered__?t.__takeCount__=V(e,t.__takeCount__):t.__views__.push({size:V(e,ci),type:n+(t.__dir__<0?"Right":"")}),t},be.prototype[n+"Right"]=function(e){return this.reverse()[n](e).reverse()}}),Fs(["filter","map","takeWhile"],function(e,t){var n=t+1,r=1==n||3==n;be.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Fn(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),Fs(["head","last"],function(e,t){var n="take"+(t?"Right":"");be.prototype[e]=function(){return this[n](1).value()[0]}}),Fs(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");be.prototype[e]=function(){return this.__filtered__?new be(this):this[n](1)}}),be.prototype.compact=function(){return this.filter(ja)},be.prototype.find=function(e){return this.filter(e).head()},be.prototype.findLast=function(e){return this.reverse().find(e)},be.prototype.invokeMap=Ot(function(t,n){return"function"==typeof t?new be(this):this.map(function(e){return at(e,t,n)})}),be.prototype.reject=function(e){return this.filter(fo(Fn(e)))},be.prototype.slice=function(e,t){e=Yo(e);var n=this;return n.__filtered__&&(0<e||t<0)?new be(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==ri&&(n=(t=Yo(t))<0?n.dropRight(-t):n.take(t-e)),n)},be.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},be.prototype.toArray=function(){return this.take(ci)},Ge(be.prototype,function(p,e){var f=/^(?:filter|find|map|reject)|While$/.test(e),d=/^(?:head|last)$/.test(e),h=he[d?"take"+("last"==e?"Right":""):e],m=d||/^find/.test(e);h&&(he.prototype[e]=function(){function e(e){var t=h.apply(he,$s([e],n));return d&&i?t[0]:t}var t=this.__wrapped__,n=d?[1]:arguments,r=t instanceof be,o=n[0],a=r||Eo(t);a&&f&&"function"==typeof o&&1!=o.length&&(r=a=!1);var i=this.__chain__,s=!!this.__actions__.length,l=m&&!i,u=r&&!s;if(m||!a)return l&&u?p.apply(this,n):(c=this.thru(e),l?d?c.value()[0]:c.value():c);t=u?t:new be(this);var c=p.apply(t,n);return c.__actions__.push({func:Kr,args:[e],thisArg:ri}),new ge(c,i)})}),Fs(["pop","push","shift","sort","splice","unshift"],function(e){var n=i[e],r=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",o=/^(?:pop|shift)$/.test(e);he.prototype[e]=function(){var t=arguments;if(!o||this.__chain__)return this[r](function(e){return n.apply(Eo(e)?e:[],t)});var e=this.value();return n.apply(Eo(e)?e:[],t)}}),Ge(be.prototype,function(e,t){var n=he[t];if(n){var r=n.name+"";x.call(ae,r)||(ae[r]=[]),ae[r].push({name:t,func:n})}}),ae[vn(ri,2).name]=[{name:"wrapper",func:ri}],be.prototype.clone=function(){var e=new be(this.__wrapped__);return e.__actions__=on(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=on(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=on(this.__views__),e},be.prototype.reverse=function(){if(this.__filtered__){var e=new be(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},be.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=Eo(e),r=t<0,o=n?e.length:0,a=function(e,t,n){var r=-1,o=n.length;for(;++r<o;){var a=n[r],i=a.size;switch(a.type){case"drop":e+=i;break;case"dropRight":t-=i;break;case"take":t=V(t,e+i);break;case"takeRight":e=Y(e,t-i)}}return{start:e,end:t}}(0,o,this.__views__),i=a.start,s=a.end,l=s-i,u=r?s:i-1,c=this.__iteratees__,p=c.length,f=0,d=V(l,this.__takeCount__);if(!n||!r&&o==l&&d==l)return Ht(e,this.__actions__);var h=[];e:for(;l--&&f<d;){for(var m=-1,v=e[u+=t];++m<p;){var y=c[m],g=y.iteratee,b=y.type,x=g(v);if(2==b)v=x;else if(!x){if(1==b)continue e;break e}}h[f++]=v}return h},he.prototype.at=$r,he.prototype.chain=function(){return Hr(this)},he.prototype.commit=function(){return new ge(this.value(),this.__chain__)},he.prototype.next=function(){this.__values__===ri&&(this.__values__=Ko(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?ri:this.__values__[this.__index__++]}},he.prototype.plant=function(e){for(var t,n=this;n instanceof ye;){var r=vr(n);r.__index__=0,r.__values__=ri,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},he.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof be){var t=e;return this.__actions__.length&&(t=new be(this)),(t=t.reverse()).__actions__.push({func:Kr,args:[Pr],thisArg:ri}),new ge(t,this.__chain__)}return this.thru(Pr)},he.prototype.toJSON=he.prototype.valueOf=he.prototype.value=function(){return Ht(this.__wrapped__,this.__actions__)},he.prototype.first=he.prototype.head,I&&(he.prototype[I]=function(){return this}),he}();Ss._=_l,(H=function(){return _l}.call(K,$,K,B))===ri||(B.exports=H)}).call(this)}).call(this,$(25),$(36)(e))},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var l=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,r,o=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),a=1;a<arguments.length;a++){for(var i in n=Object(arguments[a]))u.call(n,i)&&(o[i]=n[i]);if(l){r=l(n);for(var s=0;s<r.length;s++)c.call(n,r[s])&&(o[r[s]]=n[r[s]])}}return o}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,a,i,s],c=0;(l=new Error(t.replace(/%s/g,function(){return u[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";var r=Object.prototype.propertyIsEnumerable;function s(t){var e=Object.getOwnPropertyNames(t);return Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(t))),e.filter(function(e){return r.call(t,e)})}e.exports=Object.assign||function(e,t){for(var n,r,o=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),a=1;a<arguments.length;a++){n=arguments[a],r=s(Object(n));for(var i=0;i<r.length;i++)o[r[i]]=n[r[i]]}return o}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,a,i,s],c=0;(l=new Error(t.replace(/%s/g,function(){return u[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";e.exports=function(n){var s=[];return s.toString=function(){return this.map(function(e){var t=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t);return"/*# ".concat(n," */")}(r),a=r.sources.map(function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")});return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}(e,n);return e[2]?"@media ".concat(e[2],"{").concat(t,"}"):t}).join("")},s.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var n={},r=0;r<this.length;r++){var o=this[r][0];null!=o&&(n[o]=!0)}for(var a=0;a<e.length;a++){var i=e[a];null!=i[0]&&n[i[0]]||(t&&!i[2]?i[2]=t:t&&(i[2]="(".concat(i[2],") and (").concat(t,")")),s.push(i))}},s}},function(e,t,n){var r,o,a,l={},u=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),i=(a={},function(e){if("function"==typeof e)return e();if(void 0===a[e]){var t=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}a[e]=t}return a[e]}),s=null,c=0,p=[],f=n(48);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=l[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(b(r.parts[a],t))}else{var i=[];for(a=0;a<r.parts.length;a++)i.push(b(r.parts[a],t));l[r.id]={id:r.id,refs:1,parts:i}}}}function h(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function m(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=p[p.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),p.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=p.indexOf(e);0<=t&&p.splice(t,1)}function y(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),g(t,e.attrs),m(e,t),t}function g(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function b(t,e){var n,r,o,a;if(e.transform&&t.css){if(!(a=e.transform(t.css)))return function(){};t.css=a}if(e.singleton){var i=c++;n=s=s||y(e),r=E.bind(null,n,i,!1),o=E.bind(null,n,i,!0)}else o=t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),m(e,t),t}(e),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,e),function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(e),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),function(){v(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}e.exports=function(e,i){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(i=i||{}).attrs="object"==typeof i.attrs?i.attrs:{},i.singleton||"boolean"==typeof i.singleton||(i.singleton=u()),i.insertInto||(i.insertInto="head"),i.insertAt||(i.insertAt="bottom");var s=h(e,i);return d(s,i),function(e){for(var t=[],n=0;n<s.length;n++){var r=s[n];(o=l[r.id]).refs--,t.push(o)}e&&d(h(e,i),i);for(n=0;n<t.length;n++){var o;if(0===(o=t[n]).refs){for(var a=0;a<o.parts.length;a++)o.parts[a]();delete l[o.id]}}}};var x,_=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join("\n")});function E(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=_(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(195),a=(r=o)&&r.__esModule?r:{default:r};t.default=(0,a.default)({shouldComponentUpdate:function(){return!this._notifying}},function(e,t,n,r,o){n&&(e._notifying=!0,n.call.apply(n,[e,r].concat(o)),e._notifying=!1),e._values[t]=r,e.unmounted||e.forceUpdate()}),e.exports=t.default},function(e,t){function n(e){if(e&&"object"==typeof e){var t=e.which||e.keyCode||e.charCode;t&&(e=t)}if("number"==typeof e)return i[e];var n,r=String(e);return(n=o[r.toLowerCase()])?n:(n=a[r.toLowerCase()])||(1===r.length?r.charCodeAt(0):void 0)}n.isEventKey=function(e,t){if(e&&"object"==typeof e){var n=e.which||e.keyCode||e.charCode;if(null==n)return!1;if("string"==typeof t){var r;if(r=o[t.toLowerCase()])return r===n;if(r=a[t.toLowerCase()])return r===n}else if("number"==typeof t)return t===n;return!1}};var o=(t=e.exports=n).code=t.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},a=t.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(r=97;r<123;r++)o[String.fromCharCode(r)]=r-32;for(var r=48;r<58;r++)o[r-48]=r;for(r=1;r<13;r++)o["f"+r]=r+111;for(r=0;r<10;r++)o["numpad "+r]=r+96;var i=t.names=t.title={};for(r in o)i[o[r]]=r;for(var s in a)o[s]=a[s]},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){e.exports={default:n(199),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},P=r(n(12)),D=r(n(20)),I=n(28),A=n(16),j=r(n(31)),R=n(32);function r(e){return e&&e.__esModule?e:{default:e}}function L(){try{return window.history.state||{}}catch(e){return{}}}var F="popstate",W="hashchange";t.default=function(e){var t=0<arguments.length&&void 0!==e?e:{};(0,D.default)(R.canUseDOM,"Browser history needs a DOM");function n(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,P.default)(!g||(0,A.hasBasename)(a,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+g+'".'),g&&(a=(0,A.stripBasename)(a,g)),(0,I.createLocation)(a,r,n)}function r(){return Math.random().toString(36).substr(2,y)}function s(e){M(S,e),S.length=u.length,b.notifyListeners(S.location,S.action)}function o(e){(0,R.isExtraneousPopstateEvent)(e)||_(n(e.state))}function a(){_(n(L()))}function l(e){return g+(0,A.createPath)(e)}function i(e){1===(k+=e)?((0,R.addEventListener)(window,F,o),p&&(0,R.addEventListener)(window,W,a)):0===k&&((0,R.removeEventListener)(window,F,o),p&&(0,R.removeEventListener)(window,W,a))}var u=window.history,c=(0,R.supportsHistory)(),p=!(0,R.supportsPopStateOnHashChange)(),f=t.forceRefresh,d=void 0!==f&&f,h=t.getUserConfirmation,m=void 0===h?R.getConfirmation:h,v=t.keyLength,y=void 0===v?6:v,g=t.basename?(0,A.stripTrailingSlash)((0,A.addLeadingSlash)(t.basename)):"",b=(0,j.default)(),x=!1,_=function(t){if(x)x=!1,s();else{b.confirmTransitionTo(t,"POP",m,function(e){e?s({action:"POP",location:t}):E(t)})}},E=function(e){var t=S.location,n=w.indexOf(t.key);-1===n&&(n=0);var r=w.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(x=!0,O(o))},C=n(L()),w=[C.key],O=function(e){u.go(e)},k=0,T=!1,S={length:u.length,action:"POP",location:C,createHref:l,push:function(e,t){(0,P.default)(!("object"===(void 0===e?"undefined":N(e))&&void 0!==e.state&&void 0!==t),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,I.createLocation)(e,t,r(),S.location);b.confirmTransitionTo(i,"PUSH",m,function(e){if(e){var t=l(i),n=i.key,r=i.state;if(c)if(u.pushState({key:n,state:r},null,t),d)window.location.href=t;else{var o=w.indexOf(S.location.key),a=w.slice(0,-1===o?0:o+1);a.push(i.key),w=a,s({action:"PUSH",location:i})}else(0,P.default)(void 0===r,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=t}})},replace:function(e,t){(0,P.default)(!("object"===(void 0===e?"undefined":N(e))&&void 0!==e.state&&void 0!==t),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a="REPLACE",i=(0,I.createLocation)(e,t,r(),S.location);b.confirmTransitionTo(i,a,m,function(e){if(e){var t=l(i),n=i.key,r=i.state;if(c)if(u.replaceState({key:n,state:r},null,t),d)window.location.replace(t);else{var o=w.indexOf(S.location.key);-1!==o&&(w[o]=i.key),s({action:a,location:i})}else(0,P.default)(void 0===r,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(t)}})},go:O,goBack:function(){return O(-1)},goForward:function(){return O(1)},block:function(e){var t=0<arguments.length&&void 0!==e&&e,n=b.setPrompt(t);return T||(i(1),T=!0),function(){return T&&(T=!1,i(-1)),n()}},listen:function(e){var t=b.appendListener(e);return i(1),function(){i(-1),t()}}};return S}},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=o(n(29)),r=o(n(30)),s=n(16);function o(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=(0,s.parsePath)(e)).state=t:(void 0===(o=a({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=(0,i.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,r.default)(e.state,t.state)}},function(e,t,n){"use strict";function d(e){return"/"===e.charAt(0)}function h(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&d(e),a=t&&d(t),i=o||a;if(e&&d(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var s=void 0;if(r.length){var l=r[r.length-1];s="."===l||".."===l||""===l}else s=!1;for(var u=0,c=r.length;0<=c;c--){var p=r[c];"."===p?h(r,c):".."===p?(h(r,c),u++):u&&(h(r,c),u--)}if(!i)for(;u--;)r.unshift("..");!i||""===r[0]||r[0]&&d(r[0])||r.unshift("");var f=r.join("/");return s&&"/"!==f.substr(-1)&&(f+="/"),f}},function(e,t,n){"use strict";n.r(t);var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function n(t,r){if(t===r)return!0;if(null==t||null==r)return!1;if(Array.isArray(t))return Array.isArray(r)&&t.length===r.length&&t.every(function(e,t){return n(e,r[t])});var e=void 0===t?"undefined":l(t);if(e!==(void 0===r?"undefined":l(r)))return!1;if("object"!==e)return!1;var o=t.valueOf(),a=r.valueOf();if(o!==t||a!==r)return n(o,a);var i=Object.keys(t),s=Object.keys(r);return i.length===s.length&&i.every(function(e){return n(t[e],r[e])})}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(12),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var a=null,r=[];return{setPrompt:function(e){return(0,i.default)(null==a,"A history supports only one prompt at a time"),a=e,function(){a===e&&(a=null)}},confirmTransitionTo:function(e,t,n,r){if(null!=a){var o="function"==typeof a?a(e,t):a;"string"==typeof o?"function"==typeof n?n(o,r):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),r(!0)):r(!1!==o)}else r(!0)},appendListener:function(e){function t(){n&&e.apply(void 0,arguments)}var n=!0;return r.push(t),function(){n=!1,r=r.filter(function(e){return e!==t})}},notifyListeners:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];r.forEach(function(e){return e.apply(void 0,t)})}}}},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";var r=n(34),i=n(17),s=n(35);function l(e,t){return t.encode?t.strict?r(e):encodeURIComponent(e):e}function o(e){var t=e.indexOf("?");return-1===t?"":e.slice(t+1)}function a(e,t){var o=function(e){var r;switch(e.arrayFormat){case"index":return function(e,t,n){r=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),r?(void 0===n[e]&&(n[e]={}),n[e][r[1]]=t):n[e]=t};case"bracket":return function(e,t,n){r=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),r?void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=[t]:n[e]=t};default:return function(e,t,n){void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=t}}}(t=i({arrayFormat:"none"},t)),a=Object.create(null);return"string"!=typeof e?a:(e=e.trim().replace(/^[?#&]/,""))?(e.split("&").forEach(function(e){var t=e.replace(/\+/g," ").split("="),n=t.shift(),r=0<t.length?t.join("="):void 0;r=void 0===r?null:s(r),o(s(n),r,a)}),Object.keys(a).sort().reduce(function(e,t){var n=a[t];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?e[t]=function e(t){return Array.isArray(t)?t.sort():"object"==typeof t?e(Object.keys(t)).sort(function(e,t){return Number(e)-Number(t)}).map(function(e){return t[e]}):t}(n):e[t]=n,e},Object.create(null))):a}t.extract=o,t.parse=a,t.stringify=function(r,o){!1===(o=i({encode:!0,strict:!0,arrayFormat:"none"},o)).sort&&(o.sort=function(){});var a=function(r){switch(r.arrayFormat){case"index":return function(e,t,n){return null===t?[l(e,r),"[",n,"]"].join(""):[l(e,r),"[",l(n,r),"]=",l(t,r)].join("")};case"bracket":return function(e,t){return null===t?l(e,r):[l(e,r),"[]=",l(t,r)].join("")};default:return function(e,t){return null===t?l(e,r):[l(e,r),"=",l(t,r)].join("")}}}(o);return r?Object.keys(r).sort(o.sort).map(function(t){var e=r[t];if(void 0===e)return"";if(null===e)return l(t,o);if(Array.isArray(e)){var n=[];return e.slice().forEach(function(e){void 0!==e&&n.push(a(t,e,n.length))}),n.join("&")}return l(t,o)+"="+l(e,o)}).filter(function(e){return 0<e.length}).join("&"):""},t.parseUrl=function(e,t){return{url:e.split("?")[0]||"",query:a(o(e),t)}}},function(e,t,n){"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}},function(e,t,n){"use strict";var r="%[a-f0-9]{2}",o=new RegExp(r,"gi"),s=new RegExp("("+r+")+","gi");function a(e,t){try{return decodeURIComponent(e.join(""))}catch(e){}if(1===e.length)return e;t=t||1;var n=e.slice(0,t),r=e.slice(t);return Array.prototype.concat.call([],a(n),a(r))}function l(t){try{return decodeURIComponent(t)}catch(e){for(var n=t.match(o),r=1;r<n.length;r++)n=(t=a(n,r).join("")).match(o);return t}}e.exports=function(t){if("string"!=typeof t)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof t+"`");try{return t=t.replace(/\+/g," "),decodeURIComponent(t)}catch(e){return function(e){for(var t={"%FE%FF":"��","%FF%FE":"��"},n=s.exec(e);n;){try{t[n[0]]=decodeURIComponent(n[0])}catch(e){var r=l(n[0]);r!==n[0]&&(t[n[0]]=r)}n=s.exec(e)}t["%C2"]="�";for(var o=Object.keys(t),a=0;a<o.length;a++){var i=o[a];e=e.replace(new RegExp(i,"g"),t[i])}return e}(t)}}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";var r=n(38),i=n(18),s=n(39);e.exports=function(){function e(e,t,n,r,o,a){a!==s&&i(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}var n={array:e.isRequired=e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n}},function(e,t,n){"use strict";function r(e){return function(){return e}}function o(){}o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(19),o=n(0),a=n(10),i=n(11),s=n(1),l=n(43),u=Object.freeze({YEARS:"years",MONTHS:"months",DAYS:"days",TIME:"time"}),c=o,p=a({propTypes:{onFocus:c.func,onBlur:c.func,onChange:c.func,onViewModeChange:c.func,locale:c.string,utc:c.bool,input:c.bool,inputProps:c.object,timeConstraints:c.object,viewMode:c.oneOf([u.YEARS,u.MONTHS,u.DAYS,u.TIME]),isValidDate:c.func,open:c.bool,strictParsing:c.bool,closeOnSelect:c.bool,closeOnTab:c.bool},getInitialState:function(){var e=this.getStateFromProps(this.props);return void 0===e.open&&(e.open=!this.props.input),e.currentView=this.props.dateFormat?this.props.viewMode||e.updateOn||u.DAYS:u.TIME,e},parseDate:function(e,t){var n;return e&&"string"==typeof e?n=this.localMoment(e,t.datetime):e&&(n=this.localMoment(e)),n&&!n.isValid()&&(n=null),n},getStateFromProps:function(e){var t,n,r,o,a=this.getFormats(e),i=e.value||e.defaultValue;return t=this.parseDate(i,a),n=this.parseDate(e.viewDate,a),n=t?t.clone().startOf("month"):n?n.clone().startOf("month"):this.localMoment().startOf("month"),r=this.getUpdateOn(a),o=t?t.format(a.datetime):i.isValid&&!i.isValid()?"":i||"",{updateOn:r,inputFormat:a.datetime,viewDate:n,selectedDate:t,inputValue:o,open:e.open}},getUpdateOn:function(e){return e.date.match(/[lLD]/)?u.DAYS:-1!==e.date.indexOf("M")?u.MONTHS:-1!==e.date.indexOf("Y")?u.YEARS:u.DAYS},getFormats:function(e){var t={date:e.dateFormat||"",time:e.timeFormat||""},n=this.localMoment(e.date,null,e).localeData();return!0===t.date?t.date=n.longDateFormat("L"):this.getUpdateOn(t)!==u.DAYS&&(t.time=""),!0===t.time&&(t.time=n.longDateFormat("LT")),t.datetime=t.date&&t.time?t.date+" "+t.time:t.date||t.time,t},componentWillReceiveProps:function(e){var t=this.getFormats(e),n={};if(e.value===this.props.value&&t.datetime===this.getFormats(this.props).datetime||(n=this.getStateFromProps(e)),void 0===n.open&&(void 0!==e.open?n.open=e.open:this.props.closeOnSelect&&this.state.currentView!==u.TIME?n.open=!1:n.open=this.state.open),e.viewMode!==this.props.viewMode&&(n.currentView=e.viewMode),e.locale!==this.props.locale){if(this.state.viewDate){var r=this.state.viewDate.clone().locale(e.locale);n.viewDate=r}if(this.state.selectedDate){var o=this.state.selectedDate.clone().locale(e.locale);n.selectedDate=o,n.inputValue=o.format(t.datetime)}}e.utc!==this.props.utc&&(e.utc?(this.state.viewDate&&(n.viewDate=this.state.viewDate.clone().utc()),this.state.selectedDate&&(n.selectedDate=this.state.selectedDate.clone().utc(),n.inputValue=n.selectedDate.format(t.datetime))):(this.state.viewDate&&(n.viewDate=this.state.viewDate.clone().local()),this.state.selectedDate&&(n.selectedDate=this.state.selectedDate.clone().local(),n.inputValue=n.selectedDate.format(t.datetime)))),e.viewDate!==this.props.viewDate&&(n.viewDate=i(e.viewDate)),this.setState(n)},onInputChange:function(e){var t=null===e.target?e:e.target.value,n=this.localMoment(t,this.state.inputFormat),r={inputValue:t};return n.isValid()&&!this.props.value?(r.selectedDate=n,r.viewDate=n.clone().startOf("month")):r.selectedDate=null,this.setState(r,function(){return this.props.onChange(n.isValid()?n:this.state.inputValue)})},onInputKey:function(e){9===e.which&&this.props.closeOnTab&&this.closeCalendar()},showView:function(e){var t=this;return function(){t.state.currentView!==e&&t.props.onViewModeChange(e),t.setState({currentView:e})}},setDate:function(t){var n=this,r={month:u.DAYS,year:u.MONTHS};return function(e){n.setState({viewDate:n.state.viewDate.clone()[t](parseInt(e.target.getAttribute("data-value"),10)).startOf(t),currentView:r[t]}),n.props.onViewModeChange(r[t])}},addTime:function(e,t,n){return this.updateTime("add",e,t,n)},subtractTime:function(e,t,n){return this.updateTime("subtract",e,t,n)},updateTime:function(n,r,o,a){var i=this;return function(){var e={},t=a?"selectedDate":"viewDate";e[t]=i.state[t].clone()[n](r,o),i.setState(e)}},allowedSetTime:["hours","minutes","seconds","milliseconds"],setTime:function(e,t){var n,r=this.allowedSetTime.indexOf(e)+1,o=this.state,a=(o.selectedDate||o.viewDate).clone();for(a[e](t);r<this.allowedSetTime.length;r++)a[n=this.allowedSetTime[r]](a[n]());this.props.value||this.setState({selectedDate:a,inputValue:a.format(o.inputFormat)}),this.props.onChange(a)},updateSelectedDate:function(e,t){var n,r=e.target,o=0,a=this.state.viewDate,i=this.state.selectedDate||a;if(-1!==r.className.indexOf("rdtDay")?(-1!==r.className.indexOf("rdtNew")?o=1:-1!==r.className.indexOf("rdtOld")&&(o=-1),n=a.clone().month(a.month()+o).date(parseInt(r.getAttribute("data-value"),10))):-1!==r.className.indexOf("rdtMonth")?n=a.clone().month(parseInt(r.getAttribute("data-value"),10)).date(i.date()):-1!==r.className.indexOf("rdtYear")&&(n=a.clone().month(i.month()).date(i.date()).year(parseInt(r.getAttribute("data-value"),10))),n.hours(i.hours()).minutes(i.minutes()).seconds(i.seconds()).milliseconds(i.milliseconds()),this.props.value)this.props.closeOnSelect&&t&&this.closeCalendar();else{var s=!(this.props.closeOnSelect&&t);s||this.props.onBlur(n),this.setState({selectedDate:n,viewDate:n.clone().startOf("month"),inputValue:n.format(this.state.inputFormat),open:s})}this.props.onChange(n)},openCalendar:function(e){this.state.open||this.setState({open:!0},function(){this.props.onFocus(e)})},closeCalendar:function(){this.setState({open:!1},function(){this.props.onBlur(this.state.selectedDate||this.state.inputValue)})},handleClickOutside:function(){this.props.input&&this.state.open&&!this.props.open&&!this.props.disableOnClickOutside&&this.setState({open:!1},function(){this.props.onBlur(this.state.selectedDate||this.state.inputValue)})},localMoment:function(e,t,n){var r=((n=n||this.props).utc?i.utc:i)(e,t,n.strictParsing);return n.locale&&r.locale(n.locale),r},componentProps:{fromProps:["value","isValidDate","renderDay","renderMonth","renderYear","timeConstraints"],fromState:["viewDate","selectedDate","updateOn"],fromThis:["setDate","setTime","showView","addTime","subtractTime","updateSelectedDate","localMoment","handleClickOutside"]},getComponentProps:function(){var t=this,e=this.getFormats(this.props),n={dateFormat:e.date,timeFormat:e.time};return this.componentProps.fromProps.forEach(function(e){n[e]=t.props[e]}),this.componentProps.fromState.forEach(function(e){n[e]=t.state[e]}),this.componentProps.fromThis.forEach(function(e){n[e]=t[e]}),n},render:function(){var e="rdt"+(this.props.className?Array.isArray(this.props.className)?" "+this.props.className.join(" "):" "+this.props.className:""),t=[];if(this.props.input){var n=r({type:"text",className:"form-control",onClick:this.openCalendar,onFocus:this.openCalendar,onChange:this.onInputChange,onKeyDown:this.onInputKey,value:this.state.inputValue},this.props.inputProps);t=this.props.renderInput?[s.createElement("div",{key:"i"},this.props.renderInput(n,this.openCalendar,this.closeCalendar))]:[s.createElement("input",r({key:"i"},n))]}else e+=" rdtStatic";return this.state.open&&(e+=" rdtOpen"),s.createElement("div",{className:e},t.concat(s.createElement("div",{key:"dt",className:"rdtPicker"},s.createElement(l,{view:this.state.currentView,viewProps:this.getComponentProps(),onClickOutside:this.handleClickOutside}))))}});p.defaultProps={className:"",defaultValue:"",inputProps:{},input:!0,onFocus:function(){},onBlur:function(){},onChange:function(){},onViewModeChange:function(){},timeFormat:!0,timeConstraints:{},dateFormat:!0,strictParsing:!0,closeOnSelect:!1,closeOnTab:!0,utc:!1},p.moment=i,e.exports=p},function(e,t,n){"use strict";var o=n(17),p=n(42),g=n(18);e.exports=function(e,f,a){var n=[],d={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",UNSAFE_componentWillMount:"DEFINE_MANY",UNSAFE_componentWillReceiveProps:"DEFINE_MANY",UNSAFE_componentWillUpdate:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},i={getDerivedStateFromProps:"DEFINE_MANY_MERGED"},h={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)r(e,t[n])},childContextTypes:function(e,t){e.childContextTypes=o({},e.childContextTypes,t)},contextTypes:function(e,t){e.contextTypes=o({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=m(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,t){e.propTypes=o({},e.propTypes,t)},statics:function(e,t){!function(e,t){if(!t)return;for(var n in t){var r=t[n];if(t.hasOwnProperty(n)){if(g(!(n in h),'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n),n in e){var o=i.hasOwnProperty(n)?i[n]:null;return g("DEFINE_MANY_MERGED"===o,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),e[n]=m(e[n],r)}e[n]=r}}}(e,t)},autobind:function(){}};function r(e,t){if(t){g("function"!=typeof t,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),g(!f(t),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var n,r,o,a=e.prototype,i=a.__reactAutoBindPairs;for(var s in t.hasOwnProperty("mixins")&&h.mixins(e,t.mixins),t)if(t.hasOwnProperty(s)&&"mixins"!==s){var l=t[s],u=a.hasOwnProperty(s);if(n=u,r=s,void 0,o=d.hasOwnProperty(r)?d[r]:null,y.hasOwnProperty(r)&&g("OVERRIDE_BASE"===o,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",r),n&&g("DEFINE_MANY"===o||"DEFINE_MANY_MERGED"===o,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",r),h.hasOwnProperty(s))h[s](e,l);else{var c=d.hasOwnProperty(s);if("function"==typeof l&&!c&&!u&&!1!==t.autobind)i.push(s,l),a[s]=l;else if(u){var p=d[s];g(c&&("DEFINE_MANY_MERGED"===p||"DEFINE_MANY"===p),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",p,s),"DEFINE_MANY_MERGED"===p?a[s]=m(a[s],l):"DEFINE_MANY"===p&&(a[s]=v(a[s],l))}else a[s]=l}}}else;}function s(e,t){for(var n in g(e&&t&&"object"==typeof e&&"object"==typeof t,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."),t)t.hasOwnProperty(n)&&(g(void 0===e[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),e[n]=t[n]);return e}function m(r,o){return function(){var e=r.apply(this,arguments),t=o.apply(this,arguments);if(null==e)return t;if(null==t)return e;var n={};return s(n,e),s(n,t),n}}function v(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function l(){}var u={componentDidMount:function(){this.__isMounted=!0}},c={componentWillUnmount:function(){this.__isMounted=!1}},y={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e,t)},isMounted:function(){return!!this.__isMounted}};return o(l.prototype,e.prototype,y),function(e){var o=function(e){return e}(function(e,t,n){this.__reactAutoBindPairs.length&&function(e){for(var t,n=e.__reactAutoBindPairs,r=0;r<n.length;r+=2){var o=n[r],a=n[r+1];e[o]=(t=e,a.bind(t))}}(this),this.props=e,this.context=t,this.refs=p,this.updater=n||a,this.state=null;var r=this.getInitialState?this.getInitialState():null;g("object"==typeof r&&!Array.isArray(r),"%s.getInitialState(): must return an object or null",o.displayName||"ReactCompositeComponent"),this.state=r});for(var t in o.prototype=new l,(o.prototype.constructor=o).prototype.__reactAutoBindPairs=[],n.forEach(r.bind(null,o)),r(o,u),r(o,e),r(o,c),o.getDefaultProps&&(o.defaultProps=o.getDefaultProps()),g(o.prototype.render,"createClass(...): Class specification must implement a `render` method."),d)o.prototype[t]||(o.prototype[t]=null);return o}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";var r=n(1),o=n(10)({viewComponents:{days:n(44),months:n(45),years:n(46),time:n(47)},render:function(){return r.createElement(this.viewComponents[this.props.view],this.props.viewProps)}});e.exports=o},function(e,t,n){"use strict";var h=n(1),r=n(10),m=n(11),o=(0,n(13).default)(r({render:function(){var e,t=this.renderFooter(),n=this.props.viewDate,r=n.localeData();return e=[h.createElement("thead",{key:"th"},[h.createElement("tr",{key:"h"},[h.createElement("th",{key:"p",className:"rdtPrev",onClick:this.props.subtractTime(1,"months")},h.createElement("span",{},"‹")),h.createElement("th",{key:"s",className:"rdtSwitch",onClick:this.props.showView("months"),colSpan:5,"data-value":this.props.viewDate.month()},r.months(n)+" "+n.year()),h.createElement("th",{key:"n",className:"rdtNext",onClick:this.props.addTime(1,"months")},h.createElement("span",{},"›"))]),h.createElement("tr",{key:"d"},this.getDaysOfWeek(r).map(function(e,t){return h.createElement("th",{key:e+t,className:"dow"},e)}))]),h.createElement("tbody",{key:"tb"},this.renderDays())],t&&e.push(t),h.createElement("div",{className:"rdtDays"},h.createElement("table",{},e))},getDaysOfWeek:function(e){var t=e._weekdaysMin,n=e.firstDayOfWeek(),r=[],o=0;return t.forEach(function(e){r[(7+o++-n)%7]=e}),r},renderDays:function(){var e,t,n,r,o=this.props.viewDate,a=this.props.selectedDate&&this.props.selectedDate.clone(),i=o.clone().subtract(1,"months"),s=o.year(),l=o.month(),u=[],c=[],p=this.props.renderDay||this.renderDay,f=this.props.isValidDate||this.alwaysValidDate;i.date(i.daysInMonth()).startOf("week");for(var d=i.clone().add(42,"d");i.isBefore(d);)e="rdtDay",r=i.clone(),i.year()===s&&i.month()<l||i.year()<s?e+=" rdtOld":(i.year()===s&&i.month()>l||i.year()>s)&&(e+=" rdtNew"),a&&i.isSame(a,"day")&&(e+=" rdtActive"),i.isSame(m(),"day")&&(e+=" rdtToday"),(t=!f(r,a))&&(e+=" rdtDisabled"),n={key:i.format("M_D"),"data-value":i.date(),className:e},t||(n.onClick=this.updateSelectedDate),c.push(p(n,r,a)),7===c.length&&(u.push(h.createElement("tr",{key:i.format("M_D")},c)),c=[]),i.add(1,"d");return u},updateSelectedDate:function(e){this.props.updateSelectedDate(e,!0)},renderDay:function(e,t){return h.createElement("td",e,t.date())},renderFooter:function(){if(!this.props.timeFormat)return"";var e=this.props.selectedDate||this.props.viewDate;return h.createElement("tfoot",{key:"tf"},h.createElement("tr",{},h.createElement("td",{onClick:this.props.showView("time"),colSpan:7,className:"rdtTimeToggle"},e.format(this.props.timeFormat))))},alwaysValidDate:function(){return 1},handleClickOutside:function(){this.props.handleClickOutside()}}));e.exports=o},function(e,t,n){"use strict";var d=n(1),r=n(10),o=(0,n(13).default)(r({render:function(){return d.createElement("div",{className:"rdtMonths"},[d.createElement("table",{key:"a"},d.createElement("thead",{},d.createElement("tr",{},[d.createElement("th",{key:"prev",className:"rdtPrev",onClick:this.props.subtractTime(1,"years")},d.createElement("span",{},"‹")),d.createElement("th",{key:"year",className:"rdtSwitch",onClick:this.props.showView("years"),colSpan:2,"data-value":this.props.viewDate.year()},this.props.viewDate.year()),d.createElement("th",{key:"next",className:"rdtNext",onClick:this.props.addTime(1,"years")},d.createElement("span",{},"›"))]))),d.createElement("table",{key:"months"},d.createElement("tbody",{key:"b"},this.renderMonths()))])},renderMonths:function(){for(var e,t,n,r,o,a=this.props.selectedDate,i=this.props.viewDate.month(),s=this.props.viewDate.year(),l=[],u=0,c=[],p=this.props.renderMonth||this.renderMonth,f=this.props.isValidDate||this.alwaysValidDate;u<12;)e="rdtMonth",o=(n=this.props.viewDate.clone().set({year:s,month:u,date:1})).endOf("month").format("D"),(r=void 0===Array.from({length:o},function(e,t){return t+1}).find(function(e){var t=n.clone().set("date",e);return f(t)}))&&(e+=" rdtDisabled"),a&&u===a.month()&&s===a.year()&&(e+=" rdtActive"),t={key:u,"data-value":u,className:e},r||(t.onClick="months"===this.props.updateOn?this.updateSelectedMonth:this.props.setDate("month")),c.push(p(t,u,s,a&&a.clone())),4===c.length&&(l.push(d.createElement("tr",{key:i+"_"+l.length},c)),c=[]),u++;return l},updateSelectedMonth:function(e){this.props.updateSelectedDate(e)},renderMonth:function(e,t){var n=this.props.viewDate,r=n.localeData().monthsShort(n.month(t)).substring(0,3);return d.createElement("td",e,function(e){return e.charAt(0).toUpperCase()+e.slice(1)}(r))},alwaysValidDate:function(){return 1},handleClickOutside:function(){this.props.handleClickOutside()}}));e.exports=o},function(e,t,n){"use strict";var f=n(1),r=n(10),o=(0,n(13).default)(r({render:function(){var e=10*parseInt(this.props.viewDate.year()/10,10);return f.createElement("div",{className:"rdtYears"},[f.createElement("table",{key:"a"},f.createElement("thead",{},f.createElement("tr",{},[f.createElement("th",{key:"prev",className:"rdtPrev",onClick:this.props.subtractTime(10,"years")},f.createElement("span",{},"‹")),f.createElement("th",{key:"year",className:"rdtSwitch",onClick:this.props.showView("years"),colSpan:2},e+"-"+(9+e)),f.createElement("th",{key:"next",className:"rdtNext",onClick:this.props.addTime(10,"years")},f.createElement("span",{},"›"))]))),f.createElement("table",{key:"years"},f.createElement("tbody",{},this.renderYears(e)))])},renderYears:function(e){var t,n,r,o,a,i=[],s=-1,l=[],u=this.props.renderYear||this.renderYear,c=this.props.selectedDate,p=this.props.isValidDate||this.alwaysValidDate;for(e--;s<11;)t="rdtYear",a=(r=this.props.viewDate.clone().set({year:e,month:0,date:1})).endOf("year").format("DDD"),(o=void 0===Array.from({length:a},function(e,t){return t+1}).find(function(e){var t=r.clone().dayOfYear(e);return p(t)}))&&(t+=" rdtDisabled"),c&&c.year()===e&&(t+=" rdtActive"),n={key:e,"data-value":e,className:t},o||(n.onClick="years"===this.props.updateOn?this.updateSelectedYear:this.props.setDate("year")),i.push(u(n,e,c&&c.clone())),4===i.length&&(l.push(f.createElement("tr",{key:s},i)),i=[]),e++,s++;return l},updateSelectedYear:function(e){this.props.updateSelectedDate(e)},renderYear:function(e,t){return f.createElement("td",e,t)},alwaysValidDate:function(){return 1},handleClickOutside:function(){this.props.handleClickOutside()}}));e.exports=o},function(e,t,n){"use strict";var r=n(1),o=n(10),a=n(19),i=(0,n(13).default)(o({getInitialState:function(){return this.calculateState(this.props)},calculateState:function(e){var t=e.selectedDate||e.viewDate,n=e.timeFormat,r=[];-1!==n.toLowerCase().indexOf("h")&&(r.push("hours"),-1!==n.indexOf("m")&&(r.push("minutes"),-1!==n.indexOf("s")&&r.push("seconds")));var o=t.format("H"),a=!1;return null!==this.state&&-1!==this.props.timeFormat.toLowerCase().indexOf(" a")&&(a=-1!==this.props.timeFormat.indexOf(" A")?12<=o?"PM":"AM":12<=o?"pm":"am"),{hours:o,minutes:t.format("mm"),seconds:t.format("ss"),milliseconds:t.format("SSS"),daypart:a,counters:r}},renderCounter:function(e){if("daypart"===e)return"";var t=this.state[e];return"hours"===e&&-1!==this.props.timeFormat.toLowerCase().indexOf(" a")&&0===(t=(t-1)%12+1)&&(t=12),r.createElement("div",{key:e,className:"rdtCounter"},[r.createElement("span",{key:"up",className:"rdtBtn",onTouchStart:this.onStartClicking("increase",e),onMouseDown:this.onStartClicking("increase",e),onContextMenu:this.disableContextMenu},"▲"),r.createElement("div",{key:"c",className:"rdtCount"},t),r.createElement("span",{key:"do",className:"rdtBtn",onTouchStart:this.onStartClicking("decrease",e),onMouseDown:this.onStartClicking("decrease",e),onContextMenu:this.disableContextMenu},"▼")])},renderDayPart:function(){return r.createElement("div",{key:"dayPart",className:"rdtCounter"},[r.createElement("span",{key:"up",className:"rdtBtn",onTouchStart:this.onStartClicking("toggleDayPart","hours"),onMouseDown:this.onStartClicking("toggleDayPart","hours"),onContextMenu:this.disableContextMenu},"▲"),r.createElement("div",{key:this.state.daypart,className:"rdtCount"},this.state.daypart),r.createElement("span",{key:"do",className:"rdtBtn",onTouchStart:this.onStartClicking("toggleDayPart","hours"),onMouseDown:this.onStartClicking("toggleDayPart","hours"),onContextMenu:this.disableContextMenu},"▼")])},render:function(){var t=this,n=[];return this.state.counters.forEach(function(e){n.length&&n.push(r.createElement("div",{key:"sep"+n.length,className:"rdtCounterSeparator"},":")),n.push(t.renderCounter(e))}),!1!==this.state.daypart&&n.push(t.renderDayPart()),3===this.state.counters.length&&-1!==this.props.timeFormat.indexOf("S")&&(n.push(r.createElement("div",{className:"rdtCounterSeparator",key:"sep5"},":")),n.push(r.createElement("div",{className:"rdtCounter rdtMilli",key:"m"},r.createElement("input",{value:this.state.milliseconds,type:"text",onChange:this.updateMilli})))),r.createElement("div",{className:"rdtTime"},r.createElement("table",{},[this.renderHeader(),r.createElement("tbody",{key:"b"},r.createElement("tr",{},r.createElement("td",{},r.createElement("div",{className:"rdtCounters"},n))))]))},componentWillMount:function(){var t=this;t.timeConstraints={hours:{min:0,max:23,step:1},minutes:{min:0,max:59,step:1},seconds:{min:0,max:59,step:1},milliseconds:{min:0,max:999,step:1}},["hours","minutes","seconds","milliseconds"].forEach(function(e){a(t.timeConstraints[e],t.props.timeConstraints[e])}),this.setState(this.calculateState(this.props))},componentWillReceiveProps:function(e){this.setState(this.calculateState(e))},updateMilli:function(e){var t=parseInt(e.target.value,10);t===e.target.value&&0<=t&&t<1e3&&(this.props.setTime("milliseconds",t),this.setState({milliseconds:t}))},renderHeader:function(){if(!this.props.dateFormat)return null;var e=this.props.selectedDate||this.props.viewDate;return r.createElement("thead",{key:"h"},r.createElement("tr",{},r.createElement("th",{className:"rdtSwitch",colSpan:4,onClick:this.props.showView("days")},e.format(this.props.dateFormat))))},onStartClicking:function(t,n){var r=this;return function(){var e={};e[n]=r[t](n),r.setState(e),r.timer=setTimeout(function(){r.increaseTimer=setInterval(function(){e[n]=r[t](n),r.setState(e)},70)},500),r.mouseUpListener=function(){clearTimeout(r.timer),clearInterval(r.increaseTimer),r.props.setTime(n,r.state[n]),document.body.removeEventListener("mouseup",r.mouseUpListener),document.body.removeEventListener("touchend",r.mouseUpListener)},document.body.addEventListener("mouseup",r.mouseUpListener),document.body.addEventListener("touchend",r.mouseUpListener)}},disableContextMenu:function(e){return e.preventDefault(),!1},padValues:{hours:1,minutes:2,seconds:2,milliseconds:3},toggleDayPart:function(e){var t=parseInt(this.state[e],10)+12;return t>this.timeConstraints[e].max&&(t=this.timeConstraints[e].min+(t-(this.timeConstraints[e].max+1))),this.pad(e,t)},increase:function(e){var t=parseInt(this.state[e],10)+this.timeConstraints[e].step;return t>this.timeConstraints[e].max&&(t=this.timeConstraints[e].min+(t-(this.timeConstraints[e].max+1))),this.pad(e,t)},decrease:function(e){var t=parseInt(this.state[e],10)-this.timeConstraints[e].step;return t<this.timeConstraints[e].min&&(t=this.timeConstraints[e].max+1-(this.timeConstraints[e].min-t)),this.pad(e,t)},pad:function(e,t){for(var n=t+"";n.length<this.padValues[e];)n="0"+n;return n},handleClickOutside:function(){this.props.handleClickOutside()}}));e.exports=i},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var o=t.protocol+"//"+t.host,a=o+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var n,r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?e:(n=0===r.indexOf("//")?r:0===r.indexOf("/")?o+r:a+r.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")})}},function(e,t){var n=e.exports={version:"2.6.9"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(104)("wks"),o=n(88),a=n(56).Symbol,i="function"==typeof a;(e.exports=function(e){return r[e]||(r[e]=i&&a[e]||(i?a:o)("Symbol."+e))}).store=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){{if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}}(n(133)),a=s(n(1)),o=s(n(9)),i=n(212);n(213);function s(e){return e&&e.__esModule?e:{default:e}}var l="unmounted";t.UNMOUNTED=l;var u="exited";t.EXITED=u;var c="entering";t.ENTERING=c;var p="entered";t.ENTERED=p;var f="exiting";t.EXITING=f;var d=function(i){function e(e,t){var n;n=i.call(this,e,t)||this;var r,o=t.transitionGroup,a=o&&!o.isMounting?e.enter:e.appear;return n.appearStatus=null,e.in?a?(r=u,n.appearStatus=c):r=p:r=e.unmountOnExit||e.mountOnEnter?l:u,n.state={status:r},n.nextCallback=null,n}!function(e,t){e.prototype=Object.create(t.prototype),(e.prototype.constructor=e).__proto__=t}(e,i);var t=e.prototype;return t.getChildContext=function(){return{transitionGroup:null}},e.getDerivedStateFromProps=function(e,t){return e.in&&t.status===l?{status:u}:null},t.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},t.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==c&&n!==p&&(t=c):n!==c&&n!==p||(t=f)}this.updateStatus(!1,t)},t.componentWillUnmount=function(){this.cancelNextCallback()},t.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},t.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=o.default.findDOMNode(this);t===c?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===u&&this.setState({status:l})},t.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,a=this.getTimeouts(),i=o?a.appear:a.enter;t||r?(this.props.onEnter(e,o),this.safeSetState({status:c},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,i,function(){n.safeSetState({status:p},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:p},function(){n.props.onEntered(e)})},t.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:f},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:u},function(){t.props.onExited(e)})})})):this.safeSetState({status:u},function(){t.props.onExited(e)})},t.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},t.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},t.setNextCallback=function(t){var n=this,r=!0;return this.nextCallback=function(e){r&&(r=!1,n.nextCallback=null,t(e))},this.nextCallback.cancel=function(){r=!1},this.nextCallback},t.onTransitionEnd=function(e,t,n){this.setNextCallback(n);var r=null==t&&!this.props.addEndListener;e&&!r?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},t.render=function(){var e=this.state.status;if(e===l)return null;var t=this.props,n=t.children,r=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],0<=t.indexOf(n)||(o[n]=e[n]);return o}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var o=a.default.Children.only(n);return a.default.cloneElement(o,r)},e}(a.default.Component);function h(){}d.contextTypes={transitionGroup:r.object},d.childContextTypes={transitionGroup:function(){}},d.propTypes={},d.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:h,onEntering:h,onEntered:h,onExit:h,onExiting:h,onExited:h},d.UNMOUNTED=0,d.EXITED=1,d.ENTERING=2,d.ENTERED=3,d.EXITING=4;var m=(0,i.polyfill)(d);t.default=m},function(e,t,n){var r=n(53);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(22)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(21)(!1)).push([e.i,"/*!\n * https://github.com/YouCanBookMe/react-datetime\n */\n\n.rdt {\n  position: relative;\n}\n.rdtPicker {\n  display: none;\n  position: absolute;\n  width: 250px;\n  padding: 4px;\n  margin-top: 1px;\n  z-index: 99999 !important;\n  background: #fff;\n  box-shadow: 0 1px 3px rgba(0,0,0,.1);\n  border: 1px solid #f9f9f9;\n}\n.rdtOpen .rdtPicker {\n  display: block;\n}\n.rdtStatic .rdtPicker {\n  box-shadow: none;\n  position: static;\n}\n\n.rdtPicker .rdtTimeToggle {\n  text-align: center;\n}\n\n.rdtPicker table {\n  width: 100%;\n  margin: 0;\n}\n.rdtPicker td,\n.rdtPicker th {\n  text-align: center;\n  height: 28px;\n}\n.rdtPicker td {\n  cursor: pointer;\n}\n.rdtPicker td.rdtDay:hover,\n.rdtPicker td.rdtHour:hover,\n.rdtPicker td.rdtMinute:hover,\n.rdtPicker td.rdtSecond:hover,\n.rdtPicker .rdtTimeToggle:hover {\n  background: #eeeeee;\n  cursor: pointer;\n}\n.rdtPicker td.rdtOld,\n.rdtPicker td.rdtNew {\n  color: #999999;\n}\n.rdtPicker td.rdtToday {\n  position: relative;\n}\n.rdtPicker td.rdtToday:before {\n  content: '';\n  display: inline-block;\n  border-left: 7px solid transparent;\n  border-bottom: 7px solid #428bca;\n  border-top-color: rgba(0, 0, 0, 0.2);\n  position: absolute;\n  bottom: 4px;\n  right: 4px;\n}\n.rdtPicker td.rdtActive,\n.rdtPicker td.rdtActive:hover {\n  background-color: #428bca;\n  color: #fff;\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);\n}\n.rdtPicker td.rdtActive.rdtToday:before {\n  border-bottom-color: #fff;\n}\n.rdtPicker td.rdtDisabled,\n.rdtPicker td.rdtDisabled:hover {\n  background: none;\n  color: #999999;\n  cursor: not-allowed;\n}\n\n.rdtPicker td span.rdtOld {\n  color: #999999;\n}\n.rdtPicker td span.rdtDisabled,\n.rdtPicker td span.rdtDisabled:hover {\n  background: none;\n  color: #999999;\n  cursor: not-allowed;\n}\n.rdtPicker th {\n  border-bottom: 1px solid #f9f9f9;\n}\n.rdtPicker .dow {\n  width: 14.2857%;\n  border-bottom: none;\n  cursor: default;\n}\n.rdtPicker th.rdtSwitch {\n  width: 100px;\n}\n.rdtPicker th.rdtNext,\n.rdtPicker th.rdtPrev {\n  font-size: 21px;\n  vertical-align: top;\n}\n\n.rdtPrev span,\n.rdtNext span {\n  display: block;\n  -webkit-touch-callout: none; /* iOS Safari */\n  -webkit-user-select: none;   /* Chrome/Safari/Opera */\n  -khtml-user-select: none;    /* Konqueror */\n  -moz-user-select: none;      /* Firefox */\n  -ms-user-select: none;       /* Internet Explorer/Edge */\n  user-select: none;\n}\n\n.rdtPicker th.rdtDisabled,\n.rdtPicker th.rdtDisabled:hover {\n  background: none;\n  color: #999999;\n  cursor: not-allowed;\n}\n.rdtPicker thead tr:first-child th {\n  cursor: pointer;\n}\n.rdtPicker thead tr:first-child th:hover {\n  background: #eeeeee;\n}\n\n.rdtPicker tfoot {\n  border-top: 1px solid #f9f9f9;\n}\n\n.rdtPicker button {\n  border: none;\n  background: none;\n  cursor: pointer;\n}\n.rdtPicker button:hover {\n  background-color: #eee;\n}\n\n.rdtPicker thead button {\n  width: 100%;\n  height: 100%;\n}\n\ntd.rdtMonth,\ntd.rdtYear {\n  height: 50px;\n  width: 25%;\n  cursor: pointer;\n}\ntd.rdtMonth:hover,\ntd.rdtYear:hover {\n  background: #eee;\n}\n\n.rdtCounters {\n  display: inline-block;\n}\n\n.rdtCounters > div {\n  float: left;\n}\n\n.rdtCounter {\n  height: 100px;\n}\n\n.rdtCounter {\n  width: 40px;\n}\n\n.rdtCounterSeparator {\n  line-height: 100px;\n}\n\n.rdtCounter .rdtBtn {\n  height: 40%;\n  line-height: 40px;\n  cursor: pointer;\n  display: block;\n\n  -webkit-touch-callout: none; /* iOS Safari */\n  -webkit-user-select: none;   /* Chrome/Safari/Opera */\n  -khtml-user-select: none;    /* Konqueror */\n  -moz-user-select: none;      /* Firefox */\n  -ms-user-select: none;       /* Internet Explorer/Edge */\n  user-select: none;\n}\n.rdtCounter .rdtBtn:hover {\n  background: #eee;\n}\n.rdtCounter .rdtCount {\n  height: 20%;\n  font-size: 1.2em;\n}\n\n.rdtMilli {\n  vertical-align: middle;\n  padding-left: 8px;\n  width: 48px;\n}\n\n.rdtMilli input {\n  width: 100%;\n  font-size: 1.2em;\n  margin-top: 37px;\n}\n\n.rdtTime td {\n  cursor: default;\n}\n",""])},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=r,e.exports=t.default},function(e,t,n){var m=n(56),v=n(49),y=n(98),g=n(68),b=n(64),x="prototype",_=function(e,t,n){var r,o,a,i=e&_.F,s=e&_.G,l=e&_.S,u=e&_.P,c=e&_.B,p=e&_.W,f=s?v:v[t]||(v[t]={}),d=f[x],h=s?m:l?m[t]:(m[t]||{})[x];for(r in s&&(n=t),n)(o=!i&&h&&void 0!==h[r])&&b(f,r)||(a=o?h[r]:n[r],f[r]=s&&"function"!=typeof h[r]?n[r]:c&&o?y(a,m):p&&h[r]==a?function(r){function e(e,t,n){if(this instanceof r){switch(arguments.length){case 0:return new r;case 1:return new r(e);case 2:return new r(e,t)}return new r(e,t,n)}return r.apply(this,arguments)}return e[x]=r[x],e}(a):u&&"function"==typeof a?y(Function.call,a):a,u&&((f.virtual||(f.virtual={}))[r]=a,e&_.R&&d&&!d[r]&&g(d,r,a)))};_.F=1,_.G=2,_.S=4,_.P=8,_.B=16,_.W=32,_.U=64,_.R=128,e.exports=_},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){e.exports=!n(81)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=void 0;var o=r(n(54)).default?function(e,t){return e.contains?e.contains(t):e.compareDocumentPosition?e===t||!!(16&e.compareDocumentPosition(t)):a(e,t)}:a;function a(e,t){if(t)do{if(t===e)return!0}while(t=t.parentNode);return!1}t.default=o,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,o=Array(e),t=0;t<e;t++)o[t]=arguments[t];return(0,a.default)(function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];var r=null;return o.forEach(function(e){if(null==r){var t=e.apply(void 0,n);null!=t&&(r=t)}}),r})};var r,o=n(72),a=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(c){return function(e,t,n,r,o){var a=n||"<<anonymous>>",i=o||t;if(null==e[t])return new Error("The "+r+" `"+i+"` is required to make `"+a+"` accessible for users of assistive technologies such as screen readers.");for(var s=arguments.length,l=Array(5<s?s-5:0),u=5;u<s;u++)l[u-5]=arguments[u];return c.apply(void 0,[e,t,n,r,o].concat(l))}},e.exports=t.default},,function(e,t){function V(e,t){var n=t.children("."+e)[0];if(null==n&&((n=document.createElement("canvas")).className=e,q(n).css({direction:"ltr",position:"absolute",left:0,top:0}).appendTo(t),!n.getContext)){if(!window.G_vmlCanvasManager)throw new Error("Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.");n=window.G_vmlCanvasManager.initElement(n)}this.element=n;var r=this.context=n.getContext("2d"),o=window.devicePixelRatio||1,a=r.webkitBackingStorePixelRatio||r.mozBackingStorePixelRatio||r.msBackingStorePixelRatio||r.oBackingStorePixelRatio||r.backingStorePixelRatio||1;this.pixelRatio=o/a,this.resize(t.width(),t.height()),this.textContainer=null,this.text={},this._textCache={}}function r(v,e,t,r){var O=[],k={colors:["#edc240","#afd8f8","#cb4b4b","#4da74d","#9440ed"],legend:{show:!0,noColumns:1,labelFormatter:null,labelBoxBorderColor:"#ccc",container:null,position:"ne",margin:5,backgroundColor:null,backgroundOpacity:.85,sorted:null},xaxis:{show:null,position:"bottom",mode:null,font:null,color:null,tickColor:null,transform:null,inverseTransform:null,min:null,max:null,autoscaleMargin:null,ticks:null,tickFormatter:null,labelWidth:null,labelHeight:null,reserveSpace:null,tickLength:null,alignTicksWithAxis:null,tickDecimals:null,tickSize:null,minTickSize:null},yaxis:{autoscaleMargin:.02,position:"left"},xaxes:[],yaxes:[],series:{points:{show:!1,radius:3,lineWidth:2,fill:!0,fillColor:"#ffffff",symbol:"circle"},lines:{lineWidth:2,fill:!1,fillColor:null,steps:!1},bars:{show:!1,lineWidth:2,barWidth:1,fill:!0,fillColor:null,align:"left",horizontal:!1,zero:!0},shadowSize:3,highlightColor:null},grid:{show:!0,aboveData:!1,color:"#545454",backgroundColor:null,borderColor:null,tickColor:null,margin:0,labelMargin:5,axisMargin:8,borderWidth:2,minBorderMargin:null,markings:null,markingsColor:"#f4f4f4",markingsLineWidth:2,clickable:!1,hoverable:!1,autoHighlight:!0,mouseActiveRadius:10},interaction:{redrawOverlayInterval:1e3/60},hooks:{}},d=null,n=null,c=null,_=null,u=null,h=[],m=[],E={left:0,right:0,top:0,bottom:0},C=0,w=0,T={processOptions:[],processRawData:[],processDatapoints:[],processOffset:[],drawBackground:[],drawSeries:[],draw:[],bindEvents:[],drawOverlay:[],shutdown:[]},S=this;function N(e,t){t=[S].concat(t);for(var n=0;n<e.length;++n)e[n].apply(this,t)}function o(e){O=function(e){for(var t=[],n=0;n<e.length;++n){var r=q.extend(!0,{},k.series);null!=e[n].data?(r.data=e[n].data,delete e[n].data,q.extend(!0,r,e[n]),e[n].data=r.data):r.data=e[n],t.push(r)}return t}(e),function(){var e,t=O.length,n=-1;for(e=0;e<O.length;++e){var r=O[e].color;null!=r&&(t--,"number"==typeof r&&n<r&&(n=r))}t<=n&&(t=n+1);var o,a=[],i=k.colors,s=i.length,l=0;for(e=0;e<t;e++)o=q.color.parse(i[e%s]||"#666"),e%s==0&&e&&(l=0<=l?l<.5?-l-.2:0:-l),a[e]=o.scale("rgb",1+l);var u,c=0;for(e=0;e<O.length;++e){if(null==(u=O[e]).color?(u.color=a[c].toString(),++c):"number"==typeof u.color&&(u.color=a[u.color].toString()),null==u.lines.show){var p,f=!0;for(p in u)if(u[p]&&u[p].show){f=!1;break}f&&(u.lines.show=!0)}null==u.lines.zero&&(u.lines.zero=!!u.lines.fill),u.xaxis=g(h,y(u,"x")),u.yaxis=g(m,y(u,"y"))}}(),function(){var e,t,n,r,o,a,i,s,l,u,c,p,f=Number.POSITIVE_INFINITY,d=Number.NEGATIVE_INFINITY,h=Number.MAX_VALUE;function m(e,t,n){t<e.datamin&&t!=-h&&(e.datamin=t),n>e.datamax&&n!=h&&(e.datamax=n)}for(q.each(M(),function(e,t){t.datamin=f,t.datamax=d,t.used=!1}),e=0;e<O.length;++e)(o=O[e]).datapoints={points:[]},N(T.processRawData,[o,o.data,o.datapoints]);for(e=0;e<O.length;++e){if(o=O[e],c=o.data,!(p=o.datapoints.format)){if((p=[]).push({x:!0,number:!0,required:!0}),p.push({y:!0,number:!0,required:!0}),o.bars.show||o.lines.show&&o.lines.fill){var v=!!(o.bars.show&&o.bars.zero||o.lines.show&&o.lines.zero);p.push({y:!0,number:!0,required:!1,defaultValue:0,autoscale:v}),o.bars.horizontal&&(delete p[p.length-1].y,p[p.length-1].x=!0)}o.datapoints.format=p}if(null==o.datapoints.pointsize){o.datapoints.pointsize=p.length,i=o.datapoints.pointsize,a=o.datapoints.points;var y=o.lines.show&&o.lines.steps;for(o.xaxis.used=o.yaxis.used=!0,t=n=0;t<c.length;++t,n+=i){var g=null==(u=c[t]);if(!g)for(r=0;r<i;++r)s=u[r],(l=p[r])&&(l.number&&null!=s&&(s=+s,isNaN(s)?s=null:s==1/0?s=h:s==-1/0&&(s=-h)),null==s&&(l.required&&(g=!0),null!=l.defaultValue&&(s=l.defaultValue))),a[n+r]=s;if(g)for(r=0;r<i;++r)null!=(s=a[n+r])&&!1!==(l=p[r]).autoscale&&(l.x&&m(o.xaxis,s,s),l.y&&m(o.yaxis,s,s)),a[n+r]=null;else if(y&&0<n&&null!=a[n-i]&&a[n-i]!=a[n]&&a[n-i+1]!=a[n+1]){for(r=0;r<i;++r)a[n+i+r]=a[n+r];a[n+1]=a[n-i+1],n+=i}}}}for(e=0;e<O.length;++e)o=O[e],N(T.processDatapoints,[o,o.datapoints]);for(e=0;e<O.length;++e){o=O[e],a=o.datapoints.points,i=o.datapoints.pointsize,p=o.datapoints.format;var b=f,x=f,_=d,E=d;for(t=0;t<a.length;t+=i)if(null!=a[t])for(r=0;r<i;++r)s=a[t+r],(l=p[r])&&!1!==l.autoscale&&s!=h&&s!=-h&&(l.x&&(s<b&&(b=s),_<s&&(_=s)),l.y&&(s<x&&(x=s),E<s&&(E=s)));if(o.bars.show){var C;switch(o.bars.align){case"left":C=0;break;case"right":C=-o.bars.barWidth;break;default:C=-o.bars.barWidth/2}o.bars.horizontal?(x+=C,E+=C+o.bars.barWidth):(b+=C,_+=C+o.bars.barWidth)}m(o.xaxis,b,_),m(o.yaxis,x,E)}q.each(M(),function(e,t){t.datamin==f&&(t.datamin=null),t.datamax==d&&(t.datamax=null)})}()}function y(e,t){var n=e[t+"axis"];return"object"==typeof n&&(n=n.n),"number"!=typeof n&&(n=1),n}function M(){return q.grep(h.concat(m),function(e){return e})}function p(e){var t,n,r={};for(t=0;t<h.length;++t)(n=h[t])&&n.used&&(r["x"+n.n]=n.c2p(e.left));for(t=0;t<m.length;++t)(n=m[t])&&n.used&&(r["y"+n.n]=n.c2p(e.top));return void 0!==r.x1&&(r.x=r.x1),void 0!==r.y1&&(r.y=r.y1),r}function g(e,t){return e[t-1]||(e[t-1]={n:t,direction:e==h?"x":"y",options:q.extend(!0,{},e==h?k.xaxis:k.yaxis)}),e[t-1]}function a(){A&&clearTimeout(A),c.unbind("mousemove",j),c.unbind("mouseleave",R),c.unbind("click",L),N(T.shutdown,[c])}function i(n){var e=n.labelWidth,t=n.labelHeight,r=n.options.position,o="x"===n.direction,a=n.options.tickLength,i=k.grid.axisMargin,s=k.grid.labelMargin,l=!0,u=!0,c=!0,p=!1;q.each(o?h:m,function(e,t){t&&(t.show||t.reserveSpace)&&(t===n?p=!0:t.options.position===r&&(p?u=!1:l=!1),p||(c=!1))}),u&&(i=0),null==a&&(a=c?"full":5),isNaN(+a)||(s+=+a),o?(t+=s,"bottom"==r?(E.bottom+=t+i,n.box={top:d.height-E.bottom,height:t}):(n.box={top:E.top+i,height:t},E.top+=t+i)):(e+=s,"left"==r?(n.box={left:E.left+i,width:e},E.left+=e+i):(E.right+=e+i,n.box={left:d.width-E.right,width:e})),n.position=r,n.tickLength=a,n.box.padding=s,n.innermost=l}function s(){var e,t=M(),n=k.grid.show;for(var r in E){var o=k.grid.margin||0;E[r]="number"==typeof o?o:o[r]||0}for(var r in N(T.processOffset,[E]),E)"object"==typeof k.grid.borderWidth?E[r]+=n?k.grid.borderWidth[r]:0:E[r]+=n?k.grid.borderWidth:0;if(q.each(t,function(e,t){var n=t.options;t.show=null==n.show?t.used:n.show,t.reserveSpace=null==n.reserveSpace?t.show:n.reserveSpace,function(e){var t=e.options,n=+(null!=t.min?t.min:e.datamin),r=+(null!=t.max?t.max:e.datamax),o=r-n;if(0==o){var a=0==r?1:.01;null==t.min&&(n-=a),null!=t.max&&null==t.min||(r+=a)}else{var i=t.autoscaleMargin;null!=i&&(null==t.min&&(n-=o*i)<0&&null!=e.datamin&&0<=e.datamin&&(n=0),null==t.max&&0<(r+=o*i)&&null!=e.datamax&&e.datamax<=0&&(r=0))}e.min=n,e.max=r}(t)}),n){var a=q.grep(t,function(e){return e.show||e.reserveSpace});for(q.each(a,function(e,t){!function(e){var t,n=e.options;t="number"==typeof n.ticks&&0<n.ticks?n.ticks:.3*Math.sqrt("x"==e.direction?d.width:d.height);var r=(e.max-e.min)/t,o=-Math.floor(Math.log(r)/Math.LN10),a=n.tickDecimals;null!=a&&a<o&&(o=a);var i,s=Math.pow(10,-o),l=r/s;l<1.5?i=1:l<3?(i=2,2.25<l&&(null==a||o+1<=a)&&(i=2.5,++o)):i=l<7.5?5:10;i*=s,null!=n.minTickSize&&i<n.minTickSize&&(i=n.minTickSize);if(e.delta=r,e.tickDecimals=Math.max(0,null!=a?a:o),e.tickSize=n.tickSize||i,"time"==n.mode&&!e.tickGenerator)throw new Error("Time mode requires the flot.time plugin.");e.tickGenerator||(e.tickGenerator=function(e){for(var t,n=[],r=function(e,t){return t*Math.floor(e/t)}(e.min,e.tickSize),o=0,a=Number.NaN;t=a,a=r+o*e.tickSize,n.push(a),++o,a<e.max&&a!=t;);return n},e.tickFormatter=function(e,t){var n=t.tickDecimals?Math.pow(10,t.tickDecimals):1,r=""+Math.round(e*n)/n;if(null!=t.tickDecimals){var o=r.indexOf("."),a=-1==o?0:r.length-o-1;if(a<t.tickDecimals)return(a?r:r+".")+(""+n).substr(1,t.tickDecimals-a)}return r});q.isFunction(n.tickFormatter)&&(e.tickFormatter=function(e,t){return""+n.tickFormatter(e,t)});if(null!=n.alignTicksWithAxis){var u=("x"==e.direction?h:m)[n.alignTicksWithAxis-1];if(u&&u.used&&u!=e){var c=e.tickGenerator(e);if(0<c.length&&(null==n.min&&(e.min=Math.min(e.min,c[0])),null==n.max&&1<c.length&&(e.max=Math.max(e.max,c[c.length-1]))),e.tickGenerator=function(e){var t,n,r=[];for(n=0;n<u.ticks.length;++n)t=(u.ticks[n].v-u.min)/(u.max-u.min),t=e.min+t*(e.max-e.min),r.push(t);return r},!e.mode&&null==n.tickDecimals){var p=Math.max(0,1-Math.floor(Math.log(e.delta)/Math.LN10)),f=e.tickGenerator(e);1<f.length&&/\..*0$/.test((f[1]-f[0]).toFixed(p))||(e.tickDecimals=p)}}}}(t),function(e){var t,n,r=e.options.ticks,o=[];null==r||"number"==typeof r&&0<r?o=e.tickGenerator(e):r&&(o=q.isFunction(r)?r(e):r);for(e.ticks=[],t=0;t<o.length;++t){var a=null,i=o[t];"object"==typeof i?(n=+i[0],1<i.length&&(a=i[1])):n=+i,null==a&&(a=e.tickFormatter(n,e)),isNaN(n)||e.ticks.push({v:n,label:a})}}(t),function(e,t){e.options.autoscaleMargin&&0<t.length&&(null==e.options.min&&(e.min=Math.min(e.min,t[0].v)),null==e.options.max&&1<t.length&&(e.max=Math.max(e.max,t[t.length-1].v)))}(t,t.ticks),function(e){for(var t=e.options,n=e.ticks||[],r=t.labelWidth||0,o=t.labelHeight||0,a=r||("x"==e.direction?Math.floor(d.width/(n.length||1)):null),i=e.direction+"Axis "+e.direction+e.n+"Axis",s="flot-"+e.direction+"-axis flot-"+e.direction+e.n+"-axis "+i,l=t.font||"flot-tick-label tickLabel",u=0;u<n.length;++u){var c=n[u];if(c.label){var p=d.getTextInfo(s,c.label,l,null,a);r=Math.max(r,p.width),o=Math.max(o,p.height)}}e.labelWidth=t.labelWidth||r,e.labelHeight=t.labelHeight||o}(t)}),e=a.length-1;0<=e;--e)i(a[e]);!function(){var e,t=k.grid.minBorderMargin;if(null==t)for(e=t=0;e<O.length;++e)t=Math.max(t,2*(O[e].points.radius+O[e].points.lineWidth/2));var n={left:t,right:t,top:t,bottom:t};q.each(M(),function(e,t){t.reserveSpace&&t.ticks&&t.ticks.length&&("x"===t.direction?(n.left=Math.max(n.left,t.labelWidth/2),n.right=Math.max(n.right,t.labelWidth/2)):(n.bottom=Math.max(n.bottom,t.labelHeight/2),n.top=Math.max(n.top,t.labelHeight/2)))}),E.left=Math.ceil(Math.max(n.left,E.left)),E.right=Math.ceil(Math.max(n.right,E.right)),E.top=Math.ceil(Math.max(n.top,E.top)),E.bottom=Math.ceil(Math.max(n.bottom,E.bottom))}(),q.each(a,function(e,t){!function(e){"x"==e.direction?(e.box.left=E.left-e.labelWidth/2,e.box.width=d.width-E.left-E.right+e.labelWidth):(e.box.top=E.top-e.labelHeight/2,e.box.height=d.height-E.bottom-E.top+e.labelHeight)}(t)})}C=d.width-E.left-E.right,w=d.height-E.bottom-E.top,q.each(t,function(e,t){!function(e){function t(e){return e}var n,r,o=e.options.transform||t,a=e.options.inverseTransform;r="x"==e.direction?(n=e.scale=C/Math.abs(o(e.max)-o(e.min)),Math.min(o(e.max),o(e.min))):(n=-(n=e.scale=w/Math.abs(o(e.max)-o(e.min))),Math.max(o(e.max),o(e.min))),e.p2c=o==t?function(e){return(e-r)*n}:function(e){return(o(e)-r)*n},e.c2p=a?function(e){return a(r+e/n)}:function(e){return r+e/n}}(t)}),n&&q.each(M(),function(e,t){var n,r,o,a,i,s=t.box,l=t.direction+"Axis "+t.direction+t.n+"Axis",u="flot-"+t.direction+"-axis flot-"+t.direction+t.n+"-axis "+l,c=t.options.font||"flot-tick-label tickLabel";if(d.removeText(u),t.show&&0!=t.ticks.length)for(var p=0;p<t.ticks.length;++p)!(n=t.ticks[p]).label||n.v<t.min||n.v>t.max||("x"==t.direction?(a="center",r=E.left+t.p2c(n.v),"bottom"==t.position?o=s.top+s.padding:(o=s.top+s.height-s.padding,i="bottom")):(i="middle",o=E.top+t.p2c(n.v),"left"==t.position?(r=s.left+s.width-s.padding,a="right"):r=s.left+s.padding),d.addText(u,r,o,n.label,c,null,null,a,i))}),function(){null!=k.legend.container?q(k.legend.container).html(""):v.find(".legend").remove();if(!k.legend.show)return;for(var e,t,n=[],r=[],o=!1,a=k.legend.labelFormatter,i=0;i<O.length;++i)(e=O[i]).label&&(t=a?a(e.label,e):e.label)&&r.push({label:t,color:e.color});if(k.legend.sorted)if(q.isFunction(k.legend.sorted))r.sort(k.legend.sorted);else if("reverse"==k.legend.sorted)r.reverse();else{var s="descending"!=k.legend.sorted;r.sort(function(e,t){return e.label==t.label?0:e.label<t.label!=s?1:-1})}for(i=0;i<r.length;++i){var l=r[i];i%k.legend.noColumns==0&&(o&&n.push("</tr>"),n.push("<tr>"),o=!0),n.push('<td class="legendColorBox"><div style="border:1px solid '+k.legend.labelBoxBorderColor+';padding:1px"><div style="width:4px;height:0;border:5px solid '+l.color+';overflow:hidden"></div></div></td><td class="legendLabel">'+l.label+"</td>")}o&&n.push("</tr>");if(0==n.length)return;var u='<table style="font-size:smaller;color:'+k.grid.color+'">'+n.join("")+"</table>";if(null!=k.legend.container)q(k.legend.container).html(u);else{var c="",p=k.legend.position,f=k.legend.margin;null==f[0]&&(f=[f,f]),"n"==p.charAt(0)?c+="top:"+(f[1]+E.top)+"px;":"s"==p.charAt(0)&&(c+="bottom:"+(f[1]+E.bottom)+"px;"),"e"==p.charAt(1)?c+="right:"+(f[0]+E.right)+"px;":"w"==p.charAt(1)&&(c+="left:"+(f[0]+E.left)+"px;");var d=q('<div class="legend">'+u.replace('style="','style="position:absolute;'+c+";")+"</div>").appendTo(v);if(0!=k.legend.backgroundOpacity){var h=k.legend.backgroundColor;null==h&&((h=(h=k.grid.backgroundColor)&&"string"==typeof h?q.color.parse(h):q.color.extract(d,"background-color")).a=1,h=h.toString());var m=d.children();q('<div style="position:absolute;width:'+m.width()+"px;height:"+m.height()+"px;"+c+"background-color:"+h+';"> </div>').prependTo(d).css("opacity",k.legend.backgroundOpacity)}}}()}function l(){d.clear(),N(T.drawBackground,[_]);var e=k.grid;e.show&&e.backgroundColor&&(_.save(),_.translate(E.left,E.top),_.fillStyle=Y(k.grid.backgroundColor,w,0,"rgba(255, 255, 255, 0)"),_.fillRect(0,0,C,w),_.restore()),e.show&&!e.aboveData&&f();for(var t=0;t<O.length;++t)N(T.drawSeries,[_,O[t]]),b(O[t]);N(T.draw,[_]),e.show&&e.aboveData&&f(),d.render(),W()}function P(e,t){for(var n,r,o,a,i=M(),s=0;s<i.length;++s)if((n=i[s]).direction==t&&(e[a=t+n.n+"axis"]||1!=n.n||(a=t+"axis"),e[a])){r=e[a].from,o=e[a].to;break}if(e[a]||(n="x"==t?h[0]:m[0],r=e[t+"1"],o=e[t+"2"]),null!=r&&null!=o&&o<r){var l=r;r=o,o=l}return{from:r,to:o,axis:n}}function f(){var e,t,n,r;_.save(),_.translate(E.left,E.top);var o=k.grid.markings;if(o)for(q.isFunction(o)&&((t=S.getAxes()).xmin=t.xaxis.min,t.xmax=t.xaxis.max,t.ymin=t.yaxis.min,t.ymax=t.yaxis.max,o=o(t)),e=0;e<o.length;++e){var a=o[e],i=P(a,"x"),s=P(a,"y");if(null==i.from&&(i.from=i.axis.min),null==i.to&&(i.to=i.axis.max),null==s.from&&(s.from=s.axis.min),null==s.to&&(s.to=s.axis.max),!(i.to<i.axis.min||i.from>i.axis.max||s.to<s.axis.min||s.from>s.axis.max)){i.from=Math.max(i.from,i.axis.min),i.to=Math.min(i.to,i.axis.max),s.from=Math.max(s.from,s.axis.min),s.to=Math.min(s.to,s.axis.max);var l=i.from===i.to,u=s.from===s.to;if(!l||!u)if(i.from=Math.floor(i.axis.p2c(i.from)),i.to=Math.floor(i.axis.p2c(i.to)),s.from=Math.floor(s.axis.p2c(s.from)),s.to=Math.floor(s.axis.p2c(s.to)),l||u){var c=a.lineWidth||k.grid.markingsLineWidth,p=c%2?.5:0;_.beginPath(),_.strokeStyle=a.color||k.grid.markingsColor,_.lineWidth=c,l?(_.moveTo(i.to+p,s.from),_.lineTo(i.to+p,s.to)):(_.moveTo(i.from,s.to+p),_.lineTo(i.to,s.to+p)),_.stroke()}else _.fillStyle=a.color||k.grid.markingsColor,_.fillRect(i.from,s.to,i.to-i.from,s.from-s.to)}}t=M(),n=k.grid.borderWidth;for(var f=0;f<t.length;++f){var d,h,m,v,y=t[f],g=y.box,b=y.tickLength;if(y.show&&0!=y.ticks.length){for(_.lineWidth=1,"x"==y.direction?(d=0,h="full"==b?"top"==y.position?0:w:g.top-E.top+("top"==y.position?g.height:0)):(h=0,d="full"==b?"left"==y.position?0:C:g.left-E.left+("left"==y.position?g.width:0)),y.innermost||(_.strokeStyle=y.options.color,_.beginPath(),m=v=0,"x"==y.direction?m=C+1:v=w+1,1==_.lineWidth&&("x"==y.direction?h=Math.floor(h)+.5:d=Math.floor(d)+.5),_.moveTo(d,h),_.lineTo(d+m,h+v),_.stroke()),_.strokeStyle=y.options.tickColor,_.beginPath(),e=0;e<y.ticks.length;++e){var x=y.ticks[e].v;m=v=0,isNaN(x)||x<y.min||x>y.max||"full"==b&&("object"==typeof n&&0<n[y.position]||0<n)&&(x==y.min||x==y.max)||("x"==y.direction?(d=y.p2c(x),v="full"==b?-w:b,"top"==y.position&&(v=-v)):(h=y.p2c(x),m="full"==b?-C:b,"left"==y.position&&(m=-m)),1==_.lineWidth&&("x"==y.direction?d=Math.floor(d)+.5:h=Math.floor(h)+.5),_.moveTo(d,h),_.lineTo(d+m,h+v))}_.stroke()}}n&&(r=k.grid.borderColor,"object"==typeof n||"object"==typeof r?("object"!=typeof n&&(n={top:n,right:n,bottom:n,left:n}),"object"!=typeof r&&(r={top:r,right:r,bottom:r,left:r}),0<n.top&&(_.strokeStyle=r.top,_.lineWidth=n.top,_.beginPath(),_.moveTo(0-n.left,0-n.top/2),_.lineTo(C,0-n.top/2),_.stroke()),0<n.right&&(_.strokeStyle=r.right,_.lineWidth=n.right,_.beginPath(),_.moveTo(C+n.right/2,0-n.top),_.lineTo(C+n.right/2,w),_.stroke()),0<n.bottom&&(_.strokeStyle=r.bottom,_.lineWidth=n.bottom,_.beginPath(),_.moveTo(C+n.right,w+n.bottom/2),_.lineTo(0,w+n.bottom/2),_.stroke()),0<n.left&&(_.strokeStyle=r.left,_.lineWidth=n.left,_.beginPath(),_.moveTo(0-n.left/2,w+n.bottom),_.lineTo(0-n.left/2,0),_.stroke())):(_.lineWidth=n,_.strokeStyle=k.grid.borderColor,_.strokeRect(-n/2,-n/2,C+n,w+n))),_.restore()}function b(e){e.lines.show&&function(e){function t(e,t,n,r,o){var a=e.points,i=e.pointsize,s=null,l=null;_.beginPath();for(var u=i;u<a.length;u+=i){var c=a[u-i],p=a[u-i+1],f=a[u],d=a[u+1];if(null!=c&&null!=f){if(p<=d&&p<o.min){if(d<o.min)continue;c=(o.min-p)/(d-p)*(f-c)+c,p=o.min}else if(d<=p&&d<o.min){if(p<o.min)continue;f=(o.min-p)/(d-p)*(f-c)+c,d=o.min}if(d<=p&&p>o.max){if(d>o.max)continue;c=(o.max-p)/(d-p)*(f-c)+c,p=o.max}else if(p<=d&&d>o.max){if(p>o.max)continue;f=(o.max-p)/(d-p)*(f-c)+c,d=o.max}if(c<=f&&c<r.min){if(f<r.min)continue;p=(r.min-c)/(f-c)*(d-p)+p,c=r.min}else if(f<=c&&f<r.min){if(c<r.min)continue;d=(r.min-c)/(f-c)*(d-p)+p,f=r.min}if(f<=c&&c>r.max){if(f>r.max)continue;p=(r.max-c)/(f-c)*(d-p)+p,c=r.max}else if(c<=f&&f>r.max){if(c>r.max)continue;d=(r.max-c)/(f-c)*(d-p)+p,f=r.max}c==s&&p==l||_.moveTo(r.p2c(c)+t,o.p2c(p)+n),s=f,l=d,_.lineTo(r.p2c(f)+t,o.p2c(d)+n)}}_.stroke()}_.save(),_.translate(E.left,E.top),_.lineJoin="round";var n=e.lines.lineWidth,r=e.shadowSize;if(0<n&&0<r){_.lineWidth=r,_.strokeStyle="rgba(0,0,0,0.1)";var o=Math.PI/18;t(e.datapoints,Math.sin(o)*(n/2+r/2),Math.cos(o)*(n/2+r/2),e.xaxis,e.yaxis),_.lineWidth=r/2,t(e.datapoints,Math.sin(o)*(n/2+r/4),Math.cos(o)*(n/2+r/4),e.xaxis,e.yaxis)}_.lineWidth=n,_.strokeStyle=e.color;var a=D(e.lines,e.color,0,w);a&&(_.fillStyle=a,function(e,t,n){for(var r=e.points,o=e.pointsize,a=Math.min(Math.max(0,n.min),n.max),i=0,s=!1,l=1,u=0,c=0;!(0<o&&i>r.length+o);){var p=r[(i+=o)-o],f=r[i-o+l],d=r[i],h=r[i+l];if(s){if(0<o&&null!=p&&null==d){c=i,o=-o,l=2;continue}if(o<0&&i==u+o){_.fill(),s=!1,l=1,i=u=c+(o=-o);continue}}if(null!=p&&null!=d){if(p<=d&&p<t.min){if(d<t.min)continue;f=(t.min-p)/(d-p)*(h-f)+f,p=t.min}else if(d<=p&&d<t.min){if(p<t.min)continue;h=(t.min-p)/(d-p)*(h-f)+f,d=t.min}if(d<=p&&p>t.max){if(d>t.max)continue;f=(t.max-p)/(d-p)*(h-f)+f,p=t.max}else if(p<=d&&d>t.max){if(p>t.max)continue;h=(t.max-p)/(d-p)*(h-f)+f,d=t.max}if(s||(_.beginPath(),_.moveTo(t.p2c(p),n.p2c(a)),s=!0),f>=n.max&&h>=n.max)_.lineTo(t.p2c(p),n.p2c(n.max)),_.lineTo(t.p2c(d),n.p2c(n.max));else if(f<=n.min&&h<=n.min)_.lineTo(t.p2c(p),n.p2c(n.min)),_.lineTo(t.p2c(d),n.p2c(n.min));else{var m=p,v=d;f<=h&&f<n.min&&h>=n.min?(p=(n.min-f)/(h-f)*(d-p)+p,f=n.min):h<=f&&h<n.min&&f>=n.min&&(d=(n.min-f)/(h-f)*(d-p)+p,h=n.min),h<=f&&f>n.max&&h<=n.max?(p=(n.max-f)/(h-f)*(d-p)+p,f=n.max):f<=h&&h>n.max&&f<=n.max&&(d=(n.max-f)/(h-f)*(d-p)+p,h=n.max),p!=m&&_.lineTo(t.p2c(m),n.p2c(f)),_.lineTo(t.p2c(p),n.p2c(f)),_.lineTo(t.p2c(d),n.p2c(h)),d!=v&&(_.lineTo(t.p2c(d),n.p2c(h)),_.lineTo(t.p2c(v),n.p2c(h)))}}}}(e.datapoints,e.xaxis,e.yaxis));0<n&&t(e.datapoints,0,0,e.xaxis,e.yaxis);_.restore()}(e),e.bars.show&&function(u){var e;switch(_.save(),_.translate(E.left,E.top),_.lineWidth=u.bars.lineWidth,_.strokeStyle=u.color,u.bars.align){case"left":e=0;break;case"right":e=-u.bars.barWidth;break;default:e=-u.bars.barWidth/2}var t=u.bars.fill?function(e,t){return D(u.bars,u.color,e,t)}:null;(function(e,t,n,r,o,a){for(var i=e.points,s=e.pointsize,l=0;l<i.length;l+=s)null!=i[l]&&x(i[l],i[l+1],i[l+2],t,n,r,o,a,_,u.bars.horizontal,u.bars.lineWidth)})(u.datapoints,e,e+u.bars.barWidth,t,u.xaxis,u.yaxis),_.restore()}(e),e.points.show&&function(e){function t(e,t,n,r,o,a,i,s){for(var l=e.points,u=e.pointsize,c=0;c<l.length;c+=u){var p=l[c],f=l[c+1];null==p||p<a.min||p>a.max||f<i.min||f>i.max||(_.beginPath(),p=a.p2c(p),f=i.p2c(f)+r,"circle"==s?_.arc(p,f,t,0,o?Math.PI:2*Math.PI,!1):s(_,p,f,t,o),_.closePath(),n&&(_.fillStyle=n,_.fill()),_.stroke())}}_.save(),_.translate(E.left,E.top);var n=e.points.lineWidth,r=e.shadowSize,o=e.points.radius,a=e.points.symbol;0==n&&(n=1e-4);if(0<n&&0<r){var i=r/2;_.lineWidth=i,_.strokeStyle="rgba(0,0,0,0.1)",t(e.datapoints,o,null,i+i/2,!0,e.xaxis,e.yaxis,a),_.strokeStyle="rgba(0,0,0,0.2)",t(e.datapoints,o,null,i/2,!0,e.xaxis,e.yaxis,a)}_.lineWidth=n,_.strokeStyle=e.color,t(e.datapoints,o,D(e.points,e.color),0,!1,e.xaxis,e.yaxis,a),_.restore()}(e)}function x(e,t,n,r,o,a,i,s,l,u,c){var p,f,d,h,m,v,y,g,b;u?(g=v=y=!0,m=!1,h=t+r,d=t+o,(f=e)<(p=n)&&(b=f,f=p,p=b,v=!(m=!0))):(m=v=y=!0,g=!1,p=e+r,f=e+o,(h=t)<(d=n)&&(b=h,h=d,d=b,y=!(g=!0))),f<i.min||p>i.max||h<s.min||d>s.max||(p<i.min&&(p=i.min,m=!1),f>i.max&&(f=i.max,v=!1),d<s.min&&(d=s.min,g=!1),h>s.max&&(h=s.max,y=!1),p=i.p2c(p),d=s.p2c(d),f=i.p2c(f),h=s.p2c(h),a&&(l.fillStyle=a(d,h),l.fillRect(p,h,f-p,d-h)),0<c&&(m||v||y||g)&&(l.beginPath(),l.moveTo(p,d),m?l.lineTo(p,h):l.moveTo(p,h),y?l.lineTo(f,h):l.moveTo(f,h),v?l.lineTo(f,d):l.moveTo(f,d),g?l.lineTo(p,d):l.moveTo(p,d),l.stroke()))}function D(e,t,n,r){var o=e.fill;if(!o)return null;if(e.fillColor)return Y(e.fillColor,n,r,t);var a=q.color.parse(t);return a.a="number"==typeof o?o:.4,a.normalize(),a.toString()}S.setData=o,S.setupGrid=s,S.draw=l,S.getPlaceholder=function(){return v},S.getCanvas=function(){return d.element},S.getPlotOffset=function(){return E},S.width=function(){return C},S.height=function(){return w},S.offset=function(){var e=c.offset();return e.left+=E.left,e.top+=E.top,e},S.getData=function(){return O},S.getAxes=function(){var n={};return q.each(h.concat(m),function(e,t){t&&(n[t.direction+(1!=t.n?t.n:"")+"axis"]=t)}),n},S.getXAxes=function(){return h},S.getYAxes=function(){return m},S.c2p=p,S.p2c=function(e){var t,n,r,o={};for(t=0;t<h.length;++t)if((n=h[t])&&n.used&&(r="x"+n.n,null==e[r]&&1==n.n&&(r="x"),null!=e[r])){o.left=n.p2c(e[r]);break}for(t=0;t<m.length;++t)if((n=m[t])&&n.used&&(r="y"+n.n,null==e[r]&&1==n.n&&(r="y"),null!=e[r])){o.top=n.p2c(e[r]);break}return o},S.getOptions=function(){return k},S.highlight=z,S.unhighlight=B,S.triggerRedrawOverlay=W,S.pointOffset=function(e){return{left:parseInt(h[y(e,"x")-1].p2c(+e.x)+E.left,10),top:parseInt(m[y(e,"y")-1].p2c(+e.y)+E.top,10)}},S.shutdown=a,S.destroy=function(){a(),v.removeData("plot").empty(),O=[],h=[],m=[],I=[],S=T=u=_=c=n=d=k=null},S.resize=function(){var e=v.width(),t=v.height();d.resize(e,t),n.resize(e,t)},S.hooks=T,function(){for(var e={Canvas:V},t=0;t<r.length;++t){var n=r[t];n.init(S,e),n.options&&q.extend(!0,k,n.options)}}(),function(e){q.extend(!0,k,e),e&&e.colors&&(k.colors=e.colors);null==k.xaxis.color&&(k.xaxis.color=q.color.parse(k.grid.color).scale("a",.22).toString());null==k.yaxis.color&&(k.yaxis.color=q.color.parse(k.grid.color).scale("a",.22).toString());null==k.xaxis.tickColor&&(k.xaxis.tickColor=k.grid.tickColor||k.xaxis.color);null==k.yaxis.tickColor&&(k.yaxis.tickColor=k.grid.tickColor||k.yaxis.color);null==k.grid.borderColor&&(k.grid.borderColor=k.grid.color);null==k.grid.tickColor&&(k.grid.tickColor=q.color.parse(k.grid.color).scale("a",.22).toString());var t,n,r,o=v.css("font-size"),a=o?+o.replace("px",""):13,i={style:v.css("font-style"),size:Math.round(.8*a),variant:v.css("font-variant"),weight:v.css("font-weight"),family:v.css("font-family")};for(r=k.xaxes.length||1,t=0;t<r;++t)(n=k.xaxes[t])&&!n.tickColor&&(n.tickColor=n.color),n=q.extend(!0,{},k.xaxis,n),(k.xaxes[t]=n).font&&(n.font=q.extend({},i,n.font),n.font.color||(n.font.color=n.color),n.font.lineHeight||(n.font.lineHeight=Math.round(1.15*n.font.size)));for(r=k.yaxes.length||1,t=0;t<r;++t)(n=k.yaxes[t])&&!n.tickColor&&(n.tickColor=n.color),n=q.extend(!0,{},k.yaxis,n),(k.yaxes[t]=n).font&&(n.font=q.extend({},i,n.font),n.font.color||(n.font.color=n.color),n.font.lineHeight||(n.font.lineHeight=Math.round(1.15*n.font.size)));k.xaxis.noTicks&&null==k.xaxis.ticks&&(k.xaxis.ticks=k.xaxis.noTicks);k.yaxis.noTicks&&null==k.yaxis.ticks&&(k.yaxis.ticks=k.yaxis.noTicks);k.x2axis&&(k.xaxes[1]=q.extend(!0,{},k.xaxis,k.x2axis),k.xaxes[1].position="top",null==k.x2axis.min&&(k.xaxes[1].min=null),null==k.x2axis.max&&(k.xaxes[1].max=null));k.y2axis&&(k.yaxes[1]=q.extend(!0,{},k.yaxis,k.y2axis),k.yaxes[1].position="right",null==k.y2axis.min&&(k.yaxes[1].min=null),null==k.y2axis.max&&(k.yaxes[1].max=null));k.grid.coloredAreas&&(k.grid.markings=k.grid.coloredAreas);k.grid.coloredAreasColor&&(k.grid.markingsColor=k.grid.coloredAreasColor);k.lines&&q.extend(!0,k.series.lines,k.lines);k.points&&q.extend(!0,k.series.points,k.points);k.bars&&q.extend(!0,k.series.bars,k.bars);null!=k.shadowSize&&(k.series.shadowSize=k.shadowSize);null!=k.highlightColor&&(k.series.highlightColor=k.highlightColor);for(t=0;t<k.xaxes.length;++t)g(h,t+1).options=k.xaxes[t];for(t=0;t<k.yaxes.length;++t)g(m,t+1).options=k.yaxes[t];for(var s in T)k.hooks[s]&&k.hooks[s].length&&(T[s]=T[s].concat(k.hooks[s]));N(T.processOptions,[k])}(t),function(){v.css("padding",0).children().filter(function(){return!q(this).hasClass("flot-overlay")&&!q(this).hasClass("flot-base")}).remove(),"static"==v.css("position")&&v.css("position","relative");d=new V("flot-base",v),n=new V("flot-overlay",v),_=d.context,u=n.context,c=q(n.element).unbind();var e=v.data("plot");e&&(e.shutdown(),n.clear());v.data("plot",S)}(),o(e),s(),l(),function(){k.grid.hoverable&&(c.mousemove(j),c.bind("mouseleave",R));k.grid.clickable&&c.click(L);N(T.bindEvents,[c])}();var I=[],A=null;function j(e){k.grid.hoverable&&F("plothover",e,function(e){return 0!=e.hoverable})}function R(e){k.grid.hoverable&&F("plothover",e,function(e){return!1})}function L(e){F("plotclick",e,function(e){return 0!=e.clickable})}function F(e,t,n){var r=c.offset(),o=t.pageX-r.left-E.left,a=t.pageY-r.top-E.top,i=p({left:o,top:a});i.pageX=t.pageX,i.pageY=t.pageY;var s=function(e,t,n){var r,o,a,i=k.grid.mouseActiveRadius,s=i*i+1,l=null;for(r=O.length-1;0<=r;--r)if(n(O[r])){var u=O[r],c=u.xaxis,p=u.yaxis,f=u.datapoints.points,d=c.c2p(e),h=p.c2p(t),m=i/c.scale,v=i/p.scale;if(a=u.datapoints.pointsize,c.options.inverseTransform&&(m=Number.MAX_VALUE),p.options.inverseTransform&&(v=Number.MAX_VALUE),u.lines.show||u.points.show)for(o=0;o<f.length;o+=a){var y=f[o],g=f[o+1];if(null!=y&&!(m<y-d||y-d<-m||v<g-h||g-h<-v)){var b=Math.abs(c.p2c(y)-e),x=Math.abs(p.p2c(g)-t),_=b*b+x*x;_<s&&(s=_,l=[r,o/a])}}if(u.bars.show&&!l){var E,C;switch(u.bars.align){case"left":E=0;break;case"right":E=-u.bars.barWidth;break;default:E=-u.bars.barWidth/2}for(C=E+u.bars.barWidth,o=0;o<f.length;o+=a){y=f[o],g=f[o+1];var w=f[o+2];null!=y&&(O[r].bars.horizontal?d<=Math.max(w,y)&&d>=Math.min(w,y)&&g+E<=h&&h<=g+C:y+E<=d&&d<=y+C&&h>=Math.min(w,g)&&h<=Math.max(w,g))&&(l=[r,o/a])}}}return l?(r=l[0],o=l[1],a=O[r].datapoints.pointsize,{datapoint:O[r].datapoints.points.slice(o*a,(o+1)*a),dataIndex:o,series:O[r],seriesIndex:r}):null}(o,a,n);if(s&&(s.pageX=parseInt(s.series.xaxis.p2c(s.datapoint[0])+r.left+E.left,10),s.pageY=parseInt(s.series.yaxis.p2c(s.datapoint[1])+r.top+E.top,10)),k.grid.autoHighlight){for(var l=0;l<I.length;++l){var u=I[l];u.auto!=e||s&&u.series==s.series&&u.point[0]==s.datapoint[0]&&u.point[1]==s.datapoint[1]||B(u.series,u.point)}s&&z(s.series,s.datapoint,e)}v.trigger(e,[i,s])}function W(){var e=k.interaction.redrawOverlayInterval;-1!=e?A=A||setTimeout(U,e):U()}function U(){var e,t;for(A=null,u.save(),n.clear(),u.translate(E.left,E.top),e=0;e<I.length;++e)(t=I[e]).series.bars.show?$(t.series,t.point):K(t.series,t.point);u.restore(),N(T.drawOverlay,[u])}function z(e,t,n){if("number"==typeof e&&(e=O[e]),"number"==typeof t){var r=e.datapoints.pointsize;t=e.datapoints.points.slice(r*t,r*(t+1))}var o=H(e,t);-1==o?(I.push({series:e,point:t,auto:n}),W()):n||(I[o].auto=!1)}function B(e,t){if(null==e&&null==t)return I=[],void W();if("number"==typeof e&&(e=O[e]),"number"==typeof t){var n=e.datapoints.pointsize;t=e.datapoints.points.slice(n*t,n*(t+1))}var r=H(e,t);-1!=r&&(I.splice(r,1),W())}function H(e,t){for(var n=0;n<I.length;++n){var r=I[n];if(r.series==e&&r.point[0]==t[0]&&r.point[1]==t[1])return n}return-1}function K(e,t){var n=t[0],r=t[1],o=e.xaxis,a=e.yaxis,i="string"==typeof e.highlightColor?e.highlightColor:q.color.parse(e.color).scale("a",.5).toString();if(!(n<o.min||n>o.max||r<a.min||r>a.max)){var s=e.points.radius+e.points.lineWidth/2;u.lineWidth=s,u.strokeStyle=i;var l=1.5*s;n=o.p2c(n),r=a.p2c(r),u.beginPath(),"circle"==e.points.symbol?u.arc(n,r,l,0,2*Math.PI,!1):e.points.symbol(u,n,r,l,!1),u.closePath(),u.stroke()}}function $(e,t){var n,r="string"==typeof e.highlightColor?e.highlightColor:q.color.parse(e.color).scale("a",.5).toString(),o=r;switch(e.bars.align){case"left":n=0;break;case"right":n=-e.bars.barWidth;break;default:n=-e.bars.barWidth/2}u.lineWidth=e.bars.lineWidth,u.strokeStyle=r,x(t[0],t[1],t[2]||0,n,n+e.bars.barWidth,function(){return o},e.xaxis,e.yaxis,u,e.bars.horizontal,e.bars.lineWidth)}function Y(e,t,n,r){if("string"==typeof e)return e;for(var o=_.createLinearGradient(0,n,0,t),a=0,i=e.colors.length;a<i;++a){var s=e.colors[a];if("string"!=typeof s){var l=q.color.parse(r);null!=s.brightness&&(l=l.scale("rgb",s.brightness)),null!=s.opacity&&(l.a*=s.opacity),s=l.toString()}o.addColorStop(a/(i-1),s)}return o}}var q,d;!function(a){a.color={},a.color.make=function(e,t,n,r){var o={};return o.r=e||0,o.g=t||0,o.b=n||0,o.a=null!=r?r:1,o.add=function(e,t){for(var n=0;n<e.length;++n)o[e.charAt(n)]+=t;return o.normalize()},o.scale=function(e,t){for(var n=0;n<e.length;++n)o[e.charAt(n)]*=t;return o.normalize()},o.toString=function(){return 1<=o.a?"rgb("+[o.r,o.g,o.b].join(",")+")":"rgba("+[o.r,o.g,o.b,o.a].join(",")+")"},o.normalize=function(){function e(e,t,n){return t<e?e:n<t?n:t}return o.r=e(0,parseInt(o.r),255),o.g=e(0,parseInt(o.g),255),o.b=e(0,parseInt(o.b),255),o.a=e(0,o.a,1),o},o.clone=function(){return a.color.make(o.r,o.b,o.g,o.a)},o.normalize()},a.color.extract=function(e,t){var n;do{if(""!=(n=e.css(t).toLowerCase())&&"transparent"!=n)break;e=e.parent()}while(e.length&&!a.nodeName(e.get(0),"body"));return"rgba(0, 0, 0, 0)"==n&&(n="transparent"),a.color.parse(n)},a.color.parse=function(e){var t,n=a.color.make;if(t=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(e))return n(parseInt(t[1],10),parseInt(t[2],10),parseInt(t[3],10));if(t=/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(e))return n(parseInt(t[1],10),parseInt(t[2],10),parseInt(t[3],10),parseFloat(t[4]));if(t=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(e))return n(2.55*parseFloat(t[1]),2.55*parseFloat(t[2]),2.55*parseFloat(t[3]));if(t=/rgba\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(e))return n(2.55*parseFloat(t[1]),2.55*parseFloat(t[2]),2.55*parseFloat(t[3]),parseFloat(t[4]));if(t=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(e))return n(parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16));if(t=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(e))return n(parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16));var r=a.trim(e).toLowerCase();return"transparent"==r?n(255,255,255,0):n((t=o[r]||[0,0,0])[0],t[1],t[2])};var o={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}}(jQuery),q=jQuery,d=Object.prototype.hasOwnProperty,q.fn.detach||(q.fn.detach=function(){return this.each(function(){this.parentNode&&this.parentNode.removeChild(this)})}),V.prototype.resize=function(e,t){if(e<=0||t<=0)throw new Error("Invalid dimensions for plot, width = "+e+", height = "+t);var n=this.element,r=this.context,o=this.pixelRatio;this.width!=e&&(n.width=e*o,n.style.width=e+"px",this.width=e),this.height!=t&&(n.height=t*o,n.style.height=t+"px",this.height=t),r.restore(),r.save(),r.scale(o,o)},V.prototype.clear=function(){this.context.clearRect(0,0,this.width,this.height)},V.prototype.render=function(){var e=this._textCache;for(var t in e)if(d.call(e,t)){var n=this.getTextLayer(t),r=e[t];for(var o in n.hide(),r)if(d.call(r,o)){var a=r[o];for(var i in a)if(d.call(a,i)){for(var s,l=a[i].positions,u=0;s=l[u];u++)s.active?s.rendered||(n.append(s.element),s.rendered=!0):(l.splice(u--,1),s.rendered&&s.element.detach());0==l.length&&delete a[i]}}n.show()}},V.prototype.getTextLayer=function(e){var t=this.text[e];return null==t&&(null==this.textContainer&&(this.textContainer=q("<div class='flot-text'></div>").css({position:"absolute",top:0,left:0,bottom:0,right:0,"font-size":"smaller",color:"#545454"}).insertAfter(this.element)),t=this.text[e]=q("<div></div>").addClass(e).css({position:"absolute",top:0,left:0,bottom:0,right:0}).appendTo(this.textContainer)),t},V.prototype.getTextInfo=function(e,t,n,r,o){var a,i,s,l;if(t=""+t,a="object"==typeof n?n.style+" "+n.variant+" "+n.weight+" "+n.size+"px/"+n.lineHeight+"px "+n.family:n,null==(i=this._textCache[e])&&(i=this._textCache[e]={}),null==(s=i[a])&&(s=i[a]={}),null==(l=s[t])){var u=q("<div></div>").html(t).css({position:"absolute","max-width":o,top:-9999}).appendTo(this.getTextLayer(e));"object"==typeof n?u.css({font:a,color:n.color}):"string"==typeof n&&u.addClass(n),l=s[t]={width:u.outerWidth(!0),height:u.outerHeight(!0),element:u,positions:[]},u.detach()}return l},V.prototype.addText=function(e,t,n,r,o,a,i,s,l){var u=this.getTextInfo(e,r,o,a,i),c=u.positions;"center"==s?t-=u.width/2:"right"==s&&(t-=u.width),"middle"==l?n-=u.height/2:"bottom"==l&&(n-=u.height);for(var p,f=0;p=c[f];f++)if(p.x==t&&p.y==n)return void(p.active=!0);p={active:!0,rendered:!1,element:c.length?u.element.clone():u.element,x:t,y:n},c.push(p),p.element.css({top:Math.round(n),left:Math.round(t),"text-align":s})},V.prototype.removeText=function(e,t,n,r,o,a){if(null==r){var i=this._textCache[e];if(null!=i)for(var s in i)if(d.call(i,s)){var l=i[s];for(var u in l)if(d.call(l,u))for(var c=l[u].positions,p=0;f=c[p];p++)f.active=!1}}else{var f;for(c=this.getTextInfo(e,r,o,a).positions,p=0;f=c[p];p++)f.x==t&&f.y==n&&(f.active=!1)}},q.plot=function(e,t,n){return new r(q(e),t,n,q.plot.plugins)},q.plot.version="0.8.3",q.plot.plugins=[],q.fn.plot=function(e,t){return this.each(function(){q.plot(this,e,t)})}},function(e,t,n){var r=n(69),o=n(121),a=n(99),i=Object.defineProperty;t.f=n(57)?Object.defineProperty:function(e,t,n){if(r(e),t=a(t,!0),r(n),o)try{return i(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(124),o=n(101);e.exports=function(e){return r(o(e))}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e&&e.ownerDocument||document},e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(n,e,t){var r="",o="",a=e;if("string"==typeof e){if(void 0===t)return n.style[(0,i.default)(e)]||(0,l.default)(n).getPropertyValue((0,s.default)(e));(a={})[e]=t}Object.keys(a).forEach(function(e){var t=a[e];t||0===t?(0,p.default)(e)?o+=e+"("+t+") ":r+=(0,s.default)(e)+": "+t+";":(0,u.default)(n,(0,s.default)(e))}),o&&(r+=c.transform+": "+o+";");n.style.cssText+=";"+r};var i=r(n(132)),s=r(n(205)),l=r(n(207)),u=r(n(208)),c=n(111),p=r(n(209));e.exports=t.default},function(e,t,n){var r=n(63),o=n(82);e.exports=n(57)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(70);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return(0,o.default)(r.default.findDOMNode(e))};var r=a(n(9)),o=a(n(66));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(p){function e(e,t,n,r,o,a){var i=r||"<<anonymous>>",s=a||n;if(null==t[n])return e?new Error("Required "+o+" `"+s+"` was not specified in `"+i+"`."):null;for(var l=arguments.length,u=Array(6<l?l-6:0),c=6;c<l;c++)u[c-6]=arguments[c];return p.apply(void 0,[t,n,i,o,s].concat(u))}var t=e.bind(null,!1);return t.isRequired=e.bind(null,!0),t},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},l=o(n(1)),r=o(n(240));function o(e){return e&&e.__esModule?e:{default:e}}t.default=(0,r.default)(function(e,t,n,r,o){var a=e[t],i=void 0===a?"undefined":s(a);return l.default.isValidElement(a)?new Error("Invalid "+r+" `"+o+"` of type ReactElement supplied to `"+n+"`, expected an element type (a string or a ReactClass)."):"function"!==i&&"string"!==i?new Error("Invalid "+r+" `"+o+"` of value `"+a+"` supplied to `"+n+"`, expected an element type (a string or a ReactClass)."):null})},function(e,t,n){"use strict";t.__esModule=!0;var g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r=y(n(115)),o=y(n(58)),a=y(n(54)),i=y(n(0)),s=y(n(90)),l=y(n(225)),u=y(n(8)),b=n(1),x=y(b),c=y(n(9)),p=y(n(12)),f=y(n(226)),_=y(n(136)),E=y(n(232)),d=y(n(134)),h=y(n(233)),m=y(n(92)),v=y(n(71));function y(e){return e&&e.__esModule?e:{default:e}}function C(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var w,O=new f.default,k=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(T,w=x.default.Component),T.prototype.omitProps=function(t,n){var e=Object.keys(t),r={};return e.map(function(e){Object.prototype.hasOwnProperty.call(n,e)||(r[e]=t[e])}),r},T.prototype.render=function(){var e=this.props,t=e.show,n=e.container,r=e.children,o=e.transition,a=e.backdrop,i=e.className,s=e.style,l=e.onExit,u=e.onExiting,c=e.onEnter,p=e.onEntering,f=e.onEntered,d=x.default.Children.only(r),h=this.omitProps(this.props,T.propTypes);if(!(t||o&&!this.state.exited))return null;var m=d.props,v=m.role,y=m.tabIndex;return void 0!==v&&void 0!==y||(d=(0,b.cloneElement)(d,{role:void 0===v?"document":v,tabIndex:null==y?"-1":y})),o&&(d=x.default.createElement(o,{appear:!0,unmountOnExit:!0,in:t,onExit:l,onExiting:u,onExited:this.handleHidden,onEnter:c,onEntering:p,onEntered:f},d)),x.default.createElement(_.default,{ref:this.setMountNode,container:n,onRendered:this.onPortalRendered},x.default.createElement("div",g({ref:this.setModalNodeRef,role:v||"dialog"},h,{style:s,className:i}),a&&this.renderBackdrop(),x.default.createElement(E.default,{ref:this.setDialogRef},d)))},T.prototype.componentWillReceiveProps=function(e){e.show?this.setState({exited:!1}):e.transition||this.setState({exited:!0})},T.prototype.componentWillUpdate=function(e){!this.props.show&&e.show&&this.checkForFocus()},T.prototype.componentDidMount=function(){this._isMounted=!0,this.props.show&&this.onShow()},T.prototype.componentDidUpdate=function(e){var t=this.props.transition;!e.show||this.props.show||t?!e.show&&this.props.show&&this.onShow():this.onHide()},T.prototype.componentWillUnmount=function(){var e=this.props,t=e.show,n=e.transition;this._isMounted=!1,(t||n&&!this.state.exited)&&this.onHide()},T.prototype.autoFocus=function(){if(this.props.autoFocus){var e=this.getDialogElement(),t=(0,r.default)((0,v.default)(this));e&&!(0,o.default)(e,t)&&(this.lastFocus=t,e.hasAttribute("tabIndex")||((0,p.default)(!1,'The modal content node does not accept focus. For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'),e.setAttribute("tabIndex",-1)),e.focus())}},T.prototype.restoreLastFocus=function(){this.lastFocus&&this.lastFocus.focus&&(this.lastFocus.focus(),this.lastFocus=null)},T.prototype.getDialogElement=function(){return c.default.findDOMNode(this.dialog)},T.prototype.isTopModal=function(){return this.props.manager.isTopModal(this)},T);function T(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,T);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return e=t=C(this,w.call.apply(w,[this].concat(r))),S.call(t),C(t,e)}k.propTypes=g({},_.default.propTypes,{show:i.default.bool,container:i.default.oneOfType([s.default,i.default.func]),onShow:i.default.func,onHide:i.default.func,backdrop:i.default.oneOfType([i.default.bool,i.default.oneOf(["static"])]),renderBackdrop:i.default.func,onEscapeKeyDown:i.default.func,onEscapeKeyUp:(0,l.default)(i.default.func,"Please use onEscapeKeyDown instead for consistency"),onBackdropClick:i.default.func,backdropStyle:i.default.object,backdropClassName:i.default.string,containerClassName:i.default.string,keyboard:i.default.bool,transition:u.default,backdropTransition:u.default,autoFocus:i.default.bool,enforceFocus:i.default.bool,restoreFocus:i.default.bool,onEnter:i.default.func,onEntering:i.default.func,onEntered:i.default.func,onExit:i.default.func,onExiting:i.default.func,onExited:i.default.func,manager:i.default.object.isRequired}),k.defaultProps={show:!1,backdrop:!0,keyboard:!0,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,onHide:function(){},manager:O,renderBackdrop:function(e){return x.default.createElement("div",e)}};var S=function(){var i=this;this.state={exited:!this.props.show},this.renderBackdrop=function(){var e=i.props,t=e.backdropStyle,n=e.backdropClassName,r=e.renderBackdrop,o=e.backdropTransition,a=r({ref:function(e){return i.backdrop=e},style:t,className:n,onClick:i.handleBackdropClick});return o&&(a=x.default.createElement(o,{appear:!0,in:i.props.show},a)),a},this.onPortalRendered=function(){i.autoFocus(),i.props.onShow&&i.props.onShow()},this.onShow=function(){var e=(0,v.default)(i),t=(0,m.default)(i.props.container,e.body);i.props.manager.add(i,t,i.props.containerClassName),i._onDocumentKeydownListener=(0,d.default)(e,"keydown",i.handleDocumentKeyDown),i._onDocumentKeyupListener=(0,d.default)(e,"keyup",i.handleDocumentKeyUp),i._onFocusinListener=(0,h.default)(i.enforceFocus)},this.onHide=function(){i.props.manager.remove(i),i._onDocumentKeydownListener.remove(),i._onDocumentKeyupListener.remove(),i._onFocusinListener.remove(),i.props.restoreFocus&&i.restoreLastFocus()},this.setMountNode=function(e){i.mountNode=e?e.getMountNode():e},this.setModalNodeRef=function(e){i.modalNode=e},this.setDialogRef=function(e){i.dialog=e},this.handleHidden=function(){var e;i.setState({exited:!0}),i.onHide(),i.props.onExited&&(e=i.props).onExited.apply(e,arguments)},this.handleBackdropClick=function(e){e.target===e.currentTarget&&(i.props.onBackdropClick&&i.props.onBackdropClick(e),!0===i.props.backdrop&&i.props.onHide())},this.handleDocumentKeyDown=function(e){i.props.keyboard&&27===e.keyCode&&i.isTopModal()&&(i.props.onEscapeKeyDown&&i.props.onEscapeKeyDown(e),i.props.onHide())},this.handleDocumentKeyUp=function(e){i.props.keyboard&&27===e.keyCode&&i.isTopModal()&&i.props.onEscapeKeyUp&&i.props.onEscapeKeyUp(e)},this.checkForFocus=function(){a.default&&(i.lastFocus=(0,r.default)())},this.enforceFocus=function(){if(i.props.enforceFocus&&i._isMounted&&i.isTopModal()){var e=i.getDialogElement(),t=(0,r.default)((0,v.default)(i));e&&!(0,o.default)(e,t)&&e.focus()}}};k.Manager=f.default,t.default=k,e.exports=t.default},,,function(e,t){function g(e,t){return t*Math.floor(e/t)}function l(e,t,n,r){if("function"==typeof e.strftime)return e.strftime(t);function o(e,t){return t=""+(null==t?"0":t),1==(e=""+e).length?t+e:e}var a,i=[],s=!1,l=e.getHours(),u=l<12;null==n&&(n=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]),null==r&&(r=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]),a=12<l?l-12:0==l?12:l;for(var c=0;c<t.length;++c){var p=t.charAt(c);if(s){switch(p){case"a":p=""+r[e.getDay()];break;case"b":p=""+n[e.getMonth()];break;case"d":p=o(e.getDate());break;case"e":p=o(e.getDate()," ");break;case"h":case"H":p=o(l);break;case"I":p=o(a);break;case"l":p=o(a," ");break;case"m":p=o(e.getMonth()+1);break;case"M":p=o(e.getMinutes());break;case"q":p=""+(Math.floor(e.getMonth()/3)+1);break;case"S":p=o(e.getSeconds());break;case"y":p=o(e.getFullYear()%100);break;case"Y":p=""+e.getFullYear();break;case"p":p=u?"am":"pm";break;case"P":p=u?"AM":"PM";break;case"w":p=""+e.getDay()}i.push(p),s=!1}else"%"==p?s=!0:i.push(p)}return i.join("")}function r(e){function t(e,t,n,r){e[t]=function(){return n[r].apply(n,arguments)}}var n={date:e};null!=e.strftime&&t(n,"strftime",e,"strftime"),t(n,"getTime",e,"getTime"),t(n,"setTime",e,"setTime");for(var r=["Date","Day","FullYear","Hours","Milliseconds","Minutes","Month","Seconds"],o=0;o<r.length;o++)t(n,"get"+r[o],e,"getUTC"+r[o]),t(n,"set"+r[o],e,"setUTC"+r[o]);return n}function b(e,t){if("browser"==t.timezone)return new Date(e);if(t.timezone&&"utc"!=t.timezone){if("undefined"==typeof timezoneJS||void 0===timezoneJS.Date)return r(new Date(e));var n=new timezoneJS.Date;return n.setTimezone(t.timezone),n.setTime(e),n}return r(new Date(e))}var n,x,o,_,E;n=jQuery,x={second:1e3,minute:6e4,hour:36e5,day:864e5,month:2592e6,quarter:7776e6,year:525949.2*60*1e3},_=(o=[[1,"second"],[2,"second"],[5,"second"],[10,"second"],[30,"second"],[1,"minute"],[2,"minute"],[5,"minute"],[10,"minute"],[30,"minute"],[1,"hour"],[2,"hour"],[4,"hour"],[8,"hour"],[12,"hour"],[1,"day"],[2,"day"],[3,"day"],[.25,"month"],[.5,"month"],[1,"month"],[2,"month"]]).concat([[3,"month"],[6,"month"],[1,"year"]]),E=o.concat([[1,"quarter"],[2,"quarter"],[1,"year"]]),n.plot.plugins.push({init:function(e){e.hooks.processOptions.push(function(e,t){n.each(e.getAxes(),function(e,t){var y=t.options;"time"==y.mode&&(t.tickGenerator=function(e){var t=[],n=b(e.min,y),r=0,o=y.tickSize&&"quarter"===y.tickSize[1]||y.minTickSize&&"quarter"===y.minTickSize[1]?E:_;null!=y.minTickSize&&(r="number"==typeof y.tickSize?y.tickSize:y.minTickSize[0]*x[y.minTickSize[1]]);for(var a=0;a<o.length-1&&!(e.delta<(o[a][0]*x[o[a][1]]+o[a+1][0]*x[o[a+1][1]])/2&&o[a][0]*x[o[a][1]]>=r);++a);var i=o[a][0],s=o[a][1];if("year"==s){if(null!=y.minTickSize&&"year"==y.minTickSize[1])i=Math.floor(y.minTickSize[0]);else{var l=Math.pow(10,Math.floor(Math.log(e.delta/x.year)/Math.LN10)),u=e.delta/x.year/l;i=u<1.5?1:u<3?2:u<7.5?5:10,i*=l}i<1&&(i=1)}e.tickSize=y.tickSize||[i,s];var c=e.tickSize[0];s=e.tickSize[1];var p=c*x[s];"second"==s?n.setSeconds(g(n.getSeconds(),c)):"minute"==s?n.setMinutes(g(n.getMinutes(),c)):"hour"==s?n.setHours(g(n.getHours(),c)):"month"==s?n.setMonth(g(n.getMonth(),c)):"quarter"==s?n.setMonth(3*g(n.getMonth()/3,c)):"year"==s&&n.setFullYear(g(n.getFullYear(),c)),n.setMilliseconds(0),x.minute<=p&&n.setSeconds(0),x.hour<=p&&n.setMinutes(0),x.day<=p&&n.setHours(0),4*x.day<=p&&n.setDate(1),2*x.month<=p&&n.setMonth(g(n.getMonth(),3)),2*x.quarter<=p&&n.setMonth(g(n.getMonth(),6)),x.year<=p&&n.setMonth(0);var f,d=0,h=Number.NaN;do{if(f=h,h=n.getTime(),t.push(h),"month"==s||"quarter"==s)if(c<1){n.setDate(1);var m=n.getTime();n.setMonth(n.getMonth()+("quarter"==s?3:1));var v=n.getTime();n.setTime(h+d*x.hour+(v-m)*c),d=n.getHours(),n.setHours(0)}else n.setMonth(n.getMonth()+c*("quarter"==s?3:1));else"year"==s?n.setFullYear(n.getFullYear()+c):n.setTime(h+p)}while(h<e.max&&h!=f);return t},t.tickFormatter=function(e,t){var n=b(e,t.options);if(null!=y.timeformat)return l(n,y.timeformat,y.monthNames,y.dayNames);var r=t.options.tickSize&&"quarter"==t.options.tickSize[1]||t.options.minTickSize&&"quarter"==t.options.minTickSize[1],o=t.tickSize[0]*x[t.tickSize[1]],a=t.max-t.min,i=y.twelveHourClock?" %p":"",s=y.twelveHourClock?"%I":"%H";return l(n,o<x.minute?s+":%M:%S"+i:o<x.day?a<2*x.day?s+":%M"+i:"%b %d "+s+":%M"+i:o<x.month?"%b %d":r&&o<x.quarter||!r&&o<x.year?a<x.year?"%b":"%b %Y":r&&o<x.year?a<x.year?"Q%q":"Q%q %Y":"%Y",y.monthNames,y.dayNames)})})})},options:{xaxis:{timezone:null,timeformat:null,twelveHourClock:!1,monthNames:null}},name:"time",version:"1.0"}),n.plot.formatDate=l,n.plot.dateGenerator=b},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var a=n(1),i=n(15);n(79);var s,l=(s=a.Component,o(u,s),u.prototype.render=function(){var e=this.generateRows(this.props.data),t=this.generateHeaders();return a.createElement("div",{className:"divTable "+(null!=this.props.tableClass?this.props.tableClass:"")},a.createElement("div",{className:"divTableHeading",style:this.props.theadStyle},t),a.createElement("div",{className:"divTableBody",style:this.props.tbodyStyle},e))},u.prototype.generateHeaders=function(){var n=this;if(null==this.props.cols||0==this.props.cols.length)return null;var e=this.props.cols.map(function(e){var t=e.headerStyle;return null==t.cursor&&(t.cursor="pointer"),a.createElement("div",{className:"divTableHead",key:e.key,style:t,onClick:n.handleSort.bind(n,{col:e.key,ascending:n.props.ascending})},e.label,n.props.sortField==e.key?a.createElement("span",{className:"glyphicon "+(n.props.ascending?"glyphicon-triangle-top":"glyphicon-triangle-bottom")}):null)});return a.createElement("div",{className:"divTableRow"},e)},u.prototype.generateRows=function(e){var o=this;return null==e||0==e.length?null:e.map(function(n,r){var e=o.props.cols.map(function(e){var t=i.clone(e.rowStyle);return a.createElement("div",{className:"divTableCell",key:r.toString()+n[e.key]+e.key,style:t,onClick:o.handleClick.bind(o,{col:e.key,row:n,data:n[e.key]})},null!=e.content?e.content(o.round(n[e.key]),t):o.round(n[e.key]))});return a.createElement("div",{className:"divTableRow",style:{cursor:"pointer"},key:r.toString()},e)})},u.prototype.round=function(e){return Number.isInteger(e)||isNaN(Number.parseFloat(e))?e:100<e?Math.round(e):1<e?e.toFixed(1):e.toPrecision(2)},u.prototype.handleClick=function(e,t){this.props.onClick(e)},u.prototype.handleSort=function(e,t){this.props.onSort(e)},u);function u(e){return s.call(this,e)||this}t.default=l},function(e,t,n){var r=n(80);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(22)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(21)(!1)).push([e.i,".divTable {\r\n    display: table;\r\n    width: 100%;\r\n}\r\n\r\n.divTableRow {\r\n    display: table-row;\r\n}\r\n\r\n.divTableRow:nth-child(even) {\r\n    background-color: lightgrey\r\n}\r\n\r\n.divTableHeading {\r\n    display: table-header-group;\r\n}\r\n\r\n.divTableCell, .divTableHead {\r\n    border: 1px solid #999999;\r\n    display: table-cell;\r\n    padding: 3px 10px;\r\n}\r\n\r\n.divTableHeading {\r\n    display: table-header-group;\r\n    font-weight: bold;\r\n}\r\n\r\n.divTableFoot {\r\n    display: table-footer-group;\r\n    font-weight: bold;\r\n}\r\n\r\n.divTableBody {\r\n    display: table-row-group;\r\n}\r\n",""])},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(123),o=n(105);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t){e.exports={}},function(e,t,n){e.exports={default:n(197),__esModule:!0}},function(e,t){e.exports=!0},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var r=n(101);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l=o(n(1)),r=o(n(72));function o(e){return e&&e.__esModule?e:{default:e}}t.default=(0,r.default)(function(e,t,n,r,o){var a=e[t],i=void 0===a?"undefined":s(a);return l.default.isValidElement(a)?new Error("Invalid "+r+" `"+o+"` of type ReactElement supplied to `"+n+"`, expected a ReactComponent or a DOMElement. You can usually obtain a ReactComponent or DOMElement from a ReactElement by attaching a ref to it."):"object"===i&&"function"==typeof a.render||1===a.nodeType?null:new Error("Invalid "+r+" `"+o+"` of value `"+a+"` supplied to `"+n+"`, expected a ReactComponent or a DOMElement.")}),e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return e="function"==typeof e?e():e,a.default.findDOMNode(e)||t};var r,o=n(9),a=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(167)),o=i(n(178)),a="function"==typeof o.default&&"symbol"==typeof r.default?function(e){return typeof e}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":typeof e};function i(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof o.default&&"symbol"===a(r.default)?function(e){return void 0===e?"undefined":a(e)}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":void 0===e?"undefined":a(e)}},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(e){if((!o&&0!==o||e)&&a.default){var t=document.createElement("div");t.style.position="absolute",t.style.top="-9999px",t.style.width="50px",t.style.height="50px",t.style.overflow="scroll",document.body.appendChild(t),o=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return o};var o,a=r(n(54));e.exports=t.default},,,,function(e,t,n){var a=n(163);e.exports=function(r,o,e){if(a(r),void 0===o)return r;switch(e){case 1:return function(e){return r.call(o,e)};case 2:return function(e,t){return r.call(o,e,t)};case 3:return function(e,t,n){return r.call(o,e,t,n)}}return function(){return r.apply(o,arguments)}}},function(e,t,n){var o=n(70);e.exports=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(0<e?r:n)(e)}},function(e,t,n){var r=n(104)("keys"),o=n(88);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(49),o=n(56),a="__core-js_shared__",i=o[a]||(o[a]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(87)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){function o(){}var a=r(69),i=r(171),s=r(105),l=r(103)("IE_PROTO"),u="prototype",c=function(){var e,t=r(122)("iframe"),n=s.length;for(t.style.display="none",r(172).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;n--;)delete c[u][s[n]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(o[u]=a(e),n=new o,o[u]=null,n[l]=e):n=c(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(63).f,o=n(64),a=n(50)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,a)&&r(e,a,{configurable:!0,value:t})}},function(e,t,n){t.f=n(50)},function(e,t,n){var r=n(56),o=n(49),a=n(87),i=n(109),s=n(63).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=a?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:i.f(e)})}},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o,a,i,s,l,u,c,p,f,d,h,m=r(n(54)),v="transform";if(t.transform=v,t.animationEnd=i,t.transitionEnd=a,t.transitionDelay=c,t.transitionTiming=u,t.transitionDuration=l,t.transitionProperty=s,t.animationDelay=h,t.animationTiming=d,t.animationDuration=f,t.animationName=p,m.default){var y=function(){for(var e,t,n=document.createElement("div").style,r={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(r),a="",i=0;i<o.length;i++){var s=o[i];if(s+"TransitionProperty"in n){a="-"+s.toLowerCase(),e=r[s]("TransitionEnd"),t=r[s]("AnimationEnd");break}}!e&&"transitionProperty"in n&&(e="transitionend");!t&&"animationName"in n&&(t="animationend");return n=null,{animationEnd:t,transitionEnd:e,prefix:a}}();o=y.prefix,t.transitionEnd=a=y.transitionEnd,t.animationEnd=i=y.animationEnd,t.transform=v=o+"-"+v,t.transitionProperty=s=o+"-transition-property",t.transitionDuration=l=o+"-transition-duration",t.transitionDelay=c=o+"-transition-delay",t.transitionTiming=u=o+"-transition-timing-function",t.animationName=p=o+"-animation-name",t.animationDuration=f=o+"-animation-duration",t.animationTiming=d=o+"-animation-delay",t.animationDelay=h=o+"-animation-timing-function"}var g={transform:v,end:a,property:s,timing:u,delay:c,duration:l};t.default=g},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=void 0;var o=function(){};r(n(54)).default&&(o=document.addEventListener?function(e,t,n,r){return e.addEventListener(t,n,r||!1)}:document.attachEvent?function(t,e,n){return t.attachEvent("on"+e,function(e){(e=e||window.event).target=e.target||e.srcElement,e.currentTarget=t,n.call(t,e)})}:void 0);var a=o;t.default=a,e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=void 0;var o=function(){};r(n(54)).default&&(o=document.addEventListener?function(e,t,n,r){return e.removeEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.detachEvent("on"+t,n)}:void 0);var a=o;t.default=a,e.exports=t.default},function(e,t,n){e.exports={default:n(161),__esModule:!0}},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(e){void 0===e&&(e=(0,o.default)());try{return e.activeElement}catch(e){}};var o=r(n(66));e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=u(n(58)),o=u(n(0)),a=u(n(1)),i=u(n(9)),s=u(n(134)),l=u(n(71));function u(e){return e&&e.__esModule?e:{default:e}}var c,p=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,c=a.default.Component),f.prototype.componentDidMount=function(){this.props.disabled||this.addEventListeners()},f.prototype.componentDidUpdate=function(e){!this.props.disabled&&e.disabled?this.addEventListeners():this.props.disabled&&!e.disabled&&this.removeEventListeners()},f.prototype.componentWillUnmount=function(){this.props.disabled||this.removeEventListeners()},f.prototype.render=function(){return this.props.children},f);function f(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,c.call(this,e,t));return n.addEventListeners=function(){var e=n.props.event,t=(0,l.default)(n);n.documentMouseCaptureListener=(0,s.default)(t,e,n.handleMouseCapture,!0),n.documentMouseListener=(0,s.default)(t,e,n.handleMouse),n.documentKeyupListener=(0,s.default)(t,"keyup",n.handleKeyUp)},n.removeEventListeners=function(){n.documentMouseCaptureListener&&n.documentMouseCaptureListener.remove(),n.documentMouseListener&&n.documentMouseListener.remove(),n.documentKeyupListener&&n.documentKeyupListener.remove()},n.handleMouseCapture=function(e){n.preventMouseRootClose=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||!function(e){return 0===e.button}(e)||(0,r.default)(i.default.findDOMNode(n),e.target)},n.handleMouse=function(e){!n.preventMouseRootClose&&n.props.onRootClose&&n.props.onRootClose(e)},n.handleKeyUp=function(e){27===e.keyCode&&n.props.onRootClose&&n.props.onRootClose(e)},n.preventMouseRootClose=!1,n}p.displayName="RootCloseWrapper",p.propTypes={onRootClose:o.default.func,children:o.default.element,disabled:o.default.bool,event:o.default.oneOf(["click","mousedown"])},p.defaultProps={event:"click"},t.default=p,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return(0,o.default)(e)||function(e){return e&&"body"===e.tagName.toLowerCase()}(e)?function(e){var t=(0,a.default)(e),n=(0,o.default)(t).innerWidth;if(!n){var r=t.documentElement.getBoundingClientRect();n=r.right-Math.abs(r.left)}return t.body.clientWidth<n}(e):e.scrollHeight>e.clientHeight};var o=r(n(91)),a=r(n(66));function r(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=void 0;var o=r(n(112));t.on=o.default;var a=r(n(113));t.off=a.default;var i=r(n(222));t.filter=i.default;var s=r(n(224));t.listen=s.default;var l={on:o.default,off:a.default,filter:i.default,listen:s.default};t.default=l},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=i(n(0)),o=i(n(8)),v=i(n(1)),y=i(n(136)),g=i(n(234)),b=i(n(116));function i(e){return e&&e.__esModule?e:{default:e}}var s,l=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(u,s=v.default.Component),u.prototype.componentWillReceiveProps=function(e){e.show?this.setState({exited:!1}):e.transition||this.setState({exited:!0})},u.prototype.render=function(){var e=this.props,t=e.container,n=e.containerPadding,r=e.target,o=e.placement,a=e.shouldUpdatePosition,i=e.rootClose,s=e.children,l=e.transition,u=function(e,t){var n={};for(var r in e)0<=t.indexOf(r)||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["container","containerPadding","target","placement","shouldUpdatePosition","rootClose","children","transition"]);if(!(u.show||l&&!this.state.exited))return null;var c=s;if(c=v.default.createElement(g.default,{container:t,containerPadding:n,target:r,placement:o,shouldUpdatePosition:a},c),l){var p=u.onExit,f=u.onExiting,d=u.onEnter,h=u.onEntering,m=u.onEntered;c=v.default.createElement(l,{in:u.show,appear:!0,onExit:p,onExiting:f,onExited:this.onHiddenListener,onEnter:d,onEntering:h,onEntered:m},c)}return i&&(c=v.default.createElement(b.default,{onRootClose:u.onHide},c)),v.default.createElement(y.default,{container:t},c)},u);function u(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,s.call(this,e,t));return n.handleHidden=function(){var e;n.setState({exited:!0}),n.props.onExited&&(e=n.props).onExited.apply(e,arguments)},n.state={exited:!e.show},n.onHiddenListener=n.handleHidden.bind(n),n}l.propTypes=r({},y.default.propTypes,g.default.propTypes,{show:a.default.bool,rootClose:a.default.bool,onHide:function(e){var t=a.default.func;e.rootClose&&(t=t.isRequired);for(var n=arguments.length,r=Array(1<n?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return t.apply(void 0,[e].concat(r))},transition:o.default,onEnter:a.default.func,onEntering:a.default.func,onEntered:a.default.func,onExit:a.default.func,onExiting:a.default.func,onExited:a.default.func}),t.default=l,e.exports=t.default},,function(e,t,n){e.exports=!n(57)&&!n(81)(function(){return 7!=Object.defineProperty(n(122)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(70),o=n(56).document,a=r(o)&&r(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,n){var i=n(64),s=n(65),l=n(165)(!1),u=n(103)("IE_PROTO");e.exports=function(e,t){var n,r=s(e),o=0,a=[];for(n in r)n!=u&&i(r,n)&&a.push(n);for(;t.length>o;)i(r,n=t[o++])&&(~l(a,n)||a.push(n));return a}},function(e,t,n){var r=n(100);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(102),o=Math.min;e.exports=function(e){return 0<e?o(r(e),9007199254740991):0}},function(e,t,n){"use strict";var r=n(169)(!0);n(127)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){"use strict";function b(){return this}var x=n(87),_=n(55),E=n(128),C=n(68),w=n(85),O=n(170),k=n(108),T=n(173),S=n(50)("iterator"),N=!([].keys&&"next"in[].keys()),M="values";e.exports=function(e,t,n,r,o,a,i){O(n,t,r);function s(e){if(!N&&e in h)return h[e];switch(e){case"keys":case M:return function(){return new n(this,e)}}return function(){return new n(this,e)}}var l,u,c,p=t+" Iterator",f=o==M,d=!1,h=e.prototype,m=h[S]||h["@@iterator"]||o&&h[o],v=m||s(o),y=o?f?s("entries"):v:void 0,g="Array"==t&&h.entries||m;if(g&&(c=T(g.call(new e)))!==Object.prototype&&c.next&&(k(c,p,!0),x||"function"==typeof c[S]||C(c,S,b)),f&&m&&m.name!==M&&(d=!0,v=function(){return m.call(this)}),x&&!i||!N&&!d&&h[S]||C(h,S,v),w[t]=v,w[p]=b,o)if(l={values:f?v:s(M),keys:a?v:s("keys"),entries:y},i)for(u in l)u in h||E(h,u,l[u]);else _(_.P+_.F*(N||d),t,l);return l}},function(e,t,n){e.exports=n(68)},function(e,t,n){var r=n(123),o=n(105).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(84),o=n(82),a=n(65),i=n(99),s=n(64),l=n(121),u=Object.getOwnPropertyDescriptor;t.f=n(57)?u:function(e,t){if(e=a(e),t=i(t,!0),l)try{return u(e,t)}catch(e){}if(s(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var l=n(57),u=n(83),c=n(65),p=n(84).f;e.exports=function(s){return function(e){for(var t,n=c(e),r=u(n),o=r.length,a=0,i=[];a<o;)t=r[a++],l&&!p.call(n,t)||i.push(s?[t,n[t]]:n[t]);return i}}},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(e){return(0,o.default)(e.replace(a,"ms-"))};var o=r(n(204)),a=/^-ms-/;e.exports=t.default},function(e,t,n){e.exports=n(210)()},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t,n,r){return(0,o.default)(e,t,n,r),{remove:function(){(0,a.default)(e,t,n,r)}}};var o=r(n(112)),a=r(n(113));function r(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=c(n(0)),o=c(n(90)),a=c(n(1)),i=c(n(9)),s=c(n(92)),l=c(n(71)),u=c(n(231));function c(e){return e&&e.__esModule?e:{default:e}}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f,d=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(h,f=a.default.Component),h.prototype.componentDidMount=function(){this.setContainer(),this.forceUpdate(this.props.onRendered)},h.prototype.componentWillReceiveProps=function(e){e.container!==this.props.container&&this.setContainer(e)},h.prototype.componentWillUnmount=function(){this._portalContainerNode=null},h.prototype.render=function(){return this.props.children&&this._portalContainerNode?i.default.createPortal(this.props.children,this._portalContainerNode):null},h);function h(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=t=p(this,f.call.apply(f,[this].concat(r)))).setContainer=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:t.props;t._portalContainerNode=(0,s.default)(e.container,(0,l.default)(t).body)},t.getMountNode=function(){return t._portalContainerNode},p(t,e)}d.displayName="Portal",d.propTypes={container:r.default.oneOfType([o.default,r.default.func]),onRendered:r.default.func},t.default=i.default.createPortal?d:u.default,e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(e){var t=(0,s.default)(e),n=(0,i.default)(t),r=t&&t.documentElement,o={top:0,left:0,height:0,width:0};if(!t)return;if(!(0,a.default)(r,e))return o;void 0!==e.getBoundingClientRect&&(o=e.getBoundingClientRect());return o={top:o.top+(n.pageYOffset||r.scrollTop)-(r.clientTop||0),left:o.left+(n.pageXOffset||r.scrollLeft)-(r.clientLeft||0),width:(null==o.width?e.offsetWidth:o.width)||0,height:(null==o.height?e.offsetHeight:o.height)||0}};var a=r(n(58)),i=r(n(91)),s=r(n(66));e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(e,t){var n=(0,o.default)(e);if(void 0===t)return n?"pageYOffset"in n?n.pageYOffset:n.document.documentElement.scrollTop:e.scrollTop;n?n.scrollTo("pageXOffset"in n?n.pageXOffset:n.document.documentElement.scrollLeft,t):e.scrollTop=t};var o=r(n(91));e.exports=t.default},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"prefix",function(){return F}),n.d(r,"bsClass",function(){return W}),n.d(r,"bsStyles",function(){return U}),n.d(r,"bsSizes",function(){return z}),n.d(r,"getClassSet",function(){return B}),n.d(r,"splitBsProps",function(){return $}),n.d(r,"splitBsPropsAndOmit",function(){return Y}),n.d(r,"addStyle",function(){return V}),n.d(r,"_curry",function(){return q});var o={};n.r(o),n.d(o,"bootstrapUtils",function(){return r}),n.d(o,"createChainedFunction",function(){return Se}),n.d(o,"ValidComponentChildren",function(){return G});var a=n(2),k=n.n(a),i=n(4),l=n.n(i),s=n(3),u=n.n(s),c=n(5),p=n.n(c),T=n(1),S=n.n(T),f=n(6),N=n.n(f),d=n(7),M=n.n(d),h=n(0),m=n.n(h),v=n(23),y=n.n(v),g=n(86),b=n.n(g),x=n(20),_=n.n(x),E="large",C="small",w="xsmall",O={large:"lg",medium:"md",small:"sm",xsmall:"xs",lg:"lg",md:"md",sm:"sm",xs:"xs"},P=["lg","md","sm","xs"],D={SUCCESS:"success",WARNING:"warning",DANGER:"danger",INFO:"info"},I="default",A="primary",j="link",R="inverse";function L(r){return function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return"function"==typeof t[t.length-1]?r.apply(void 0,t):function(e){return r.apply(void 0,t.concat([e]))}}}function F(e,t){var n=(e.bsClass||"").trim();return null==n&&_()(!1),n+(t?"-"+t:"")}var W=L(function(e,t){var n=t.propTypes||(t.propTypes={}),r=t.defaultProps||(t.defaultProps={});return n.bsClass=m.a.string,r.bsClass=e,t}),U=L(function(e,t,n){"string"!=typeof t&&(n=t,t=void 0);var r=n.STYLES||[],o=n.propTypes||{};e.forEach(function(e){-1===r.indexOf(e)&&r.push(e)});var a=m.a.oneOf(r);n.STYLES=r,a._values=r,n.propTypes=k()({},o,{bsStyle:a}),void 0!==t&&((n.defaultProps||(n.defaultProps={})).bsStyle=t);return n}),z=L(function(e,t,n){"string"!=typeof t&&(n=t,t=void 0);var r=n.SIZES||[],o=n.propTypes||{};e.forEach(function(e){-1===r.indexOf(e)&&r.push(e)});var a=[];r.forEach(function(e){var t=O[e];t&&t!==e&&a.push(t),a.push(e)});var i=m.a.oneOf(a);return i._values=a,n.SIZES=r,n.propTypes=k()({},o,{bsSize:i}),void 0!==t&&(n.defaultProps||(n.defaultProps={}),n.defaultProps.bsSize=t),n});function B(e){var t,n=((t={})[F(e)]=!0,t);e.bsSize&&(n[F(e,O[e.bsSize]||e.bsSize)]=!0);return e.bsStyle&&(n[F(e,e.bsStyle)]=!0),n}function H(e){return{bsClass:e.bsClass,bsSize:e.bsSize,bsStyle:e.bsStyle,bsRole:e.bsRole}}function K(e){return"bsClass"===e||"bsSize"===e||"bsStyle"===e||"bsRole"===e}function $(e){var r={};return b()(e).forEach(function(e){var t=e[0],n=e[1];K(t)||(r[t]=n)}),[H(e),r]}function Y(e,t){var r={};t.forEach(function(e){r[e]=!0});var o={};return b()(e).forEach(function(e){var t=e[0],n=e[1];K(t)||r[t]||(o[t]=n)}),[H(e),o]}function V(e){for(var t=arguments.length,n=Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];U(n,e)}var q=L;var G={map:function(e,t,n){var r=0;return S.a.Children.map(e,function(e){return S.a.isValidElement(e)?t.call(n,e,r++):e})},forEach:function(e,t,n){var r=0;S.a.Children.forEach(e,function(e){S.a.isValidElement(e)&&t.call(n,e,r++)})},count:function(e){var t=0;return S.a.Children.forEach(e,function(e){S.a.isValidElement(e)&&++t}),t},find:function(e,t,n){var r=0,o=void 0;return S.a.Children.forEach(e,function(e){o||S.a.isValidElement(e)&&t.call(n,e,r++)&&(o=e)}),o},filter:function(e,t,n){var r=0,o=[];return S.a.Children.forEach(e,function(e){S.a.isValidElement(e)&&t.call(n,e,r++)&&o.push(e)}),o},every:function(e,t,n){var r=0,o=!0;return S.a.Children.forEach(e,function(e){o&&S.a.isValidElement(e)&&(t.call(n,e,r++)||(o=!1))}),o},some:function(e,t,n){var r=0,o=!1;return S.a.Children.forEach(e,function(e){o||S.a.isValidElement(e)&&t.call(n,e,r++)&&(o=!0)}),o},toArray:function(e){var t=[];return S.a.Children.forEach(e,function(e){S.a.isValidElement(e)&&t.push(e)}),t}},X=n(72),J=n.n(X),Z=m.a.oneOfType([m.a.string,m.a.number]);var Q,ee,te={accordion:m.a.bool,activeKey:m.a.any,onSelect:m.a.func,role:m.a.string,generateChildId:m.a.func,id:(Q="PanelGroup",function(e){for(var t=arguments.length,n=Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=null;return e.generateChildId||(o=Z.apply(void 0,[e].concat(n)))||e.id||(o=new Error("In order to properly initialize the "+Q+" in a way that is accessible to assistive technologies (such as screen readers) an `id` or a `generateChildId` prop to "+Q+" is required")),o})},ne={$bs_panelGroup:m.a.shape({getId:m.a.func,headerRole:m.a.string,panelRole:m.a.string,activeKey:m.a.any,onToggle:m.a.func})},re=(ee=S.a.Component,p()(oe,ee),oe.prototype.getChildContext=function(){var e=this.props,t=e.activeKey,n=e.accordion,r=e.generateChildId,o=e.id,a=null;return n&&(a=r||function(e,t){return o?o+"-"+t+"-"+e:null}),{$bs_panelGroup:k()({getId:a,headerRole:"tab",panelRole:"tabpanel"},n&&{activeKey:t,onToggle:this.handleSelect})}},oe.prototype.render=function(){var e=this.props,t=e.accordion,n=e.className,r=e.children,o=Y(N()(e,["accordion","className","children"]),["onSelect","activeKey"]),a=o[0],i=o[1];t&&(i.role=i.role||"tablist");var s=B(a);return S.a.createElement("div",k()({},i,{className:M()(n,s)}),G.map(r,function(e){return Object(T.cloneElement)(e,{bsStyle:e.props.bsStyle||a.bsStyle})}))},oe);function oe(){var e,r,t;l()(this,oe);for(var n=arguments.length,o=Array(n),a=0;a<n;a++)o[a]=arguments[a];return(e=r=u()(this,ee.call.apply(ee,[this].concat(o)))).handleSelect=function(e,t,n){t?r.props.onSelect(e,n):r.props.activeKey===e&&r.props.onSelect(null,n)},t=e,u()(r,t)}re.propTypes=te,re.defaultProps={accordion:!1},re.childContextTypes=ne;var ae,ie=y()(W("panel-group",re),{activeKey:"onSelect"});function se(){return l()(this,se),u()(this,ae.apply(this,arguments))}var le,ue=(ae=S.a.Component,p()(se,ae),se.prototype.render=function(){return S.a.createElement(ie,k()({},this.props,{accordion:!0}),this.props.children)},se),ce=n(26),pe=n.n(ce),fe={label:m.a.string.isRequired,onClick:m.a.func},de=(le=S.a.Component,p()(he,le),he.prototype.render=function(){var e=this.props,t=e.label,n=e.onClick;return S.a.createElement("button",{type:"button",className:"close",onClick:n},S.a.createElement("span",{"aria-hidden":"true"},"×"),S.a.createElement("span",{className:"sr-only"},t))},he);function he(){return l()(this,he),u()(this,le.apply(this,arguments))}de.propTypes=fe,de.defaultProps={label:"Close"};var me,ve=de,ye={onDismiss:m.a.func,closeLabel:m.a.string},ge=(me=S.a.Component,p()(be,me),be.prototype.render=function(){var e,t=this.props,n=t.onDismiss,r=t.closeLabel,o=t.className,a=t.children,i=$(N()(t,["onDismiss","closeLabel","className","children"])),s=i[0],l=i[1],u=!!n,c=k()({},B(s),((e={})[F(s,"dismissable")]=u,e));return S.a.createElement("div",k()({},l,{role:"alert",className:M()(o,c)}),u&&S.a.createElement(ve,{onClick:n,label:r}),a)},be);function be(){return l()(this,be),u()(this,me.apply(this,arguments))}ge.propTypes=ye,ge.defaultProps={closeLabel:"Close alert"};var xe,_e=U(pe()(D),D.INFO,W("alert",ge)),Ee={pullRight:m.a.bool},Ce=(xe=S.a.Component,p()(we,xe),we.prototype.hasContent=function(e){var t=!1;return S.a.Children.forEach(e,function(e){t||!e&&0!==e||(t=!0)}),t},we.prototype.render=function(){var e=this.props,t=e.pullRight,n=e.className,r=e.children,o=$(N()(e,["pullRight","className","children"])),a=o[0],i=o[1],s=k()({},B(a),{"pull-right":t,hidden:!this.hasContent(r)});return S.a.createElement("span",k()({},i,{className:M()(n,s)}),r)},we);function we(){return l()(this,we),u()(this,xe.apply(this,arguments))}Ce.propTypes=Ee,Ce.defaultProps={pullRight:!1};var Oe=W("badge",Ce),ke=n(8),Te=n.n(ke);var Se=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter(function(e){return null!=e}).reduce(function(r,o){if("function"!=typeof o)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===r?o:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];r.apply(this,t),o.apply(this,t)}},null)},Ne={href:m.a.string,onClick:m.a.func,onKeyDown:m.a.func,disabled:m.a.bool,role:m.a.string,tabIndex:m.a.oneOfType([m.a.number,m.a.string]),componentClass:Te.a};function Me(e){return!e||"#"===e.trim()}var Pe,De=(Pe=S.a.Component,p()(Ie,Pe),Ie.prototype.handleClick=function(e){var t=this.props,n=t.disabled,r=t.href,o=t.onClick;(n||Me(r))&&e.preventDefault(),n?e.stopPropagation():o&&o(e)},Ie.prototype.handleKeyDown=function(e){" "===e.key&&(e.preventDefault(),this.handleClick(e))},Ie.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.disabled,r=e.onKeyDown,o=N()(e,["componentClass","disabled","onKeyDown"]);return Me(o.href)&&(o.role=o.role||"button",o.href=o.href||"#"),n&&(o.tabIndex=-1,o.style=k()({pointerEvents:"none"},o.style)),S.a.createElement(t,k()({},o,{onClick:this.handleClick,onKeyDown:Se(this.handleKeyDown,r)}))},Ie);function Ie(e,t){l()(this,Ie);var n=u()(this,Pe.call(this,e,t));return n.handleClick=n.handleClick.bind(n),n.handleKeyDown=n.handleKeyDown.bind(n),n}De.propTypes=Ne,De.defaultProps={componentClass:"a"};var Ae,je=De,Re={active:m.a.bool,href:m.a.string,title:m.a.node,target:m.a.string},Le=(Ae=S.a.Component,p()(Fe,Ae),Fe.prototype.render=function(){var e=this.props,t=e.active,n=e.href,r=e.title,o=e.target,a=e.className,i=N()(e,["active","href","title","target","className"]),s={href:n,title:r,target:o};return S.a.createElement("li",{className:M()(a,{active:t})},t?S.a.createElement("span",i):S.a.createElement(je,k()({},i,s)))},Fe);function Fe(){return l()(this,Fe),u()(this,Ae.apply(this,arguments))}Le.propTypes=Re,Le.defaultProps={active:!1};var We,Ue=Le,ze=(We=S.a.Component,p()(Be,We),Be.prototype.render=function(){var e=this.props,t=e.className,n=$(N()(e,["className"])),r=n[0],o=n[1],a=B(r);return S.a.createElement("ol",k()({},o,{role:"navigation","aria-label":"breadcrumbs",className:M()(t,a)}))},Be);function Be(){return l()(this,Be),u()(this,We.apply(this,arguments))}ze.Item=Ue;var He,Ke=W("breadcrumb",ze),$e={active:m.a.bool,disabled:m.a.bool,block:m.a.bool,onClick:m.a.func,componentClass:Te.a,href:m.a.string,type:m.a.oneOf(["button","reset","submit"])},Ye=(He=S.a.Component,p()(Ve,He),Ve.prototype.renderAnchor=function(e,t){return S.a.createElement(je,k()({},e,{className:M()(t,e.disabled&&"disabled")}))},Ve.prototype.renderButton=function(e,t){var n=e.componentClass,r=N()(e,["componentClass"]),o=n||"button";return S.a.createElement(o,k()({},r,{type:r.type||"button",className:t}))},Ve.prototype.render=function(){var e,t=this.props,n=t.active,r=t.block,o=t.className,a=$(N()(t,["active","block","className"])),i=a[0],s=a[1],l=k()({},B(i),((e={active:n})[F(i,"block")]=r,e)),u=M()(o,l);return s.href?this.renderAnchor(s,u):this.renderButton(s,u)},Ve);function Ve(){return l()(this,Ve),u()(this,He.apply(this,arguments))}Ye.propTypes=$e,Ye.defaultProps={active:!1,block:!1,disabled:!1};var qe,Ge=W("btn",z([E,C,w],U([].concat(pe()(D),[I,A,j]),I,Ye))),Xe=n(59),Je=n.n(Xe),Ze={vertical:m.a.bool,justified:m.a.bool,block:Je()(m.a.bool,function(e){var t=e.block,n=e.vertical;return t&&!n?new Error("`block` requires `vertical` to be set to have any effect"):null})},Qe=(qe=S.a.Component,p()(et,qe),et.prototype.render=function(){var e,t=this.props,n=t.block,r=t.justified,o=t.vertical,a=t.className,i=$(N()(t,["block","justified","vertical","className"])),s=i[0],l=i[1],u=k()({},B(s),((e={})[F(s)]=!o,e[F(s,"vertical")]=o,e[F(s,"justified")]=r,e[F(Ge.defaultProps,"block")]=n,e));return S.a.createElement("div",k()({},l,{className:M()(a,u)}))},et);function et(){return l()(this,et),u()(this,qe.apply(this,arguments))}Qe.propTypes=Ze,Qe.defaultProps={block:!1,justified:!1,vertical:!1};var tt,nt=W("btn-group",Qe),rt=(tt=S.a.Component,p()(ot,tt),ot.prototype.render=function(){var e=this.props,t=e.className,n=$(N()(e,["className"])),r=n[0],o=n[1],a=B(r);return S.a.createElement("div",k()({},o,{role:"toolbar",className:M()(t,a)}))},ot);function ot(){return l()(this,ot),u()(this,tt.apply(this,arguments))}var at,it=W("btn-toolbar",rt),st={componentClass:Te.a},lt=(at=S.a.Component,p()(ut,at),ut.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),o=r[0],a=r[1],i=B(o);return S.a.createElement(t,k()({},a,{className:M()(n,i)}))},ut);function ut(){return l()(this,ut),u()(this,at.apply(this,arguments))}lt.propTypes=st,lt.defaultProps={componentClass:"div"};var ct,pt=W("carousel-caption",lt),ft=n(9),dt=n.n(ft),ht=n(140),mt=n.n(ht),vt={direction:m.a.oneOf(["prev","next"]),onAnimateOutEnd:m.a.func,active:m.a.bool,animateIn:m.a.bool,animateOut:m.a.bool,index:m.a.number},yt=(ct=S.a.Component,p()(gt,ct),gt.prototype.componentWillReceiveProps=function(e){this.props.active!==e.active&&this.setState({direction:null})},gt.prototype.componentDidUpdate=function(e){var t=this,n=this.props.active,r=e.active;!n&&r&&mt.a.end(dt.a.findDOMNode(this),this.handleAnimateOutEnd),n!==r&&setTimeout(function(){return t.startAnimation()},20)},gt.prototype.componentWillUnmount=function(){this.isUnmounted=!0},gt.prototype.handleAnimateOutEnd=function(){this.isUnmounted||this.props.onAnimateOutEnd&&this.props.onAnimateOutEnd(this.props.index)},gt.prototype.startAnimation=function(){this.isUnmounted||this.setState({direction:"prev"===this.props.direction?"right":"left"})},gt.prototype.render=function(){var e=this.props,t=e.direction,n=e.active,r=e.animateIn,o=e.animateOut,a=e.className,i=N()(e,["direction","active","animateIn","animateOut","className"]);delete i.onAnimateOutEnd,delete i.index;var s={item:!0,active:n&&!r||o};return t&&n&&r&&(s[t]=!0),this.state.direction&&(r||o)&&(s[this.state.direction]=!0),S.a.createElement("div",k()({},i,{className:M()(a,s)}))},gt);function gt(e,t){l()(this,gt);var n=u()(this,ct.call(this,e,t));return n.handleAnimateOutEnd=n.handleAnimateOutEnd.bind(n),n.state={direction:null},n.isUnmounted=!1,n}yt.propTypes=vt,yt.defaultProps={active:!1,animateIn:!1,animateOut:!1};var bt,xt=yt,_t={glyph:m.a.string.isRequired},Et=(bt=S.a.Component,p()(Ct,bt),Ct.prototype.render=function(){var e,t=this.props,n=t.glyph,r=t.className,o=$(N()(t,["glyph","className"])),a=o[0],i=o[1],s=k()({},B(a),((e={})[F(a,n)]=!0,e));return S.a.createElement("span",k()({},i,{className:M()(r,s)}))},Ct);function Ct(){return l()(this,Ct),u()(this,bt.apply(this,arguments))}Et.propTypes=_t;var wt,Ot=W("glyphicon",Et),kt={slide:m.a.bool,indicators:m.a.bool,interval:m.a.number,controls:m.a.bool,pauseOnHover:m.a.bool,wrap:m.a.bool,onSelect:m.a.func,onSlideEnd:m.a.func,activeIndex:m.a.number,defaultActiveIndex:m.a.number,direction:m.a.oneOf(["prev","next"]),prevIcon:m.a.node,prevLabel:m.a.string,nextIcon:m.a.node,nextLabel:m.a.string},Tt={slide:!0,interval:5e3,pauseOnHover:!0,wrap:!0,indicators:!0,controls:!0,prevIcon:S.a.createElement(Ot,{glyph:"chevron-left"}),prevLabel:"Previous",nextIcon:S.a.createElement(Ot,{glyph:"chevron-right"}),nextLabel:"Next"},St=(wt=S.a.Component,p()(Nt,wt),Nt.prototype.componentDidMount=function(){this.waitForNext()},Nt.prototype.componentWillReceiveProps=function(e){var t=this.getActiveIndex();null!=e.activeIndex&&e.activeIndex!==t&&(clearTimeout(this.timeout),this.setState({previousActiveIndex:t,direction:null!=e.direction?e.direction:this.getDirection(t,e.activeIndex)})),null==e.activeIndex&&this.state.activeIndex>=e.children.length&&this.setState({activeIndex:0,previousActiveIndex:null,direction:null})},Nt.prototype.componentWillUnmount=function(){clearTimeout(this.timeout),this.isUnmounted=!0},Nt.prototype.getActiveIndex=function(){var e=this.props.activeIndex;return null!=e?e:this.state.activeIndex},Nt.prototype.getDirection=function(e,t){return e===t?null:t<e?"prev":"next"},Nt.prototype.handleItemAnimateOutEnd=function(){var e=this;this.setState({previousActiveIndex:null,direction:null},function(){e.waitForNext(),e.props.onSlideEnd&&e.props.onSlideEnd()})},Nt.prototype.handleMouseOut=function(){this.isPaused&&this.play()},Nt.prototype.handleMouseOver=function(){this.props.pauseOnHover&&this.pause()},Nt.prototype.handleNext=function(e){var t=this.getActiveIndex()+1;if(G.count(this.props.children)-1<t){if(!this.props.wrap)return;t=0}this.select(t,e,"next")},Nt.prototype.handlePrev=function(e){var t=this.getActiveIndex()-1;if(t<0){if(!this.props.wrap)return;t=G.count(this.props.children)-1}this.select(t,e,"prev")},Nt.prototype.pause=function(){this.isPaused=!0,clearTimeout(this.timeout)},Nt.prototype.play=function(){this.isPaused=!1,this.waitForNext()},Nt.prototype.select=function(e,t,n){if(clearTimeout(this.timeout),!this.isUnmounted){var r=this.props.slide?this.getActiveIndex():null;n=n||this.getDirection(r,e);var o=this.props.onSelect;if(o&&(1<o.length?(t?(t.persist(),t.direction=n):t={direction:n},o(e,t)):o(e)),null==this.props.activeIndex&&e!==r){if(null!=this.state.previousActiveIndex)return;this.setState({activeIndex:e,previousActiveIndex:r,direction:n})}}},Nt.prototype.waitForNext=function(){var e=this.props,t=e.slide,n=e.interval,r=e.activeIndex;!this.isPaused&&t&&n&&null==r&&(this.timeout=setTimeout(this.handleNext,n))},Nt.prototype.renderControls=function(e){var t=e.wrap,n=e.children,r=e.activeIndex,o=e.prevIcon,a=e.nextIcon,i=e.bsProps,s=e.prevLabel,l=e.nextLabel,u=F(i,"control"),c=G.count(n);return[(t||0!==r)&&S.a.createElement(je,{key:"prev",className:M()(u,"left"),onClick:this.handlePrev},o,s&&S.a.createElement("span",{className:"sr-only"},s)),(t||r!==c-1)&&S.a.createElement(je,{key:"next",className:M()(u,"right"),onClick:this.handleNext},a,l&&S.a.createElement("span",{className:"sr-only"},l))]},Nt.prototype.renderIndicators=function(e,n,t){var r=this,o=[];return G.forEach(e,function(e,t){o.push(S.a.createElement("li",{key:t,className:t===n?"active":null,onClick:function(e){return r.select(t,e)}})," ")}),S.a.createElement("ol",{className:F(t,"indicators")},o)},Nt.prototype.render=function(){var o=this,e=this.props,a=e.slide,t=e.indicators,n=e.controls,r=e.wrap,i=e.prevIcon,s=e.prevLabel,l=e.nextIcon,u=e.nextLabel,c=e.className,p=e.children,f=N()(e,["slide","indicators","controls","wrap","prevIcon","prevLabel","nextIcon","nextLabel","className","children"]),d=this.state,h=d.previousActiveIndex,m=d.direction,v=Y(f,["interval","pauseOnHover","onSelect","onSlideEnd","activeIndex","defaultActiveIndex","direction"]),y=v[0],g=v[1],b=this.getActiveIndex(),x=k()({},B(y),{slide:a});return S.a.createElement("div",k()({},g,{className:M()(c,x),onMouseOver:this.handleMouseOver,onMouseOut:this.handleMouseOut}),t&&this.renderIndicators(p,b,y),S.a.createElement("div",{className:F(y,"inner")},G.map(p,function(e,t){var n=t===b,r=a&&t===h;return Object(T.cloneElement)(e,{active:n,index:t,animateOut:r,animateIn:n&&null!=h&&a,direction:m,onAnimateOutEnd:r?o.handleItemAnimateOutEnd:null})})),n&&this.renderControls({wrap:r,children:p,activeIndex:b,prevIcon:i,prevLabel:s,nextIcon:l,nextLabel:u,bsProps:y}))},Nt);function Nt(e,t){l()(this,Nt);var n=u()(this,wt.call(this,e,t));n.handleMouseOver=n.handleMouseOver.bind(n),n.handleMouseOut=n.handleMouseOut.bind(n),n.handlePrev=n.handlePrev.bind(n),n.handleNext=n.handleNext.bind(n),n.handleItemAnimateOutEnd=n.handleItemAnimateOutEnd.bind(n);var r=e.defaultActiveIndex;return n.state={activeIndex:null!=r?r:0,previousActiveIndex:null,direction:null},n.isUnmounted=!1,n}St.propTypes=kt,St.defaultProps=Tt,St.Caption=pt,St.Item=xt;var Mt,Pt=W("carousel",St),Dt=(n(12),{inline:m.a.bool,disabled:m.a.bool,title:m.a.string,validationState:m.a.oneOf(["success","warning","error",null]),inputRef:m.a.func}),It=(Mt=S.a.Component,p()(At,Mt),At.prototype.render=function(){var e=this.props,t=e.inline,n=e.disabled,r=e.validationState,o=e.inputRef,a=e.className,i=e.style,s=e.title,l=e.children,u=$(N()(e,["inline","disabled","validationState","inputRef","className","style","title","children"])),c=u[0],p=u[1],f=S.a.createElement("input",k()({},p,{ref:o,type:"checkbox",disabled:n}));if(t){var d,h=((d={})[F(c,"inline")]=!0,d.disabled=n,d);return S.a.createElement("label",{className:M()(a,h),style:i,title:s},f,l)}var m=k()({},B(c),{disabled:n});return r&&(m["has-"+r]=!0),S.a.createElement("div",{className:M()(a,m),style:i},S.a.createElement("label",{title:s},f,l))},At);function At(){return l()(this,At),u()(this,Mt.apply(this,arguments))}It.propTypes=Dt,It.defaultProps={inline:!1,disabled:!1,title:""};var jt=W("checkbox",It);function Rt(e){return""+e.charAt(0).toUpperCase()+e.slice(1)}var Lt,Ft={componentClass:Te.a,visibleXsBlock:m.a.bool,visibleSmBlock:m.a.bool,visibleMdBlock:m.a.bool,visibleLgBlock:m.a.bool},Wt=(Lt=S.a.Component,p()(Ut,Lt),Ut.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),o=r[0],a=r[1],i=B(o);return P.forEach(function(e){var t="visible"+Rt(e)+"Block";a[t]&&(i["visible-"+e+"-block"]=!0),delete a[t]}),S.a.createElement(t,k()({},a,{className:M()(n,i)}))},Ut);function Ut(){return l()(this,Ut),u()(this,Lt.apply(this,arguments))}Wt.propTypes=Ft,Wt.defaultProps={componentClass:"div"};var zt,Bt=W("clearfix",Wt),Ht={htmlFor:m.a.string,srOnly:m.a.bool},Kt={$bs_formGroup:m.a.object},$t=(zt=S.a.Component,p()(Yt,zt),Yt.prototype.render=function(){var e=this.context.$bs_formGroup,t=e&&e.controlId,n=this.props,r=n.htmlFor,o=void 0===r?t:r,a=n.srOnly,i=n.className,s=$(N()(n,["htmlFor","srOnly","className"])),l=s[0],u=s[1],c=k()({},B(l),{"sr-only":a});return S.a.createElement("label",k()({},u,{htmlFor:o,className:M()(i,c)}))},Yt);function Yt(){return l()(this,Yt),u()(this,zt.apply(this,arguments))}$t.propTypes=Ht,$t.defaultProps={srOnly:!1},$t.contextTypes=Kt;var Vt,qt=W("control-label",$t),Gt={componentClass:Te.a,xs:m.a.number,sm:m.a.number,md:m.a.number,lg:m.a.number,xsHidden:m.a.bool,smHidden:m.a.bool,mdHidden:m.a.bool,lgHidden:m.a.bool,xsOffset:m.a.number,smOffset:m.a.number,mdOffset:m.a.number,lgOffset:m.a.number,xsPush:m.a.number,smPush:m.a.number,mdPush:m.a.number,lgPush:m.a.number,xsPull:m.a.number,smPull:m.a.number,mdPull:m.a.number,lgPull:m.a.number},Xt=(Vt=S.a.Component,p()(Jt,Vt),Jt.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),a=r[0],i=r[1],s=[];return P.forEach(function(o){function e(e,t){var n=""+o+e,r=i[n];null!=r&&s.push(F(a,""+o+t+"-"+r)),delete i[n]}e("",""),e("Offset","-offset"),e("Push","-push"),e("Pull","-pull");var t=o+"Hidden";i[t]&&s.push("hidden-"+o),delete i[t]}),S.a.createElement(t,k()({},i,{className:M()(n,s)}))},Jt);function Jt(){return l()(this,Jt),u()(this,Vt.apply(this,arguments))}Xt.propTypes=Gt,Xt.defaultProps={componentClass:"div"};var Zt,Qt=W("col",Xt),en=n(67),tn=n.n(en),nn=n(51),rn=n.n(nn),on={height:["marginTop","marginBottom"],width:["marginLeft","marginRight"]};var an,sn=((Zt={})[nn.EXITED]="collapse",Zt[nn.EXITING]="collapsing",Zt[nn.ENTERING]="collapsing",Zt[nn.ENTERED]="collapse in",Zt),ln={in:m.a.bool,mountOnEnter:m.a.bool,unmountOnExit:m.a.bool,appear:m.a.bool,timeout:m.a.number,onEnter:m.a.func,onEntering:m.a.func,onEntered:m.a.func,onExit:m.a.func,onExiting:m.a.func,onExited:m.a.func,dimension:m.a.oneOfType([m.a.oneOf(["height","width"]),m.a.func]),getDimensionValue:m.a.func,role:m.a.string},un={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1,dimension:"height",getDimensionValue:function(e,t){var n=t["offset"+Rt(e)],r=on[e];return n+parseInt(tn()(t,r[0]),10)+parseInt(tn()(t,r[1]),10)}},cn=(an=S.a.Component,p()(pn,an),pn.prototype.getDimension=function(){return"function"==typeof this.props.dimension?this.props.dimension():this.props.dimension},pn.prototype._getScrollDimensionValue=function(e,t){return e["scroll"+Rt(t)]+"px"},pn.prototype.render=function(){var n=this,e=this.props,t=e.onEnter,r=e.onEntering,o=e.onEntered,a=e.onExit,i=e.onExiting,s=e.className,l=e.children,u=N()(e,["onEnter","onEntering","onEntered","onExit","onExiting","className","children"]);delete u.dimension,delete u.getDimensionValue;var c=Se(this.handleEnter,t),p=Se(this.handleEntering,r),f=Se(this.handleEntered,o),d=Se(this.handleExit,a),h=Se(this.handleExiting,i);return S.a.createElement(rn.a,k()({},u,{"aria-expanded":u.role?u.in:null,onEnter:c,onEntering:p,onEntered:f,onExit:d,onExiting:h}),function(e,t){return S.a.cloneElement(l,k()({},t,{className:M()(s,l.props.className,sn[e],"width"===n.getDimension()&&"width")}))})},pn);function pn(){var e,n,t;l()(this,pn);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(e=n=u()(this,an.call.apply(an,[this].concat(o)))).handleEnter=function(e){e.style[n.getDimension()]="0"},n.handleEntering=function(e){var t=n.getDimension();e.style[t]=n._getScrollDimensionValue(e,t)},n.handleEntered=function(e){e.style[n.getDimension()]=null},n.handleExit=function(e){var t=n.getDimension();e.style[t]=n.props.getDimensionValue(t,e)+"px",function(e){e.offsetHeight}(e)},n.handleExiting=function(e){e.style[n.getDimension()]="0"},t=e,u()(n,t)}cn.propTypes=ln,cn.defaultProps=un;var fn,dn=cn,hn=n(115),mn=n.n(hn),vn=n(58),yn=n.n(vn),gn=n(24),bn=n.n(gn),xn=n(60),_n=n.n(xn),En=n(141),Cn=n.n(En),wn=n(116),On=n.n(wn),kn={open:m.a.bool,pullRight:m.a.bool,onClose:m.a.func,labelledBy:m.a.oneOfType([m.a.string,m.a.number]),onSelect:m.a.func,rootCloseEvent:m.a.oneOf(["click","mousedown"])},Tn=(fn=S.a.Component,p()(Sn,fn),Sn.prototype.getFocusableMenuItems=function(){var e=dt.a.findDOMNode(this);return e?Cn()(e.querySelectorAll('[tabIndex="-1"]')):[]},Sn.prototype.getItemsAndActiveIndex=function(){var e=this.getFocusableMenuItems(),t=e.indexOf(document.activeElement);return{items:e,activeIndex:t}},Sn.prototype.focusNext=function(){var e=this.getItemsAndActiveIndex(),t=e.items,n=e.activeIndex;0!==t.length&&t[n===t.length-1?0:n+1].focus()},Sn.prototype.focusPrevious=function(){var e=this.getItemsAndActiveIndex(),t=e.items,n=e.activeIndex;0!==t.length&&t[0===n?t.length-1:n-1].focus()},Sn.prototype.handleKeyDown=function(e){switch(e.keyCode){case bn.a.codes.down:this.focusNext(),e.preventDefault();break;case bn.a.codes.up:this.focusPrevious(),e.preventDefault();break;case bn.a.codes.esc:case bn.a.codes.tab:this.props.onClose(e,{source:"keydown"})}},Sn.prototype.handleRootClose=function(e){this.props.onClose(e,{source:"rootClose"})},Sn.prototype.render=function(){var e,t=this,n=this.props,r=n.open,o=n.pullRight,a=n.labelledBy,i=n.onSelect,s=n.className,l=n.rootCloseEvent,u=n.children,c=Y(N()(n,["open","pullRight","labelledBy","onSelect","className","rootCloseEvent","children"]),["onClose"]),p=c[0],f=c[1],d=k()({},B(p),((e={})[F(p,"right")]=o,e));return S.a.createElement(On.a,{disabled:!r,onRootClose:this.handleRootClose,event:l},S.a.createElement("ul",k()({},f,{role:"menu",className:M()(s,d),"aria-labelledby":a}),G.map(u,function(e){return S.a.cloneElement(e,{onKeyDown:Se(e.props.onKeyDown,t.handleKeyDown),onSelect:Se(e.props.onSelect,i)})})))},Sn);function Sn(e){l()(this,Sn);var t=u()(this,fn.call(this,e));return t.handleRootClose=t.handleRootClose.bind(t),t.handleKeyDown=t.handleKeyDown.bind(t),t}Tn.propTypes=kn,Tn.defaultProps={bsRole:"menu",pullRight:!1};var Nn,Mn=W("dropdown-menu",Tn),Pn={noCaret:m.a.bool,open:m.a.bool,title:m.a.string,useAnchor:m.a.bool},Dn=(Nn=S.a.Component,p()(In,Nn),In.prototype.render=function(){var e=this.props,t=e.noCaret,n=e.open,r=e.useAnchor,o=e.bsClass,a=e.className,i=e.children,s=N()(e,["noCaret","open","useAnchor","bsClass","className","children"]);delete s.bsRole;var l=r?je:Ge,u=!t;return S.a.createElement(l,k()({},s,{role:"button",className:M()(a,o),"aria-haspopup":!0,"aria-expanded":n}),i||s.title,u&&" ",u&&S.a.createElement("span",{className:"caret"}))},In);function In(){return l()(this,In),u()(this,Nn.apply(this,arguments))}Dn.propTypes=Pn,Dn.defaultProps={open:!1,useAnchor:!1,bsRole:"toggle"};var An,jn=W("dropdown-toggle",Dn),Rn=jn.defaultProps.bsRole,Ln=Mn.defaultProps.bsRole,Fn={dropup:m.a.bool,id:_n()(m.a.oneOfType([m.a.string,m.a.number])),componentClass:Te.a,children:Je()(function(){for(var e=arguments.length,o=Array(e),t=0;t<e;t++)o[t]=arguments[t];return J()(function(e,t,n){var r=void 0;return o.every(function(t){return!!G.some(e.children,function(e){return e.props.bsRole===t})||(r=t,!1)}),r?new Error("(children) "+n+" - Missing a required child with bsRole: "+r+". "+n+" must have at least one child of each of the following bsRoles: "+o.join(", ")):null})}(Rn,Ln),function(){for(var e=arguments.length,o=Array(e),t=0;t<e;t++)o[t]=arguments[t];return J()(function(e,t,n){var r=void 0;return o.every(function(t){return!(1<G.filter(e.children,function(e){return e.props.bsRole===t}).length)||(r=t,!1)}),r?new Error("(children) "+n+" - Duplicate children detected of bsRole: "+r+". Only one child each allowed with the following bsRoles: "+o.join(", ")):null})}(Ln)),disabled:m.a.bool,pullRight:m.a.bool,open:m.a.bool,defaultOpen:m.a.bool,onToggle:m.a.func,onSelect:m.a.func,role:m.a.string,rootCloseEvent:m.a.oneOf(["click","mousedown"]),onMouseEnter:m.a.func,onMouseLeave:m.a.func},Wn={componentClass:nt},Un=(An=S.a.Component,p()(zn,An),zn.prototype.componentDidMount=function(){this.focusNextOnOpen()},zn.prototype.componentWillUpdate=function(e){!e.open&&this.props.open&&(this._focusInDropdown=yn()(dt.a.findDOMNode(this.menu),mn()(document)))},zn.prototype.componentDidUpdate=function(e){var t=this.props.open,n=e.open;t&&!n&&this.focusNextOnOpen(),!t&&n&&this._focusInDropdown&&(this._focusInDropdown=!1,this.focus())},zn.prototype.focus=function(){var e=dt.a.findDOMNode(this.toggle);e&&e.focus&&e.focus()},zn.prototype.focusNextOnOpen=function(){var e=this.menu;e.focusNext&&("keydown"!==this.lastOpenEventType&&"menuitem"!==this.props.role||e.focusNext())},zn.prototype.handleClick=function(e){this.props.disabled||this.toggleOpen(e,{source:"click"})},zn.prototype.handleClose=function(e,t){this.props.open&&this.toggleOpen(e,t)},zn.prototype.handleKeyDown=function(e){if(!this.props.disabled)switch(e.keyCode){case bn.a.codes.down:this.props.open?this.menu.focusNext&&this.menu.focusNext():this.toggleOpen(e,{source:"keydown"}),e.preventDefault();break;case bn.a.codes.esc:case bn.a.codes.tab:this.handleClose(e,{source:"keydown"})}},zn.prototype.toggleOpen=function(e,t){var n=!this.props.open;n&&(this.lastOpenEventType=t.source),this.props.onToggle&&this.props.onToggle(n,e,t)},zn.prototype.renderMenu=function(e,t){var n=this,r=t.id,o=t.onSelect,a=t.rootCloseEvent,i=N()(t,["id","onSelect","rootCloseEvent"]),s=function(e){n.menu=e};return"string"==typeof e.ref||(s=Se(e.ref,s)),Object(T.cloneElement)(e,k()({},i,{ref:s,labelledBy:r,bsClass:F(i,"menu"),onClose:Se(e.props.onClose,this.handleClose),onSelect:Se(e.props.onSelect,o,function(e,t){return n.handleClose(t,{source:"select"})}),rootCloseEvent:a}))},zn.prototype.renderToggle=function(e,t){var n=this,r=function(e){n.toggle=e};return"string"==typeof e.ref||(r=Se(e.ref,r)),Object(T.cloneElement)(e,k()({},t,{ref:r,bsClass:F(t,"toggle"),onClick:Se(e.props.onClick,this.handleClick),onKeyDown:Se(e.props.onKeyDown,this.handleKeyDown)}))},zn.prototype.render=function(){var e,t=this,n=this.props,r=n.componentClass,o=n.id,a=n.dropup,i=n.disabled,s=n.pullRight,l=n.open,u=n.onSelect,c=n.role,p=n.bsClass,f=n.className,d=n.rootCloseEvent,h=n.children,m=N()(n,["componentClass","id","dropup","disabled","pullRight","open","onSelect","role","bsClass","className","rootCloseEvent","children"]);delete m.onToggle;var v=((e={})[p]=!0,e.open=l,e.disabled=i,e);return a&&(v[p]=!1,v.dropup=!0),S.a.createElement(r,k()({},m,{className:M()(f,v)}),G.map(h,function(e){switch(e.props.bsRole){case Rn:return t.renderToggle(e,{id:o,disabled:i,open:l,role:c,bsClass:p});case Ln:return t.renderMenu(e,{id:o,open:l,pullRight:s,bsClass:p,onSelect:u,rootCloseEvent:d});default:return e}}))},zn);function zn(e,t){l()(this,zn);var n=u()(this,An.call(this,e,t));return n.handleClick=n.handleClick.bind(n),n.handleKeyDown=n.handleKeyDown.bind(n),n.handleClose=n.handleClose.bind(n),n._focusInDropdown=!1,n.lastOpenEventType=null,n}Un.propTypes=Fn,Un.defaultProps=Wn,W("dropdown",Un);var Bn=y()(Un,{open:"onToggle"});Bn.Toggle=jn,Bn.Menu=Mn;var Hn=Bn;function Kn(e,t){var r=t.propTypes,o={},a={};return b()(e).forEach(function(e){var t=e[0],n=e[1];r[t]?o[t]=n:a[t]=n}),[o,a]}var $n,Yn=k()({},Hn.propTypes,{bsStyle:m.a.string,bsSize:m.a.string,title:m.a.node.isRequired,noCaret:m.a.bool,children:m.a.node}),Vn=($n=S.a.Component,p()(qn,$n),qn.prototype.render=function(){var e=this.props,t=e.bsSize,n=e.bsStyle,r=e.title,o=e.children,a=Kn(N()(e,["bsSize","bsStyle","title","children"]),Hn.ControlledComponent),i=a[0],s=a[1];return S.a.createElement(Hn,k()({},i,{bsSize:t,bsStyle:n}),S.a.createElement(Hn.Toggle,k()({},s,{bsSize:t,bsStyle:n}),r),S.a.createElement(Hn.Menu,null,o))},qn);function qn(){return l()(this,qn),u()(this,$n.apply(this,arguments))}Vn.propTypes=Yn;var Gn,Xn,Jn=Vn,Zn={in:m.a.bool,mountOnEnter:m.a.bool,unmountOnExit:m.a.bool,appear:m.a.bool,timeout:m.a.number,onEnter:m.a.func,onEntering:m.a.func,onEntered:m.a.func,onExit:m.a.func,onExiting:m.a.func,onExited:m.a.func},Qn=((Gn={})[nn.ENTERING]="in",Gn[nn.ENTERED]="in",Gn),er=(Xn=S.a.Component,p()(tr,Xn),tr.prototype.render=function(){var e=this.props,n=e.className,r=e.children,t=N()(e,["className","children"]);return S.a.createElement(rn.a,t,function(e,t){return S.a.cloneElement(r,k()({},t,{className:M()("fade",n,r.props.className,Qn[e])}))})},tr);function tr(){return l()(this,tr),u()(this,Xn.apply(this,arguments))}er.propTypes=Zn,er.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1};var nr,rr=er,or={horizontal:m.a.bool,inline:m.a.bool,componentClass:Te.a},ar=(nr=S.a.Component,p()(ir,nr),ir.prototype.render=function(){var e=this.props,t=e.horizontal,n=e.inline,r=e.componentClass,o=e.className,a=$(N()(e,["horizontal","inline","componentClass","className"])),i=a[0],s=a[1],l=[];return t&&l.push(F(i,"horizontal")),n&&l.push(F(i,"inline")),S.a.createElement(r,k()({},s,{className:M()(o,l)}))},ir);function ir(){return l()(this,ir),u()(this,nr.apply(this,arguments))}ar.propTypes=or,ar.defaultProps={horizontal:!1,inline:!1,componentClass:"form"};var sr,lr=W("form",ar),ur={$bs_formGroup:m.a.object},cr=(sr=S.a.Component,p()(pr,sr),pr.prototype.getGlyph=function(e){switch(e){case"success":return"ok";case"warning":return"warning-sign";case"error":return"remove";default:return null}},pr.prototype.renderDefaultFeedback=function(e,t,n,r){var o=this.getGlyph(e&&e.validationState);return o?S.a.createElement(Ot,k()({},r,{glyph:o,className:M()(t,n)})):null},pr.prototype.render=function(){var e=this.props,t=e.className,n=e.children,r=$(N()(e,["className","children"])),o=r[0],a=r[1],i=B(o);if(!n)return this.renderDefaultFeedback(this.context.$bs_formGroup,t,i,a);var s=S.a.Children.only(n);return S.a.cloneElement(s,k()({},a,{className:M()(s.props.className,t,i)}))},pr);function pr(){return l()(this,pr),u()(this,sr.apply(this,arguments))}cr.defaultProps={bsRole:"feedback"},cr.contextTypes=ur;var fr,dr=W("form-control-feedback",cr),hr={componentClass:Te.a},mr=(fr=S.a.Component,p()(vr,fr),vr.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),o=r[0],a=r[1],i=B(o);return S.a.createElement(t,k()({},a,{className:M()(n,i)}))},vr);function vr(){return l()(this,vr),u()(this,fr.apply(this,arguments))}mr.propTypes=hr,mr.defaultProps={componentClass:"p"};var yr,gr=W("form-control-static",mr),br={componentClass:Te.a,type:m.a.string,id:m.a.string,inputRef:m.a.func},xr={$bs_formGroup:m.a.object},_r=(yr=S.a.Component,p()(Er,yr),Er.prototype.render=function(){var e=this.context.$bs_formGroup,t=e&&e.controlId,n=this.props,r=n.componentClass,o=n.type,a=n.id,i=void 0===a?t:a,s=n.inputRef,l=n.className,u=n.bsSize,c=$(N()(n,["componentClass","type","id","inputRef","className","bsSize"])),p=c[0],f=c[1],d=void 0;return"file"!==o&&(d=B(p)),u&&(d[F({bsClass:"input"},O[u]||u)]=!0),S.a.createElement(r,k()({},f,{type:o,id:i,ref:s,className:M()(l,d)}))},Er);function Er(){return l()(this,Er),u()(this,yr.apply(this,arguments))}_r.propTypes=br,_r.defaultProps={componentClass:"input"},_r.contextTypes=xr,_r.Feedback=dr,_r.Static=gr;var Cr,wr=W("form-control",z([C,E],_r)),Or={controlId:m.a.string,validationState:m.a.oneOf(["success","warning","error",null])},kr={$bs_formGroup:m.a.object.isRequired},Tr=(Cr=S.a.Component,p()(Sr,Cr),Sr.prototype.getChildContext=function(){var e=this.props;return{$bs_formGroup:{controlId:e.controlId,validationState:e.validationState}}},Sr.prototype.hasFeedback=function(e){var t=this;return G.some(e,function(e){return"feedback"===e.props.bsRole||e.props.children&&t.hasFeedback(e.props.children)})},Sr.prototype.render=function(){var e=this.props,t=e.validationState,n=e.className,r=e.children,o=Y(N()(e,["validationState","className","children"]),["controlId"]),a=o[0],i=o[1],s=k()({},B(a),{"has-feedback":this.hasFeedback(r)});return t&&(s["has-"+t]=!0),S.a.createElement("div",k()({},i,{className:M()(n,s)}),r)},Sr);function Sr(){return l()(this,Sr),u()(this,Cr.apply(this,arguments))}Tr.propTypes=Or,Tr.childContextTypes=kr;var Nr,Mr=W("form-group",z([E,C],Tr)),Pr={fluid:m.a.bool,componentClass:Te.a},Dr=(Nr=S.a.Component,p()(Ir,Nr),Ir.prototype.render=function(){var e=this.props,t=e.fluid,n=e.componentClass,r=e.className,o=$(N()(e,["fluid","componentClass","className"])),a=o[0],i=o[1],s=F(a,t&&"fluid");return S.a.createElement(n,k()({},i,{className:M()(r,s)}))},Ir);function Ir(){return l()(this,Ir),u()(this,Nr.apply(this,arguments))}Dr.propTypes=Pr,Dr.defaultProps={componentClass:"div",fluid:!1};var Ar,jr=W("container",Dr),Rr=(Ar=S.a.Component,p()(Lr,Ar),Lr.prototype.render=function(){var e=this.props,t=e.className,n=$(N()(e,["className"])),r=n[0],o=n[1],a=B(r);return S.a.createElement("span",k()({},o,{className:M()(t,a)}))},Lr);function Lr(){return l()(this,Lr),u()(this,Ar.apply(this,arguments))}var Fr,Wr=W("help-block",Rr),Ur={responsive:m.a.bool,rounded:m.a.bool,circle:m.a.bool,thumbnail:m.a.bool},zr=(Fr=S.a.Component,p()(Br,Fr),Br.prototype.render=function(){var e,t=this.props,n=t.responsive,r=t.rounded,o=t.circle,a=t.thumbnail,i=t.className,s=$(N()(t,["responsive","rounded","circle","thumbnail","className"])),l=s[0],u=s[1],c=((e={})[F(l,"responsive")]=n,e[F(l,"rounded")]=r,e[F(l,"circle")]=o,e[F(l,"thumbnail")]=a,e);return S.a.createElement("img",k()({},u,{className:M()(i,c)}))},Br);function Br(){return l()(this,Br),u()(this,Fr.apply(this,arguments))}zr.propTypes=Ur,zr.defaultProps={responsive:!1,rounded:!1,circle:!1,thumbnail:!1};var Hr,Kr=W("img",zr),$r=(Hr=S.a.Component,p()(Yr,Hr),Yr.prototype.render=function(){var e=this.props,t=e.className,n=$(N()(e,["className"])),r=n[0],o=n[1],a=B(r);return S.a.createElement("span",k()({},o,{className:M()(t,a)}))},Yr);function Yr(){return l()(this,Yr),u()(this,Hr.apply(this,arguments))}var Vr,qr=W("input-group-addon",$r),Gr=(Vr=S.a.Component,p()(Xr,Vr),Xr.prototype.render=function(){var e=this.props,t=e.className,n=$(N()(e,["className"])),r=n[0],o=n[1],a=B(r);return S.a.createElement("span",k()({},o,{className:M()(t,a)}))},Xr);function Xr(){return l()(this,Xr),u()(this,Vr.apply(this,arguments))}var Jr,Zr=W("input-group-btn",Gr),Qr=(Jr=S.a.Component,p()(eo,Jr),eo.prototype.render=function(){var e=this.props,t=e.className,n=$(N()(e,["className"])),r=n[0],o=n[1],a=B(r);return S.a.createElement("span",k()({},o,{className:M()(t,a)}))},eo);function eo(){return l()(this,eo),u()(this,Jr.apply(this,arguments))}Qr.Addon=qr,Qr.Button=Zr;var to,no=W("input-group",z([E,C],Qr)),ro={componentClass:Te.a},oo=(to=S.a.Component,p()(ao,to),ao.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),o=r[0],a=r[1],i=B(o);return S.a.createElement(t,k()({},a,{className:M()(n,i)}))},ao);function ao(){return l()(this,ao),u()(this,to.apply(this,arguments))}oo.propTypes=ro,oo.defaultProps={componentClass:"div"};var io,so=W("jumbotron",oo),lo=(io=S.a.Component,p()(uo,io),uo.prototype.hasContent=function(e){var t=!1;return S.a.Children.forEach(e,function(e){t||!e&&0!==e||(t=!0)}),t},uo.prototype.render=function(){var e=this.props,t=e.className,n=e.children,r=$(N()(e,["className","children"])),o=r[0],a=r[1],i=k()({},B(o),{hidden:!this.hasContent(n)});return S.a.createElement("span",k()({},a,{className:M()(t,i)}),n)},uo);function uo(){return l()(this,uo),u()(this,io.apply(this,arguments))}var co,po=W("label",U([].concat(pe()(D),[I,A]),I,lo)),fo={active:m.a.any,disabled:m.a.any,header:m.a.node,listItem:m.a.bool,onClick:m.a.func,href:m.a.string,type:m.a.string},ho=(co=S.a.Component,p()(mo,co),mo.prototype.renderHeader=function(e,t){return S.a.isValidElement(e)?Object(T.cloneElement)(e,{className:M()(e.props.className,t)}):S.a.createElement("h4",{className:t},e)},mo.prototype.render=function(){var e=this.props,t=e.active,n=e.disabled,r=e.className,o=e.header,a=e.listItem,i=e.children,s=$(N()(e,["active","disabled","className","header","listItem","children"])),l=s[0],u=s[1],c=k()({},B(l),{active:t,disabled:n}),p=void 0;return u.href?p="a":u.onClick?(p="button",u.type=u.type||"button"):p=a?"li":"span",u.className=M()(r,c),o?S.a.createElement(p,u,this.renderHeader(o,F(l,"heading")),S.a.createElement("p",{className:F(l,"text")},i)):S.a.createElement(p,u,i)},mo);function mo(){return l()(this,mo),u()(this,co.apply(this,arguments))}ho.propTypes=fo,ho.defaultProps={listItem:!1};var vo=W("list-group-item",U(pe()(D),ho)),yo={componentClass:Te.a};var go,bo=(go=S.a.Component,p()(xo,go),xo.prototype.render=function(){var e=this.props,t=e.children,n=e.componentClass,r=void 0===n?function(e){return e?G.some(e,function(e){return e.type!==vo||e.props.href||e.props.onClick})?"div":"ul":"div"}(t):n,o=e.className,a=$(N()(e,["children","componentClass","className"])),i=a[0],s=a[1],l=B(i),u="ul"===r&&G.every(t,function(e){return e.type===vo});return S.a.createElement(r,k()({},s,{className:M()(o,l)}),u?G.map(t,function(e){return Object(T.cloneElement)(e,{listItem:!0})}):t)},xo);function xo(){return l()(this,xo),u()(this,go.apply(this,arguments))}bo.propTypes=yo;var _o,Eo=W("list-group",bo),Co={align:m.a.oneOf(["top","middle","bottom"]),componentClass:Te.a},wo=(_o=S.a.Component,p()(Oo,_o),Oo.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.align,r=e.className,o=$(N()(e,["componentClass","align","className"])),a=o[0],i=o[1],s=B(a);return n&&(s[F(ta.defaultProps,n)]=!0),S.a.createElement(t,k()({},i,{className:M()(r,s)}))},Oo);function Oo(){return l()(this,Oo),u()(this,_o.apply(this,arguments))}wo.propTypes=Co,wo.defaultProps={componentClass:"div"};var ko,To=W("media-body",wo),So={componentClass:Te.a},No=(ko=S.a.Component,p()(Mo,ko),Mo.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),o=r[0],a=r[1],i=B(o);return S.a.createElement(t,k()({},a,{className:M()(n,i)}))},Mo);function Mo(){return l()(this,Mo),u()(this,ko.apply(this,arguments))}No.propTypes=So,No.defaultProps={componentClass:"h4"};var Po,Do=W("media-heading",No),Io={align:m.a.oneOf(["top","middle","bottom"])},Ao=(Po=S.a.Component,p()(jo,Po),jo.prototype.render=function(){var e=this.props,t=e.align,n=e.className,r=$(N()(e,["align","className"])),o=r[0],a=r[1],i=B(o);return t&&(i[F(ta.defaultProps,t)]=!0),S.a.createElement("div",k()({},a,{className:M()(n,i)}))},jo);function jo(){return l()(this,jo),u()(this,Po.apply(this,arguments))}Ao.propTypes=Io;var Ro,Lo=W("media-left",Ao),Fo=(Ro=S.a.Component,p()(Wo,Ro),Wo.prototype.render=function(){var e=this.props,t=e.className,n=$(N()(e,["className"])),r=n[0],o=n[1],a=B(r);return S.a.createElement("ul",k()({},o,{className:M()(t,a)}))},Wo);function Wo(){return l()(this,Wo),u()(this,Ro.apply(this,arguments))}var Uo,zo=W("media-list",Fo),Bo=(Uo=S.a.Component,p()(Ho,Uo),Ho.prototype.render=function(){var e=this.props,t=e.className,n=$(N()(e,["className"])),r=n[0],o=n[1],a=B(r);return S.a.createElement("li",k()({},o,{className:M()(t,a)}))},Ho);function Ho(){return l()(this,Ho),u()(this,Uo.apply(this,arguments))}var Ko,$o=W("media",Bo),Yo={align:m.a.oneOf(["top","middle","bottom"])},Vo=(Ko=S.a.Component,p()(qo,Ko),qo.prototype.render=function(){var e=this.props,t=e.align,n=e.className,r=$(N()(e,["align","className"])),o=r[0],a=r[1],i=B(o);return t&&(i[F(ta.defaultProps,t)]=!0),S.a.createElement("div",k()({},a,{className:M()(n,i)}))},qo);function qo(){return l()(this,qo),u()(this,Ko.apply(this,arguments))}Vo.propTypes=Yo;var Go,Xo=W("media-right",Vo),Jo={componentClass:Te.a},Zo=(Go=S.a.Component,p()(Qo,Go),Qo.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),o=r[0],a=r[1],i=B(o);return S.a.createElement(t,k()({},a,{className:M()(n,i)}))},Qo);function Qo(){return l()(this,Qo),u()(this,Go.apply(this,arguments))}Zo.propTypes=Jo,Zo.defaultProps={componentClass:"div"},Zo.Heading=Do,Zo.Body=To,Zo.Left=Lo,Zo.Right=Xo,Zo.List=zo,Zo.ListItem=$o;var ea,ta=W("media",Zo),na={active:m.a.bool,disabled:m.a.bool,divider:Je()(m.a.bool,function(e){var t=e.divider,n=e.children;return t&&n?new Error("Children will not be rendered for dividers"):null}),eventKey:m.a.any,header:m.a.bool,href:m.a.string,onClick:m.a.func,onSelect:m.a.func},ra=(ea=S.a.Component,p()(oa,ea),oa.prototype.handleClick=function(e){var t=this.props,n=t.href,r=t.disabled,o=t.onSelect,a=t.eventKey;n&&!r||e.preventDefault(),r||o&&o(a,e)},oa.prototype.render=function(){var e=this.props,t=e.active,n=e.disabled,r=e.divider,o=e.header,a=e.onClick,i=e.className,s=e.style,l=Y(N()(e,["active","disabled","divider","header","onClick","className","style"]),["eventKey","onSelect"]),u=l[0],c=l[1];return r?(c.children=void 0,S.a.createElement("li",k()({},c,{role:"separator",className:M()(i,"divider"),style:s}))):o?S.a.createElement("li",k()({},c,{role:"heading",className:M()(i,F(u,"header")),style:s})):S.a.createElement("li",{role:"presentation",className:M()(i,{active:t,disabled:n}),style:s},S.a.createElement(je,k()({},c,{role:"menuitem",tabIndex:"-1",onClick:Se(a,this.handleClick)})))},oa);function oa(e,t){l()(this,oa);var n=u()(this,ea.call(this,e,t));return n.handleClick=n.handleClick.bind(n),n}ra.propTypes=na,ra.defaultProps={divider:!1,disabled:!1,header:!1};var aa,ia=W("dropdown",ra),sa=n(118),la=n.n(sa),ua=n(66),ca=n.n(ua),pa=n(54),fa=n.n(pa),da=n(94),ha=n.n(da),ma=n(74),va=n.n(ma),ya=n(117),ga=n.n(ya),ba={componentClass:Te.a},xa=(aa=S.a.Component,p()(_a,aa),_a.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),o=r[0],a=r[1],i=B(o);return S.a.createElement(t,k()({},a,{className:M()(n,i)}))},_a);function _a(){return l()(this,_a),u()(this,aa.apply(this,arguments))}xa.propTypes=ba,xa.defaultProps={componentClass:"div"};var Ea,Ca=W("modal-body",xa),wa={dialogClassName:m.a.string},Oa=(Ea=S.a.Component,p()(ka,Ea),ka.prototype.render=function(){var e,t=this.props,n=t.dialogClassName,r=t.className,o=t.style,a=t.children,i=$(N()(t,["dialogClassName","className","style","children"])),s=i[0],l=i[1],u=F(s),c=k()({display:"block"},o),p=k()({},B(s),((e={})[u]=!1,e[F(s,"dialog")]=!0,e));return S.a.createElement("div",k()({},l,{tabIndex:"-1",role:"dialog",style:c,className:M()(r,u)}),S.a.createElement("div",{className:M()(n,p)},S.a.createElement("div",{className:F(s,"content"),role:"document"},a)))},ka);function ka(){return l()(this,ka),u()(this,Ea.apply(this,arguments))}Oa.propTypes=wa;var Ta,Sa=W("modal",z([E,C],Oa)),Na={componentClass:Te.a},Ma=(Ta=S.a.Component,p()(Pa,Ta),Pa.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),o=r[0],a=r[1],i=B(o);return S.a.createElement(t,k()({},a,{className:M()(n,i)}))},Pa);function Pa(){return l()(this,Pa),u()(this,Ta.apply(this,arguments))}Ma.propTypes=Na,Ma.defaultProps={componentClass:"div"};var Da,Ia=W("modal-footer",Ma),Aa={closeLabel:m.a.string,closeButton:m.a.bool,onHide:m.a.func},ja={$bs_modal:m.a.shape({onHide:m.a.func})},Ra=(Da=S.a.Component,p()(La,Da),La.prototype.render=function(){var e=this.props,t=e.closeLabel,n=e.closeButton,r=e.onHide,o=e.className,a=e.children,i=N()(e,["closeLabel","closeButton","onHide","className","children"]),s=this.context.$bs_modal,l=$(i),u=l[0],c=l[1],p=B(u);return S.a.createElement("div",k()({},c,{className:M()(o,p)}),n&&S.a.createElement(ve,{label:t,onClick:Se(s&&s.onHide,r)}),a)},La);function La(){return l()(this,La),u()(this,Da.apply(this,arguments))}Ra.propTypes=Aa,Ra.defaultProps={closeLabel:"Close",closeButton:!1},Ra.contextTypes=ja;var Fa,Wa=W("modal-header",Ra),Ua={componentClass:Te.a},za=(Fa=S.a.Component,p()(Ba,Fa),Ba.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),o=r[0],a=r[1],i=B(o);return S.a.createElement(t,k()({},a,{className:M()(n,i)}))},Ba);function Ba(){return l()(this,Ba),u()(this,Fa.apply(this,arguments))}za.propTypes=Ua,za.defaultProps={componentClass:"h4"};var Ha=W("modal-title",za),Ka=k()({},va.a.propTypes,Sa.propTypes,{backdrop:m.a.oneOf(["static",!0,!1]),backdropClassName:m.a.string,keyboard:m.a.bool,animation:m.a.bool,dialogComponentClass:Te.a,autoFocus:m.a.bool,enforceFocus:m.a.bool,restoreFocus:m.a.bool,show:m.a.bool,onHide:m.a.func,onEnter:m.a.func,onEntering:m.a.func,onEntered:m.a.func,onExit:m.a.func,onExiting:m.a.func,onExited:m.a.func,container:va.a.propTypes.container}),$a=k()({},va.a.defaultProps,{animation:!0,dialogComponentClass:Sa}),Ya={$bs_modal:m.a.shape({onHide:m.a.func})};function Va(e){return S.a.createElement(rr,k()({},e,{timeout:Xa.TRANSITION_DURATION}))}function qa(e){return S.a.createElement(rr,k()({},e,{timeout:Xa.BACKDROP_TRANSITION_DURATION}))}var Ga,Xa=(Ga=S.a.Component,p()(Ja,Ga),Ja.prototype.getChildContext=function(){return{$bs_modal:{onHide:this.props.onHide}}},Ja.prototype.componentWillUnmount=function(){this.handleExited()},Ja.prototype.setModalRef=function(e){this._modal=e},Ja.prototype.handleDialogClick=function(e){e.target===e.currentTarget&&this.props.onHide()},Ja.prototype.handleEntering=function(){la.a.on(window,"resize",this.handleWindowResize),this.updateStyle()},Ja.prototype.handleExited=function(){la.a.off(window,"resize",this.handleWindowResize)},Ja.prototype.handleWindowResize=function(){this.updateStyle()},Ja.prototype.updateStyle=function(){if(fa.a){var e=this._modal.getDialogElement(),t=e.scrollHeight,n=ca()(e),r=ga()(dt.a.findDOMNode(this.props.container||n.body)),o=t>n.documentElement.clientHeight;this.setState({style:{paddingRight:r&&!o?ha()():void 0,paddingLeft:!r&&o?ha()():void 0}})}},Ja.prototype.render=function(){var e=this.props,t=e.backdrop,n=e.backdropClassName,r=e.animation,o=e.show,a=e.dialogComponentClass,i=e.className,s=e.style,l=e.children,u=e.onEntering,c=e.onExited,p=N()(e,["backdrop","backdropClassName","animation","show","dialogComponentClass","className","style","children","onEntering","onExited"]),f=Kn(p,va.a),d=f[0],h=f[1],m=o&&!r&&"in";return S.a.createElement(va.a,k()({},d,{ref:this.setModalRef,show:o,containerClassName:F(p,"open"),transition:r?Va:void 0,backdrop:t,backdropTransition:r?qa:void 0,backdropClassName:M()(F(p,"backdrop"),n,m),onEntering:Se(u,this.handleEntering),onExited:Se(c,this.handleExited)}),S.a.createElement(a,k()({},h,{style:k()({},this.state.style,s),className:M()(i,m),onClick:!0===t?this.handleDialogClick:null}),l))},Ja);function Ja(e,t){l()(this,Ja);var n=u()(this,Ga.call(this,e,t));return n.handleEntering=n.handleEntering.bind(n),n.handleExited=n.handleExited.bind(n),n.handleWindowResize=n.handleWindowResize.bind(n),n.handleDialogClick=n.handleDialogClick.bind(n),n.setModalRef=n.setModalRef.bind(n),n.state={style:{}},n}Xa.propTypes=Ka,Xa.defaultProps=$a,Xa.childContextTypes=Ya,Xa.Body=Ca,Xa.Header=Wa,Xa.Title=Ha,Xa.Footer=Ia,Xa.Dialog=Sa,Xa.TRANSITION_DURATION=300,Xa.BACKDROP_TRANSITION_DURATION=150;var Za,Qa=W("modal",z([E,C],Xa)),ei={activeKey:m.a.any,activeHref:m.a.string,stacked:m.a.bool,justified:Je()(m.a.bool,function(e){var t=e.justified,n=e.navbar;return t&&n?Error("justified navbar `Nav`s are not supported"):null}),onSelect:m.a.func,role:m.a.string,navbar:m.a.bool,pullRight:m.a.bool,pullLeft:m.a.bool},ti={$bs_navbar:m.a.shape({bsClass:m.a.string,onSelect:m.a.func}),$bs_tabContainer:m.a.shape({activeKey:m.a.any,onSelect:m.a.func.isRequired,getTabId:m.a.func.isRequired,getPaneId:m.a.func.isRequired})},ni=(Za=S.a.Component,p()(ri,Za),ri.prototype.componentDidUpdate=function(){var t=this;if(this._needsRefocus){this._needsRefocus=!1;var e=this.props.children,n=this.getActiveProps(),r=n.activeKey,o=n.activeHref,a=G.find(e,function(e){return t.isActive(e,r,o)}),i=G.toArray(e).indexOf(a),s=dt.a.findDOMNode(this).children,l=s&&s[i];l&&l.firstChild&&l.firstChild.focus()}},ri.prototype.getActiveProps=function(){var e=this.context.$bs_tabContainer;return e||this.props},ri.prototype.getNextActiveChild=function(e){var t=this,n=this.props.children,r=n.filter(function(e){return null!=e.props.eventKey&&!e.props.disabled}),o=this.getActiveProps(),a=o.activeKey,i=o.activeHref,s=G.find(n,function(e){return t.isActive(e,a,i)}),l=r.indexOf(s);if(-1===l)return r[0];var u=l+e,c=r.length;return c<=u?u=0:u<0&&(u=c-1),r[u]},ri.prototype.getTabProps=function(e,t,n,r,o){var a=this;if(!t&&"tablist"!==n)return null;var i=e.props,s=i.id,l=i["aria-controls"],u=i.eventKey,c=i.role,p=i.onKeyDown,f=i.tabIndex;return t&&(s=t.getTabId(u),l=t.getPaneId(u)),"tablist"===n&&(c=c||"tab",p=Se(function(e){return a.handleTabKeyDown(o,e)},p),f=r?f:-1),{id:s,role:c,onKeyDown:p,"aria-controls":l,tabIndex:f}},ri.prototype.handleTabKeyDown=function(e,t){var n=void 0;switch(t.keyCode){case bn.a.codes.left:case bn.a.codes.up:n=this.getNextActiveChild(-1);break;case bn.a.codes.right:case bn.a.codes.down:n=this.getNextActiveChild(1);break;default:return}t.preventDefault(),e&&n&&null!=n.props.eventKey&&e(n.props.eventKey),this._needsRefocus=!0},ri.prototype.isActive=function(e,t,n){var r=e.props;return!!(r.active||null!=t&&r.eventKey===t||n&&r.href===n)||r.active},ri.prototype.render=function(){var e,r=this,t=this.props,n=t.stacked,o=t.justified,a=t.onSelect,i=t.role,s=t.navbar,l=t.pullRight,u=t.pullLeft,c=t.className,p=t.children,f=N()(t,["stacked","justified","onSelect","role","navbar","pullRight","pullLeft","className","children"]),d=this.context.$bs_tabContainer,h=i||(d?"tablist":null),m=this.getActiveProps(),v=m.activeKey,y=m.activeHref;delete f.activeKey,delete f.activeHref;var g=$(f),b=g[0],x=g[1],_=k()({},B(b),((e={})[F(b,"stacked")]=n,e[F(b,"justified")]=o,e)),E=null!=s?s:this.context.$bs_navbar,C=void 0,w=void 0;if(E){var O=this.context.$bs_navbar||{bsClass:"navbar"};_[F(O,"nav")]=!0,w=F(O,"right"),C=F(O,"left")}else w="pull-right",C="pull-left";return _[w]=l,_[C]=u,S.a.createElement("ul",k()({},x,{role:h,className:M()(c,_)}),G.map(p,function(e){var t=r.isActive(e,v,y),n=Se(e.props.onSelect,a,E&&E.onSelect,d&&d.onSelect);return Object(T.cloneElement)(e,k()({},r.getTabProps(e,d,h,t,n),{active:t,activeKey:v,activeHref:y,onSelect:n}))}))},ri);function ri(){return l()(this,ri),u()(this,Za.apply(this,arguments))}ni.propTypes=ei,ni.defaultProps={justified:!1,pullRight:!1,pullLeft:!1,stacked:!1},ni.contextTypes=ti;var oi,ai=W("nav",U(["tabs","pills"],ni)),ii={$bs_navbar:m.a.shape({bsClass:m.a.string})},si=(oi=S.a.Component,p()(li,oi),li.prototype.render=function(){var e=this.props,t=e.className,n=e.children,r=N()(e,["className","children"]),o=F(this.context.$bs_navbar||{bsClass:"navbar"},"brand");return S.a.isValidElement(n)?S.a.cloneElement(n,{className:M()(n.props.className,t,o)}):S.a.createElement("span",k()({},r,{className:M()(t,o)}),n)},li);function li(){return l()(this,li),u()(this,oi.apply(this,arguments))}si.contextTypes=ii;var ui,ci=si,pi={$bs_navbar:m.a.shape({bsClass:m.a.string,expanded:m.a.bool})},fi=(ui=S.a.Component,p()(di,ui),di.prototype.render=function(){var e=this.props,t=e.children,n=N()(e,["children"]),r=this.context.$bs_navbar||{bsClass:"navbar"},o=F(r,"collapse");return S.a.createElement(dn,k()({in:r.expanded},n),S.a.createElement("div",{className:o},t))},di);function di(){return l()(this,di),u()(this,ui.apply(this,arguments))}fi.contextTypes=pi;var hi,mi=fi,vi={$bs_navbar:m.a.shape({bsClass:m.a.string})},yi=(hi=S.a.Component,p()(gi,hi),gi.prototype.render=function(){var e=this.props,t=e.className,n=N()(e,["className"]),r=F(this.context.$bs_navbar||{bsClass:"navbar"},"header");return S.a.createElement("div",k()({},n,{className:M()(t,r)}))},gi);function gi(){return l()(this,gi),u()(this,hi.apply(this,arguments))}yi.contextTypes=vi;var bi,xi=yi,_i={onClick:m.a.func,children:m.a.node},Ei={$bs_navbar:m.a.shape({bsClass:m.a.string,expanded:m.a.bool,onToggle:m.a.func.isRequired})},Ci=(bi=S.a.Component,p()(wi,bi),wi.prototype.render=function(){var e=this.props,t=e.onClick,n=e.className,r=e.children,o=N()(e,["onClick","className","children"]),a=this.context.$bs_navbar||{bsClass:"navbar"},i=k()({type:"button"},o,{onClick:Se(t,a.onToggle),className:M()(n,F(a,"toggle"),!a.expanded&&"collapsed")});return r?S.a.createElement("button",i,r):S.a.createElement("button",i,S.a.createElement("span",{className:"sr-only"},"Toggle navigation"),S.a.createElement("span",{className:"icon-bar"}),S.a.createElement("span",{className:"icon-bar"}),S.a.createElement("span",{className:"icon-bar"}))},wi);function wi(){return l()(this,wi),u()(this,bi.apply(this,arguments))}Ci.propTypes=_i,Ci.contextTypes=Ei;var Oi,ki=Ci,Ti={fixedTop:m.a.bool,fixedBottom:m.a.bool,staticTop:m.a.bool,inverse:m.a.bool,fluid:m.a.bool,componentClass:Te.a,onToggle:m.a.func,onSelect:m.a.func,collapseOnSelect:m.a.bool,expanded:m.a.bool,role:m.a.string},Si={$bs_navbar:m.a.shape({bsClass:m.a.string,expanded:m.a.bool,onToggle:m.a.func.isRequired,onSelect:m.a.func})},Ni=(Oi=S.a.Component,p()(Mi,Oi),Mi.prototype.getChildContext=function(){var e=this.props,t=e.bsClass,n=e.expanded,r=e.onSelect,o=e.collapseOnSelect;return{$bs_navbar:{bsClass:t,expanded:n,onToggle:this.handleToggle,onSelect:Se(r,o?this.handleCollapse:null)}}},Mi.prototype.handleCollapse=function(){var e=this.props,t=e.onToggle;e.expanded&&t(!1)},Mi.prototype.handleToggle=function(){var e=this.props;(0,e.onToggle)(!e.expanded)},Mi.prototype.render=function(){var e,t=this.props,n=t.componentClass,r=t.fixedTop,o=t.fixedBottom,a=t.staticTop,i=t.inverse,s=t.fluid,l=t.className,u=t.children,c=Y(N()(t,["componentClass","fixedTop","fixedBottom","staticTop","inverse","fluid","className","children"]),["expanded","onToggle","onSelect","collapseOnSelect"]),p=c[0],f=c[1];void 0===f.role&&"nav"!==n&&(f.role="navigation"),i&&(p.bsStyle=R);var d=k()({},B(p),((e={})[F(p,"fixed-top")]=r,e[F(p,"fixed-bottom")]=o,e[F(p,"static-top")]=a,e));return S.a.createElement(n,k()({},f,{className:M()(l,d)}),S.a.createElement(jr,{fluid:s},u))},Mi);function Mi(e,t){l()(this,Mi);var n=u()(this,Oi.call(this,e,t));return n.handleToggle=n.handleToggle.bind(n),n.handleCollapse=n.handleCollapse.bind(n),n}Ni.propTypes=Ti,Ni.defaultProps={componentClass:"nav",fixedTop:!1,fixedBottom:!1,staticTop:!1,inverse:!1,fluid:!1,collapseOnSelect:!1},Ni.childContextTypes=Si,W("navbar",Ni);var Pi=y()(Ni,{expanded:"onToggle"});function Di(e,u,t){function n(e,t){var n=t.$bs_navbar,r=void 0===n?{bsClass:"navbar"}:n,o=e.componentClass,a=e.className,i=e.pullRight,s=e.pullLeft,l=N()(e,["componentClass","className","pullRight","pullLeft"]);return S.a.createElement(o,k()({},l,{className:M()(a,F(r,u),i&&F(r,"right"),s&&F(r,"left"))}))}return n.displayName=t,n.propTypes={componentClass:Te.a,pullRight:m.a.bool,pullLeft:m.a.bool},n.defaultProps={componentClass:e,pullRight:!1,pullLeft:!1},n.contextTypes={$bs_navbar:m.a.shape({bsClass:m.a.string})},n}Pi.Brand=ci,Pi.Header=xi,Pi.Toggle=ki,Pi.Collapse=mi,Pi.Form=Di("div","form","NavbarForm"),Pi.Text=Di("p","text","NavbarText"),Pi.Link=Di("a","link","NavbarLink");var Ii,Ai=U([I,R],I,Pi),ji=k()({},Hn.propTypes,{title:m.a.node.isRequired,noCaret:m.a.bool,active:m.a.bool,activeKey:m.a.any,activeHref:m.a.string,children:m.a.node}),Ri=(Ii=S.a.Component,p()(Li,Ii),Li.prototype.isActive=function(e,t,n){var r=e.props,o=this;return!!(r.active||null!=t&&r.eventKey===t||n&&r.href===n)||!!G.some(r.children,function(e){return o.isActive(e,t,n)})||r.active},Li.prototype.render=function(){var t=this,e=this.props,n=e.title,r=e.activeKey,o=e.activeHref,a=e.className,i=e.style,s=e.children,l=N()(e,["title","activeKey","activeHref","className","style","children"]),u=this.isActive(this,r,o);delete l.active,delete l.eventKey;var c=Kn(l,Hn.ControlledComponent),p=c[0],f=c[1];return S.a.createElement(Hn,k()({},p,{componentClass:"li",className:M()(a,{active:u}),style:i}),S.a.createElement(Hn.Toggle,k()({},f,{useAnchor:!0}),n),S.a.createElement(Hn.Menu,null,G.map(s,function(e){return S.a.cloneElement(e,{active:t.isActive(e,r,o)})})))},Li);function Li(){return l()(this,Li),u()(this,Ii.apply(this,arguments))}Ri.propTypes=ji;var Fi,Wi=Ri,Ui={active:m.a.bool,disabled:m.a.bool,role:m.a.string,href:m.a.string,onClick:m.a.func,onSelect:m.a.func,eventKey:m.a.any},zi=(Fi=S.a.Component,p()(Bi,Fi),Bi.prototype.handleClick=function(e){this.props.disabled?e.preventDefault():this.props.onSelect&&this.props.onSelect(this.props.eventKey,e)},Bi.prototype.render=function(){var e=this.props,t=e.active,n=e.disabled,r=e.onClick,o=e.className,a=e.style,i=N()(e,["active","disabled","onClick","className","style"]);return delete i.onSelect,delete i.eventKey,delete i.activeKey,delete i.activeHref,i.role?"tab"===i.role&&(i["aria-selected"]=t):"#"===i.href&&(i.role="button"),S.a.createElement("li",{role:"presentation",className:M()(o,{active:t,disabled:n}),style:a},S.a.createElement(je,k()({},i,{disabled:n,onClick:Se(r,this.handleClick)})))},Bi);function Bi(e,t){l()(this,Bi);var n=u()(this,Fi.call(this,e,t));return n.handleClick=n.handleClick.bind(n),n}zi.propTypes=Ui,zi.defaultProps={active:!1,disabled:!1};var Hi,Ki=zi,$i=n(119),Yi=n.n($i),Vi=k()({},Yi.a.propTypes,{show:m.a.bool,rootClose:m.a.bool,onHide:m.a.func,animation:m.a.oneOfType([m.a.bool,Te.a]),onEnter:m.a.func,onEntering:m.a.func,onEntered:m.a.func,onExit:m.a.func,onExiting:m.a.func,onExited:m.a.func,placement:m.a.oneOf(["top","right","bottom","left"])}),qi={animation:rr,rootClose:!1,show:!1,placement:"right"},Gi=(Hi=S.a.Component,p()(Xi,Hi),Xi.prototype.render=function(){var e=this.props,t=e.animation,n=e.children,r=N()(e,["animation","children"]),o=!0===t?rr:t||null,a=void 0;return a=o?n:Object(T.cloneElement)(n,{className:M()(n.props.className,"in")}),S.a.createElement(Yi.a,k()({},r,{transition:o}),a)},Xi);function Xi(){return l()(this,Xi),u()(this,Hi.apply(this,arguments))}Gi.propTypes=Vi,Gi.defaultProps=qi;var Ji=Gi;function Zi(e,t){return Array.isArray(t)?0<=t.indexOf(e):e===t}var Qi,es=m.a.oneOf(["click","hover","focus"]),ts=k()({},Ji.propTypes,{trigger:m.a.oneOfType([es,m.a.arrayOf(es)]),delay:m.a.number,delayShow:m.a.number,delayHide:m.a.number,defaultOverlayShown:m.a.bool,overlay:m.a.node.isRequired,onBlur:m.a.func,onClick:m.a.func,onFocus:m.a.func,onMouseOut:m.a.func,onMouseOver:m.a.func,target:m.a.oneOf([null]),onHide:m.a.oneOf([null]),show:m.a.oneOf([null])}),ns=(Qi=S.a.Component,p()(rs,Qi),rs.prototype.componentDidMount=function(){this._mountNode=document.createElement("div"),this.renderOverlay()},rs.prototype.componentDidUpdate=function(){this.renderOverlay()},rs.prototype.componentWillUnmount=function(){dt.a.unmountComponentAtNode(this._mountNode),this._mountNode=null,clearTimeout(this._hoverShowDelay),clearTimeout(this._hoverHideDelay)},rs.prototype.handleDelayedHide=function(){var e=this;if(null!=this._hoverShowDelay)return clearTimeout(this._hoverShowDelay),void(this._hoverShowDelay=null);if(this.state.show&&null==this._hoverHideDelay){var t=null!=this.props.delayHide?this.props.delayHide:this.props.delay;t?this._hoverHideDelay=setTimeout(function(){e._hoverHideDelay=null,e.hide()},t):this.hide()}},rs.prototype.handleDelayedShow=function(){var e=this;if(null!=this._hoverHideDelay)return clearTimeout(this._hoverHideDelay),void(this._hoverHideDelay=null);if(!this.state.show&&null==this._hoverShowDelay){var t=null!=this.props.delayShow?this.props.delayShow:this.props.delay;t?this._hoverShowDelay=setTimeout(function(){e._hoverShowDelay=null,e.show()},t):this.show()}},rs.prototype.handleHide=function(){this.hide()},rs.prototype.handleMouseOverOut=function(e,t,n){var r=t.currentTarget,o=t.relatedTarget||t.nativeEvent[n];o&&o===r||yn()(r,o)||e(t)},rs.prototype.handleToggle=function(){this.state.show?this.hide():this.show()},rs.prototype.hide=function(){this.setState({show:!1})},rs.prototype.makeOverlay=function(e,t){return S.a.createElement(Ji,k()({},t,{show:this.state.show,onHide:this.handleHide,target:this}),e)},rs.prototype.show=function(){this.setState({show:!0})},rs.prototype.renderOverlay=function(){dt.a.unstable_renderSubtreeIntoContainer(this,this._overlay,this._mountNode)},rs.prototype.render=function(){var e=this.props,t=e.trigger,n=e.overlay,r=e.children,o=e.onBlur,a=e.onClick,i=e.onFocus,s=e.onMouseOut,l=e.onMouseOver,u=N()(e,["trigger","overlay","children","onBlur","onClick","onFocus","onMouseOut","onMouseOver"]);delete u.delay,delete u.delayShow,delete u.delayHide,delete u.defaultOverlayShown;var c=S.a.Children.only(r),p=c.props,f={};return this.state.show&&(f["aria-describedby"]=n.props.id),f.onClick=Se(p.onClick,a),Zi("click",t)&&(f.onClick=Se(f.onClick,this.handleToggle)),Zi("hover",t)&&(f.onMouseOver=Se(p.onMouseOver,l,this.handleMouseOver),f.onMouseOut=Se(p.onMouseOut,s,this.handleMouseOut)),Zi("focus",t)&&(f.onFocus=Se(p.onFocus,i,this.handleDelayedShow),f.onBlur=Se(p.onBlur,o,this.handleDelayedHide)),this._overlay=this.makeOverlay(n,u),Object(T.cloneElement)(c,f)},rs);function rs(e,t){l()(this,rs);var n=u()(this,Qi.call(this,e,t));return n.handleToggle=n.handleToggle.bind(n),n.handleDelayedShow=n.handleDelayedShow.bind(n),n.handleDelayedHide=n.handleDelayedHide.bind(n),n.handleHide=n.handleHide.bind(n),n.handleMouseOver=function(e){return n.handleMouseOverOut(n.handleDelayedShow,e,"fromElement")},n.handleMouseOut=function(e){return n.handleMouseOverOut(n.handleDelayedHide,e,"toElement")},n._mountNode=null,n.state={show:e.defaultOverlayShown},n}ns.propTypes=ts,ns.defaultProps={defaultOverlayShown:!1,trigger:["hover","focus"]};var os,as=ns,is=(os=S.a.Component,p()(ss,os),ss.prototype.render=function(){var e=this.props,t=e.className,n=e.children,r=$(N()(e,["className","children"])),o=r[0],a=r[1],i=B(o);return S.a.createElement("div",k()({},a,{className:M()(t,i)}),S.a.createElement("h1",null,n))},ss);function ss(){return l()(this,ss),u()(this,os.apply(this,arguments))}var ls,us=W("page-header",is),cs={disabled:m.a.bool,previous:m.a.bool,next:m.a.bool,onClick:m.a.func,onSelect:m.a.func,eventKey:m.a.any},ps=(ls=S.a.Component,p()(fs,ls),fs.prototype.handleSelect=function(e){var t=this.props,n=t.disabled,r=t.onSelect,o=t.eventKey;n?e.preventDefault():r&&r(o,e)},fs.prototype.render=function(){var e=this.props,t=e.disabled,n=e.previous,r=e.next,o=e.onClick,a=e.className,i=e.style,s=N()(e,["disabled","previous","next","onClick","className","style"]);return delete s.onSelect,delete s.eventKey,S.a.createElement("li",{className:M()(a,{disabled:t,previous:n,next:r}),style:i},S.a.createElement(je,k()({},s,{disabled:t,onClick:Se(o,this.handleSelect)})))},fs);function fs(e,t){l()(this,fs);var n=u()(this,ls.call(this,e,t));return n.handleSelect=n.handleSelect.bind(n),n}ps.propTypes=cs,ps.defaultProps={disabled:!1,previous:!1,next:!1};var ds=ps,hs=n(93),ms=n.n(hs),vs={};function ys(e,t,n){var r=void 0;"object"===(void 0===e?"undefined":ms()(e))?r=e.message:(r=e+" is deprecated. Use "+t+" instead.",n&&(r+="\nYou can read more about it at "+n)),vs[r]||(vs[r]=!0)}ys.wrapper=function(e){for(var t=arguments.length,o=Array(1<t?t-1:0),n=1;n<t;n++)o[n-1]=arguments[n];return a=e,p()(r,a),r.prototype.componentWillMount=function(){if(ys.apply(void 0,o),a.prototype.componentWillMount){for(var e,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=a.prototype.componentWillMount).call.apply(e,[this].concat(n))}},r;function r(){return l()(this,r),u()(this,a.apply(this,arguments))}var a};var gs,bs=ys.wrapper(ds,"`<PageItem>`","`<Pager.Item>`"),xs={onSelect:m.a.func},_s=(gs=S.a.Component,p()(Es,gs),Es.prototype.render=function(){var e=this.props,t=e.onSelect,n=e.className,r=e.children,o=$(N()(e,["onSelect","className","children"])),a=o[0],i=o[1],s=B(a);return S.a.createElement("ul",k()({},i,{className:M()(n,s)}),G.map(r,function(e){return Object(T.cloneElement)(e,{onSelect:Se(e.props.onSelect,t)})}))},Es);function Es(){return l()(this,Es),u()(this,gs.apply(this,arguments))}_s.propTypes=xs,_s.Item=ds;var Cs=W("pager",_s),ws={eventKey:m.a.any,className:m.a.string,onSelect:m.a.func,disabled:m.a.bool,active:m.a.bool,activeLabel:m.a.string.isRequired};function Os(e){var t=e.active,n=e.disabled,r=e.className,o=e.style,a=e.activeLabel,i=e.children,s=N()(e,["active","disabled","className","style","activeLabel","children"]),l=t||n?"span":je;return S.a.createElement("li",{style:o,className:M()(r,{active:t,disabled:n})},S.a.createElement(l,k()({disabled:n},s),i,t&&S.a.createElement("span",{className:"sr-only"},a)))}function ks(e,i,t){var n,r,o,s=2<arguments.length&&void 0!==t?t:e;return o=S.a.Component,p()(a,o),a.prototype.render=function(){var e=this.props,t=e.disabled,n=e.children,r=e.className,o=N()(e,["disabled","children","className"]),a=t?"span":je;return S.a.createElement("li",k()({"aria-label":s,className:M()(r,{disabled:t})},o),S.a.createElement(a,null,n||i))},r=n=a,n.displayName=e,n.propTypes={disabled:m.a.bool},r;function a(){return l()(this,a),u()(this,o.apply(this,arguments))}}Os.propTypes=ws,Os.defaultProps={active:!1,disabled:!1,activeLabel:"(current)"};var Ts,Ss=ks("First","«"),Ns=ks("Prev","‹"),Ms=ks("Ellipsis","…","More"),Ps=ks("Next","›"),Ds=ks("Last","»"),Is=(Ts=S.a.Component,p()(As,Ts),As.prototype.render=function(){var e=this.props,t=e.className,n=e.children,r=$(N()(e,["className","children"])),o=r[0],a=r[1],i=B(o);return S.a.createElement("ul",k()({},a,{className:M()(t,i)}),n)},As);function As(){return l()(this,As),u()(this,Ts.apply(this,arguments))}W("pagination",Is),Is.First=Ss,Is.Prev=Ns,Is.Ellipsis=Ms,Is.Item=Os,Is.Next=Ps,Is.Last=Ds;var js,Rs=Is,Ls=n(114),Fs=n.n(Ls),Ws={onEnter:m.a.func,onEntering:m.a.func,onEntered:m.a.func,onExit:m.a.func,onExiting:m.a.func,onExited:m.a.func},Us={$bs_panel:m.a.shape({headingId:m.a.string,bodyId:m.a.string,bsClass:m.a.string,expanded:m.a.bool})},zs=(js=S.a.Component,p()(Bs,js),Bs.prototype.render=function(){var e=this.props.children,t=this.context.$bs_panel||{},n=t.headingId,r=t.bodyId,o=t.bsClass,a=t.expanded,i=$(this.props),s=i[0],l=i[1];return s.bsClass=o||s.bsClass,n&&r&&(l.id=r,l.role=l.role||"tabpanel",l["aria-labelledby"]=n),S.a.createElement(dn,k()({in:a},l),S.a.createElement("div",{className:F(s,"collapse")},e))},Bs);function Bs(){return l()(this,Bs),u()(this,js.apply(this,arguments))}zs.propTypes=Ws,zs.contextTypes=Us;var Hs,Ks=W("panel",zs),$s={collapsible:m.a.bool.isRequired},Ys={$bs_panel:m.a.shape({bsClass:m.a.string})},Vs=(Hs=S.a.Component,p()(qs,Hs),qs.prototype.render=function(){var e=this.props,t=e.children,n=e.className,r=e.collapsible,o=(this.context.$bs_panel||{}).bsClass,a=Y(this.props,["collapsible"]),i=a[0],s=a[1];i.bsClass=o||i.bsClass;var l=S.a.createElement("div",k()({},s,{className:M()(n,F(i,"body"))}),t);return r&&(l=S.a.createElement(Ks,null,l)),l},qs);function qs(){return l()(this,qs),u()(this,Hs.apply(this,arguments))}Vs.propTypes=$s,Vs.defaultProps={collapsible:!1},Vs.contextTypes=Ys;var Gs,Xs=W("panel",Vs),Js=n(73),Zs=n.n(Js),Qs={componentClass:Zs.a},el={$bs_panel:m.a.shape({headingId:m.a.string,bsClass:m.a.string})},tl=(Gs=S.a.Component,p()(nl,Gs),nl.prototype.render=function(){var e=this.props,t=e.children,n=e.className,r=e.componentClass,o=N()(e,["children","className","componentClass"]),a=this.context.$bs_panel||{},i=a.headingId,s=a.bsClass,l=$(o),u=l[0],c=l[1];return u.bsClass=s||u.bsClass,i&&(c.role=c.role||"tab",c.id=i),S.a.createElement(r,k()({},c,{className:M()(n,F(u,"heading"))}),t)},nl);function nl(){return l()(this,nl),u()(this,Gs.apply(this,arguments))}tl.propTypes=Qs,tl.defaultProps={componentClass:"div"},tl.contextTypes=el;var rl,ol=W("panel",tl),al={onClick:m.a.func,componentClass:Zs.a},il={componentClass:je},sl={$bs_panel:m.a.shape({bodyId:m.a.string,onToggle:m.a.func,expanded:m.a.bool})},ll=(rl=S.a.Component,p()(ul,rl),ul.prototype.handleToggle=function(e){var t=(this.context.$bs_panel||{}).onToggle;t&&t(e)},ul.prototype.render=function(){var e=this.props,t=e.onClick,n=e.className,r=e.componentClass,o=N()(e,["onClick","className","componentClass"]),a=this.context.$bs_panel||{},i=a.expanded,s=a.bodyId,l=r;return o.onClick=Se(t,this.handleToggle),o["aria-expanded"]=i,o.className=M()(n,!i&&"collapsed"),s&&(o["aria-controls"]=s),S.a.createElement(l,o)},ul);function ul(){l()(this,ul);for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=u()(this,rl.call.apply(rl,[this].concat(t)));return r.handleToggle=r.handleToggle.bind(r),r}ll.propTypes=al,ll.defaultProps=il,ll.contextTypes=sl;var cl,pl=ll,fl={componentClass:Zs.a,toggle:m.a.bool},dl={$bs_panel:m.a.shape({bsClass:m.a.string})},hl=(cl=S.a.Component,p()(ml,cl),ml.prototype.render=function(){var e=this.props,t=e.children,n=e.className,r=e.toggle,o=e.componentClass,a=N()(e,["children","className","toggle","componentClass"]),i=(this.context.$bs_panel||{}).bsClass,s=$(a),l=s[0],u=s[1];return l.bsClass=i||l.bsClass,r&&(t=S.a.createElement(pl,null,t)),S.a.createElement(o,k()({},u,{className:M()(n,F(l,"title"))}),t)},ml);function ml(){return l()(this,ml),u()(this,cl.apply(this,arguments))}hl.propTypes=fl,hl.defaultProps={componentClass:"div"},hl.contextTypes=dl;var vl,yl=W("panel",hl),gl={$bs_panel:m.a.shape({bsClass:m.a.string})},bl=(vl=S.a.Component,p()(xl,vl),xl.prototype.render=function(){var e=this.props,t=e.children,n=e.className,r=(this.context.$bs_panel||{}).bsClass,o=$(this.props),a=o[0],i=o[1];return a.bsClass=r||a.bsClass,S.a.createElement("div",k()({},i,{className:M()(n,F(a,"footer"))}),t)},xl);function xl(){return l()(this,xl),u()(this,vl.apply(this,arguments))}bl.contextTypes=gl;function _l(e,t){return e?e+"--"+t:null}var El,Cl=W("panel",bl),wl=Object.prototype.hasOwnProperty,Ol={expanded:m.a.bool,onToggle:m.a.func,eventKey:m.a.any,id:m.a.string},kl={$bs_panelGroup:m.a.shape({getId:m.a.func,activeKey:m.a.any,onToggle:m.a.func})},Tl={$bs_panel:m.a.shape({headingId:m.a.string,bodyId:m.a.string,bsClass:m.a.string,onToggle:m.a.func,expanded:m.a.bool})},Sl=(El=S.a.Component,p()(Nl,El),Nl.prototype.getChildContext=function(){var e=this.props,t=e.eventKey,n=e.id,r=null==t?n:t,o=void 0;if(null!==r){var a=this.context.$bs_panelGroup,i=a&&a.getId||_l;o={headingId:i(r,"heading"),bodyId:i(r,"body")}}return{$bs_panel:k()({},o,{bsClass:this.props.bsClass,expanded:this.getExpanded(),onToggle:this.handleToggle})}},Nl.prototype.getExpanded=function(){var e=this.context.$bs_panelGroup;return e&&wl.call(e,"activeKey")?e.activeKey===this.props.eventKey:!!this.props.expanded},Nl.prototype.render=function(){var e=this.props,t=e.className,n=e.children,r=Y(this.props,["onToggle","eventKey","expanded"]),o=r[0],a=r[1];return S.a.createElement("div",k()({},a,{className:M()(t,B(o))}),n)},Nl);function Nl(){var e,r,t;l()(this,Nl);for(var n=arguments.length,o=Array(n),a=0;a<n;a++)o[a]=arguments[a];return(e=r=u()(this,El.call.apply(El,[this].concat(o)))).handleToggle=function(e){var t=r.context.$bs_panelGroup,n=!r.getExpanded();t&&t.onToggle?t.onToggle(r.props.eventKey,n,e):r.props.onToggle(n,e)},t=e,u()(r,t)}Sl.propTypes=Ol,Sl.contextTypes=kl,Sl.childContextTypes=Tl;var Ml=y()(W("panel",U([].concat(pe()(D),[I,A]),I,Sl)),{expanded:"onToggle"});Fs()(Ml,{Heading:ol,Title:yl,Body:Xs,Footer:Cl,Toggle:pl,Collapse:Ks});var Pl,Dl=Ml,Il={id:_n()(m.a.oneOfType([m.a.string,m.a.number])),placement:m.a.oneOf(["top","right","bottom","left"]),positionTop:m.a.oneOfType([m.a.number,m.a.string]),positionLeft:m.a.oneOfType([m.a.number,m.a.string]),arrowOffsetTop:m.a.oneOfType([m.a.number,m.a.string]),arrowOffsetLeft:m.a.oneOfType([m.a.number,m.a.string]),title:m.a.node},Al=(Pl=S.a.Component,p()(jl,Pl),jl.prototype.render=function(){var e,t=this.props,n=t.placement,r=t.positionTop,o=t.positionLeft,a=t.arrowOffsetTop,i=t.arrowOffsetLeft,s=t.title,l=t.className,u=t.style,c=t.children,p=$(N()(t,["placement","positionTop","positionLeft","arrowOffsetTop","arrowOffsetLeft","title","className","style","children"])),f=p[0],d=p[1],h=k()({},B(f),((e={})[n]=!0,e)),m=k()({display:"block",top:r,left:o},u),v={top:a,left:i};return S.a.createElement("div",k()({},d,{role:"tooltip",className:M()(l,h),style:m}),S.a.createElement("div",{className:"arrow",style:v}),s&&S.a.createElement("h3",{className:F(f,"title")},s),S.a.createElement("div",{className:F(f,"content")},c))},jl);function jl(){return l()(this,jl),u()(this,Pl.apply(this,arguments))}Al.propTypes=Il,Al.defaultProps={placement:"right"};var Rl=W("popover",Al);var Ll={min:m.a.number,now:m.a.number,max:m.a.number,label:m.a.node,srOnly:m.a.bool,striped:m.a.bool,active:m.a.bool,children:function(e,t,n){var r=e[t];if(!r)return null;var o=null;return S.a.Children.forEach(r,function(e){if(!o&&e.type!==Wl){var t=S.a.isValidElement(e)?e.type.displayName||e.type.name||e.type:e;o=new Error("Children of "+n+" can contain only ProgressBar components. Found "+t+".")}}),o},isChild:m.a.bool};var Fl,Wl=(Fl=S.a.Component,p()(Ul,Fl),Ul.prototype.renderProgressBar=function(e){var t,n=e.min,r=e.now,o=e.max,a=e.label,i=e.srOnly,s=e.striped,l=e.active,u=e.className,c=e.style,p=$(N()(e,["min","now","max","label","srOnly","striped","active","className","style"])),f=p[0],d=p[1],h=k()({},B(f),((t={active:l})[F(f,"striped")]=l||s,t));return S.a.createElement("div",k()({},d,{role:"progressbar",className:M()(u,h),style:k()({width:function(e,t,n){var r=(e-t)/(n-t)*100;return Math.round(1e3*r)/1e3}(r,n,o)+"%"},c),"aria-valuenow":r,"aria-valuemin":n,"aria-valuemax":o}),i?S.a.createElement("span",{className:"sr-only"},a):a)},Ul.prototype.render=function(){var e=this.props,t=e.isChild,n=N()(e,["isChild"]);if(t)return this.renderProgressBar(n);var r=n.min,o=n.now,a=n.max,i=n.label,s=n.srOnly,l=n.striped,u=n.active,c=n.bsClass,p=n.bsStyle,f=n.className,d=n.children,h=N()(n,["min","now","max","label","srOnly","striped","active","bsClass","bsStyle","className","children"]);return S.a.createElement("div",k()({},h,{className:M()(f,"progress")}),d?G.map(d,function(e){return Object(T.cloneElement)(e,{isChild:!0})}):this.renderProgressBar({min:r,now:o,max:a,label:i,srOnly:s,striped:l,active:u,bsClass:c,bsStyle:p}))},Ul);function Ul(){return l()(this,Ul),u()(this,Fl.apply(this,arguments))}Wl.propTypes=Ll,Wl.defaultProps={min:0,max:100,active:!1,isChild:!1,srOnly:!1,striped:!1};var zl,Bl=W("progress-bar",U(pe()(D),Wl)),Hl={inline:m.a.bool,disabled:m.a.bool,title:m.a.string,validationState:m.a.oneOf(["success","warning","error",null]),inputRef:m.a.func},Kl=(zl=S.a.Component,p()($l,zl),$l.prototype.render=function(){var e=this.props,t=e.inline,n=e.disabled,r=e.validationState,o=e.inputRef,a=e.className,i=e.style,s=e.title,l=e.children,u=$(N()(e,["inline","disabled","validationState","inputRef","className","style","title","children"])),c=u[0],p=u[1],f=S.a.createElement("input",k()({},p,{ref:o,type:"radio",disabled:n}));if(t){var d,h=((d={})[F(c,"inline")]=!0,d.disabled=n,d);return S.a.createElement("label",{className:M()(a,h),style:i,title:s},f,l)}var m=k()({},B(c),{disabled:n});return r&&(m["has-"+r]=!0),S.a.createElement("div",{className:M()(a,m),style:i},S.a.createElement("label",{title:s},f,l))},$l);function $l(){return l()(this,$l),u()(this,zl.apply(this,arguments))}Kl.propTypes=Hl,Kl.defaultProps={inline:!1,disabled:!1,title:""};var Yl,Vl=W("radio",Kl),ql={children:m.a.element.isRequired,a16by9:m.a.bool,a4by3:m.a.bool},Gl=(Yl=S.a.Component,p()(Xl,Yl),Xl.prototype.render=function(){var e,t=this.props,n=t.a16by9,r=t.a4by3,o=t.className,a=t.children,i=$(N()(t,["a16by9","a4by3","className","children"])),s=i[0],l=i[1],u=k()({},B(s),((e={})[F(s,"16by9")]=n,e[F(s,"4by3")]=r,e));return S.a.createElement("div",{className:M()(u)},Object(T.cloneElement)(a,k()({},l,{className:M()(o,F(s,"item"))})))},Xl);function Xl(){return l()(this,Xl),u()(this,Yl.apply(this,arguments))}Gl.propTypes=ql,Gl.defaultProps={a16by9:!1,a4by3:!1};var Jl,Zl=W("embed-responsive",Gl),Ql={componentClass:Te.a},eu=(Jl=S.a.Component,p()(tu,Jl),tu.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=$(N()(e,["componentClass","className"])),o=r[0],a=r[1],i=B(o);return S.a.createElement(t,k()({},a,{className:M()(n,i)}))},tu);function tu(){return l()(this,tu),u()(this,Jl.apply(this,arguments))}eu.propTypes=Ql,eu.defaultProps={componentClass:"div"};var nu,ru=W("row",eu),ou=(nu=S.a.Component,p()(au,nu),au.prototype.render=function(){return S.a.createElement(jn,k()({},this.props,{useAnchor:!1,noCaret:!1}))},au);function au(){return l()(this,au),u()(this,nu.apply(this,arguments))}ou.defaultProps=jn.defaultProps;var iu,su=ou,lu=k()({},Hn.propTypes,{bsStyle:m.a.string,bsSize:m.a.string,href:m.a.string,onClick:m.a.func,title:m.a.node.isRequired,toggleLabel:m.a.string,children:m.a.node}),uu=(iu=S.a.Component,p()(cu,iu),cu.prototype.render=function(){var e=this.props,t=e.bsSize,n=e.bsStyle,r=e.title,o=e.toggleLabel,a=e.children,i=N()(e,["bsSize","bsStyle","title","toggleLabel","children"]),s=Kn(i,Hn.ControlledComponent),l=s[0],u=s[1];return S.a.createElement(Hn,k()({},l,{bsSize:t,bsStyle:n}),S.a.createElement(Ge,k()({},u,{disabled:i.disabled,bsSize:t,bsStyle:n}),r),S.a.createElement(su,{"aria-label":o||r,bsSize:t,bsStyle:n}),S.a.createElement(Hn.Menu,null,a))},cu);function cu(){return l()(this,cu),u()(this,iu.apply(this,arguments))}uu.propTypes=lu,uu.Toggle=su;var pu,fu=uu,du=m.a.oneOfType([m.a.string,m.a.number]),hu={id:function(e){var t=null;if(!e.generateChildId){for(var n=arguments.length,r=Array(1<n?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];(t=du.apply(void 0,[e].concat(r)))||e.id||(t=new Error("In order to properly initialize Tabs in a way that is accessible to assistive technologies (such as screen readers) an `id` or a `generateChildId` prop to TabContainer is required"))}return t},generateChildId:m.a.func,onSelect:m.a.func,activeKey:m.a.any},mu={$bs_tabContainer:m.a.shape({activeKey:m.a.any,onSelect:m.a.func.isRequired,getTabId:m.a.func.isRequired,getPaneId:m.a.func.isRequired})},vu=(pu=S.a.Component,p()(yu,pu),yu.prototype.getChildContext=function(){var e=this.props,t=e.activeKey,n=e.onSelect,r=e.generateChildId,o=e.id,a=r||function(e,t){return o?o+"-"+t+"-"+e:null};return{$bs_tabContainer:{activeKey:t,onSelect:n,getTabId:function(e){return a(e,"tab")},getPaneId:function(e){return a(e,"pane")}}}},yu.prototype.render=function(){var e=this.props,t=e.children,n=N()(e,["children"]);return delete n.generateChildId,delete n.onSelect,delete n.activeKey,S.a.cloneElement(S.a.Children.only(t),n)},yu);function yu(){return l()(this,yu),u()(this,pu.apply(this,arguments))}vu.propTypes=hu,vu.childContextTypes=mu;var gu,bu=y()(vu,{activeKey:"onSelect"}),xu={componentClass:Te.a,animation:m.a.oneOfType([m.a.bool,Te.a]),mountOnEnter:m.a.bool,unmountOnExit:m.a.bool},_u={$bs_tabContainer:m.a.shape({activeKey:m.a.any})},Eu={$bs_tabContent:m.a.shape({bsClass:m.a.string,animation:m.a.oneOfType([m.a.bool,Te.a]),activeKey:m.a.any,mountOnEnter:m.a.bool,unmountOnExit:m.a.bool,onPaneEnter:m.a.func.isRequired,onPaneExited:m.a.func.isRequired,exiting:m.a.bool.isRequired})},Cu=(gu=S.a.Component,p()(wu,gu),wu.prototype.getChildContext=function(){var e=this.props,t=e.bsClass,n=e.animation,r=e.mountOnEnter,o=e.unmountOnExit,a=this.state.activeKey,i=this.getContainerActiveKey(),s=null!=a&&a!==i;return{$bs_tabContent:{bsClass:t,animation:n,activeKey:null!=a?a:i,mountOnEnter:r,unmountOnExit:o,onPaneEnter:this.handlePaneEnter,onPaneExited:this.handlePaneExited,exiting:s}}},wu.prototype.componentWillReceiveProps=function(e){!e.animation&&this.state.activeChild&&this.setState({activeKey:null,activeChild:null})},wu.prototype.componentWillUnmount=function(){this.isUnmounted=!0},wu.prototype.getContainerActiveKey=function(){var e=this.context.$bs_tabContainer;return e&&e.activeKey},wu.prototype.handlePaneEnter=function(e,t){return!!this.props.animation&&t===this.getContainerActiveKey()&&(this.setState({activeKey:t,activeChild:e}),!0)},wu.prototype.handlePaneExited=function(t){this.isUnmounted||this.setState(function(e){return e.activeChild!==t?null:{activeKey:null,activeChild:null}})},wu.prototype.render=function(){var e=this.props,t=e.componentClass,n=e.className,r=Y(N()(e,["componentClass","className"]),["animation","mountOnEnter","unmountOnExit"]),o=r[0],a=r[1];return S.a.createElement(t,k()({},a,{className:M()(n,F(o,"content"))}))},wu);function wu(e,t){l()(this,wu);var n=u()(this,gu.call(this,e,t));return n.handlePaneEnter=n.handlePaneEnter.bind(n),n.handlePaneExited=n.handlePaneExited.bind(n),n.state={activeKey:null,activeChild:null},n}Cu.propTypes=xu,Cu.defaultProps={componentClass:"div",animation:!0,mountOnEnter:!1,unmountOnExit:!1},Cu.contextTypes=_u,Cu.childContextTypes=Eu;var Ou,ku=W("tab",Cu),Tu={eventKey:m.a.any,animation:m.a.oneOfType([m.a.bool,Te.a]),id:m.a.string,"aria-labelledby":m.a.string,bsClass:m.a.string,onEnter:m.a.func,onEntering:m.a.func,onEntered:m.a.func,onExit:m.a.func,onExiting:m.a.func,onExited:m.a.func,mountOnEnter:m.a.bool,unmountOnExit:m.a.bool},Su={$bs_tabContainer:m.a.shape({getTabId:m.a.func,getPaneId:m.a.func}),$bs_tabContent:m.a.shape({bsClass:m.a.string,animation:m.a.oneOfType([m.a.bool,Te.a]),activeKey:m.a.any,mountOnEnter:m.a.bool,unmountOnExit:m.a.bool,onPaneEnter:m.a.func.isRequired,onPaneExited:m.a.func.isRequired,exiting:m.a.bool.isRequired})},Nu={$bs_tabContainer:m.a.oneOf([null])},Mu=(Ou=S.a.Component,p()(Pu,Ou),Pu.prototype.getChildContext=function(){return{$bs_tabContainer:null}},Pu.prototype.componentDidMount=function(){this.shouldBeIn()&&this.handleEnter()},Pu.prototype.componentDidUpdate=function(){this.in?this.shouldBeIn()||this.handleExited():this.shouldBeIn()&&this.handleEnter()},Pu.prototype.componentWillUnmount=function(){this.in&&this.handleExited()},Pu.prototype.getAnimation=function(){if(null!=this.props.animation)return this.props.animation;var e=this.context.$bs_tabContent;return e&&e.animation},Pu.prototype.handleEnter=function(){var e=this.context.$bs_tabContent;e&&(this.in=e.onPaneEnter(this,this.props.eventKey))},Pu.prototype.handleExited=function(){var e=this.context.$bs_tabContent;e&&(e.onPaneExited(this),this.in=!1)},Pu.prototype.isActive=function(){var e=this.context.$bs_tabContent,t=e&&e.activeKey;return this.props.eventKey===t},Pu.prototype.shouldBeIn=function(){return this.getAnimation()&&this.isActive()},Pu.prototype.render=function(){var e=this.props,t=e.eventKey,n=e.className,r=e.onEnter,o=e.onEntering,a=e.onEntered,i=e.onExit,s=e.onExiting,l=e.onExited,u=e.mountOnEnter,c=e.unmountOnExit,p=N()(e,["eventKey","className","onEnter","onEntering","onEntered","onExit","onExiting","onExited","mountOnEnter","unmountOnExit"]),f=this.context,d=f.$bs_tabContent,h=f.$bs_tabContainer,m=Y(p,["animation"]),v=m[0],y=m[1],g=this.isActive(),b=this.getAnimation(),x=null!=u?u:d&&d.mountOnEnter,_=null!=c?c:d&&d.unmountOnExit;if(!g&&!b&&_)return null;var E=!0===b?rr:b||null;d&&(v.bsClass=F(d,"pane"));var C=k()({},B(v),{active:g});h&&(y.id=h.getPaneId(t),y["aria-labelledby"]=h.getTabId(t));var w=S.a.createElement("div",k()({},y,{role:"tabpanel","aria-hidden":!g,className:M()(n,C)}));if(E){var O=d&&d.exiting;return S.a.createElement(E,{in:g&&!O,onEnter:Se(this.handleEnter,r),onEntering:o,onEntered:a,onExit:i,onExiting:s,onExited:Se(this.handleExited,l),mountOnEnter:x,unmountOnExit:_},w)}return w},Pu);function Pu(e,t){l()(this,Pu);var n=u()(this,Ou.call(this,e,t));return n.handleEnter=n.handleEnter.bind(n),n.handleExited=n.handleExited.bind(n),n.in=!1,n}Mu.propTypes=Tu,Mu.contextTypes=Su,Mu.childContextTypes=Nu;var Du,Iu=W("tab-pane",Mu),Au=k()({},Iu.propTypes,{disabled:m.a.bool,title:m.a.node,tabClassName:m.a.string}),ju=(Du=S.a.Component,p()(Ru,Du),Ru.prototype.render=function(){var e=k()({},this.props);return delete e.title,delete e.disabled,delete e.tabClassName,S.a.createElement(Iu,e)},Ru);function Ru(){return l()(this,Ru),u()(this,Du.apply(this,arguments))}ju.propTypes=Au,ju.Container=bu,ju.Content=ku,ju.Pane=Iu;var Lu,Fu=ju,Wu={striped:m.a.bool,bordered:m.a.bool,condensed:m.a.bool,hover:m.a.bool,responsive:m.a.bool},Uu=(Lu=S.a.Component,p()(zu,Lu),zu.prototype.render=function(){var e,t=this.props,n=t.striped,r=t.bordered,o=t.condensed,a=t.hover,i=t.responsive,s=t.className,l=$(N()(t,["striped","bordered","condensed","hover","responsive","className"])),u=l[0],c=l[1],p=k()({},B(u),((e={})[F(u,"striped")]=n,e[F(u,"bordered")]=r,e[F(u,"condensed")]=o,e[F(u,"hover")]=a,e)),f=S.a.createElement("table",k()({},c,{className:M()(s,p)}));return i?S.a.createElement("div",{className:F(u,"responsive")},f):f},zu);function zu(){return l()(this,zu),u()(this,Lu.apply(this,arguments))}Uu.propTypes=Wu,Uu.defaultProps={bordered:!1,condensed:!1,hover:!1,responsive:!1,striped:!1};var Bu=W("table",Uu),Hu=bu.ControlledComponent,Ku={activeKey:m.a.any,bsStyle:m.a.oneOf(["tabs","pills"]),animation:m.a.bool,id:_n()(m.a.oneOfType([m.a.string,m.a.number])),onSelect:m.a.func,mountOnEnter:m.a.bool,unmountOnExit:m.a.bool};var $u,Yu=($u=S.a.Component,p()(Vu,$u),Vu.prototype.renderTab=function(e){var t=e.props,n=t.title,r=t.eventKey,o=t.disabled,a=t.tabClassName;return null==n?null:S.a.createElement(Ki,{eventKey:r,disabled:o,className:a},n)},Vu.prototype.render=function(){var e=this.props,t=e.id,n=e.onSelect,r=e.animation,o=e.mountOnEnter,a=e.unmountOnExit,i=e.bsClass,s=e.className,l=e.style,u=e.children,c=e.activeKey,p=void 0===c?function(e){var t=void 0;return G.forEach(e,function(e){null==t&&(t=e.props.eventKey)}),t}(u):c,f=N()(e,["id","onSelect","animation","mountOnEnter","unmountOnExit","bsClass","className","style","children","activeKey"]);return S.a.createElement(Hu,{id:t,activeKey:p,onSelect:n,className:s,style:l},S.a.createElement("div",null,S.a.createElement(ai,k()({},f,{role:"tablist"}),G.map(u,this.renderTab)),S.a.createElement(ku,{bsClass:i,animation:r,mountOnEnter:o,unmountOnExit:a},u)))},Vu);function Vu(){return l()(this,Vu),u()(this,$u.apply(this,arguments))}Yu.propTypes=Ku,Yu.defaultProps={bsStyle:"tabs",animation:!0,mountOnEnter:!1,unmountOnExit:!1},W("tab",Yu);var qu,Gu=y()(Yu,{activeKey:"onSelect"}),Xu={src:m.a.string,alt:m.a.string,href:m.a.string,onError:m.a.func,onLoad:m.a.func},Ju=(qu=S.a.Component,p()(Zu,qu),Zu.prototype.render=function(){var e=this.props,t=e.src,n=e.alt,r=e.onError,o=e.onLoad,a=e.className,i=e.children,s=$(N()(e,["src","alt","onError","onLoad","className","children"])),l=s[0],u=s[1],c=u.href?je:"div",p=B(l);return S.a.createElement(c,k()({},u,{className:M()(a,p)}),S.a.createElement("img",{src:t,alt:n,onError:r,onLoad:o}),i&&S.a.createElement("div",{className:"caption"},i))},Zu);function Zu(){return l()(this,Zu),u()(this,qu.apply(this,arguments))}Ju.propTypes=Xu;var Qu,ec=W("thumbnail",Ju),tc={type:m.a.oneOf(["checkbox","radio"]),name:m.a.string,checked:m.a.bool,disabled:m.a.bool,onChange:m.a.func,value:m.a.any.isRequired},nc=(Qu=S.a.Component,p()(rc,Qu),rc.prototype.render=function(){var e=this.props,t=e.children,n=e.name,r=e.checked,o=e.type,a=e.onChange,i=e.value,s=N()(e,["children","name","checked","type","onChange","value"]),l=s.disabled;return S.a.createElement(Ge,k()({},s,{active:!!r,componentClass:"label"}),S.a.createElement("input",{name:n,type:o,autoComplete:"off",value:i,checked:!!r,disabled:!!l,onChange:a}),t)},rc);function rc(){return l()(this,rc),u()(this,Qu.apply(this,arguments))}nc.propTypes=tc;var oc,ac=nc,ic={name:m.a.string,value:m.a.any,onChange:m.a.func,type:m.a.oneOf(["checkbox","radio"]).isRequired},sc=(oc=S.a.Component,p()(lc,oc),lc.prototype.getValues=function(){var e=this.props.value;return null==e?[]:[].concat(e)},lc.prototype.handleToggle=function(t){var e=this.props,n=e.type,r=e.onChange,o=this.getValues(),a=-1!==o.indexOf(t);"radio"!==n?r(a?o.filter(function(e){return e!==t}):[].concat(o,[t])):a||r(t)},lc.prototype.render=function(){var o=this,e=this.props,t=e.children,a=e.type,i=e.name,n=N()(e,["children","type","name"]),s=this.getValues();return"radio"!==a||i||_()(!1),delete n.onChange,delete n.value,S.a.createElement(nt,k()({},n,{"data-toggle":"buttons"}),G.map(t,function(e){var t=e.props,n=t.value,r=t.onChange;return S.a.cloneElement(e,{type:a,name:e.name||i,checked:-1!==s.indexOf(n),onChange:Se(r,function(){return o.handleToggle(n)})})}))},lc);function lc(){return l()(this,lc),u()(this,oc.apply(this,arguments))}sc.propTypes=ic,sc.defaultProps={type:"radio"};var uc=y()(sc,{value:"onChange"});uc.Button=ac;var cc,pc=uc,fc={id:_n()(m.a.oneOfType([m.a.string,m.a.number])),placement:m.a.oneOf(["top","right","bottom","left"]),positionTop:m.a.oneOfType([m.a.number,m.a.string]),positionLeft:m.a.oneOfType([m.a.number,m.a.string]),arrowOffsetTop:m.a.oneOfType([m.a.number,m.a.string]),arrowOffsetLeft:m.a.oneOfType([m.a.number,m.a.string])},dc=(cc=S.a.Component,p()(hc,cc),hc.prototype.render=function(){var e,t=this.props,n=t.placement,r=t.positionTop,o=t.positionLeft,a=t.arrowOffsetTop,i=t.arrowOffsetLeft,s=t.className,l=t.style,u=t.children,c=$(N()(t,["placement","positionTop","positionLeft","arrowOffsetTop","arrowOffsetLeft","className","style","children"])),p=c[0],f=c[1],d=k()({},B(p),((e={})[n]=!0,e)),h=k()({top:r,left:o},l),m={top:a,left:i};return S.a.createElement("div",k()({},f,{role:"tooltip",className:M()(s,d),style:h}),S.a.createElement("div",{className:F(p,"arrow"),style:m}),S.a.createElement("div",{className:F(p,"inner")},u))},hc);function hc(){return l()(this,hc),u()(this,cc.apply(this,arguments))}dc.propTypes=fc,dc.defaultProps={placement:"right"};var mc,vc=W("tooltip",dc),yc=(mc=S.a.Component,p()(gc,mc),gc.prototype.render=function(){var e=this.props,t=e.className,n=$(N()(e,["className"])),r=n[0],o=n[1],a=B(r);return S.a.createElement("div",k()({},o,{className:M()(t,a)}))},gc);function gc(){return l()(this,gc),u()(this,mc.apply(this,arguments))}var bc=W("well",z([E,C],yc));n.d(t,"Accordion",function(){return ue}),n.d(t,"Alert",function(){return _e}),n.d(t,"Badge",function(){return Oe}),n.d(t,"Breadcrumb",function(){return Ke}),n.d(t,"BreadcrumbItem",function(){return Ue}),n.d(t,"Button",function(){return Ge}),n.d(t,"ButtonGroup",function(){return nt}),n.d(t,"ButtonToolbar",function(){return it}),n.d(t,"Carousel",function(){return Pt}),n.d(t,"CarouselItem",function(){return xt}),n.d(t,"Checkbox",function(){return jt}),n.d(t,"Clearfix",function(){return Bt}),n.d(t,"CloseButton",function(){return ve}),n.d(t,"ControlLabel",function(){return qt}),n.d(t,"Col",function(){return Qt}),n.d(t,"Collapse",function(){return dn}),n.d(t,"Dropdown",function(){return Hn}),n.d(t,"DropdownButton",function(){return Jn}),n.d(t,"Fade",function(){return rr}),n.d(t,"Form",function(){return lr}),n.d(t,"FormControl",function(){return wr}),n.d(t,"FormGroup",function(){return Mr}),n.d(t,"Glyphicon",function(){return Ot}),n.d(t,"Grid",function(){return jr}),n.d(t,"HelpBlock",function(){return Wr}),n.d(t,"Image",function(){return Kr}),n.d(t,"InputGroup",function(){return no}),n.d(t,"Jumbotron",function(){return so}),n.d(t,"Label",function(){return po}),n.d(t,"ListGroup",function(){return Eo}),n.d(t,"ListGroupItem",function(){return vo}),n.d(t,"Media",function(){return ta}),n.d(t,"MenuItem",function(){return ia}),n.d(t,"Modal",function(){return Qa}),n.d(t,"ModalBody",function(){return Ca}),n.d(t,"ModalFooter",function(){return Ia}),n.d(t,"ModalHeader",function(){return Wa}),n.d(t,"ModalTitle",function(){return Ha}),n.d(t,"Nav",function(){return ai}),n.d(t,"Navbar",function(){return Ai}),n.d(t,"NavbarBrand",function(){return ci}),n.d(t,"NavDropdown",function(){return Wi}),n.d(t,"NavItem",function(){return Ki}),n.d(t,"Overlay",function(){return Ji}),n.d(t,"OverlayTrigger",function(){return as}),n.d(t,"PageHeader",function(){return us}),n.d(t,"PageItem",function(){return bs}),n.d(t,"Pager",function(){return Cs}),n.d(t,"Pagination",function(){return Rs}),n.d(t,"Panel",function(){return Dl}),n.d(t,"PanelGroup",function(){return ie}),n.d(t,"Popover",function(){return Rl}),n.d(t,"ProgressBar",function(){return Bl}),n.d(t,"Radio",function(){return Vl}),n.d(t,"ResponsiveEmbed",function(){return Zl}),n.d(t,"Row",function(){return ru}),n.d(t,"SafeAnchor",function(){return je}),n.d(t,"SplitButton",function(){return fu}),n.d(t,"Tab",function(){return Fu}),n.d(t,"TabContainer",function(){return bu}),n.d(t,"TabContent",function(){return ku}),n.d(t,"Table",function(){return Bu}),n.d(t,"TabPane",function(){return Iu}),n.d(t,"Tabs",function(){return Gu}),n.d(t,"Thumbnail",function(){return ec}),n.d(t,"ToggleButton",function(){return ac}),n.d(t,"ToggleButtonGroup",function(){return pc}),n.d(t,"Tooltip",function(){return vc}),n.d(t,"Well",function(){return bc}),n.d(t,"utils",function(){return o})},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=void 0;var o=r(n(203));t.end=o.default;var a=r(n(111));t.properties=a.default;var i={end:o.default,properties:a.default};t.default=i},function(e,t,n){e.exports={default:n(214),__esModule:!0}},,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var a=n(1),i=n(9),s=n(27),l=n(33),u=n(11),c=n(15),p=n(159),f=n(78),d=n(160);n(52);var h=n(40),m=n(139),v=n(139);n(62),n(77);var y,g=(y=a.Component,o(b,y),b.prototype.componentDidMount=function(){this.updateUrl()},b.prototype.render=function(){var t=this,e=window.innerHeight-60;return a.createElement("div",{className:"screen",style:{height:e,width:window.innerWidth,position:"absolute",top:"60px"}},a.createElement("div",{className:"vertical-menu"},a.createElement("div",{className:"form-group"},a.createElement("label",null,"Date: "),a.createElement(h,{closeOnSelect:!0,isValidDate:function(e){return e.isBefore(u())},value:u(this.state.date),timeFormat:!1,dateFormat:"MM/DD/YYYY",onChange:function(e){return t.setState({date:e.format("YYYY-MM-DD")},t.updateUrl)}})),a.createElement("div",{className:"form-group"},a.createElement("label",null,"Statistic: "),a.createElement(d.default,{value:this.state.stat,options:["Max","CP99","CP95","Avg","CP05","CP01","Min"],onChange:function(e){return t.setState({stat:e},t.updateUrl)}})),a.createElement("div",{className:"form-group"},a.createElement("div",{style:{float:"left"},ref:"loader",hidden:!0},a.createElement("div",{style:{border:"5px solid #f3f3f3",WebkitAnimation:"spin 1s linear infinite",animation:"spin 1s linear infinite",borderTop:"5px solid #555",borderRadius:"50%",width:"25px",height:"25px"}}),a.createElement("span",null,"Loading...")))),a.createElement("div",{className:"waveform-viewer",style:{width:window.innerWidth-250,float:"right",maxHeight:e,overflowY:"auto"}},a.createElement(f.default,{theadStyle:{position:"absolute",overflowY:"scroll",maxHeight:"50px"},tbodyStyle:{top:"50px",position:"absolute",overflowY:"scroll",maxHeight:e-60},cols:this.cols,data:this.state.data,sortField:this.state.sortField,ascending:this.state.ascending,onClick:this.handleTableClick.bind(this),onSort:this.handleTableSort.bind(this)})),a.createElement("div",{ref:"listModal",className:"static-modal",style:{display:"none"}},a.createElement(m.Modal.Dialog,null,a.createElement(m.Modal.Header,null,a.createElement("button",{type:"button",className:"close",onClick:function(){$(t.refs.listModal).hide()}},"×"),a.createElement(m.Modal.Title,null,this.state.listModalData.Name)),a.createElement("div",{className:"modal-body",style:{overflowY:"auto",maxHeight:e/2}},this.state.listModalData.Table),a.createElement(m.Modal.Footer,null,a.createElement(v.Button,{onClick:function(){$(t.refs.listModal).hide()}},"Close")))),a.createElement("div",{ref:"graphModal",className:"static-modal",style:{display:"none"}},a.createElement(m.Modal.Dialog,null,a.createElement(m.Modal.Header,null,a.createElement("button",{type:"button",className:"close",onClick:function(){$(t.refs.graphModal).hide()}},"×"),a.createElement(m.Modal.Title,null,a.createElement("span",{ref:"graphTitle"}))),a.createElement("div",{className:"modal-body"},a.createElement("div",{ref:"graph",style:{height:"250px",width:"500px"}})),a.createElement(m.Modal.Footer,null,a.createElement(v.Button,{onClick:function(){$(t.refs.graphModal).hide()}},"Close")))))},b.prototype.handleTableClick=function(t){var n=this;if("Name"==t.col){var e=Object.keys(t.row).map(function(e){return a.createElement("tr",{key:e},a.createElement("td",null,e),a.createElement("td",null,t.row[e]))}),r={Name:t.data,Table:a.createElement("table",{className:"table",style:{maxHeight:"350px",overflowY:"auto"}},a.createElement("tbody",null,e))};this.setState({listModalData:r},function(){return $(n.refs.listModal).show()})}else this.pqTrendingWebReportService.getChart(this.state.date,this.state.stat,t.row.Name,t.col).done(function(e){$.plot($(n.refs.graph),[e.map(function(e){return[u(e.Date),e.Value]})],n.options),$(n.refs.graphTitle).text(t.row.Name+" - "+t.col),$(n.refs.graphModal).show()})},b.prototype.handleTableSort=function(e){var t=e.ascending;e.col==this.state.sortField&&(t=!e.ascending),this.setState({ascending:t,sortField:e.col},this.updateUrl)},b.prototype.getData=function(){var t=this;$(this.refs.loader).show(),this.setState({data:null}),this.pqTrendingWebReportService.getData(this.state.date,this.state.stat,this.state.sortField,this.state.ascending).done(function(e){t.setState({data:e},function(){$(t.refs.loader).hide()})})},b.prototype.updateUrl=function(){var e=c.clone(this.state);delete e.data,delete e.listModalData,this.history.push("PQTrendingWebReport.cshtml?"+l.stringify(e,{encode:!1}))},b);function b(e){var r=y.call(this,e)||this;r.history=s.default(),r.pqTrendingWebReportService=new p.default;var t=l.parse(r.history.location.search);return r.state={date:null!=t.date?t.date:u().format("YYYY-MM-DD"),stat:null!=t.stat?t.stat:"Avg",data:[],sortField:null!=t.sortField?t.sortField:"Name",ascending:null==t.ascending||"true"==t.ascending,listModalData:!1},r.history.listen(function(e,t){var n=l.parse(r.history.location.search);r.setState({date:null!=n.date?n.date:u().format("YYYY-MM-DD"),stat:null!=n.stat?n.stat:"Avg",sortField:null!=n.sortField?n.sortField:"Name",ascending:null==n.ascending||"true"==n.ascending},r.getData)}),r.cols=[],r.cols.push({key:"Name",label:"Meter",headerStyle:{minWidth:"150px"},rowStyle:{minWidth:"150px"}}),c.each(pqMeasurements,function(e,t){r.cols.push({key:e.Name,label:e.Name,headerStyle:{minWidth:"200px"},rowStyle:{minWidth:"200px"}})}),r.options={legend:{show:!1},xaxis:{mode:"time",reserveSpace:!1},yaxis:{position:"left",tickLength:30}},r}t.PQTrendingWebReport=g,i.render(a.createElement(g,null),document.getElementById("bodyContainer"))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(11),r=(a.prototype.getData=function(e,t,n,r){return null!=this.response&&this.response.abort(),this.response=$.ajax({type:"GET",url:window.location.origin+"/api/PQTrendingWebReport/GetData?date="+o(e).format("YYYY-MM-DD")+"&stat="+t+"&sortField="+n+"&ascending="+r,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.response},a.prototype.getChart=function(e,t,n,r){return null!=this.response&&this.response.abort(),this.response=$.ajax({type:"GET",url:window.location.origin+"/api/PQTrendingWebReport/GetChart?date="+o(e).format("YYYY-MM-DD")+"&stat="+t+"&measurementID="+r+"&meterID="+n,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.response},a);function a(){}t.default=r},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var a,i=n(1),s=(a=i.Component,o(l,a),l.prototype.onChange=function(e){null!=this.props.onChange&&this.props.onChange(e.target.value)},l.prototype.render=function(){var e=this.props.options.map(function(e,t){return i.createElement("option",{key:e},e)});return i.createElement("select",{className:"form-control",defaultValue:this.props.value,onChange:this.onChange.bind(this)},e)},l);function l(e){return a.call(this,e)||this}t.default=s},function(e,t,n){n(162),e.exports=n(49).Object.assign},function(e,t,n){var r=n(55);r(r.S+r.F,"Object",{assign:n(164)})},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){"use strict";var f=n(57),d=n(83),h=n(106),m=n(84),v=n(89),y=n(124),o=Object.assign;e.exports=!o||n(81)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=o({},e)[n]||Object.keys(o({},t)).join("")!=r})?function(e,t){for(var n=v(e),r=arguments.length,o=1,a=h.f,i=m.f;o<r;)for(var s,l=y(arguments[o++]),u=a?d(l).concat(a(l)):d(l),c=u.length,p=0;p<c;)s=u[p++],f&&!i.call(l,s)||(n[s]=l[s]);return n}:o},function(e,t,n){var l=n(65),u=n(125),c=n(166);e.exports=function(s){return function(e,t,n){var r,o=l(e),a=u(o.length),i=c(n,a);if(s&&t!=t){for(;i<a;)if((r=o[i++])!=r)return!0}else for(;i<a;i++)if((s||i in o)&&o[i]===t)return s||i||0;return!s&&-1}}},function(e,t,n){var r=n(102),o=Math.max,a=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):a(e,t)}},function(e,t,n){e.exports={default:n(168),__esModule:!0}},function(e,t,n){n(126),n(174),e.exports=n(109).f("iterator")},function(e,t,n){var l=n(102),u=n(101);e.exports=function(s){return function(e,t){var n,r,o=String(u(e)),a=l(t),i=o.length;return a<0||i<=a?s?"":void 0:(n=o.charCodeAt(a))<55296||56319<n||a+1===i||(r=o.charCodeAt(a+1))<56320||57343<r?s?o.charAt(a):n:s?o.slice(a,a+2):r-56320+(n-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(107),o=n(82),a=n(108),i={};n(68)(i,n(50)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(i,{next:o(1,n)}),a(e,t+" Iterator")}},function(e,t,n){var i=n(63),s=n(69),l=n(83);e.exports=n(57)?Object.defineProperties:function(e,t){s(e);for(var n,r=l(t),o=r.length,a=0;a<o;)i.f(e,n=r[a++],t[n]);return e}},function(e,t,n){var r=n(56).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(64),o=n(89),a=n(103)("IE_PROTO"),i=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,a)?e[a]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?i:null}},function(e,t,n){n(175);for(var r=n(56),o=n(68),a=n(85),i=n(50)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),l=0;l<s.length;l++){var u=s[l],c=r[u],p=c&&c.prototype;p&&!p[i]&&o(p,i,u),a[u]=a.Array}},function(e,t,n){"use strict";var r=n(176),o=n(177),a=n(85),i=n(65);e.exports=n(127)(Array,"Array",function(e,t){this._t=i(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),a.Arguments=a.Array,r("keys"),r("values"),r("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){e.exports={default:n(179),__esModule:!0}},function(e,t,n){n(180),n(185),n(186),n(187),e.exports=n(49).Symbol},function(e,t,n){"use strict";function r(e){var t=V[e]=M(W[B]);return t._k=e,t}function o(e,t){w(e);for(var n,r=E(t=T(t)),o=0,a=r.length;o<a;)te(e,n=r[o++],t[n]);return e}function a(e){var t=$.call(this,e=S(e,!0));return!(this===G&&c(V,e)&&!c(q,e))&&(!(t||!c(this,e)||!c(V,e)||c(this,H)&&this[H][e])||t)}function i(e,t){if(e=T(e),t=S(t,!0),e!==G||!c(V,t)||c(q,t)){var n=R(e,t);return!n||!c(V,t)||c(e,H)&&e[H][t]||(n.enumerable=!0),n}}function s(e){for(var t,n=F(T(e)),r=[],o=0;n.length>o;)c(V,t=n[o++])||t==H||t==h||r.push(t);return r}function l(e){for(var t,n=e===G,r=F(n?q:T(e)),o=[],a=0;r.length>a;)!c(V,t=r[a++])||n&&!c(G,t)||o.push(V[t]);return o}var u=n(56),c=n(64),p=n(57),f=n(55),d=n(128),h=n(181).KEY,m=n(81),v=n(104),y=n(108),g=n(88),b=n(50),x=n(109),_=n(110),E=n(182),C=n(183),w=n(69),O=n(70),k=n(89),T=n(65),S=n(99),N=n(82),M=n(107),P=n(184),D=n(130),I=n(106),A=n(63),j=n(83),R=D.f,L=A.f,F=P.f,W=u.Symbol,U=u.JSON,z=U&&U.stringify,B="prototype",H=b("_hidden"),K=b("toPrimitive"),$={}.propertyIsEnumerable,Y=v("symbol-registry"),V=v("symbols"),q=v("op-symbols"),G=Object[B],X="function"==typeof W&&!!I.f,J=u.QObject,Z=!J||!J[B]||!J[B].findChild,Q=p&&m(function(){return 7!=M(L({},"a",{get:function(){return L(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=R(G,t);r&&delete G[t],L(e,t,n),r&&e!==G&&L(G,t,r)}:L,ee=X&&"symbol"==typeof W.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof W},te=function(e,t,n){return e===G&&te(q,t,n),w(e),t=S(t,!0),w(n),c(V,t)?(n.enumerable?(c(e,H)&&e[H][t]&&(e[H][t]=!1),n=M(n,{enumerable:N(0,!1)})):(c(e,H)||L(e,H,N(1,{})),e[H][t]=!0),Q(e,t,n)):L(e,t,n)};X||(d((W=function(e){if(this instanceof W)throw TypeError("Symbol is not a constructor!");var t=g(0<arguments.length?e:void 0),n=function(e){this===G&&n.call(q,e),c(this,H)&&c(this[H],t)&&(this[H][t]=!1),Q(this,t,N(1,e))};return p&&Z&&Q(G,t,{configurable:!0,set:n}),r(t)})[B],"toString",function(){return this._k}),D.f=i,A.f=te,n(129).f=P.f=s,n(84).f=a,I.f=l,p&&!n(87)&&d(G,"propertyIsEnumerable",a,!0),x.f=function(e){return r(b(e))}),f(f.G+f.W+f.F*!X,{Symbol:W});for(var ne="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),re=0;ne.length>re;)b(ne[re++]);for(var oe=j(b.store),ae=0;oe.length>ae;)_(oe[ae++]);f(f.S+f.F*!X,"Symbol",{for:function(e){return c(Y,e+="")?Y[e]:Y[e]=W(e)},keyFor:function(e){if(!ee(e))throw TypeError(e+" is not a symbol!");for(var t in Y)if(Y[t]===e)return t},useSetter:function(){Z=!0},useSimple:function(){Z=!1}}),f(f.S+f.F*!X,"Object",{create:function(e,t){return void 0===t?M(e):o(M(e),t)},defineProperty:te,defineProperties:o,getOwnPropertyDescriptor:i,getOwnPropertyNames:s,getOwnPropertySymbols:l});var ie=m(function(){I.f(1)});f(f.S+f.F*ie,"Object",{getOwnPropertySymbols:function(e){return I.f(k(e))}}),U&&f(f.S+f.F*(!X||m(function(){var e=W();return"[null]"!=z([e])||"{}"!=z({a:e})||"{}"!=z(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;o<arguments.length;)r.push(arguments[o++]);if(n=t=r[1],(O(t)||void 0!==e)&&!ee(e))return C(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ee(t))return t}),r[1]=t,z.apply(U,r)}}),W[B][K]||n(68)(W[B],K,W[B].valueOf),y(W,"Symbol"),y(Math,"Math",!0),y(u.JSON,"JSON",!0)},function(e,t,n){function r(e){s(e,o,{value:{i:"O"+ ++l,w:{}}})}var o=n(88)("meta"),a=n(70),i=n(64),s=n(63).f,l=0,u=Object.isExtensible||function(){return!0},c=!n(81)(function(){return u(Object.preventExtensions({}))}),p=e.exports={KEY:o,NEED:!1,fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,o)){if(!u(e))return"F";if(!t)return"E";r(e)}return e[o].i},getWeak:function(e,t){if(!i(e,o)){if(!u(e))return!0;if(!t)return!1;r(e)}return e[o].w},onFreeze:function(e){return c&&p.NEED&&u(e)&&!i(e,o)&&r(e),e}}},function(e,t,n){var s=n(83),l=n(106),u=n(84);e.exports=function(e){var t=s(e),n=l.f;if(n)for(var r,o=n(e),a=u.f,i=0;o.length>i;)a.call(e,r=o[i++])&&t.push(r);return t}},function(e,t,n){var r=n(100);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(65),o=n(129).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(r(e))}},function(e,t){},function(e,t,n){n(110)("asyncIterator")},function(e,t,n){n(110)("observable")},function(e,t,n){e.exports={default:n(189),__esModule:!0}},function(e,t,n){n(190),e.exports=n(49).Object.setPrototypeOf},function(e,t,n){var r=n(55);r(r.S,"Object",{setPrototypeOf:n(191).set})},function(e,t,o){function a(e,t){if(r(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")}var n=o(70),r=o(69);e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,n,r){try{(r=o(98)(Function.call,o(130).f(Object.prototype,"__proto__").set,2))(e,[]),n=!(e instanceof Array)}catch(e){n=!0}return function(e,t){return a(e,t),n?e.__proto__=t:r(e,t),e}}({},!1):void 0),check:a}},function(e,t,n){e.exports={default:n(193),__esModule:!0}},function(e,t,n){n(194);var r=n(49).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){var r=n(55);r(r.S,"Object",{create:n(107)})},function(e,t,n){"use strict";t.__esModule=!0;var g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(v,y){return function r(n,s){var e,t;var o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:[];var a,i=n.displayName||n.name||"Component",l=_.getType(n).propTypes,u=_.isReactComponent(n),c=Object.keys(s);var p=["valueLink","checkedLink"].concat(c.map(_.defaultKey));a=_.uncontrolledPropTypes(s,l,i);(0,x.default)(u||!o.length,"[uncontrollable] stateless function components cannot pass through methods because they have no associated instances. Check component: "+i+", attempting to pass through methods: "+o.join(", "));o=_.transform(o,function(e,t){e[t]=function(){var e;return(e=this.refs.inner)[t].apply(e,arguments)}},{});var f=(t=e=function(e){function t(){return E(this,t),C(this,e.apply(this,arguments))}return w(t,e),t.prototype.shouldComponentUpdate=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return!v.shouldComponentUpdate||v.shouldComponentUpdate.apply(this,t)},t.prototype.componentWillMount=function(){var t=this,n=this.props;this._values={},c.forEach(function(e){t._values[e]=n[_.defaultKey(e)]})},t.prototype.componentWillReceiveProps=function(t){var n=this,r=this.props;v.componentWillReceiveProps&&v.componentWillReceiveProps.call(this,t),c.forEach(function(e){void 0===_.getValue(t,e)&&void 0!==_.getValue(r,e)&&(n._values[e]=t[_.defaultKey(e)])})},t.prototype.componentWillUnmount=function(){this.unmounted=!0},t.prototype.getControlledInstance=function(){return this.refs.inner},t.prototype.render=function(){var o=this,a={},e=m(this.props);return _.each(s,function(e,t){var n=_.getLinkName(t),r=o.props[t];n&&!h(o.props,t)&&h(o.props,n)&&(r=o.props[n].value),a[t]=void 0!==r?r:o._values[t],a[e]=d.bind(o,t)}),a=g({},e,a,{ref:u?"inner":null}),b.default.createElement(n,a)},t}(b.default.Component),e.displayName="Uncontrolled("+i+")",e.propTypes=a,t);g(f.prototype,o);f.ControlledComponent=n;f.deferControlTo=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];return r(e,g({},s,t),n)};return f;function d(e,t){var n=_.getLinkName(e),r=this.props[s[e]];n&&h(this.props,n)&&!r&&(r=this.props[n].requestChange);for(var o=arguments.length,a=Array(2<o?o-2:0),i=2;i<o;i++)a[i-2]=arguments[i];y(this,e,r,t,a)}function h(e,t){return void 0!==e[t]}function m(e){var n={};return _.each(e,function(e,t){-1===p.indexOf(t)&&(n[t]=e)}),n}}};var b=r(n(1)),x=r(n(20)),_=function(e){{if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}}(n(196));function r(e){return e&&e.__esModule?e:{default:e}}function E(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function C(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function w(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.version=void 0,t.uncontrolledPropTypes=function(e,t,n){0;return{}},t.getType=function(e){return 15<=a[0]||0===a[0]&&13<=a[1]?e:e.type},t.getValue=function(e,t){var n=s(t);return n&&!i(e,t)&&i(e,n)?e[n].value:e[t]},t.getLinkName=s,t.defaultKey=l,t.chain=function(r,o,a){return function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];o&&o.call.apply(o,[r].concat(t)),a&&a.call.apply(a,[r].concat(t))}},t.transform=function(e,t,n){return u(e,t.bind(null,n=n||(Array.isArray(e)?[]:{}))),n},t.each=u,t.has=c,t.isReactComponent=function(e){return!!(e&&e.prototype&&e.prototype.isReactComponent)};var r=o(n(1));o(n(20));function o(e){return e&&e.__esModule?e:{default:e}}var a=t.version=r.default.version.split(".").map(parseFloat);function i(e,t){return void 0!==e[t]}function s(e){return"value"===e?"valueLink":"checked"===e?"checkedLink":null}function l(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function u(e,t,n){if(Array.isArray(e))return e.forEach(t,n);for(var r in e)c(e,r)&&t.call(n,e[r],r,e)}function c(e,t){return!!e&&Object.prototype.hasOwnProperty.call(e,t)}},function(e,t,n){n(198),e.exports=n(49).Object.entries},function(e,t,n){var r=n(55),o=n(131)(!0);r(r.S,"Object",{entries:function(e){return o(e)}})},function(e,t,n){n(200),e.exports=n(49).Object.values},function(e,t,n){var r=n(55),o=n(131)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},function(e,t,n){"use strict";e.exports=n(202)},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,p=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case p:case f:case i:case l:case s:case h:return e;default:switch(e=e&&e.$$typeof){case c:case d:case u:return e;default:return t}}case y:case v:case a:return t}}}function _(e){return x(e)===f}t.typeOf=x,t.AsyncMode=p,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=u,t.Element=o,t.ForwardRef=d,t.Fragment=i,t.Lazy=y,t.Memo=v,t.Portal=a,t.Profiler=l,t.StrictMode=s,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===l||e===s||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===u||e.$$typeof===c||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b)},t.isAsyncMode=function(e){return _(e)||x(e)===p},t.isConcurrentMode=_,t.isContextConsumer=function(e){return x(e)===c},t.isContextProvider=function(e){return x(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===i},t.isLazy=function(e){return x(e)===y},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===a},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===s},t.isSuspense=function(e){return x(e)===h}},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=void 0;var i=r(n(111)),o=r(n(67));function a(e,t,n){var r,o={target:e,currentTarget:e};function a(e){e.target===e.currentTarget&&(clearTimeout(r),e.target.removeEventListener(i.default.end,a),t.call(this))}i.default.end?null==n&&(n=l(e)||0):n=0,i.default.end?(e.addEventListener(i.default.end,a,!1),r=setTimeout(function(){return a(o)},1.5*(n||100))):setTimeout(a.bind(null,o),0)}a._parseDuration=l;var s=a;function l(e){var t=(0,o.default)(e,i.default.duration),n=-1===t.indexOf("ms")?1e3:1;return parseFloat(t)*n}t.default=s,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(r,function(e,t){return t.toUpperCase()})};var r=/-(.)/g;e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(e){return(0,o.default)(e).replace(a,"-ms-")};var o=r(n(206)),a=/^ms-/;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(r,"-$1").toLowerCase()};var r=/([A-Z])/g;e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(i){if(!i)throw new TypeError("No Element passed to `getComputedStyle()`");var e=i.ownerDocument;return"defaultView"in e?e.defaultView.opener?i.ownerDocument.defaultView.getComputedStyle(i,null):window.getComputedStyle(i,null):{getPropertyValue:function(e){var t=i.style;"float"==(e=(0,s.default)(e))&&(e="styleFloat");var n=i.currentStyle[e]||null;if(null==n&&t&&t[e]&&(n=t[e]),u.test(n)&&!l.test(e)){var r=t.left,o=i.runtimeStyle,a=o&&o.left;a&&(o.left=i.currentStyle.left),t.left="fontSize"===e?"1em":n,n=t.pixelLeft+"px",t.left=r,a&&(o.left=a)}return n}}};var s=r(n(132)),l=/^(top|right|bottom|left)$/,u=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return"removeProperty"in e.style?e.style.removeProperty(t):e.style.removeAttribute(t)},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return!(!e||!r.test(e))};var r=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;e.exports=t.default},function(e,t,n){"use strict";var s=n(211);function r(){}function o(){}o.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,o,a){if(a!==s){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}function t(){return e}var n={array:e.isRequired=e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:r};return n.PropTypes=n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";function l(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function u(n){this.setState(function(e){var t=this.constructor.getDerivedStateFromProps(n,e);return null!=t?t:null}.bind(this))}function c(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function r(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,r=null,o=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?r="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(r="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?o="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(o="UNSAFE_componentWillUpdate"),null!==n||null!==r||null!==o){var a=e.displayName||e.name,i="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+a+" uses "+i+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==r?"\n  "+r:"")+(null!==o?"\n  "+o:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=l,t.componentWillReceiveProps=u),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=c;var s=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;s.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return r}),c.__suppressDeprecationWarning=u.__suppressDeprecationWarning=l.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0;var r;(r=n(133))&&r.__esModule;t.timeoutsShape=null;t.classNamesShape=null},function(e,t,n){n(126),n(215),e.exports=n(49).Array.from},function(e,t,n){"use strict";var h=n(98),r=n(55),m=n(89),v=n(216),y=n(217),g=n(125),b=n(218),x=n(219);r(r.S+r.F*!n(221)(function(e){Array.from(e)}),"Array",{from:function(e,t,n){var r,o,a,i,s=m(e),l="function"==typeof this?this:Array,u=arguments.length,c=1<u?t:void 0,p=void 0!==c,f=0,d=x(s);if(p&&(c=h(c,2<u?n:void 0,2)),null==d||l==Array&&y(d))for(o=new l(r=g(s.length));f<r;f++)b(o,f,p?c(s[f],f):s[f]);else for(i=d.call(s),o=new l;!(a=i.next()).done;f++)b(o,f,p?v(i,c,[a.value,f],!0):a.value);return o.length=f,o}})},function(e,t,n){var a=n(69);e.exports=function(t,e,n,r){try{return r?e(a(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&a(o.call(t)),e}}},function(e,t,n){var r=n(85),o=n(50)("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||a[o]===e)}},function(e,t,n){"use strict";var r=n(63),o=n(82);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(220),o=n(50)("iterator"),a=n(85);e.exports=n(49).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||a[r(e)]}},function(e,t,n){var o=n(100),a=n(50)("toStringTag"),i="Arguments"==o(function(){return arguments}());e.exports=function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?n:i?o(t):"Object"==(r=o(t))&&"function"==typeof t.callee?"Arguments":r}},function(e,t,n){var a=n(50)("iterator"),i=!1;try{var r=[7][a]();r.return=function(){i=!0},Array.from(r,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!i)return!1;var n=!1;try{var r=[7],o=r[a]();o.next=function(){return{done:n=!0}},r[a]=function(){return o},e(r)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(r,o){return function(e){var t=e.currentTarget,n=e.target;(0,i.default)(t,r).some(function(e){return(0,a.default)(e,n)})&&o.call(this,e)}};var a=r(n(58)),i=r(n(223));e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n,r="#"===t[0],o="."===t[0],a=r||o?t.slice(1):t;if(i.test(a))return r?(e=e.getElementById?e:document,(n=e.getElementById(a))?[n]:[]):e.getElementsByClassName&&o?s(e.getElementsByClassName(a)):s(e.getElementsByTagName(t));return s(e.querySelectorAll(t))};var i=/^[\w-]*$/,s=Function.prototype.bind.call(Function.prototype.call,[].slice);e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=void 0;var o=r(n(54)),a=r(n(112)),i=r(n(113)),s=function(){};o.default&&(s=function(e,t,n,r){return(0,a.default)(e,t,n,r),function(){(0,i.default)(e,t,n,r)}});var l=s;t.default=l,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=a;var r,o=n(12),d=(r=o)&&r.__esModule?r:{default:r};var h={};function a(p,f){return function(e,t,n,r,o){var a=n||"<<anonymous>>",i=o||t;if(null!=e[t]){var s=n+"."+t;(0,d.default)(h[s],"The "+r+" `"+i+"` of `"+a+"` is deprecated. "+f+"."),h[s]=!0}for(var l=arguments.length,u=Array(5<l?l-5:0),c=5;c<l;c++)u[c-5]=arguments[c];return p.apply(void 0,[e,t,n,r,o].concat(u))}}a._resetWarned=function(){h={}},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var s=r(n(227)),l=r(n(67)),u=r(n(94)),c=r(n(117)),p=n(230);function r(e){return e&&e.__esModule?e:{default:e}}t.default=function e(){var i=this,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},n=t.hideSiblingNodes,r=void 0===n||n,o=t.handleContainerOverflow,a=void 0===o||o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.add=function(e,t,n){var r=i.modals.indexOf(e),o=i.containers.indexOf(t);if(-1!==r)return r;if(r=i.modals.length,i.modals.push(e),i.hideSiblingNodes&&(0,p.hideSiblings)(t,e.mountNode),-1!==o)return i.data[o].modals.push(e),r;var a={modals:[e],classes:n?n.split(/\s+/):[],overflowing:(0,c.default)(t)};return i.handleContainerOverflow&&function(e,t){var n={overflow:"hidden"};e.style={overflow:t.style.overflow,paddingRight:t.style.paddingRight},e.overflowing&&(n.paddingRight=parseInt((0,l.default)(t,"paddingRight")||0,10)+(0,u.default)()+"px"),(0,l.default)(t,n)}(a,t),a.classes.forEach(s.default.addClass.bind(null,t)),i.containers.push(t),i.data.push(a),r},this.remove=function(e){var t=i.modals.indexOf(e);if(-1!==t){var n=function(e,t){return function(e,n){var r=-1;return e.some(function(e,t){if(n(e,t))return r=t,!0}),r}(e,function(e){return-1!==e.modals.indexOf(t)})}(i.data,e),r=i.data[n],o=i.containers[n];r.modals.splice(r.modals.indexOf(e),1),i.modals.splice(t,1),0===r.modals.length?(r.classes.forEach(s.default.removeClass.bind(null,o)),i.handleContainerOverflow&&function(e,t){var n=e.style;Object.keys(n).forEach(function(e){return t.style[e]=n[e]})}(r,o),i.hideSiblingNodes&&(0,p.showSiblings)(o,e.mountNode),i.containers.splice(n,1),i.data.splice(n,1)):i.hideSiblingNodes&&(0,p.ariaHidden)(!1,r.modals[r.modals.length-1].mountNode)}},this.isTopModal=function(e){return!!i.modals.length&&i.modals[i.modals.length-1]===e},this.hideSiblingNodes=r,this.handleContainerOverflow=a,this.modals=[],this.containers=[],this.data=[]},e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=void 0;var o=r(n(228));t.addClass=o.default;var a=r(n(229));t.removeClass=a.default;var i=r(n(135));t.hasClass=i.default;var s={addClass:o.default,removeClass:a.default,hasClass:i.default};t.default=s},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(e,t){e.classList?e.classList.add(t):(0,o.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var o=r(n(135));e.exports=t.default},function(e,t,n){"use strict";function r(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=r(e.className,t):e.setAttribute("class",r(e.className&&e.className.baseVal||"",t))}},function(e,t,n){"use strict";t.__esModule=!0,t.ariaHidden=a,t.hideSiblings=function(e,t){o(e,t,function(e){return a(!0,e)})},t.showSiblings=function(e,t){o(e,t,function(e){return a(!1,e)})};var r=["template","script","style"],o=function(e,t,n){t=[].concat(t),[].forEach.call(e.children,function(e){-1===t.indexOf(e)&&function(e){var t=e.nodeType,n=e.tagName;return 1===t&&-1===r.indexOf(n.toLowerCase())}(e)&&n(e)})};function a(e,t){t&&(e?t.setAttribute("aria-hidden","true"):t.removeAttribute("aria-hidden"))}},function(e,t,n){"use strict";t.__esModule=!0;var r=u(n(0)),o=u(n(90)),a=u(n(1)),i=u(n(9)),s=u(n(92)),l=u(n(71));function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p,f=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(d,p=a.default.Component),d.prototype.componentDidMount=function(){this._isMounted=!0,this._renderOverlay()},d.prototype.componentDidUpdate=function(){this._renderOverlay()},d.prototype.componentWillReceiveProps=function(e){this._overlayTarget&&e.container!==this.props.container&&(this._portalContainerNode.removeChild(this._overlayTarget),this._portalContainerNode=(0,s.default)(e.container,(0,l.default)(this).body),this._portalContainerNode.appendChild(this._overlayTarget))},d.prototype.componentWillUnmount=function(){this._isMounted=!1,this._unrenderOverlay(),this._unmountOverlayTarget()},d.prototype.render=function(){return null},d);function d(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d);for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];return(e=n=c(this,p.call.apply(p,[this].concat(r))))._mountOverlayTarget=function(){n._overlayTarget||(n._overlayTarget=document.createElement("div"),n._portalContainerNode=(0,s.default)(n.props.container,(0,l.default)(n).body),n._portalContainerNode.appendChild(n._overlayTarget))},n._unmountOverlayTarget=function(){n._overlayTarget&&(n._portalContainerNode.removeChild(n._overlayTarget),n._overlayTarget=null),n._portalContainerNode=null},n._renderOverlay=function(){var e=n.props.children?a.default.Children.only(n.props.children):null;if(null!==e){n._mountOverlayTarget();var t=!n._overlayInstance;n._overlayInstance=i.default.unstable_renderSubtreeIntoContainer(n,e,n._overlayTarget,function(){t&&n.props.onRendered&&n.props.onRendered()})}else n._unrenderOverlay(),n._unmountOverlayTarget()},n._unrenderOverlay=function(){n._overlayTarget&&(i.default.unmountComponentAtNode(n._overlayTarget),n._overlayInstance=null)},n.getMountNode=function(){return n._overlayTarget},c(n,e)}f.displayName="Portal",f.propTypes={container:r.default.oneOfType([o.default,r.default.func]),onRendered:r.default.func},t.default=f,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(0)),o=a(n(1));function a(e){return e&&e.__esModule?e:{default:e}}var i,s={children:r.default.node},l=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(u,i=o.default.Component),u.prototype.render=function(){return this.props.children},u);function u(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,i.apply(this,arguments))}l.propTypes=s,t.default=l,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){var t=!document.addEventListener,n=void 0;n=t?(document.attachEvent("onfocusin",e),function(){return document.detachEvent("onfocusin",e)}):(document.addEventListener("focus",e,!0),function(){return document.removeEventListener("focus",e,!0)});return{remove:n}},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=d(n(7)),r=d(n(0)),o=d(n(90)),p=n(1),f=d(p),a=d(n(9)),i=d(n(235)),s=d(n(92)),l=d(n(71));function d(e){return e&&e.__esModule?e:{default:e}}function h(e,t){var n={};for(var r in e)0<=t.indexOf(r)||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}var m,v=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(y,m=f.default.Component),y.prototype.componentDidMount=function(){this.updatePosition(this.getTarget())},y.prototype.componentWillReceiveProps=function(){this._needsFlush=!0},y.prototype.componentDidUpdate=function(e){this._needsFlush&&(this._needsFlush=!1,this.maybeUpdatePosition(this.props.placement!==e.placement))},y.prototype.render=function(){var e=this.props,t=e.children,n=e.className,r=h(e,["children","className"]),o=this.state,a=o.positionLeft,i=o.positionTop,s=h(o,["positionLeft","positionTop"]);delete r.target,delete r.container,delete r.containerPadding,delete r.shouldUpdatePosition;var l=f.default.Children.only(t);return(0,p.cloneElement)(l,u({},r,s,{positionLeft:a,positionTop:i,className:(0,c.default)(n,l.props.className),style:u({},l.props.style,{left:a,top:i})}))},y.prototype.updatePosition=function(e){if(this._lastTarget=e){var t=a.default.findDOMNode(this),n=(0,s.default)(this.props.container,(0,l.default)(this).body);this.setState((0,i.default)(this.props.placement,t,e,n,this.props.containerPadding))}else this.setState({positionLeft:0,positionTop:0,arrowOffsetLeft:null,arrowOffsetTop:null})},y);function y(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,y);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,m.call(this,e,t));return n.getTarget=function(){var e=n.props.target,t="function"==typeof e?e():e;return t&&a.default.findDOMNode(t)||null},n.maybeUpdatePosition=function(e){var t=n.getTarget();(n.props.shouldUpdatePosition||t!==n._lastTarget||e)&&n.updatePosition(t)},n.state={positionLeft:0,positionTop:0,arrowOffsetLeft:null,arrowOffsetTop:null},n._needsFlush=!1,n._lastTarget=null,n}v.propTypes={target:r.default.oneOfType([o.default,r.default.func]),container:r.default.oneOfType([o.default,r.default.func]),containerPadding:r.default.number,placement:r.default.oneOf(["top","right","bottom","left"]),shouldUpdatePosition:r.default.bool},v.displayName="Position",v.defaultProps={containerPadding:0,placement:"right",shouldUpdatePosition:!1},t.default=v,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t,n,r,o){var a="BODY"===r.tagName?(0,m.default)(n):(0,v.default)(n,r),i=(0,m.default)(t),s=i.height,l=i.width,u=void 0,c=void 0,p=void 0,f=void 0;if("left"===e||"right"===e){c=a.top+(a.height-s)/2,u="left"===e?a.left-l:a.left+a.width;var d=function(e,t,n,r){var o=y(n),a=o.scroll,i=o.height,s=e-r-a,l=e+r-a+t;return s<0?-s:i<l?i-l:0}(c,s,r,o);c+=d,f=50*(1-2*d/s)+"%",p=void 0}else{if("top"!==e&&"bottom"!==e)throw new Error('calcOverlayPosition(): No such placement of "'+e+'" found.');u=a.left+(a.width-l)/2,c="top"===e?a.top-s:a.top+a.height;var h=function(e,t,n,r){var o=y(n).width,a=e-r,i=e+r+t;{if(a<0)return-a;if(o<i)return o-i}return 0}(u,l,r,o);u+=h,p=50*(1-2*h/l)+"%",f=void 0}return{positionLeft:u,positionTop:c,arrowOffsetLeft:p,arrowOffsetTop:f}};var m=r(n(137)),v=r(n(236)),a=r(n(138)),i=r(n(71));function r(e){return e&&e.__esModule?e:{default:e}}function y(e){var t=void 0,n=void 0,r=void 0;if("BODY"===e.tagName)t=window.innerWidth,n=window.innerHeight,r=(0,a.default)((0,i.default)(e).documentElement)||(0,a.default)(e);else{var o=(0,m.default)(e);t=o.width,n=o.height,r=(0,a.default)(e)}return{width:t,height:n,scroll:r}}e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(e,t){var n,r={top:0,left:0};"fixed"===(0,u.default)(e,"position")?n=e.getBoundingClientRect():(t=t||(0,i.default)(e),n=(0,a.default)(e),"html"!==function(e){return e.nodeName&&e.nodeName.toLowerCase()}(t)&&(r=(0,a.default)(t)),r.top+=parseInt((0,u.default)(t,"borderTopWidth"),10)-(0,s.default)(t)||0,r.left+=parseInt((0,u.default)(t,"borderLeftWidth"),10)-(0,l.default)(t)||0);return(0,o.default)({},n,{top:n.top-r.top-(parseInt((0,u.default)(e,"marginTop"),10)||0),left:n.left-r.left-(parseInt((0,u.default)(e,"marginLeft"),10)||0)})};var o=r(n(237)),a=r(n(137)),i=r(n(238)),s=r(n(138)),l=r(n(239)),u=r(n(67));e.exports=t.default},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(e){var t=(0,o.default)(e),n=e&&e.offsetParent;for(;n&&"html"!==(r=e,r.nodeName&&r.nodeName.toLowerCase())&&"static"===(0,a.default)(n,"position");)n=n.offsetParent;var r;return n||t.documentElement};var o=r(n(66)),a=r(n(67));e.exports=t.default},function(e,t,n){"use strict";var r=n(14);t.__esModule=!0,t.default=function(e,t){var n=(0,o.default)(e);if(void 0===t)return n?"pageXOffset"in n?n.pageXOffset:n.document.documentElement.scrollLeft:e.scrollLeft;n?n.scrollTo(t,"pageYOffset"in n?n.pageYOffset:n.document.documentElement.scrollTop):e.scrollLeft=t};var o=r(n(91));e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(p){function e(e,t,n,r,o,a){var i=r||"<<anonymous>>",s=a||n;if(null==t[n])return e?new Error("Required "+o+" `"+s+"` was not specified in `"+i+"`."):null;for(var l=arguments.length,u=Array(6<l?l-6:0),c=6;c<l;c++)u[c-6]=arguments[c];return p.apply(void 0,[t,n,i,o,s].concat(u))}var t=e.bind(null,!1);return t.isRequired=e.bind(null,!0),t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdERPTVwiIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY2xhc3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibW9tZW50XCIiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3Qtb25jbGlja291dHNpZGUvZGlzdC9yZWFjdC1vbmNsaWNrb3V0c2lkZS5lcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2hpc3RvcnkvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGV0aW1lL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvdW5jb250cm9sbGFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2tleWNvZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2hpc3RvcnkvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2hpc3RvcnkvRE9NVXRpbHMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3F1ZXJ5LXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvc3RyaWN0LXVyaS1lbmNvZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2RlY29kZS11cmktY29tcG9uZW50L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXRpbWUvRGF0ZVRpbWUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jbGFzcy9mYWN0b3J5LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXRpbWUvc3JjL0NhbGVuZGFyQ29udGFpbmVyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRldGltZS9zcmMvRGF5c1ZpZXcuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGV0aW1lL3NyYy9Nb250aHNWaWV3LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRldGltZS9zcmMvWWVhcnNWaWV3LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRldGltZS9zcmMvVGltZVZpZXcuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXRpbWUvY3NzL3JlYWN0LWRhdGV0aW1lLmNzcz8wMGE4Iiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRldGltZS9jc3MvcmVhY3QtZGF0ZXRpbWUuY3NzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2luRE9NLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L2NvbnRhaW5zLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5LmpzIiwid2VicGFjazovLy8uL2Zsb3QvanF1ZXJ5LmZsb3QubWluLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvc3R5bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy1leHRyYS9saWIvdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LXByb3AtdHlwZXMvbGliL2VsZW1lbnRUeXBlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vZmxvdC9qcXVlcnkuZmxvdC50aW1lLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9UU1gvQmlnVGFibGUudHN4Iiwid2VicGFjazovLy8uLi9Db250ZW50L0JpZ1RhYmxlLmNzcz82NzY4Iiwid2VicGFjazovLy8uLi9Db250ZW50L0JpZ1RhYmxlLmNzcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9lbnRyaWVzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy1leHRyYS9saWIvY29tcG9uZW50T3JFbGVtZW50LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9pc1dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2dldENvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL29uLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvb2ZmLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL1Jvb3RDbG9zZVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi91dGlscy9pc092ZXJmbG93aW5nLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9PdmVybGF5LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvY2FtZWxpemVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2FkZEV2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2hhc0NsYXNzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvUG9ydGFsLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9vZmZzZXQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L3Njcm9sbFRvcC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL3V0aWxzL1N0eWxlQ29uZmlnLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvYm9vdHN0cmFwVXRpbHMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFuZWxHcm91cC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0FjY29yZGlvbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Nsb3NlQnV0dG9uLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQWxlcnQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9CYWRnZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1NhZmVBbmNob3IuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9CcmVhZGNydW1iSXRlbS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0JyZWFkY3J1bWIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9CdXR0b25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0J1dHRvblRvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DYXJvdXNlbENhcHRpb24uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DYXJvdXNlbEl0ZW0uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9HbHlwaGljb24uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DYXJvdXNlbC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0NoZWNrYm94LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0NsZWFyZml4LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ29udHJvbExhYmVsLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ29sLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ29sbGFwc2UuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Ecm9wZG93bk1lbnUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Ecm9wZG93blRvZ2dsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Ryb3Bkb3duLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvc3BsaXRDb21wb25lbnRQcm9wcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Ryb3Bkb3duQnV0dG9uLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRmFkZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm0uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Gb3JtQ29udHJvbEZlZWRiYWNrLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRm9ybUNvbnRyb2xTdGF0aWMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Gb3JtQ29udHJvbC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1Hcm91cC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0dyaWQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9IZWxwQmxvY2suanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9JbWFnZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0lucHV0R3JvdXBBZGRvbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0lucHV0R3JvdXBCdXR0b24uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9JbnB1dEdyb3VwLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvSnVtYm90cm9uLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTGFiZWwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9MaXN0R3JvdXBJdGVtLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTGlzdEdyb3VwLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTWVkaWFCb2R5LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTWVkaWFIZWFkaW5nLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTWVkaWFMZWZ0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTWVkaWFMaXN0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTWVkaWFMaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01lZGlhUmlnaHQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9NZWRpYS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01lbnVJdGVtLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTW9kYWxCb2R5LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTW9kYWxEaWFsb2cuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Nb2RhbEZvb3Rlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01vZGFsSGVhZGVyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTW9kYWxUaXRsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01vZGFsLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2YmFyQnJhbmQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9OYXZiYXJDb2xsYXBzZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdmJhckhlYWRlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdmJhclRvZ2dsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdmJhci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdkRyb3Bkb3duLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2SXRlbS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL092ZXJsYXkuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9PdmVybGF5VHJpZ2dlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BhZ2VIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9QYWdlckl0ZW0uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy91dGlscy9kZXByZWNhdGlvbldhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9QYWdlSXRlbS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BhZ2VyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFnaW5hdGlvbkl0ZW0uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9QYWdpbmF0aW9uLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFuZWxDb2xsYXBzZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BhbmVsQm9keS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BhbmVsSGVhZGluZy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BhbmVsVG9nZ2xlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFuZWxUaXRsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1BhbmVsRm9vdGVyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFuZWwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Qb3BvdmVyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUHJvZ3Jlc3NCYXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9SYWRpby5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1Jlc3BvbnNpdmVFbWJlZC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1Jvdy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1NwbGl0VG9nZ2xlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvU3BsaXRCdXR0b24uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9UYWJDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9UYWJDb250ZW50LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVGFiUGFuZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RhYi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RhYmxlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVGFicy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RodW1ibmFpbC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RvZ2dsZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RvZ2dsZUJ1dHRvbkdyb3VwLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVG9vbHRpcC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1dlbGwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL2FycmF5L2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vVFNYL1BRVHJlbmRpbmdXZWJSZXBvcnQudHN4Iiwid2VicGFjazovLy8uL1RTL1NlcnZpY2VzL1BRVHJlbmRpbmdXZWJSZXBvcnQudHMiLCJ3ZWJwYWNrOi8vLy4vVFNYL1NlbGVjdC50c3giLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvdW5jb250cm9sbGFibGUvY3JlYXRlVW5jb250cm9sbGFibGUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3VuY29udHJvbGxhYmxlL3V0aWxzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL2VuZC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9jYW1lbGl6ZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9oeXBoZW5hdGVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9oeXBoZW5hdGUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3N0eWxlL2dldENvbXB1dGVkU3R5bGUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3N0eWxlL3JlbW92ZVN0eWxlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL2lzVHJhbnNmb3JtLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvZmlsdGVyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9xdWVyeVNlbGVjdG9yQWxsLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvbGlzdGVuLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9kZXByZWNhdGVkLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvTW9kYWxNYW5hZ2VyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL3JlbW92ZUNsYXNzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvbWFuYWdlQXJpYUhpZGRlbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL0xlZ2FjeVBvcnRhbC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL1JlZkhvbGRlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2FkZEZvY3VzTGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9Qb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2NhbGN1bGF0ZVBvc2l0aW9uLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9wb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYmVybmVzdC9Tb3VyY2UvUmVwb3Mvb3BlblhEQS9Tb3VyY2UvQXBwbGljYXRpb25zL29wZW5YREEvb3BlblhEQS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9iZXJuZXN0L1NvdXJjZS9SZXBvcy9vcGVuWERBL1NvdXJjZS9BcHBsaWNhdGlvbnMvb3BlblhEQS9vcGVuWERBL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9vZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L3Njcm9sbExlZnQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2Jlcm5lc3QvU291cmNlL1JlcG9zL29wZW5YREEvU291cmNlL0FwcGxpY2F0aW9ucy9vcGVuWERBL29wZW5YREEvbm9kZV9tb2R1bGVzL3JlYWN0LXByb3AtdHlwZXMvbGliL3V0aWxzL2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUmVhY3QiLCJvYmoiLCJfYXNzaWduIiwiX2Fzc2lnbjIiLCJkZWZhdWx0IiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiX3R5cGVvZjIiLCJfdHlwZW9mMyIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfc2V0UHJvdG90eXBlT2YyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jcmVhdGUyIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9fcHJvdG9fXyIsImtleXMiLCJpbmRleE9mIiwiaGFzT3duIiwiY2xhc3NOYW1lcyIsImNsYXNzZXMiLCJhcmciLCJhcmdUeXBlIiwicHVzaCIsIkFycmF5IiwiaXNBcnJheSIsImlubmVyIiwiYXBwbHkiLCJqb2luIiwiX3JlYWN0MiIsIl9yZWFjdElzIiwiX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJwcm9wVmFsdWUiLCJpc1ZhbGlkRWxlbWVudCIsIkVycm9yIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiUmVhY3RET00iLCJmYWN0b3J5IiwiUmVhY3ROb29wVXBkYXRlUXVldWUiLCJDb21wb25lbnQiLCJ1cGRhdGVyIiwibW9tZW50Iiwic2VlZCIsInBhc3NpdmVFdmVudFN1cHBvcnQiLCJ1aWQiLCJoYW5kbGVyc01hcCIsImVuYWJsZWRJbnN0YW5jZXMiLCJ0b3VjaEV2ZW50cyIsIklHTk9SRV9DTEFTU19OQU1FIiwiZ2V0RXZlbnRIYW5kbGVyT3B0aW9ucyIsImV2ZW50TmFtZSIsImhhbmRsZXJPcHRpb25zIiwicGFzc2l2ZSIsInByZXZlbnREZWZhdWx0IiwiV3JhcHBlZENvbXBvbmVudCIsImNvbmZpZyIsIl9jbGFzcyIsIl90ZW1wIiwiZGlzcGxheU5hbWUiLCJfQ29tcG9uZW50Iiwib25DbGlja091dHNpZGUiLCJfdGhpcyIsInRoaXMiLCJfX291dHNpZGVDbGlja0hhbmRsZXIiLCJldmVudCIsIl9fY2xpY2tPdXRzaWRlSGFuZGxlclByb3AiLCJnZXRJbnN0YW5jZSIsImhhbmRsZUNsaWNrT3V0c2lkZSIsIl9fZ2V0Q29tcG9uZW50Tm9kZSIsInNldENsaWNrT3V0c2lkZVJlZiIsImVuYWJsZU9uQ2xpY2tPdXRzaWRlIiwiZG9jdW1lbnQiLCJfdWlkIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9wdGlvbnMiLCJub29wIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRlc3RQYXNzaXZlRXZlbnRTdXBwb3J0IiwiZXZlbnRzIiwiZXZlbnRUeXBlcyIsImZvckVhY2giLCJjb21wb25lbnROb2RlIiwic3RvcFByb3BhZ2F0aW9uIiwiZXhjbHVkZVNjcm9sbGJhciIsImV2dCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiY2xpZW50WCIsImNsaWVudEhlaWdodCIsImNsaWVudFkiLCJjbGlja2VkU2Nyb2xsYmFyIiwiY3VycmVudCIsImlnbm9yZUNsYXNzIiwicGFyZW50Tm9kZSIsImNvcnJlc3BvbmRpbmdFbGVtZW50IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJmaW5kSGlnaGVzdCIsIm91dHNpZGVDbGlja0lnbm9yZUNsYXNzIiwiZGlzYWJsZU9uQ2xpY2tPdXRzaWRlIiwiZm4iLCJnZXRSZWYiLCJyZWYiLCJpbnN0YW5jZVJlZiIsIl9pbmhlcml0c0xvb3NlIiwiX3Byb3RvIiwiaXNSZWFjdENvbXBvbmVudCIsImNvbXBvbmVudERpZE1vdW50IiwiY3JlYXRlRWxlbWVudCIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVuZGVyIiwiX3Byb3BzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwid3JhcHBlZFJlZiIsImRlZmF1bHRQcm9wcyIsImdldENsYXNzIiwidW5kZWZpbmVkIiwiRlVOQ19FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJQTEFDRUhPTERFUiIsIldSQVBfQVJZX0ZMQUciLCJNQVhfU0FGRV9JTlRFR0VSIiwiTkFOIiwiTUFYX0FSUkFZX0xFTkdUSCIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicHJvbWlzZVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVFbXB0eVN0cmluZ0xlYWRpbmciLCJyZUVtcHR5U3RyaW5nTWlkZGxlIiwicmVFbXB0eVN0cmluZ1RyYWlsaW5nIiwicmVFc2NhcGVkSHRtbCIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzRXNjYXBlZEh0bWwiLCJSZWdFeHAiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZUVzY2FwZSIsInJlRXZhbHVhdGUiLCJyZUludGVycG9sYXRlIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInJlUHJvcE5hbWUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW0iLCJyZVRyaW1TdGFydCIsInJlVHJpbUVuZCIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRXNjYXBlQ2hhciIsInJlRXNUZW1wbGF0ZSIsInJlRmxhZ3MiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNIb3N0Q3RvciIsInJlSXNPY3RhbCIsInJlSXNVaW50IiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNBc3RyYWxSYW5nZSIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNEaW5nYmF0UmFuZ2UiLCJyc0xvd2VyUmFuZ2UiLCJyc1VwcGVyUmFuZ2UiLCJyc1ZhclJhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXBvcyIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzWldKIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJzT3B0Q29udHJMb3dlciIsInJzT3B0Q29udHJVcHBlciIsInJlT3B0TW9kIiwicnNPcHRWYXIiLCJyc1NlcSIsInJzRW1vamkiLCJyc1N5bWJvbCIsInJlQXBvcyIsInJlQ29tYm9NYXJrIiwicmVVbmljb2RlIiwicmVVbmljb2RlV29yZCIsInJlSGFzVW5pY29kZSIsInJlSGFzVW5pY29kZVdvcmQiLCJjb250ZXh0UHJvcHMiLCJ0ZW1wbGF0ZUNvdW50ZXIiLCJ0eXBlZEFycmF5VGFncyIsImNsb25lYWJsZVRhZ3MiLCJzdHJpbmdFc2NhcGVzIiwiZnJlZVBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiZnJlZVBhcnNlSW50IiwicGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZ2xvYmFsIiwiZnJlZVNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJlIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwibm9kZUlzRGF0ZSIsImlzRGF0ZSIsIm5vZGVJc01hcCIsImlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJmdW5jIiwidGhpc0FyZyIsImFyZ3MiLCJhcnJheUFnZ3JlZ2F0b3IiLCJhcnJheSIsInNldHRlciIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJpbmRleCIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsInByZWRpY2F0ZSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJyZXN1bHQiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsInZhbHVlcyIsIm9mZnNldCIsImFycmF5UmVkdWNlIiwiaW5pdEFjY3VtIiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VGaW5kS2V5IiwiY29sbGVjdGlvbiIsImVhY2hGdW5jIiwiYmFzZUZpbmRJbmRleCIsImZyb21JbmRleCIsImZyb21SaWdodCIsInN0cmljdEluZGV4T2YiLCJiYXNlSXNOYU4iLCJiYXNlSW5kZXhPZldpdGgiLCJiYXNlTWVhbiIsImJhc2VTdW0iLCJiYXNlUHJvcGVydHlPZiIsImJhc2VSZWR1Y2UiLCJiYXNlVGltZXMiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwiY2FjaGVIYXMiLCJjYWNoZSIsImhhcyIsImNoYXJzU3RhcnRJbmRleCIsInN0clN5bWJvbHMiLCJjaHJTeW1ib2xzIiwiY2hhcnNFbmRJbmRleCIsImRlYnVyckxldHRlciIsImVzY2FwZUh0bWxDaGFyIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsImhhc1VuaWNvZGUiLCJzdHJpbmciLCJ0ZXN0IiwibWFwVG9BcnJheSIsIm1hcCIsInNpemUiLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwicmVwbGFjZUhvbGRlcnMiLCJwbGFjZWhvbGRlciIsInNldFRvQXJyYXkiLCJzZXQiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwibWF0Y2giLCJ1bmljb2RlVG9BcnJheSIsInNwbGl0IiwiYXNjaWlUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsIl8iLCJydW5JbkNvbnRleHQiLCJjb250ZXh0IiwiZGVmYXVsdHMiLCJwaWNrIiwiRGF0ZSIsIk1hdGgiLCJTdHJpbmciLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwidG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiZXhlYyIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwib2xkRGFzaCIsInJlSXNOYXRpdmUiLCJyZXBsYWNlIiwiQnVmZmVyIiwiVWludDhBcnJheSIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RDcmVhdGUiLCJzcGxpY2UiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJpdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwiZ2V0TmF0aXZlIiwiY3R4Q2xlYXJUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3R4Tm93Iiwibm93IiwiY3R4U2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJuYXRpdmVDZWlsIiwiY2VpbCIsIm5hdGl2ZUZsb29yIiwiZmxvb3IiLCJuYXRpdmVHZXRTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJpc0J1ZmZlciIsIm5hdGl2ZUlzRmluaXRlIiwiaXNGaW5pdGUiLCJuYXRpdmVKb2luIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm1heCIsIm5hdGl2ZU1pbiIsIm1pbiIsIm5hdGl2ZU5vdyIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwicmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsInJldmVyc2UiLCJEYXRhVmlldyIsIk1hcCIsIlByb21pc2UiLCJTZXQiLCJXZWFrTWFwIiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInN5bWJvbFRvU3RyaW5nIiwibG9kYXNoIiwiaXNPYmplY3RMaWtlIiwiTGF6eVdyYXBwZXIiLCJMb2Rhc2hXcmFwcGVyIiwid3JhcHBlckNsb25lIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiaXNPYmplY3QiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJlbnRyaWVzIiwiY2xlYXIiLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsImFkZCIsIlN0YWNrIiwiZGF0YSIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhcnJheVNhbXBsZSIsImJhc2VSYW5kb20iLCJhcnJheVNhbXBsZVNpemUiLCJzaHVmZmxlU2VsZiIsImNvcHlBcnJheSIsImJhc2VDbGFtcCIsImFycmF5U2h1ZmZsZSIsImFzc2lnbk1lcmdlVmFsdWUiLCJlcSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJiYXNlQXQiLCJwYXRocyIsInNraXAiLCJudW1iZXIiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImlucHV0IiwiaW5pdENsb25lQXJyYXkiLCJ0YWciLCJnZXRUYWciLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJzeW1ib2wiLCJjbG9uZVN5bWJvbCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJwb3AiLCJnZXRNYXBEYXRhIiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJpc0Z1bmN0aW9uIiwiYmFzZUdldCIsInBhdGgiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsIm90aGVyIiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsIkluZmluaXR5Iiwic2VlbiIsImJhc2VJbnZva2UiLCJwYXJlbnQiLCJsYXN0IiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwibWVzc2FnZSIsImNvbnZlcnQiLCJpc1BhcnRpYWwiLCJlcXVhbEJ5VGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImVxdWFsT2JqZWN0cyIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImJhc2VJc05hdGl2ZSIsImlzTWFza2VkIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJiYXNlS2V5cyIsImlzUHJvdG90eXBlIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlTHQiLCJiYXNlTWFwIiwiaXNBcnJheUxpa2UiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU1lcmdlRGVlcCIsImJhc2VOdGgiLCJiYXNlT3JkZXJCeSIsIml0ZXJhdGVlcyIsIm9yZGVycyIsImdldEl0ZXJhdGVlIiwiY29tcGFyZXIiLCJzb3J0IiwiYmFzZVNvcnRCeSIsIm9iakNyaXRlcmlhIiwiY3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJvcmRlciIsImNvbXBhcmVNdWx0aXBsZSIsImJhc2VQaWNrQnkiLCJiYXNlU2V0IiwiYmFzZVB1bGxBbGwiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsInByZXZpb3VzIiwiYmFzZVVuc2V0IiwiYmFzZVJlcGVhdCIsImJhc2VSZXN0Iiwic3RhcnQiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiZW5kIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwiYmFzZVdoaWxlIiwiaXNEcm9wIiwiYmFzZVdyYXBwZXJWYWx1ZSIsImFjdGlvbnMiLCJhY3Rpb24iLCJiYXNlWG9yIiwiYmFzZVppcE9iamVjdCIsImFzc2lnbkZ1bmMiLCJ2YWxzTGVuZ3RoIiwiY2FzdEFycmF5TGlrZU9iamVjdCIsImNhc3RGdW5jdGlvbiIsInN0cmluZ1RvUGF0aCIsImNhc3RSZXN0IiwiY2FzdFNsaWNlIiwiaWQiLCJzbGljZSIsImNvcHkiLCJhcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodEluZGV4IiwicmlnaHRMZW5ndGgiLCJpc05ldyIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsImNoYXJBdCIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsImNhbGxiYWNrIiwid29yZHMiLCJkZWJ1cnIiLCJjcmVhdGVDdG9yIiwidGhpc0JpbmRpbmciLCJjcmVhdGVGaW5kIiwiZmluZEluZGV4RnVuYyIsImNyZWF0ZUZsb3ciLCJmbGF0UmVzdCIsImZ1bmNzIiwicHJlcmVxIiwidGhydSIsIndyYXBwZXIiLCJnZXRGdW5jTmFtZSIsImZ1bmNOYW1lIiwiZ2V0RGF0YSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQXJ5IiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwiaXNGbGlwIiwiZ2V0SG9sZGVyIiwiaG9sZGVyc0NvdW50IiwiY291bnRIb2xkZXJzIiwibmV3SG9sZGVycyIsImNyZWF0ZVJlY3VycnkiLCJhcnJMZW5ndGgiLCJvbGRBcnJheSIsInJlb3JkZXIiLCJjcmVhdGVJbnZlcnRlciIsInRvSXRlcmF0ZWUiLCJiYXNlSW52ZXJ0ZXIiLCJjcmVhdGVNYXRoT3BlcmF0aW9uIiwib3BlcmF0b3IiLCJkZWZhdWx0VmFsdWUiLCJjcmVhdGVPdmVyIiwiYXJyYXlGdW5jIiwiY3JlYXRlUGFkZGluZyIsImNoYXJzIiwiY2hhcnNMZW5ndGgiLCJjcmVhdGVSYW5nZSIsInN0ZXAiLCJ0b0Zpbml0ZSIsImJhc2VSYW5nZSIsImNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24iLCJ0b051bWJlciIsIndyYXBGdW5jIiwiaXNDdXJyeSIsIm5ld0RhdGEiLCJzZXREYXRhIiwic2V0V3JhcFRvU3RyaW5nIiwiY3JlYXRlUm91bmQiLCJwcmVjaXNpb24iLCJ0b0ludGVnZXIiLCJwYWlyIiwiY3JlYXRlVG9QYWlycyIsInNldFRvUGFpcnMiLCJiYXNlVG9QYWlycyIsImNyZWF0ZVdyYXAiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJ0eXBlIiwiaXNLZXlhYmxlIiwiZ2V0VmFsdWUiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJjb3VudCIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInJhbmQiLCJtZW1vaXplIiwiY2hhckNvZGVBdCIsInF1b3RlIiwic3ViU3RyaW5nIiwiY2xvbmUiLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaGVhZCIsImludGVyc2VjdGlvbiIsIm1hcHBlZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJncm91cCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kIiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiZWZvcmUiLCJiaW5kS2V5IiwiV1JBUF9CSU5EX0ZMQUciLCJkZWJvdW5jZSIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsImludm9rZUZ1bmMiLCJ0aW1lIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwibGVhZGluZ0VkZ2UiLCJjYW5jZWwiLCJmbHVzaCIsImRlZmVyIiwiZGVsYXkiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJuZWdhdGUiLCJvdmVyQXJncyIsInRyYW5zZm9ybXMiLCJmdW5jc0xlbmd0aCIsInBhcnRpYWwiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0IiwiZ3RlIiwiaXNFcnJvciIsImlzSW50ZWdlciIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJsdCIsImx0ZSIsInRvQXJyYXkiLCJuZXh0IiwiZG9uZSIsIml0ZXJhdG9yVG9BcnJheSIsInJlbWFpbmRlciIsInRvTGVuZ3RoIiwiaXNCaW5hcnkiLCJhc3NpZ24iLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJhdCIsInByb3BzSW5kZXgiLCJwcm9wc0xlbmd0aCIsImRlZmF1bHRzRGVlcCIsIm1lcmdlV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlIiwibWVyZ2UiLCJvbWl0IiwiQ0xPTkVfREVFUF9GTEFHIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJ0b0xvd2VyQ2FzZSIsImNhcGl0YWxpemUiLCJ1cHBlckZpcnN0Iiwia2ViYWJDYXNlIiwibG93ZXJDYXNlIiwibG93ZXJGaXJzdCIsInNuYWtlQ2FzZSIsInN0YXJ0Q2FzZSIsInVwcGVyQ2FzZSIsInRvVXBwZXJDYXNlIiwicGF0dGVybiIsImhhc1VuaWNvZGVXb3JkIiwidW5pY29kZVdvcmRzIiwiYXNjaWlXb3JkcyIsImF0dGVtcHQiLCJiaW5kQWxsIiwibWV0aG9kTmFtZXMiLCJmbG93IiwiZmxvd1JpZ2h0IiwibWV0aG9kIiwibWV0aG9kT2YiLCJtaXhpbiIsIm92ZXIiLCJvdmVyRXZlcnkiLCJvdmVyU29tZSIsImJhc2VQcm9wZXJ0eURlZXAiLCJyYW5nZSIsInJhbmdlUmlnaHQiLCJhdWdlbmQiLCJhZGRlbmQiLCJkaXZpZGUiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJtdWx0aXBseSIsIm11bHRpcGxpZXIiLCJtdWx0aXBsaWNhbmQiLCJyb3VuZCIsInN1YnRyYWN0IiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJhZnRlciIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmNhdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJmaWxsIiwiYmFzZUZpbGwiLCJmaWx0ZXIiLCJmbGF0TWFwIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmcm9tUGFpcnMiLCJmdW5jdGlvbnMiLCJmdW5jdGlvbnNJbiIsImluaXRpYWwiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlcyIsIm1hdGNoZXNQcm9wZXJ0eSIsIm50aEFyZyIsIm9taXRCeSIsIm9uY2UiLCJvcmRlckJ5IiwicHJvcGVydHlPZiIsInB1bGxBbGxCeSIsInB1bGxBbGxXaXRoIiwicmVqZWN0IiwicmVtb3ZlIiwicmVzdCIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJzZXBhcmF0b3IiLCJsaW1pdCIsInNwcmVhZCIsInRhaWwiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ0YXAiLCJ0aHJvdHRsZSIsInRvUGF0aCIsImlzQXJyTGlrZSIsInVuYXJ5IiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGUiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3cmFwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZCIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJwb3NpdGlvbiIsImVzY2FwZSIsImVzY2FwZVJlZ0V4cCIsImV2ZXJ5IiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiYmFzZUluUmFuZ2UiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYU4iLCJpc05hdGl2ZSIsImlzTmlsIiwiaXNOdWxsIiwiaXNTYWZlSW50ZWdlciIsImlzVW5kZWZpbmVkIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJyZXBlYXQiLCJzYW1wbGUiLCJzb21lIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHMiLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJpbnRlcnBvbGF0ZSIsInJlRGVsaW1pdGVycyIsImV2YWx1YXRlIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInZhcmlhYmxlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJuZXdFbmQiLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwicHJlZml4IiwiZWFjaCIsImVhY2hSaWdodCIsImZpcnN0IiwiVkVSU0lPTiIsImlzRmlsdGVyIiwidGFrZU5hbWUiLCJkcm9wTmFtZSIsImNoZWNrSXRlcmF0ZWUiLCJpc1Rha2VyIiwibG9kYXNoRnVuYyIsInJldFVud3JhcHBlZCIsImlzTGF6eSIsInVzZUxhenkiLCJpc0h5YnJpZCIsImlzVW53cmFwcGVkIiwib25seUxhenkiLCJjaGFpbk5hbWUiLCJkaXIiLCJpc1JpZ2h0IiwidmlldyIsImdldFZpZXciLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwiaXRlckluZGV4IiwiY29tbWl0Iiwid3JhcHBlZCIsInRvSlNPTiIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3Vic3RyIiwiaGFzQmFzZW5hbWUiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwicGFyc2VQYXRoIiwicGF0aG5hbWUiLCJoYXNoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJjcmVhdGVQYXRoIiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJlcnIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwidmFsIiwidG9PYmplY3QiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYiIsImYiLCJlcnJvciIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJvd25FbnVtZXJhYmxlS2V5cyIsIlRvT2JqZWN0IiwidXNlU291cmNlTWFwIiwibGlzdCIsIml0ZW0iLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwiYmFzZTY0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2kiLCJtZW1vIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJhdHRycyIsImFkZEF0dHJzIiwiZWwiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJfY3JlYXRlVW5jb250cm9sbGFibGUiLCJfY3JlYXRlVW5jb250cm9sbGFibGUyIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiX25vdGlmeWluZyIsImNvbXBvbmVudCIsImhhbmRsZXIiLCJfdmFsdWVzIiwidW5tb3VudGVkIiwiZm9yY2VVcGRhdGUiLCJrZXlDb2RlIiwic2VhcmNoSW5wdXQiLCJoYXNLZXlDb2RlIiwid2hpY2giLCJjaGFyQ29kZSIsIm5hbWVzIiwiZm91bmROYW1lZEtleSIsImNvZGVzIiwiYWxpYXNlcyIsImlzRXZlbnRLZXkiLCJuYW1lT3JDb2RlIiwiY29kZSIsInRpdGxlIiwiYWxpYXMiLCJnIiwiX3R5cGVvZiIsIl9leHRlbmRzIiwiX3dhcm5pbmcyIiwiX2ludmFyaWFudDIiLCJfTG9jYXRpb25VdGlscyIsIl9QYXRoVXRpbHMiLCJfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyIiwiX0RPTVV0aWxzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsInN0YXRlIiwiUG9wU3RhdGVFdmVudCIsIkhhc2hDaGFuZ2VFdmVudCIsImNhblVzZURPTSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3JlZiIsIl93aW5kb3ckbG9jYXRpb24iLCJiYXNlbmFtZSIsImNyZWF0ZUxvY2F0aW9uIiwiY3JlYXRlS2V5Iiwia2V5TGVuZ3RoIiwic2V0U3RhdGUiLCJuZXh0U3RhdGUiLCJnbG9iYWxIaXN0b3J5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJub3RpZnlMaXN0ZW5lcnMiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiY3JlYXRlSHJlZiIsImNoZWNrRE9NTGlzdGVuZXJzIiwiZGVsdGEiLCJsaXN0ZW5lckNvdW50IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJjYW5Vc2VIaXN0b3J5Iiwic3VwcG9ydHNIaXN0b3J5Iiwic3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiZ2V0Q29uZmlybWF0aW9uIiwiX3Byb3BzJGtleUxlbmd0aCIsImZvcmNlTmV4dFBvcCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJvayIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImdvIiwiaW5pdGlhbExvY2F0aW9uIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInByb21wdCIsInVuYmxvY2siLCJzZXRQcm9tcHQiLCJsaXN0ZW4iLCJsaXN0ZW5lciIsInVubGlzdGVuIiwiYXBwZW5kTGlzdGVuZXIiLCJsb2NhdGlvbnNBcmVFcXVhbCIsIl9yZXNvbHZlUGF0aG5hbWUyIiwiX3ZhbHVlRXF1YWwyIiwiY3VycmVudExvY2F0aW9uIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwiayIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImhhc1RyYWlsaW5nU2xhc2giLCJ1cCIsInVuc2hpZnQiLCJ2YWx1ZUVxdWFsIiwiYVR5cGUiLCJhVmFsdWUiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwiX3dhcm5pbmciLCJsaXN0ZW5lcnMiLCJuZXh0UHJvbXB0IiwiaXNBY3RpdmUiLCJfbGVuIiwiX2tleSIsIm5vZGUiLCJhdHRhY2hFdmVudCIsImRldGFjaEV2ZW50IiwiY29uZmlybSIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwic3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2giLCJzdHJpY3RVcmlFbmNvZGUiLCJvYmplY3RBc3NpZ24iLCJkZWNvZGVDb21wb25lbnQiLCJlbmNvZGUiLCJvcHRzIiwic3RyaWN0IiwiZXh0cmFjdCIsInN0ciIsInF1ZXJ5U3RhcnQiLCJwYXJzZSIsImZvcm1hdHRlciIsImFycmF5Rm9ybWF0IiwicGFyc2VyRm9yQXJyYXlGb3JtYXQiLCJyZXQiLCJwYXJhbSIsInNoaWZ0Iiwia2V5c1NvcnRlciIsIk51bWJlciIsImVuY29kZXJGb3JBcnJheUZvcm1hdCIsInZhbDIiLCJ4IiwicGFyc2VVcmwiLCJ1cmwiLCJxdWVyeSIsInRva2VuIiwic2luZ2xlTWF0Y2hlciIsIm11bHRpTWF0Y2hlciIsImRlY29kZUNvbXBvbmVudHMiLCJjb21wb25lbnRzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwibGVmdCIsInJpZ2h0IiwiZGVjb2RlIiwidG9rZW5zIiwiZW5jb2RlZFVSSSIsInJlcGxhY2VNYXAiLCJjdXN0b21EZWNvZGVVUklDb21wb25lbnQiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJjaGlsZHJlbiIsImVtcHR5RnVuY3Rpb24iLCJpbnZhcmlhbnQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJpc1JlcXVpcmVkIiwiYm9vbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50IiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJtYWtlRW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJjcmVhdGVDbGFzcyIsIkNhbGVuZGFyQ29udGFpbmVyIiwidmlld01vZGVzIiwiZnJlZXplIiwiWUVBUlMiLCJNT05USFMiLCJEQVlTIiwiVElNRSIsIlRZUEVTIiwiRGF0ZXRpbWUiLCJwcm9wVHlwZXMiLCJvbkZvY3VzIiwib25CbHVyIiwib25DaGFuZ2UiLCJvblZpZXdNb2RlQ2hhbmdlIiwibG9jYWxlIiwidXRjIiwiaW5wdXRQcm9wcyIsInRpbWVDb25zdHJhaW50cyIsInZpZXdNb2RlIiwiaXNWYWxpZERhdGUiLCJvcGVuIiwic3RyaWN0UGFyc2luZyIsImNsb3NlT25TZWxlY3QiLCJjbG9zZU9uVGFiIiwiZ2V0SW5pdGlhbFN0YXRlIiwiZ2V0U3RhdGVGcm9tUHJvcHMiLCJjdXJyZW50VmlldyIsImRhdGVGb3JtYXQiLCJ1cGRhdGVPbiIsInBhcnNlRGF0ZSIsImRhdGUiLCJmb3JtYXRzIiwicGFyc2VkRGF0ZSIsImxvY2FsTW9tZW50IiwiZGF0ZXRpbWUiLCJpc1ZhbGlkIiwic2VsZWN0ZWREYXRlIiwidmlld0RhdGUiLCJpbnB1dFZhbHVlIiwiZ2V0Rm9ybWF0cyIsInN0YXJ0T2YiLCJnZXRVcGRhdGVPbiIsImlucHV0Rm9ybWF0IiwidGltZUZvcm1hdCIsImxvY2FsZURhdGEiLCJsb25nRGF0ZUZvcm1hdCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJ1cGRhdGVkU3RhdGUiLCJ1cGRhdGVkVmlld0RhdGUiLCJ1cGRhdGVkU2VsZWN0ZWREYXRlIiwibG9jYWwiLCJvbklucHV0Q2hhbmdlIiwib25JbnB1dEtleSIsImNsb3NlQ2FsZW5kYXIiLCJzaG93VmlldyIsIm1lIiwic2V0RGF0ZSIsIm5leHRWaWV3cyIsIm1vbnRoIiwieWVhciIsImdldEF0dHJpYnV0ZSIsImFkZFRpbWUiLCJhbW91bnQiLCJ0b1NlbGVjdGVkIiwidXBkYXRlVGltZSIsInN1YnRyYWN0VGltZSIsIm9wIiwiYWxsb3dlZFNldFRpbWUiLCJzZXRUaW1lIiwibmV4dFR5cGUiLCJ1cGRhdGVTZWxlY3RlZERhdGUiLCJjbG9zZSIsIm1vZGlmaWVyIiwiY3VycmVudERhdGUiLCJjbGFzc05hbWUiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwib3BlbkNhbGVuZGFyIiwiY29tcG9uZW50UHJvcHMiLCJmcm9tUHJvcHMiLCJmcm9tU3RhdGUiLCJmcm9tVGhpcyIsImdldENvbXBvbmVudFByb3BzIiwiZmluYWxJbnB1dFByb3BzIiwib25DbGljayIsIm9uS2V5RG93biIsInJlbmRlcklucHV0Iiwidmlld1Byb3BzIiwiZW1wdHlPYmplY3QiLCJfaW52YXJpYW50IiwiUmVhY3RDb21wb25lbnQiLCJpbmplY3RlZE1peGlucyIsIlJlYWN0Q2xhc3NJbnRlcmZhY2UiLCJtaXhpbnMiLCJzdGF0aWNzIiwiY29udGV4dFR5cGVzIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXRDaGlsZENvbnRleHQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJSZWFjdENsYXNzU3RhdGljSW50ZXJmYWNlIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiUkVTRVJWRURfU1BFQ19LRVlTIiwibWl4U3BlY0ludG9Db21wb25lbnQiLCJjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbiIsInNwZWNQb2xpY3kiLCJtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudCIsImF1dG9iaW5kIiwic3BlYyIsImlzQWxyZWFkeURlZmluZWQiLCJhdXRvQmluZFBhaXJzIiwiX19yZWFjdEF1dG9CaW5kUGFpcnMiLCJSZWFjdENsYXNzTWl4aW4iLCJpc1JlYWN0Q2xhc3NNZXRob2QiLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzIiwib25lIiwidHdvIiwiUmVhY3RDbGFzc0NvbXBvbmVudCIsIklzTW91bnRlZFByZU1peGluIiwiX19pc01vdW50ZWQiLCJJc01vdW50ZWRQb3N0TWl4aW4iLCJuZXdTdGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJpc01vdW50ZWQiLCJhdXRvQmluZEtleSIsImJpbmRBdXRvQmluZE1ldGhvZHMiLCJpbml0aWFsU3RhdGUiLCJ2aWV3Q29tcG9uZW50cyIsImRheXMiLCJtb250aHMiLCJ5ZWFycyIsIkRhdGVUaW1lUGlja2VyRGF5cyIsInRhYmxlQ2hpbGRyZW4iLCJmb290ZXIiLCJyZW5kZXJGb290ZXIiLCJjb2xTcGFuIiwiZ2V0RGF5c09mV2VlayIsImRheSIsInJlbmRlckRheXMiLCJfd2Vla2RheXNNaW4iLCJmaXJzdERheU9mV2VlayIsImRvdyIsImlzRGlzYWJsZWQiLCJkYXlQcm9wcyIsInNlbGVjdGVkIiwicHJldk1vbnRoIiwiY3VycmVudFllYXIiLCJjdXJyZW50TW9udGgiLCJ3ZWVrcyIsInJlbmRlcmVyIiwicmVuZGVyRGF5IiwiYWx3YXlzVmFsaWREYXRlIiwiZGF5c0luTW9udGgiLCJsYXN0RGF5IiwiaXNCZWZvcmUiLCJpc1NhbWUiLCJEYXRlVGltZVBpY2tlck1vbnRocyIsInJlbmRlck1vbnRocyIsIm5vT2ZEYXlzSW5Nb250aCIsInJvd3MiLCJyZW5kZXJNb250aCIsImVuZE9mIiwidXBkYXRlU2VsZWN0ZWRNb250aCIsIm1vbnRoU3RyRml4ZWRMZW5ndGgiLCJtb250aHNTaG9ydCIsIkRhdGVUaW1lUGlja2VyWWVhcnMiLCJyZW5kZXJZZWFycyIsIm5vT2ZEYXlzSW5ZZWFyIiwicmVuZGVyWWVhciIsImRheU9mWWVhciIsInVwZGF0ZVNlbGVjdGVkWWVhciIsIkRhdGVUaW1lUGlja2VyVGltZSIsImNhbGN1bGF0ZVN0YXRlIiwiY291bnRlcnMiLCJkYXlwYXJ0IiwicmVuZGVyQ291bnRlciIsIm9uVG91Y2hTdGFydCIsIm9uU3RhcnRDbGlja2luZyIsIm9uTW91c2VEb3duIiwib25Db250ZXh0TWVudSIsImRpc2FibGVDb250ZXh0TWVudSIsInJlbmRlckRheVBhcnQiLCJ1cGRhdGVNaWxsaSIsInJlbmRlckhlYWRlciIsIm1pbGxpIiwidGltZXIiLCJpbmNyZWFzZVRpbWVyIiwic2V0SW50ZXJ2YWwiLCJtb3VzZVVwTGlzdGVuZXIiLCJjbGVhckludGVydmFsIiwiYm9keSIsInBhZFZhbHVlcyIsInRvZ2dsZURheVBhcnQiLCJpbmNyZWFzZSIsImRlY3JlYXNlIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsInN0b3JlIiwiVVNFX1NZTUJPTCIsIkVYSVRJTkciLCJFTlRFUkVEIiwiRU5URVJJTkciLCJFWElURUQiLCJVTk1PVU5URUQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVhY3QiLCJfcmVhY3REb20iLCJfcmVhY3RMaWZlY3ljbGVzQ29tcGF0IiwiVHJhbnNpdGlvbiIsIl9SZWFjdCRDb21wb25lbnQiLCJpbml0aWFsU3RhdHVzIiwicGFyZW50R3JvdXAiLCJ0cmFuc2l0aW9uR3JvdXAiLCJhcHBlYXIiLCJpc01vdW50aW5nIiwiZW50ZXIiLCJhcHBlYXJTdGF0dXMiLCJpbiIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJzdGF0dXMiLCJuZXh0Q2FsbGJhY2siLCJwcmV2U3RhdGUiLCJ1cGRhdGVTdGF0dXMiLCJwcmV2UHJvcHMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJleGl0IiwidGltZW91dCIsIm1vdW50aW5nIiwiZmluZERPTU5vZGUiLCJwZXJmb3JtRW50ZXIiLCJwZXJmb3JtRXhpdCIsIl90aGlzMiIsImFwcGVhcmluZyIsInRpbWVvdXRzIiwiZW50ZXJUaW1lb3V0Iiwib25FbnRlciIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJvbkVudGVyZWQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJvbkV4aXRlZCIsInNldE5leHRDYWxsYmFjayIsIl90aGlzNCIsImFjdGl2ZSIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsIl90aGlzJHByb3BzIiwiY2hpbGRQcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiY2hpbGQiLCJDaGlsZHJlbiIsIm9ubHkiLCJjbG9uZUVsZW1lbnQiLCJfZGVmYXVsdCIsInBvbHlmaWxsIiwibG9jYWxzIiwiY3R4IiwiaGlkZSIsIlBST1RPVFlQRSIsIiRleHBvcnQiLCJvd24iLCJvdXQiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsIklTX1dSQVAiLCJXIiwiZXhwUHJvdG8iLCJDIiwidmlydHVhbCIsIlIiLCJVIiwiX19nIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJmYWxsYmFjayIsInZhbGlkYXRvcnMiLCJfbGVuMiIsIl9rZXkyIiwidmFsaWRhdG9yIiwiX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyIiwiY29tcG9uZW50TmFtZVNhZmUiLCJwcm9wRnVsbE5hbWVTYWZlIiwiQ2FudmFzIiwiY2xzIiwiY29udGFpbmVyIiwiJCIsImRpcmVjdGlvbiIsInRvcCIsImFwcGVuZFRvIiwiZ2V0Q29udGV4dCIsIkdfdm1sQ2FudmFzTWFuYWdlciIsImluaXRFbGVtZW50IiwiZGV2aWNlUGl4ZWxSYXRpbyIsImJhY2tpbmdTdG9yZVJhdGlvIiwid2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJvQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJwaXhlbFJhdGlvIiwicmVzaXplIiwid2lkdGgiLCJoZWlnaHQiLCJ0ZXh0Q29udGFpbmVyIiwidGV4dCIsIl90ZXh0Q2FjaGUiLCJQbG90IiwiZGF0YV8iLCJvcHRpb25zXyIsInBsdWdpbnMiLCJzZXJpZXMiLCJjb2xvcnMiLCJsZWdlbmQiLCJzaG93Iiwibm9Db2x1bW5zIiwibGFiZWxGb3JtYXR0ZXIiLCJsYWJlbEJveEJvcmRlckNvbG9yIiwibWFyZ2luIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZE9wYWNpdHkiLCJzb3J0ZWQiLCJ4YXhpcyIsImZvbnQiLCJjb2xvciIsInRpY2tDb2xvciIsImludmVyc2VUcmFuc2Zvcm0iLCJhdXRvc2NhbGVNYXJnaW4iLCJ0aWNrcyIsInRpY2tGb3JtYXR0ZXIiLCJsYWJlbFdpZHRoIiwibGFiZWxIZWlnaHQiLCJyZXNlcnZlU3BhY2UiLCJ0aWNrTGVuZ3RoIiwiYWxpZ25UaWNrc1dpdGhBeGlzIiwidGlja0RlY2ltYWxzIiwidGlja1NpemUiLCJtaW5UaWNrU2l6ZSIsInlheGlzIiwieGF4ZXMiLCJ5YXhlcyIsInBvaW50cyIsInJhZGl1cyIsImxpbmVXaWR0aCIsImZpbGxDb2xvciIsImxpbmVzIiwic3RlcHMiLCJiYXJzIiwiYmFyV2lkdGgiLCJhbGlnbiIsImhvcml6b250YWwiLCJ6ZXJvIiwic2hhZG93U2l6ZSIsImhpZ2hsaWdodENvbG9yIiwiZ3JpZCIsImFib3ZlRGF0YSIsImJvcmRlckNvbG9yIiwibGFiZWxNYXJnaW4iLCJheGlzTWFyZ2luIiwiYm9yZGVyV2lkdGgiLCJtaW5Cb3JkZXJNYXJnaW4iLCJtYXJraW5ncyIsIm1hcmtpbmdzQ29sb3IiLCJtYXJraW5nc0xpbmVXaWR0aCIsImNsaWNrYWJsZSIsImhvdmVyYWJsZSIsImF1dG9IaWdobGlnaHQiLCJtb3VzZUFjdGl2ZVJhZGl1cyIsImludGVyYWN0aW9uIiwicmVkcmF3T3ZlcmxheUludGVydmFsIiwiaG9va3MiLCJzdXJmYWNlIiwib3ZlcmxheSIsImV2ZW50SG9sZGVyIiwib2N0eCIsInBsb3RPZmZzZXQiLCJib3R0b20iLCJwbG90V2lkdGgiLCJwbG90SGVpZ2h0IiwicHJvY2Vzc09wdGlvbnMiLCJwcm9jZXNzUmF3RGF0YSIsInByb2Nlc3NEYXRhcG9pbnRzIiwicHJvY2Vzc09mZnNldCIsImRyYXdCYWNrZ3JvdW5kIiwiZHJhd1NlcmllcyIsImRyYXciLCJiaW5kRXZlbnRzIiwiZHJhd092ZXJsYXkiLCJzaHV0ZG93biIsInBsb3QiLCJleGVjdXRlSG9va3MiLCJob29rIiwicmVzIiwicGFyc2VEYXRhIiwibmVlZGVkQ29sb3JzIiwibWF4SW5kZXgiLCJzYyIsImNvbG9yUG9vbCIsImNvbG9yUG9vbFNpemUiLCJ2YXJpYXRpb24iLCJzY2FsZSIsImNvbG9yaSIsInYiLCJnZXRPckNyZWF0ZUF4aXMiLCJheGlzTnVtYmVyIiwiZmlsbEluU2VyaWVzT3B0aW9ucyIsInBzIiwidG9wU2VudHJ5IiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJib3R0b21TZW50cnkiLCJORUdBVElWRV9JTkZJTklUWSIsImZha2VJbmZpbml0eSIsIk1BWF9WQUxVRSIsInVwZGF0ZUF4aXMiLCJheGlzIiwiZGF0YW1pbiIsImRhdGFtYXgiLCJhbGxBeGVzIiwidXNlZCIsImRhdGFwb2ludHMiLCJyZXF1aXJlZCIsInkiLCJhdXRvc2NhbGUiLCJwb2ludHNpemUiLCJpbnNlcnRTdGVwcyIsIm51bGxpZnkiLCJ4bWluIiwieW1pbiIsInhtYXgiLCJ5bWF4IiwicHJvY2Vzc0RhdGEiLCJjb29yZCIsImdyZXAiLCJjYW52YXNUb0F4aXNDb29yZHMiLCJwb3MiLCJjMnAiLCJ4MSIsInkxIiwiYXhlcyIsInJlZHJhd1RpbWVvdXQiLCJ1bmJpbmQiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VMZWF2ZSIsImFsbG9jYXRlQXhpc0JveEZpcnN0UGhhc2UiLCJsdyIsImxoIiwiaXNYQXhpcyIsInBhZGRpbmciLCJpbm5lcm1vc3QiLCJvdXRlcm1vc3QiLCJmb3VuZCIsImJveCIsInNldHVwR3JpZCIsInNob3dHcmlkIiwiYXhpc09wdHMiLCJ3aWRlbiIsInNldFJhbmdlIiwiYWxsb2NhdGVkQXhlcyIsIm5vVGlja3MiLCJzcXJ0IiwiZGVjIiwibG9nIiwiTE4xMCIsIm1heERlYyIsIm1hZ24iLCJwb3ciLCJub3JtIiwidGlja0dlbmVyYXRvciIsInByZXYiLCJmbG9vckluQmFzZSIsIk5hTiIsImZhY3RvciIsImZvcm1hdHRlZCIsImRlY2ltYWwiLCJvdGhlckF4aXMiLCJuaWNlVGlja3MiLCJleHRyYURlYyIsInRzIiwidG9GaXhlZCIsInNldHVwVGlja0dlbmVyYXRpb24iLCJvdGlja3MiLCJsYWJlbCIsInNldFRpY2tzIiwic25hcFJhbmdlVG9UaWNrcyIsIm1heFdpZHRoIiwibGVnYWN5U3R5bGVzIiwibGF5ZXIiLCJpbmZvIiwiZ2V0VGV4dEluZm8iLCJtZWFzdXJlVGlja0xhYmVscyIsIm1pbk1hcmdpbiIsIm1hcmdpbnMiLCJhZGp1c3RMYXlvdXRGb3JUaGluZ3NTdGlja2luZ091dCIsImFsbG9jYXRlQXhpc0JveFNlY29uZFBoYXNlIiwiaXQiLCJhYnMiLCJwMmMiLCJzZXRUcmFuc2Zvcm1hdGlvbkhlbHBlcnMiLCJ0aWNrIiwiaGFsaWduIiwidmFsaWduIiwicmVtb3ZlVGV4dCIsImFkZFRleHQiLCJodG1sIiwiZnJhZ21lbnRzIiwicm93U3RhcnRlZCIsImxmIiwiYXNjZW5kaW5nIiwidGFibGUiLCJkaXYiLCJwcmVwZW5kVG8iLCJpbnNlcnRMZWdlbmQiLCJzYXZlIiwidHJhbnNsYXRlIiwiZmlsbFN0eWxlIiwiZ2V0Q29sb3JPckdyYWRpZW50IiwiZmlsbFJlY3QiLCJyZXN0b3JlIiwiZHJhd0dyaWQiLCJ0cmlnZ2VyUmVkcmF3T3ZlcmxheSIsImV4dHJhY3RSYW5nZSIsInJhbmdlcyIsInRtcCIsImJ3IiwiYmMiLCJnZXRBeGVzIiwieHJhbmdlIiwieXJhbmdlIiwieGVxdWFsIiwieWVxdWFsIiwic3ViUGl4ZWwiLCJiZWdpblBhdGgiLCJzdHJva2VTdHlsZSIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsInhvZmYiLCJ5b2ZmIiwic3Ryb2tlUmVjdCIsInBsb3RMaW5lIiwieG9mZnNldCIsInlvZmZzZXQiLCJheGlzeCIsImF4aXN5IiwicHJldngiLCJwcmV2eSIsIngyIiwieTIiLCJsaW5lSm9pbiIsInN3IiwiYW5nbGUiLCJQSSIsInNpbiIsImNvcyIsImdldEZpbGxTdHlsZSIsImFyZWFPcGVuIiwieXBvcyIsInNlZ21lbnRTdGFydCIsInNlZ21lbnRFbmQiLCJ4MW9sZCIsIngyb2xkIiwicGxvdExpbmVBcmVhIiwiZHJhd1Nlcmllc0xpbmVzIiwiYmFyTGVmdCIsImZpbGxTdHlsZUNhbGxiYWNrIiwiYmFyUmlnaHQiLCJkcmF3QmFyIiwicGxvdEJhcnMiLCJkcmF3U2VyaWVzQmFycyIsInBsb3RQb2ludHMiLCJzaGFkb3ciLCJhcmMiLCJjbG9zZVBhdGgiLCJ3IiwiZHJhd1Nlcmllc1BvaW50cyIsImRyYXdMZWZ0IiwiZHJhd1JpZ2h0IiwiZHJhd1RvcCIsImRyYXdCb3R0b20iLCJmaWxsb3B0aW9ucyIsInNlcmllc0NvbG9yIiwibm9ybWFsaXplIiwiZ2V0UGxhY2Vob2xkZXIiLCJnZXRDYW52YXMiLCJnZXRQbG90T2Zmc2V0IiwiZ2V0WEF4ZXMiLCJnZXRZQXhlcyIsImdldE9wdGlvbnMiLCJoaWdobGlnaHQiLCJ1bmhpZ2hsaWdodCIsInBvaW50T2Zmc2V0IiwicG9pbnQiLCJkZXN0cm95IiwicmVtb3ZlRGF0YSIsImVtcHR5IiwiaGlnaGxpZ2h0cyIsImluaXQiLCJpbml0UGx1Z2lucyIsImF4aXNPcHRpb25zIiwiYXhpc0NvdW50IiwiZm9udFNpemUiLCJmb250U2l6ZURlZmF1bHQiLCJmb250RGVmYXVsdHMiLCJ2YXJpYW50Iiwid2VpZ2h0IiwiZmFtaWx5IiwibGluZUhlaWdodCIsIngyYXhpcyIsInkyYXhpcyIsImNvbG9yZWRBcmVhcyIsImNvbG9yZWRBcmVhc0NvbG9yIiwicGFyc2VPcHRpb25zIiwiaGFzQ2xhc3MiLCJleGlzdGluZyIsInNldHVwQ2FudmFzZXMiLCJtb3VzZW1vdmUiLCJjbGljayIsInRyaWdnZXJDbGlja0hvdmVyRXZlbnQiLCJldmVudG5hbWUiLCJzZXJpZXNGaWx0ZXIiLCJjYW52YXNYIiwicGFnZVgiLCJjYW52YXNZIiwicGFnZVkiLCJtb3VzZVgiLCJtb3VzZVkiLCJtYXhEaXN0YW5jZSIsInNtYWxsZXN0RGlzdGFuY2UiLCJteCIsIm15IiwibWF4eCIsIm1heHkiLCJkeCIsImR5IiwiZGlzdCIsImRhdGFwb2ludCIsImRhdGFJbmRleCIsInNlcmllc0luZGV4IiwiZmluZE5lYXJieUl0ZW0iLCJoIiwiYXV0byIsInRyaWdnZXIiLCJoaSIsImRyYXdCYXJIaWdobGlnaHQiLCJkcmF3UG9pbnRIaWdobGlnaHQiLCJpbmRleE9mSGlnaGxpZ2h0IiwicG9pbnRSYWRpdXMiLCJkZWZhdWx0Q29sb3IiLCJncmFkaWVudCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiY28iLCJicmlnaHRuZXNzIiwib3BhY2l0eSIsImFkZENvbG9yU3RvcCIsIm1ha2UiLCJlbGVtIiwibm9kZU5hbWUiLCJsb29rdXBDb2xvcnMiLCJhcXVhIiwiYXp1cmUiLCJiZWlnZSIsImJsYWNrIiwiYmx1ZSIsImJyb3duIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ3JleSIsImRhcmtncmVlbiIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3Zpb2xldCIsImZ1Y2hzaWEiLCJnb2xkIiwiZ3JlZW4iLCJpbmRpZ28iLCJraGFraSIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y3lhbiIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHllbGxvdyIsImxpbWUiLCJtYWdlbnRhIiwibWFyb29uIiwibmF2eSIsIm9saXZlIiwib3JhbmdlIiwicGluayIsInB1cnBsZSIsInZpb2xldCIsInJlZCIsInNpbHZlciIsIndoaXRlIiwieWVsbG93IiwialF1ZXJ5IiwiZGV0YWNoIiwiY2xlYXJSZWN0IiwibGF5ZXJLZXkiLCJnZXRUZXh0TGF5ZXIiLCJsYXllckNhY2hlIiwic3R5bGVLZXkiLCJzdHlsZUNhY2hlIiwicG9zaXRpb25zIiwicmVuZGVyZWQiLCJhcHBlbmQiLCJpbnNlcnRBZnRlciIsImFkZENsYXNzIiwidGV4dFN0eWxlIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJPIiwiQXR0cmlidXRlcyIsIklPYmplY3QiLCJkZWZpbmVkIiwib3duZXJEb2N1bWVudCIsIl9jYW1lbGl6ZVN0eWxlIiwiX2dldENvbXB1dGVkU3R5bGUyIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9oeXBoZW5hdGVTdHlsZSIsIl9pc1RyYW5zZm9ybSIsIl9yZW1vdmVTdHlsZSIsIl9wcm9wZXJ0aWVzIiwiY3JlYXRlRGVzYyIsImNvbXBvbmVudE9yRWxlbWVudCIsIl9vd25lckRvY3VtZW50MiIsIl9yZWFjdERvbTIiLCJ2YWxpZGF0ZSIsImNoZWNrVHlwZSIsImNoYWluZWRDaGVja1R5cGUiLCJwcm9wVHlwZSIsIl9hY3RpdmVFbGVtZW50MiIsIl9jb250YWluczIiLCJfaW5ET00yIiwiX3Byb3BUeXBlczIiLCJfY29tcG9uZW50T3JFbGVtZW50MiIsIl9kZXByZWNhdGVkMiIsIl9lbGVtZW50VHlwZTIiLCJfTW9kYWxNYW5hZ2VyMiIsIl9Qb3J0YWwyIiwiX1JlZkhvbGRlcjIiLCJfYWRkRXZlbnRMaXN0ZW5lcjIiLCJfYWRkRm9jdXNMaXN0ZW5lcjIiLCJfZ2V0Q29udGFpbmVyMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwibW9kYWxNYW5hZ2VyIiwiTW9kYWwiLCJzZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0cyIsIm9taXRQcm9wcyIsIm5ld1Byb3BzIiwidHJhbnNpdGlvbiIsImJhY2tkcm9wIiwiZGlhbG9nIiwiZmlsdGVyZWRQcm9wcyIsImV4aXRlZCIsIl9kaWFsb2ckcHJvcHMiLCJyb2xlIiwidGFiSW5kZXgiLCJoYW5kbGVIaWRkZW4iLCJzZXRNb3VudE5vZGUiLCJvblJlbmRlcmVkIiwib25Qb3J0YWxSZW5kZXJlZCIsInNldE1vZGFsTm9kZVJlZiIsInJlbmRlckJhY2tkcm9wIiwic2V0RGlhbG9nUmVmIiwiY2hlY2tGb3JGb2N1cyIsIl9pc01vdW50ZWQiLCJvblNob3ciLCJvbkhpZGUiLCJfcHJvcHMyIiwiYXV0b0ZvY3VzIiwiZGlhbG9nRWxlbWVudCIsImdldERpYWxvZ0VsZW1lbnQiLCJjdXJyZW50QWN0aXZlRWxlbWVudCIsImxhc3RGb2N1cyIsImhhc0F0dHJpYnV0ZSIsImZvY3VzIiwicmVzdG9yZUxhc3RGb2N1cyIsImlzVG9wTW9kYWwiLCJtYW5hZ2VyIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2luaXRpYWxpc2VQcm9wcyIsIm9uRXNjYXBlS2V5RG93biIsIm9uRXNjYXBlS2V5VXAiLCJvbkJhY2tkcm9wQ2xpY2siLCJiYWNrZHJvcFN0eWxlIiwiYmFja2Ryb3BDbGFzc05hbWUiLCJjb250YWluZXJDbGFzc05hbWUiLCJrZXlib2FyZCIsImJhY2tkcm9wVHJhbnNpdGlvbiIsImVuZm9yY2VGb2N1cyIsInJlc3RvcmVGb2N1cyIsIl9wcm9wczMiLCJoYW5kbGVCYWNrZHJvcENsaWNrIiwiZG9jIiwiX29uRG9jdW1lbnRLZXlkb3duTGlzdGVuZXIiLCJoYW5kbGVEb2N1bWVudEtleURvd24iLCJfb25Eb2N1bWVudEtleXVwTGlzdGVuZXIiLCJoYW5kbGVEb2N1bWVudEtleVVwIiwiX29uRm9jdXNpbkxpc3RlbmVyIiwibW91bnROb2RlIiwiZ2V0TW91bnROb2RlIiwibW9kYWxOb2RlIiwiX3Byb3BzNCIsImN1cnJlbnRUYXJnZXQiLCJNYW5hZ2VyIiwiZm9ybWF0RGF0ZSIsImZtdCIsIm1vbnRoTmFtZXMiLCJkYXlOYW1lcyIsInN0cmZ0aW1lIiwibGVmdFBhZCIsImhvdXJzMTIiLCJnZXRIb3VycyIsImlzQU0iLCJnZXREYXkiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldEZ1bGxZZWFyIiwibWFrZVV0Y1dyYXBwZXIiLCJhZGRQcm94eU1ldGhvZCIsInNvdXJjZU9iaiIsInNvdXJjZU1ldGhvZCIsInRhcmdldE9iaiIsInRhcmdldE1ldGhvZCIsImRhdGVHZW5lcmF0b3IiLCJ0aW1lem9uZSIsInRpbWV6b25lSlMiLCJzZXRUaW1lem9uZSIsInRpbWVVbml0U2l6ZSIsImJhc2VTcGVjIiwic3BlY01vbnRocyIsInNwZWNRdWFydGVycyIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJxdWFydGVyIiwiYXhpc05hbWUiLCJtaW5TaXplIiwidW5pdCIsInNldFNlY29uZHMiLCJzZXRNaW51dGVzIiwic2V0SG91cnMiLCJzZXRNb250aCIsInNldEZ1bGxZZWFyIiwic2V0TWlsbGlzZWNvbmRzIiwiY2FycnkiLCJnZXRUaW1lIiwidGltZWZvcm1hdCIsInVzZVF1YXJ0ZXJzIiwic3BhbiIsInN1ZmZpeCIsInR3ZWx2ZUhvdXJDbG9jayIsImhvdXJDb2RlIiwicm93Q29tcG9uZW50cyIsImdlbmVyYXRlUm93cyIsImhlYWRlckNvbXBvbmVudHMiLCJnZW5lcmF0ZUhlYWRlcnMiLCJ0YWJsZUNsYXNzIiwidGhlYWRTdHlsZSIsInRib2R5U3R5bGUiLCJjb2xzIiwiY2VsbHMiLCJjb2xEYXRhIiwiaGVhZGVyU3R5bGUiLCJjdXJzb3IiLCJoYW5kbGVTb3J0IiwiY29sIiwic29ydEZpZWxkIiwicm93U3R5bGUiLCJoYW5kbGVDbGljayIsInJvdyIsInRvUHJlY2lzaW9uIiwib25Tb3J0IiwiYml0bWFwIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsInB4IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJkZWZhdWx0Q29udGFpbmVyIiwiX2l0ZXJhdG9yMiIsIl9zeW1ib2wyIiwicmVjYWxjIiwiX2luRE9NIiwic2Nyb2xsRGl2Iiwib3ZlcmZsb3ciLCJvZmZzZXRXaWR0aCIsImFGdW5jdGlvbiIsInRoYXQiLCJzaGFyZWQiLCJTSEFSRUQiLCJjb3B5cmlnaHQiLCJFbXB0eSIsImRQcyIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImRpc3BsYXkiLCJzcmMiLCJjb250ZW50V2luZG93Iiwid3JpdGUiLCJQcm9wZXJ0aWVzIiwiZGVmIiwiVEFHIiwic3RhdCIsIkxJQlJBUlkiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiYW5pbWF0aW9uRW5kIiwiYW5pbWF0aW9uRGVsYXkiLCJhbmltYXRpb25UaW1pbmciLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbk5hbWUiLCJ0cmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwidHJhbnNpdGlvblRpbWluZyIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsIl9nZXRUcmFuc2l0aW9uUHJvcGVydCIsInZlbmRvck1hcCIsIk1veiIsIldlYmtpdCIsIm1zIiwidmVuZG9ycyIsInZlbmRvciIsImdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzIiwidGltaW5nIiwiZHVyYXRpb24iLCJvbiIsImNhcHR1cmUiLCJzcmNFbGVtZW50Iiwib2ZmIiwiX293bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiUm9vdENsb3NlV3JhcHBlciIsImRpc2FibGVkIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsImRvY3VtZW50TW91c2VDYXB0dXJlTGlzdGVuZXIiLCJoYW5kbGVNb3VzZUNhcHR1cmUiLCJkb2N1bWVudE1vdXNlTGlzdGVuZXIiLCJoYW5kbGVNb3VzZSIsImRvY3VtZW50S2V5dXBMaXN0ZW5lciIsImhhbmRsZUtleVVwIiwicHJldmVudE1vdXNlUm9vdENsb3NlIiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImlzTW9kaWZpZWRFdmVudCIsImJ1dHRvbiIsImlzTGVmdENsaWNrRXZlbnQiLCJvblJvb3RDbG9zZSIsIl9pc1dpbmRvdzIiLCJ0YWdOYW1lIiwiaXNCb2R5IiwiZnVsbFdpZHRoIiwiaW5uZXJXaWR0aCIsImRvY3VtZW50RWxlbWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib2R5SXNPdmVyZmxvd2luZyIsInNjcm9sbEhlaWdodCIsIl9vbiIsIl9vZmYiLCJfZmlsdGVyIiwiX2xpc3RlbiIsIl9Qb3NpdGlvbjIiLCJfUm9vdENsb3NlV3JhcHBlcjIiLCJPdmVybGF5IiwiY29udGFpbmVyUGFkZGluZyIsInBsYWNlbWVudCIsInNob3VsZFVwZGF0ZVBvc2l0aW9uIiwicm9vdENsb3NlIiwib25IaWRkZW5MaXN0ZW5lciIsImlzIiwidG9JT2JqZWN0IiwiYXJyYXlJbmRleE9mIiwiY29mIiwiJGF0IiwiaXRlcmF0ZWQiLCJfdCIsInJldHVyblRoaXMiLCJyZWRlZmluZSIsIkl0ZXJhdG9ycyIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJJVEVSQVRPUiIsIkJVR0dZIiwiVkFMVUVTIiwiQmFzZSIsIk5BTUUiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiZ2V0TWV0aG9kIiwia2luZCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiaGlkZGVuS2V5cyIsInBJRSIsImdPUEQiLCJERVNDUklQVE9SUyIsImdldEtleXMiLCJpc0VudW0iLCJpc0VudHJpZXMiLCJfY2FtZWxpemUiLCJtc1BhdHRlcm4iLCJfb24yIiwiX29mZjIiLCJiYXNlVmFsIiwiX0xlZ2FjeVBvcnRhbDIiLCJQb3J0YWwiLCJzZXRDb250YWluZXIiLCJfcG9ydGFsQ29udGFpbmVyTm9kZSIsImNyZWF0ZVBvcnRhbCIsIndpbiIsIl9pc1dpbmRvdyIsImRvY0VsZW0iLCJfY29udGFpbnMiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsImNsaWVudFRvcCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJvZmZzZXRIZWlnaHQiLCJzY3JvbGxUbyIsIlNpemUiLCJTSVpFX01BUCIsImxhcmdlIiwibWVkaXVtIiwic21hbGwiLCJ4c21hbGwiLCJsZyIsIm1kIiwic20iLCJ4cyIsIkRFVklDRV9TSVpFUyIsIlN0YXRlIiwiU1VDQ0VTUyIsIldBUk5JTkciLCJEQU5HRVIiLCJJTkZPIiwiU3R5bGUiLCJic0NsYXNzIiwiZGVmYXVsdENsYXNzIiwiYnNTdHlsZXMiLCJkZWZhdWx0U3R5bGUiLCJTVFlMRVMiLCJic1N0eWxlIiwiYnNTaXplcyIsInNpemVzIiwiZGVmYXVsdFNpemUiLCJTSVpFUyIsIm1hcHBlZFNpemUiLCJic1NpemUiLCJnZXRDbGFzc1NldCIsIl9jbGFzc2VzIiwiZ2V0QnNQcm9wcyIsImJzUm9sZSIsImlzQnNQcm9wIiwic3BsaXRCc1Byb3BzIiwiZWxlbWVudFByb3BzIiwic3BsaXRCc1Byb3BzQW5kT21pdCIsIm9taXR0ZWRQcm9wTmFtZXMiLCJpc09taXR0ZWRQcm9wIiwiX3JlZjIiLCJzdHlsZVZhcmlhbnQiLCJfY3VycnkiLCJpZFByb3BUeXBlIiwiYWNjb3JkaW9uIiwiYWN0aXZlS2V5Iiwib25TZWxlY3QiLCJnZW5lcmF0ZUNoaWxkSWQiLCIkYnNfcGFuZWxHcm91cCIsImdldElkIiwiaGVhZGVyUm9sZSIsInBhbmVsUm9sZSIsIm9uVG9nZ2xlIiwiUGFuZWxHcm91cCIsImhhbmRsZVNlbGVjdCIsIl9zcGxpdEJzUHJvcHNBbmRPbWl0IiwiYnNQcm9wcyIsIlZhbGlkQ29tcG9uZW50Q2hpbGRyZW4iLCJfcmV0IiwiZXhwYW5kZWQiLCJBY2NvcmRpb24iLCJDbG9zZUJ1dHRvbiIsIm9uRGlzbWlzcyIsImNsb3NlTGFiZWwiLCJBbGVydCIsIl9leHRlbmRzMiIsIl9zcGxpdEJzUHJvcHMiLCJkaXNtaXNzYWJsZSIsInB1bGxSaWdodCIsIkJhZGdlIiwiaGFzQ29udGVudCIsImhpZGRlbiIsImFjYyIsImNvbXBvbmVudENsYXNzIiwiaXNUcml2aWFsSHJlZiIsIlNhZmVBbmNob3IiLCJoYW5kbGVLZXlEb3duIiwicG9pbnRlckV2ZW50cyIsIkJyZWFkY3J1bWJJdGVtIiwibGlua1Byb3BzIiwiQnJlYWRjcnVtYiIsIkl0ZW0iLCJCdXR0b24iLCJyZW5kZXJBbmNob3IiLCJyZW5kZXJCdXR0b24iLCJmdWxsQ2xhc3NOYW1lIiwidmVydGljYWwiLCJqdXN0aWZpZWQiLCJCdXR0b25Hcm91cCIsIkJ1dHRvblRvb2xiYXIiLCJDYXJvdXNlbENhcHRpb24iLCJvbkFuaW1hdGVPdXRFbmQiLCJhbmltYXRlSW4iLCJhbmltYXRlT3V0IiwiQ2Fyb3VzZWxJdGVtIiwicHJldkFjdGl2ZSIsImhhbmRsZUFuaW1hdGVPdXRFbmQiLCJzdGFydEFuaW1hdGlvbiIsImlzVW5tb3VudGVkIiwiZ2x5cGgiLCJHbHlwaGljb24iLCJzbGlkZSIsImluZGljYXRvcnMiLCJpbnRlcnZhbCIsImNvbnRyb2xzIiwicGF1c2VPbkhvdmVyIiwib25TbGlkZUVuZCIsImFjdGl2ZUluZGV4IiwiZGVmYXVsdEFjdGl2ZUluZGV4IiwicHJldkljb24iLCJwcmV2TGFiZWwiLCJuZXh0SWNvbiIsIm5leHRMYWJlbCIsIkNhcm91c2VsIiwid2FpdEZvck5leHQiLCJnZXRBY3RpdmVJbmRleCIsInByZXZpb3VzQWN0aXZlSW5kZXgiLCJnZXREaXJlY3Rpb24iLCJhY3RpdmVJbmRleFByb3AiLCJoYW5kbGVJdGVtQW5pbWF0ZU91dEVuZCIsImhhbmRsZU1vdXNlT3V0IiwiaXNQYXVzZWQiLCJwbGF5IiwiaGFuZGxlTW91c2VPdmVyIiwicGF1c2UiLCJoYW5kbGVOZXh0Iiwic2VsZWN0IiwiaGFuZGxlUHJldiIsInBlcnNpc3QiLCJyZW5kZXJDb250cm9scyIsImNvbnRyb2xDbGFzc05hbWUiLCJyZW5kZXJJbmRpY2F0b3JzIiwiX3N0YXRlIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlT3V0IiwicHJldmlvdXNBY3RpdmUiLCJDYXB0aW9uIiwiaW5saW5lIiwidmFsaWRhdGlvblN0YXRlIiwiaW5wdXRSZWYiLCJDaGVja2JveCIsIl9jbGFzc2VzMiIsInZpc2libGVYc0Jsb2NrIiwidmlzaWJsZVNtQmxvY2siLCJ2aXNpYmxlTWRCbG9jayIsInZpc2libGVMZ0Jsb2NrIiwiQ2xlYXJmaXgiLCJodG1sRm9yIiwic3JPbmx5IiwiJGJzX2Zvcm1Hcm91cCIsIkNvbnRyb2xMYWJlbCIsImZvcm1Hcm91cCIsImNvbnRyb2xJZCIsIl9wcm9wcyRodG1sRm9yIiwieHNIaWRkZW4iLCJzbUhpZGRlbiIsIm1kSGlkZGVuIiwibGdIaWRkZW4iLCJ4c09mZnNldCIsInNtT2Zmc2V0IiwibWRPZmZzZXQiLCJsZ09mZnNldCIsInhzUHVzaCIsInNtUHVzaCIsIm1kUHVzaCIsImxnUHVzaCIsInhzUHVsbCIsInNtUHVsbCIsIm1kUHVsbCIsImxnUHVsbCIsIkNvbCIsInBvcFByb3AiLCJwcm9wU3VmZml4IiwiaGlkZGVuUHJvcE5hbWUiLCJfY29sbGFwc2VTdHlsZXMiLCJNQVJHSU5TIiwiY29sbGFwc2VTdHlsZXMiLCJkaW1lbnNpb24iLCJnZXREaW1lbnNpb25WYWx1ZSIsIkNvbGxhcHNlIiwiZ2V0RGltZW5zaW9uIiwiX2dldFNjcm9sbERpbWVuc2lvblZhbHVlIiwiaGFuZGxlRW50ZXIiLCJoYW5kbGVFbnRlcmluZyIsImhhbmRsZUVudGVyZWQiLCJoYW5kbGVFeGl0IiwiaGFuZGxlRXhpdGluZyIsImlubmVyUHJvcHMiLCJ0cmlnZ2VyQnJvd3NlclJlZmxvdyIsIm9uQ2xvc2UiLCJsYWJlbGxlZEJ5Iiwicm9vdENsb3NlRXZlbnQiLCJEcm9wZG93bk1lbnUiLCJnZXRGb2N1c2FibGVNZW51SXRlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2V0SXRlbXNBbmRBY3RpdmVJbmRleCIsIml0ZW1zIiwiZm9jdXNOZXh0IiwiX2dldEl0ZW1zQW5kQWN0aXZlSW5kIiwiZm9jdXNQcmV2aW91cyIsIl9nZXRJdGVtc0FuZEFjdGl2ZUluZDIiLCJkb3duIiwiZXNjIiwidGFiIiwiaGFuZGxlUm9vdENsb3NlIiwibm9DYXJldCIsInVzZUFuY2hvciIsIkRyb3Bkb3duVG9nZ2xlIiwidXNlQ2FyZXQiLCJUT0dHTEVfUk9MRSIsIk1FTlVfUk9MRSIsImRyb3B1cCIsInJvbGVzIiwibWlzc2luZyIsInJlcXVpcmVkUm9sZXMiLCJfbGVuMyIsIl9rZXkzIiwiZHVwbGljYXRlIiwiZXhjbHVzaXZlUm9sZXMiLCJkZWZhdWx0T3BlbiIsIm9uTW91c2VFbnRlciIsIkRyb3Bkb3duIiwiZm9jdXNOZXh0T25PcGVuIiwiX2ZvY3VzSW5Ecm9wZG93biIsIm1lbnUiLCJwcmV2T3BlbiIsInRvZ2dsZSIsImxhc3RPcGVuRXZlbnRUeXBlIiwidG9nZ2xlT3BlbiIsImhhbmRsZUNsb3NlIiwiZXZlbnREZXRhaWxzIiwicmVuZGVyTWVudSIsInJlbmRlclRvZ2dsZSIsIlVuY29udHJvbGxlZERyb3Bkb3duIiwiVG9nZ2xlIiwiTWVudSIsInNwbGl0Q29tcG9uZW50UHJvcHMiLCJjb21wb25lbnRQcm9wVHlwZXMiLCJwYXJlbnRQcm9wcyIsIkRyb3Bkb3duQnV0dG9uIiwiX3NwbGl0Q29tcG9uZW50UHJvcHMiLCJDb250cm9sbGVkQ29tcG9uZW50IiwiZHJvcGRvd25Qcm9wcyIsInRvZ2dsZVByb3BzIiwiX2ZhZGVTdHlsZXMiLCJmYWRlU3R5bGVzIiwiRmFkZSIsIkZvcm0iLCJGb3JtQ29udHJvbEZlZWRiYWNrIiwiZ2V0R2x5cGgiLCJyZW5kZXJEZWZhdWx0RmVlZGJhY2siLCJGb3JtQ29udHJvbFN0YXRpYyIsIkZvcm1Db250cm9sIiwiX3Byb3BzJGlkIiwiRmVlZGJhY2siLCJTdGF0aWMiLCJGb3JtR3JvdXAiLCJoYXNGZWVkYmFjayIsImZsdWlkIiwiR3JpZCIsIkhlbHBCbG9jayIsInJlc3BvbnNpdmUiLCJyb3VuZGVkIiwiY2lyY2xlIiwidGh1bWJuYWlsIiwiSW1hZ2UiLCJJbnB1dEdyb3VwQWRkb24iLCJJbnB1dEdyb3VwQnV0dG9uIiwiSW5wdXRHcm91cCIsIkFkZG9uIiwiSnVtYm90cm9uIiwiTGFiZWwiLCJoZWFkZXIiLCJsaXN0SXRlbSIsIkxpc3RHcm91cEl0ZW0iLCJoZWFkaW5nQ2xhc3NOYW1lIiwiTGlzdEdyb3VwIiwiX3Byb3BzJGNvbXBvbmVudENsYXNzIiwiZ2V0RGVmYXVsdENvbXBvbmVudCIsInVzZUxpc3RJdGVtIiwiTWVkaWFCb2R5IiwiTWVkaWFIZWFkaW5nIiwiTWVkaWFMZWZ0IiwiTWVkaWFMaXN0IiwiTWVkaWFMaXN0SXRlbSIsIk1lZGlhUmlnaHQiLCJNZWRpYSIsIkhlYWRpbmciLCJCb2R5IiwiTGVmdCIsIlJpZ2h0IiwiTGlzdCIsIkxpc3RJdGVtIiwiZGl2aWRlciIsImV2ZW50S2V5IiwiTWVudUl0ZW0iLCJNb2RhbEJvZHkiLCJkaWFsb2dDbGFzc05hbWUiLCJNb2RhbERpYWxvZyIsImJzQ2xhc3NOYW1lIiwibW9kYWxTdHlsZSIsImRpYWxvZ0NsYXNzZXMiLCJNb2RhbEZvb3RlciIsImNsb3NlQnV0dG9uIiwiJGJzX21vZGFsIiwiTW9kYWxIZWFkZXIiLCJtb2RhbCIsIk1vZGFsVGl0bGUiLCJhbmltYXRpb24iLCJkaWFsb2dDb21wb25lbnRDbGFzcyIsIkRpYWxvZ1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OX0RVUkFUSU9OIiwiQmFja2Ryb3BUcmFuc2l0aW9uIiwiQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiIsImhhbmRsZUV4aXRlZCIsInNldE1vZGFsUmVmIiwiX21vZGFsIiwiaGFuZGxlRGlhbG9nQ2xpY2siLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJ1cGRhdGVTdHlsZSIsImRpYWxvZ05vZGUiLCJkaWFsb2dIZWlnaHQiLCJtb2RhbElzT3ZlcmZsb3dpbmciLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nTGVmdCIsIkRpYWxvZyIsImJhc2VNb2RhbFByb3BzIiwiZGlhbG9nUHJvcHMiLCJpbkNsYXNzTmFtZSIsIkhlYWRlciIsIlRpdGxlIiwiRm9vdGVyIiwiYWN0aXZlSHJlZiIsIm5hdmJhciIsInB1bGxMZWZ0IiwiJGJzX25hdmJhciIsIiRic190YWJDb250YWluZXIiLCJnZXRUYWJJZCIsImdldFBhbmVJZCIsIk5hdiIsIl9uZWVkc1JlZm9jdXMiLCJfZ2V0QWN0aXZlUHJvcHMiLCJnZXRBY3RpdmVQcm9wcyIsImFjdGl2ZUNoaWxkIiwiYWN0aXZlQ2hpbGRJbmRleCIsImFjdGl2ZU5vZGUiLCJ0YWJDb250YWluZXIiLCJnZXROZXh0QWN0aXZlQ2hpbGQiLCJ2YWxpZENoaWxkcmVuIiwiX2dldEFjdGl2ZVByb3BzMiIsIm5leHRJbmRleCIsIm51bVZhbGlkQ2hpbGRyZW4iLCJnZXRUYWJQcm9wcyIsIm5hdlJvbGUiLCJfY2hpbGQkcHJvcHMiLCJoYW5kbGVUYWJLZXlEb3duIiwibmV4dEFjdGl2ZUNoaWxkIiwiX3RoaXM1IiwicHJvcHNSb2xlIiwicHJvcHNOYXZiYXIiLCJfZ2V0QWN0aXZlUHJvcHMzIiwicHVsbExlZnRDbGFzc05hbWUiLCJwdWxsUmlnaHRDbGFzc05hbWUiLCJuYXZiYXJQcm9wcyIsImNoaWxkT25TZWxlY3QiLCJOYXZiYXJCcmFuZCIsIk5hdmJhckNvbGxhcHNlIiwiTmF2YmFySGVhZGVyIiwiTmF2YmFyVG9nZ2xlIiwiYnV0dG9uUHJvcHMiLCJmaXhlZFRvcCIsImZpeGVkQm90dG9tIiwic3RhdGljVG9wIiwiaW52ZXJzZSIsImNvbGxhcHNlT25TZWxlY3QiLCJOYXZiYXIiLCJoYW5kbGVUb2dnbGUiLCJoYW5kbGVDb2xsYXBzZSIsIlVuY29udHJvbGxhYmxlTmF2YmFyIiwiY3JlYXRlU2ltcGxlV3JhcHBlciIsIldyYXBwZXIiLCJfcmVmMiQkYnNfbmF2YmFyIiwiQnJhbmQiLCJUZXh0IiwiTGluayIsIk5hdkRyb3Bkb3duIiwiTmF2SXRlbSIsImlzT25lT2YiLCJvZiIsInRyaWdnZXJUeXBlIiwiZGVsYXlTaG93IiwiZGVsYXlIaWRlIiwiZGVmYXVsdE92ZXJsYXlTaG93biIsIk92ZXJsYXlUcmlnZ2VyIiwiX21vdW50Tm9kZSIsInJlbmRlck92ZXJsYXkiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwiX2hvdmVyU2hvd0RlbGF5IiwiX2hvdmVySGlkZURlbGF5IiwiaGFuZGxlRGVsYXllZEhpZGUiLCJoYW5kbGVEZWxheWVkU2hvdyIsImhhbmRsZUhpZGUiLCJoYW5kbGVNb3VzZU92ZXJPdXQiLCJyZWxhdGVkTmF0aXZlIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJuYXRpdmVFdmVudCIsIm1ha2VPdmVybGF5IiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJfb3ZlcmxheSIsInRyaWdnZXJQcm9wcyIsIlBhZ2VIZWFkZXIiLCJQYWdlckl0ZW0iLCJ3YXJuZWQiLCJkZXByZWNhdGlvbldhcm5pbmciLCJvbGRuYW1lIiwibmV3bmFtZSIsIkRlcHJlY2F0ZWRDb21wb25lbnQiLCJfQ29tcG9uZW50JHByb3RvdHlwZSQiLCJtZXRob2RBcmdzIiwiUGFnZXIiLCJhY3RpdmVMYWJlbCIsIlBhZ2luYXRpb25JdGVtIiwiY3JlYXRlQnV0dG9uIiwiRmlyc3QiLCJQcmV2IiwiRWxsaXBzaXMiLCJOZXh0IiwiTGFzdCIsIlBhZ2luYXRpb24iLCIkYnNfcGFuZWwiLCJoZWFkaW5nSWQiLCJib2R5SWQiLCJQYW5lbENvbGxhcHNlIiwiX2JzQ2xhc3MiLCJjb2xsYXBzaWJsZSIsIlBhbmVsQm9keSIsIlBhbmVsSGVhZGluZyIsIlBhbmVsVG9nZ2xlIiwiUGFuZWxUaXRsZSIsIlBhbmVsRm9vdGVyIiwiZGVmYXVsdEdldElkIiwiUGFuZWwiLCJpZEtleSIsImlkcyIsInBhbmVsR3JvdXAiLCJnZXRFeHBhbmRlZCIsIlVuY29udHJvbGxlZFBhbmVsIiwicG9zaXRpb25Ub3AiLCJwb3NpdGlvbkxlZnQiLCJhcnJvd09mZnNldFRvcCIsImFycm93T2Zmc2V0TGVmdCIsIlBvcG92ZXIiLCJvdXRlclN0eWxlIiwiYXJyb3dTdHlsZSIsInN0cmlwZWQiLCJjaGlsZElkZW50aWZpZXIiLCJpc0NoaWxkIiwiUHJvZ3Jlc3NCYXIiLCJyZW5kZXJQcm9ncmVzc0JhciIsInBlcmNlbnRhZ2UiLCJnZXRQZXJjZW50YWdlIiwid3JhcHBlclByb3BzIiwiUmFkaW8iLCJhMTZieTkiLCJhNGJ5MyIsIlJlc3BvbnNpdmVFbWJlZCIsIlJvdyIsIlNwbGl0VG9nZ2xlIiwidG9nZ2xlTGFiZWwiLCJTcGxpdEJ1dHRvbiIsIlRhYkNvbnRhaW5lciIsIiRic190YWJDb250ZW50Iiwib25QYW5lRW50ZXIiLCJvblBhbmVFeGl0ZWQiLCJleGl0aW5nIiwiVGFiQ29udGVudCIsInN0YXRlQWN0aXZlS2V5IiwiY29udGFpbmVyQWN0aXZlS2V5IiwiZ2V0Q29udGFpbmVyQWN0aXZlS2V5IiwiaGFuZGxlUGFuZUVudGVyIiwiaGFuZGxlUGFuZUV4aXRlZCIsImNoaWxkS2V5IiwiVGFiUGFuZSIsInNob3VsZEJlSW4iLCJnZXRBbmltYXRpb24iLCJ0YWJDb250ZW50IiwicHJvcHNNb3VudE9uRW50ZXIiLCJwcm9wc1VubW91bnRPbkV4aXQiLCJfY29udGV4dCIsInBhbmUiLCJ0YWJDbGFzc05hbWUiLCJUYWIiLCJDb250YWluZXIiLCJDb250ZW50IiwiUGFuZSIsImJvcmRlcmVkIiwiY29uZGVuc2VkIiwiaG92ZXIiLCJUYWJsZSIsIlRhYnMiLCJyZW5kZXJUYWIiLCJfcHJvcHMkYWN0aXZlS2V5IiwiZGVmYXVsdEFjdGl2ZUtleSIsImdldERlZmF1bHRBY3RpdmVLZXkiLCJhbHQiLCJvbkVycm9yIiwib25Mb2FkIiwiVGh1bWJuYWlsIiwiY2hlY2tlZCIsIlRvZ2dsZUJ1dHRvbiIsImF1dG9Db21wbGV0ZSIsIlRvZ2dsZUJ1dHRvbkdyb3VwIiwiZ2V0VmFsdWVzIiwiVW5jb250cm9sbGVkVG9nZ2xlQnV0dG9uR3JvdXAiLCJUb29sdGlwIiwiV2VsbCIsIl9lbmQiLCJ1cGRhdGVVcmwiLCJpbm5lckhlaWdodCIsIkRhdGVUaW1lIiwiZmxvYXQiLCJib3JkZXIiLCJXZWJraXRBbmltYXRpb24iLCJib3JkZXJUb3AiLCJib3JkZXJSYWRpdXMiLCJtYXhIZWlnaHQiLCJvdmVyZmxvd1kiLCJoYW5kbGVUYWJsZUNsaWNrIiwiaGFuZGxlVGFibGVTb3J0IiwibGlzdE1vZGFsIiwibGlzdE1vZGFsRGF0YSIsIk5hbWUiLCJncmFwaE1vZGFsIiwicHFUcmVuZGluZ1dlYlJlcG9ydFNlcnZpY2UiLCJnZXRDaGFydCIsImNoYXJ0RGF0YSIsImdyYXBoIiwiVmFsdWUiLCJncmFwaFRpdGxlIiwibG9hZGVyIiwicXVlcnlTdHJpbmciLCJtaW5XaWR0aCIsInBxTWVhc3VyZW1lbnRzIiwibWVhc3VyZW1lbnQiLCJQUVRyZW5kaW5nV2ViUmVwb3J0IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZXNwb25zZSIsImFib3J0IiwiYWpheCIsIm9yaWdpbiIsImNvbnRlbnRUeXBlIiwiZGF0YVR5cGUiLCJhc3luYyIsIm1ldGVySWQiLCJtZWFzdXJlbWVudElkIiwiZ09QUyIsIiRhc3NpZ24iLCJBIiwiSyIsIlQiLCJhTGVuIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsIlRPX1NUUklORyIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiT2JqZWN0UHJvdG8iLCJUT19TVFJJTkdfVEFHIiwiRE9NSXRlcmFibGVzIiwiQ29sbGVjdGlvbiIsImFkZFRvVW5zY29wYWJsZXMiLCJfayIsIkFyZ3VtZW50cyIsInN5bSIsIkFsbFN5bWJvbHMiLCJfY3JlYXRlIiwiJGRlZmluZVByb3BlcnRpZXMiLCJlbnVtS2V5cyIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCJPUFN5bWJvbHMiLCJISURERU4iLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiRCIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ09QTiIsIk1FVEEiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJLRVkiLCIkZmFpbHMiLCJ3a3MiLCJ3a3NEZWZpbmUiLCJnT1BORXh0IiwiJEdPUEQiLCIkR09QUyIsIiREUCIsIiRKU09OIiwiX3N0cmluZ2lmeSIsIlRPX1BSSU1JVElWRSIsIlN5bWJvbFJlZ2lzdHJ5IiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwiJHNldCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwic2V0TWV0YSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJjaGVjayIsImJ1Z2d5IiwiJE9iamVjdCIsInVuY29udHJvbGxhYmxlIiwiY29udHJvbGxlZFZhbHVlcyIsImJhc2VQcm9wVHlwZXMiLCJ1dGlscyIsImdldFR5cGUiLCJpc0NvbXBvc2l0ZUNvbXBvbmVudCIsImNvbnRyb2xsZWRQcm9wcyIsIk9NSVRfUFJPUFMiLCJkZWZhdWx0S2V5IiwidW5jb250cm9sbGVkUHJvcFR5cGVzIiwiX3JlZnMkaW5uZXIiLCJnZXRDb250cm9sbGVkSW5zdGFuY2UiLCJoYW5kbGUiLCJsaW5rUHJvcE5hbWUiLCJnZXRMaW5rTmFtZSIsImlzUHJvcCIsInNldEFuZE5vdGlmeSIsImRlZmVyQ29udHJvbFRvIiwibmV3Q29tcG9uZW50IiwiYWRkaXRpb25zIiwibmV4dE1ldGhvZHMiLCJsaW5rTmFtZSIsInJlcXVlc3RDaGFuZ2UiLCJjYiIsIiR2YWx1ZXMiLCJmb3IiLCJxIiwidSIsIiQkdHlwZW9mIiwidHlwZU9mIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiTGF6eSIsIk1lbW8iLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNNZW1vIiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIl9zdHlsZSIsIm9uRW5kIiwiYmFja3VwIiwiZmFrZUV2ZW50IiwicGFyc2VEdXJhdGlvbiIsIl9wYXJzZUR1cmF0aW9uIiwibXVsdCIsInJIeXBoZW4iLCJfaHlwaGVuYXRlIiwiclVwcGVyIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsInJudW1ub25weCIsInJwb3NpdGlvbiIsInJ1blN0eWxlIiwicnVudGltZVN0eWxlIiwicnNMZWZ0IiwicGl4ZWxMZWZ0IiwicmVtb3ZlUHJvcGVydHkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzdXBwb3J0ZWRUcmFuc2Zvcm1zIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwiZWxlbWVudFR5cGUiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWciLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJuZXdBcGlOYW1lIiwibWF5YmVTbmFwc2hvdCIsInNuYXBzaG90IiwiX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyIsImNsYXNzTmFtZXNTaGFwZSIsInRpbWVvdXRzU2hhcGUiLCJpc0FycmF5SXRlciIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0SXRlckZuIiwiaXRlciIsImFycmF5TGlrZSIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJGbiIsIkFycmF5UHJvdG8iLCJjbGFzc29mIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJBUkciLCJ0cnlHZXQiLCJjYWxsZWUiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwic2FmZSIsImFyciIsInNlbGVjdG9yIiwiX3F1ZXJ5U2VsZWN0b3JBbGwiLCJtYXliZUlEIiwibWF5YmVDbGFzcyIsIm5hbWVPbmx5Iiwic2ltcGxlU2VsZWN0b3JSRSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImRlcHJlY2F0ZWQiLCJyZWFzb24iLCJtZXNzYWdlS2V5IiwiX3Jlc2V0V2FybmVkIiwiX2NsYXNzMiIsIl9zdHlsZTIiLCJfc2Nyb2xsYmFyU2l6ZTIiLCJfaXNPdmVyZmxvd2luZzIiLCJfbWFuYWdlQXJpYUhpZGRlbiIsIk1vZGFsTWFuYWdlciIsIl9yZWYyJGhpZGVTaWJsaW5nTm9kZSIsImhpZGVTaWJsaW5nTm9kZXMiLCJfcmVmMiRoYW5kbGVDb250YWluZXIiLCJoYW5kbGVDb250YWluZXJPdmVyZmxvdyIsIm1vZGFsSWR4IiwibW9kYWxzIiwiY29udGFpbmVySWR4IiwiY29udGFpbmVycyIsImhpZGVTaWJsaW5ncyIsIm92ZXJmbG93aW5nIiwic2V0Q29udGFpbmVyU3R5bGUiLCJmaW5kSW5kZXhPZiIsImZpbmRDb250YWluZXIiLCJyZW1vdmVDbGFzcyIsInJlbW92ZUNvbnRhaW5lclN0eWxlIiwic2hvd1NpYmxpbmdzIiwiYXJpYUhpZGRlbiIsIl9hZGRDbGFzcyIsIl9yZW1vdmVDbGFzcyIsIl9oYXNDbGFzcyIsInJlcGxhY2VDbGFzc05hbWUiLCJvcmlnQ2xhc3MiLCJjbGFzc1RvUmVtb3ZlIiwic2libGluZ3MiLCJCTEFDS0xJU1QiLCJtb3VudCIsImlzSGlkYWJsZSIsIl9yZW5kZXJPdmVybGF5IiwiX292ZXJsYXlUYXJnZXQiLCJfdW5yZW5kZXJPdmVybGF5IiwiX3VubW91bnRPdmVybGF5VGFyZ2V0IiwiX21vdW50T3ZlcmxheVRhcmdldCIsImluaXRpYWxSZW5kZXIiLCJfb3ZlcmxheUluc3RhbmNlIiwiUmVmSG9sZGVyIiwidXNlRm9jdXNpbiIsIl9jbGFzc25hbWVzMiIsIl9jYWxjdWxhdGVQb3NpdGlvbjIiLCJQb3NpdGlvbiIsInVwZGF0ZVBvc2l0aW9uIiwiZ2V0VGFyZ2V0IiwiX25lZWRzRmx1c2giLCJtYXliZVVwZGF0ZVBvc2l0aW9uIiwiYXJyb3dQb3NpdGlvbiIsIl9sYXN0VGFyZ2V0IiwidGFyZ2V0RWxlbWVudCIsInBsYWNlbWVudENoYW5nZWQiLCJvdmVybGF5Tm9kZSIsImNoaWxkT2Zmc2V0IiwiX29mZnNldDIiLCJfcG9zaXRpb24yIiwiX2dldE9mZnNldDIiLCJvdmVybGF5SGVpZ2h0Iiwib3ZlcmxheVdpZHRoIiwidG9wRGVsdGEiLCJjb250YWluZXJEaW1lbnNpb25zIiwiZ2V0Q29udGFpbmVyRGltZW5zaW9ucyIsImNvbnRhaW5lclNjcm9sbCIsInNjcm9sbCIsImNvbnRhaW5lckhlaWdodCIsInRvcEVkZ2VPZmZzZXQiLCJib3R0b21FZGdlT2Zmc2V0IiwiZ2V0VG9wRGVsdGEiLCJsZWZ0RGVsdGEiLCJjb250YWluZXJXaWR0aCIsImxlZnRFZGdlT2Zmc2V0IiwicmlnaHRFZGdlT2Zmc2V0IiwiZ2V0TGVmdERlbHRhIiwiX3Njcm9sbFRvcDIiLCJjb250YWluZXJOb2RlIiwiX2dldE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsIl9vZmZzZXRQYXJlbnQiLCJfb2Zmc2V0IiwiX3Njcm9sbFRvcCIsIl9zY3JvbGxMZWZ0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFT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QUFNLElBQVEsSUFDdEIsSUFBUSxJQUFNLElBQVEsSUFDdEIsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUN0QixJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQzFFLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFDbkMsSUFBUSxLQUFNLElBQVEsS0FDdEIsSUFBUSxLQUFNLElBQVEsS0FDdEIsSUFBUSxLQUVSLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFDMUIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3RGLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN0RixJQUFVLElBQU0sSUFBVSxJQUMxQixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLEtBQU0sSUFBVSxLQUMxQixJQUFVLEtBQU0sSUFBVSxLQUMx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S0FBS0MsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHQyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUtDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxLQUFLQyxTQUFTLENBQUMsRUFBRSxFQUFFLEtBQUtDLFNBQVMsQ0FBQyxFQUFFLElBQUksS0FBS0MsU0FBUyxDQUFDLElBQUksSUFBSSxLQUFLQyxVQUFVLENBQUMsRUFBRSxJQUFJLEdBQUdDLFVBQVUsQ0FBQyxJQUFJLElBQUksS0FBS0MsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLQyxlQUFlLENBQUMsR0FBRyxJQUFJLElBQUlDLFdBQVcsQ0FBQyxJQUFJLElBQUksR0FBR0MsV0FBVyxDQUFDLElBQUksR0FBRyxLQUFLQyxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUdDLFdBQVcsQ0FBQyxJQUFJLElBQUksS0FBS0MsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUtDLEtBQUssQ0FBQyxJQUFJLElBQUksR0FBR0MsTUFBTSxDQUFDLEVBQUUsSUFBSSxHQUFHQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUtDLE1BQU0sQ0FBQyxJQUFJLElBQUksS0FBS0MsVUFBVSxDQUFDLElBQUksSUFBSSxLQUFLQyxVQUFVLENBQUMsSUFBSSxJQUFJLEtBQUtDLFdBQVcsQ0FBQyxJQUFJLElBQUksS0FBS0MsVUFBVSxDQUFDLElBQUksSUFBSSxLQUFLQyxVQUFVLENBQUMsSUFBSSxJQUFJLEtBQUtDLFlBQVksQ0FBQyxJQUFJLElBQUksS0FBS0MsS0FBSyxDQUFDLEVBQUUsSUFBSSxHQUFHQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUtDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBR0MsS0FBSyxDQUFDLEVBQUUsRUFBRSxLQUFLQyxNQUFNLENBQUMsSUFBSSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxJQUFJLElBQUksR0FBR0MsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLQyxPQUFPLENBQUMs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cUcsRUFBVyxDQUFDaEcsRUFBT0MsRUFBVWd5RCxFQUFtQjl4RCxFQUFVK3hELEdBQWtCajBCLE9BQU85dUIsSUFHM0csSUFBSXcvRCxFQUFtQkQsRUFBVTN4RSxLQUFLLE1BQU0sR0FHNUMsT0FGQTR4RSxFQUFpQnp4QixXQUFhd3hCLEVBQVUzeEUsS0FBSyxNQUFNLEdBRTVDNHhFIiwiZmlsZSI6IlBRVHJlbmRpbmdXZWJSZXBvcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTU4KTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2Fzc2lnblwiKTtcblxudmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX2Fzc2lnbjIuZGVmYXVsdCB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxudmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChvYmosIGtleXMpIHtcbiAgdmFyIHRhcmdldCA9IHt9O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTtcbiAgICB0YXJnZXRbaV0gPSBvYmpbaV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTsiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXInKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGVsZW1lbnRUeXBlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXG4gIGlmIChfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgUmVhY3RFbGVtZW50ICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLGV4cGVjdGVkIGFuIGVsZW1lbnQgdHlwZSAoYSBzdHJpbmcgJykgKyAnLCBjb21wb25lbnQgY2xhc3MsIG9yIGZ1bmN0aW9uIGNvbXBvbmVudCkuJyk7XG4gIH1cblxuICBpZiAoISgwLCBfcmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUpKHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBlbGVtZW50IHR5cGUgKGEgc3RyaW5nICcpICsgJywgY29tcG9uZW50IGNsYXNzLCBvciBmdW5jdGlvbiBjb21wb25lbnQpLicpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKGVsZW1lbnRUeXBlKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIGZhY3RvcnkgPSByZXF1aXJlKCcuL2ZhY3RvcnknKTtcblxuaWYgKHR5cGVvZiBSZWFjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdGhyb3cgRXJyb3IoXG4gICAgJ2NyZWF0ZS1yZWFjdC1jbGFzcyBjb3VsZCBub3QgZmluZCB0aGUgUmVhY3Qgb2JqZWN0LiBJZiB5b3UgYXJlIHVzaW5nIHNjcmlwdCB0YWdzLCAnICtcbiAgICAgICdtYWtlIHN1cmUgdGhhdCBSZWFjdCBpcyBiZWluZyBsb2FkZWQgYmVmb3JlIGNyZWF0ZS1yZWFjdC1jbGFzcy4nXG4gICk7XG59XG5cbi8vIEhhY2sgdG8gZ3JhYiBOb29wVXBkYXRlUXVldWUgZnJvbSBpc29tb3JwaGljIFJlYWN0XG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSBuZXcgUmVhY3QuQ29tcG9uZW50KCkudXBkYXRlcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICBSZWFjdC5Db21wb25lbnQsXG4gIFJlYWN0LmlzVmFsaWRFbGVtZW50LFxuICBSZWFjdE5vb3BVcGRhdGVRdWV1ZVxuKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gbW9tZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBzb21lIERPTSBub2RlIGlzIG91ciBDb21wb25lbnQncyBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGVGb3VuZChjdXJyZW50LCBjb21wb25lbnROb2RlLCBpZ25vcmVDbGFzcykge1xuICBpZiAoY3VycmVudCA9PT0gY29tcG9uZW50Tm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIFNWRyA8dXNlLz4gZWxlbWVudHMgZG8gbm90IHRlY2huaWNhbGx5IHJlc2lkZSBpbiB0aGUgcmVuZGVyZWQgRE9NLCBzb1xuICAvLyB0aGV5IGRvIG5vdCBoYXZlIGNsYXNzTGlzdCBkaXJlY3RseSwgYnV0IHRoZXkgb2ZmZXIgYSBsaW5rIHRvIHRoZWlyXG4gIC8vIGNvcnJlc3BvbmRpbmcgZWxlbWVudCwgd2hpY2ggY2FuIGhhdmUgY2xhc3NMaXN0LiBUaGlzIGV4dHJhIGNoZWNrIGlzIGZvclxuICAvLyB0aGF0IGNhc2UuXG4gIC8vIFNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvc3RydWN0Lmh0bWwjSW50ZXJmYWNlU1ZHVXNlRWxlbWVudFxuICAvLyBEaXNjdXNzaW9uOiBodHRwczovL2dpdGh1Yi5jb20vUG9tYXgvcmVhY3Qtb25jbGlja291dHNpZGUvcHVsbC8xN1xuXG5cbiAgaWYgKGN1cnJlbnQuY29ycmVzcG9uZGluZ0VsZW1lbnQpIHtcbiAgICByZXR1cm4gY3VycmVudC5jb3JyZXNwb25kaW5nRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoaWdub3JlQ2xhc3MpO1xuICB9XG5cbiAgcmV0dXJuIGN1cnJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGlnbm9yZUNsYXNzKTtcbn1cbi8qKlxuICogVHJ5IHRvIGZpbmQgb3VyIG5vZGUgaW4gYSBoaWVyYXJjaHkgb2Ygbm9kZXMsIHJldHVybmluZyB0aGUgZG9jdW1lbnRcbiAqIG5vZGUgYXMgaGlnaGVzdCBub2RlIGlmIG91ciBub2RlIGlzIG5vdCBmb3VuZCBpbiB0aGUgcGF0aCB1cC5cbiAqL1xuXG5mdW5jdGlvbiBmaW5kSGlnaGVzdChjdXJyZW50LCBjb21wb25lbnROb2RlLCBpZ25vcmVDbGFzcykge1xuICBpZiAoY3VycmVudCA9PT0gY29tcG9uZW50Tm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIElmIHNvdXJjZT1sb2NhbCB0aGVuIHRoaXMgZXZlbnQgY2FtZSBmcm9tICdzb21ld2hlcmUnXG4gIC8vIGluc2lkZSBhbmQgc2hvdWxkIGJlIGlnbm9yZWQuIFdlIGNvdWxkIGhhbmRsZSB0aGlzIHdpdGhcbiAgLy8gYSBsYXllcmVkIGFwcHJvYWNoLCB0b28sIGJ1dCB0aGF0IHJlcXVpcmVzIGdvaW5nIGJhY2sgdG9cbiAgLy8gdGhpbmtpbmcgaW4gdGVybXMgb2YgRG9tIG5vZGUgbmVzdGluZywgcnVubmluZyBjb3VudGVyXG4gIC8vIHRvIFJlYWN0J3MgJ3lvdSBzaG91bGRuJ3QgY2FyZSBhYm91dCB0aGUgRE9NJyBwaGlsb3NvcGh5LlxuXG5cbiAgd2hpbGUgKGN1cnJlbnQucGFyZW50Tm9kZSkge1xuICAgIGlmIChpc05vZGVGb3VuZChjdXJyZW50LCBjb21wb25lbnROb2RlLCBpZ25vcmVDbGFzcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudE5vZGU7XG4gIH1cblxuICByZXR1cm4gY3VycmVudDtcbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGJyb3dzZXIgc2Nyb2xsYmFyIHdhcyBjbGlja2VkXG4gKi9cblxuZnVuY3Rpb24gY2xpY2tlZFNjcm9sbGJhcihldnQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA8PSBldnQuY2xpZW50WCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDw9IGV2dC5jbGllbnRZO1xufVxuXG4vLyBpZGVhbGx5IHdpbGwgZ2V0IHJlcGxhY2VkIHdpdGggZXh0ZXJuYWwgZGVwXG4vLyB3aGVuIHJhZnJleC9kZXRlY3QtcGFzc2l2ZS1ldmVudHMjNCBhbmQgcmFmcmV4L2RldGVjdC1wYXNzaXZlLWV2ZW50cyM1IGdldCBtZXJnZWQgaW5cbnZhciB0ZXN0UGFzc2l2ZUV2ZW50U3VwcG9ydCA9IGZ1bmN0aW9uIHRlc3RQYXNzaXZlRXZlbnRTdXBwb3J0KCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBhc3NpdmUgPSBmYWxzZTtcbiAgdmFyIG9wdGlvbnMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcGFzc2l2ZSA9IHRydWU7XG4gICAgfVxuICB9KTtcblxuICB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVFdmVudFN1cHBvcnQnLCBub29wLCBvcHRpb25zKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlRXZlbnRTdXBwb3J0Jywgbm9vcCwgb3B0aW9ucyk7XG4gIHJldHVybiBwYXNzaXZlO1xufTtcblxuZnVuY3Rpb24gYXV0b0luYyhzZWVkKSB7XG4gIGlmIChzZWVkID09PSB2b2lkIDApIHtcbiAgICBzZWVkID0gMDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICsrc2VlZDtcbiAgfTtcbn1cblxudmFyIHVpZCA9IGF1dG9JbmMoKTtcblxudmFyIHBhc3NpdmVFdmVudFN1cHBvcnQ7XG52YXIgaGFuZGxlcnNNYXAgPSB7fTtcbnZhciBlbmFibGVkSW5zdGFuY2VzID0ge307XG52YXIgdG91Y2hFdmVudHMgPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJ107XG52YXIgSUdOT1JFX0NMQVNTX05BTUUgPSAnaWdub3JlLXJlYWN0LW9uY2xpY2tvdXRzaWRlJztcbi8qKlxuICogT3B0aW9ucyBmb3IgYWRkRXZlbnRIYW5kbGVyIGFuZCByZW1vdmVFdmVudEhhbmRsZXJcbiAqL1xuXG5mdW5jdGlvbiBnZXRFdmVudEhhbmRsZXJPcHRpb25zKGluc3RhbmNlLCBldmVudE5hbWUpIHtcbiAgdmFyIGhhbmRsZXJPcHRpb25zID0gbnVsbDtcbiAgdmFyIGlzVG91Y2hFdmVudCA9IHRvdWNoRXZlbnRzLmluZGV4T2YoZXZlbnROYW1lKSAhPT0gLTE7XG5cbiAgaWYgKGlzVG91Y2hFdmVudCAmJiBwYXNzaXZlRXZlbnRTdXBwb3J0KSB7XG4gICAgaGFuZGxlck9wdGlvbnMgPSB7XG4gICAgICBwYXNzaXZlOiAhaW5zdGFuY2UucHJvcHMucHJldmVudERlZmF1bHRcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhhbmRsZXJPcHRpb25zO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyB0aGUgSE9DIGZ1bmN0aW9uIHRoYXQgeW91J2xsIHVzZVxuICogaW4gb3JkZXIgdG8gaW1wYXJ0IG9uT3V0c2lkZUNsaWNrIGxpc3RlbmluZyB0byBhblxuICogYXJiaXRyYXJ5IGNvbXBvbmVudC4gSXQgZ2V0cyBjYWxsZWQgYXQgdGhlIGVuZCBvZiB0aGVcbiAqIGJvb3RzdHJhcHBpbmcgY29kZSB0byB5aWVsZCBhbiBpbnN0YW5jZSBvZiB0aGVcbiAqIG9uQ2xpY2tPdXRzaWRlSE9DIGZ1bmN0aW9uIGRlZmluZWQgaW5zaWRlIHNldHVwSE9DKCkuXG4gKi9cblxuXG5mdW5jdGlvbiBvbkNsaWNrT3V0c2lkZUhPQyhXcmFwcGVkQ29tcG9uZW50LCBjb25maWcpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKG9uQ2xpY2tPdXRzaWRlLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2tPdXRzaWRlKHByb3BzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuXG4gICAgICBfdGhpcy5fX291dHNpZGVDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBfdGhpcy5fX2NsaWNrT3V0c2lkZUhhbmRsZXJQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgX3RoaXMuX19jbGlja091dHNpZGVIYW5kbGVyUHJvcChldmVudCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBfdGhpcy5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UucHJvcHMuaGFuZGxlQ2xpY2tPdXRzaWRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaW5zdGFuY2UucHJvcHMuaGFuZGxlQ2xpY2tPdXRzaWRlKGV2ZW50KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmhhbmRsZUNsaWNrT3V0c2lkZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGluc3RhbmNlLmhhbmRsZUNsaWNrT3V0c2lkZShldmVudCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JhcHBlZENvbXBvbmVudDogXCIgKyBjb21wb25lbnROYW1lICsgXCIgbGFja3MgYSBoYW5kbGVDbGlja091dHNpZGUoZXZlbnQpIGZ1bmN0aW9uIGZvciBwcm9jZXNzaW5nIG91dHNpZGUgY2xpY2sgZXZlbnRzLlwiKTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9fZ2V0Q29tcG9uZW50Tm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gX3RoaXMuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICBpZiAoY29uZmlnICYmIHR5cGVvZiBjb25maWcuc2V0Q2xpY2tPdXRzaWRlUmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbmZpZy5zZXRDbGlja091dHNpZGVSZWYoKShpbnN0YW5jZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlLnNldENsaWNrT3V0c2lkZVJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZS5zZXRDbGlja091dHNpZGVSZWYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5lbmFibGVPbkNsaWNrT3V0c2lkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgZW5hYmxlZEluc3RhbmNlc1tfdGhpcy5fdWlkXSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgcGFzc2l2ZUV2ZW50U3VwcG9ydCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYXNzaXZlRXZlbnRTdXBwb3J0ID0gdGVzdFBhc3NpdmVFdmVudFN1cHBvcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuYWJsZWRJbnN0YW5jZXNbX3RoaXMuX3VpZF0gPSB0cnVlO1xuICAgICAgICB2YXIgZXZlbnRzID0gX3RoaXMucHJvcHMuZXZlbnRUeXBlcztcblxuICAgICAgICBpZiAoIWV2ZW50cy5mb3JFYWNoKSB7XG4gICAgICAgICAgZXZlbnRzID0gW2V2ZW50c107XG4gICAgICAgIH1cblxuICAgICAgICBoYW5kbGVyc01hcFtfdGhpcy5fdWlkXSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChfdGhpcy5jb21wb25lbnROb2RlID09PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoX3RoaXMucHJvcHMucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLmV4Y2x1ZGVTY3JvbGxiYXIgJiYgY2xpY2tlZFNjcm9sbGJhcihldmVudCkpIHJldHVybjtcbiAgICAgICAgICB2YXIgY3VycmVudCA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICAgIGlmIChmaW5kSGlnaGVzdChjdXJyZW50LCBfdGhpcy5jb21wb25lbnROb2RlLCBfdGhpcy5wcm9wcy5vdXRzaWRlQ2xpY2tJZ25vcmVDbGFzcykgIT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuX19vdXRzaWRlQ2xpY2tIYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgfTtcblxuICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXJzTWFwW190aGlzLl91aWRdLCBnZXRFdmVudEhhbmRsZXJPcHRpb25zKF90aGlzLCBldmVudE5hbWUpKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5kaXNhYmxlT25DbGlja091dHNpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlbGV0ZSBlbmFibGVkSW5zdGFuY2VzW190aGlzLl91aWRdO1xuICAgICAgICB2YXIgZm4gPSBoYW5kbGVyc01hcFtfdGhpcy5fdWlkXTtcblxuICAgICAgICBpZiAoZm4gJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhciBldmVudHMgPSBfdGhpcy5wcm9wcy5ldmVudFR5cGVzO1xuXG4gICAgICAgICAgaWYgKCFldmVudHMuZm9yRWFjaCkge1xuICAgICAgICAgICAgZXZlbnRzID0gW2V2ZW50c107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbiwgZ2V0RXZlbnRIYW5kbGVyT3B0aW9ucyhfdGhpcywgZXZlbnROYW1lKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVsZXRlIGhhbmRsZXJzTWFwW190aGlzLl91aWRdO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5nZXRSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pbnN0YW5jZVJlZiA9IHJlZjtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl91aWQgPSB1aWQoKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWNjZXNzIHRoZSBXcmFwcGVkQ29tcG9uZW50J3MgaW5zdGFuY2UuXG4gICAgICovXG5cblxuICAgIHZhciBfcHJvdG8gPSBvbkNsaWNrT3V0c2lkZS5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiBnZXRJbnN0YW5jZSgpIHtcbiAgICAgIGlmICghV3JhcHBlZENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiA9IHRoaXMuaW5zdGFuY2VSZWY7XG4gICAgICByZXR1cm4gcmVmLmdldEluc3RhbmNlID8gcmVmLmdldEluc3RhbmNlKCkgOiByZWY7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZCBjbGljayBsaXN0ZW5lcnMgdG8gdGhlIGN1cnJlbnQgZG9jdW1lbnQsXG4gICAgICogbGlua2VkIHRvIHRoaXMgY29tcG9uZW50J3Mgc3RhdGUuXG4gICAgICovXG4gICAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAvLyBJZiB3ZSBhcmUgaW4gYW4gZW52aXJvbm1lbnQgd2l0aG91dCBhIERPTSBzdWNoXG4gICAgICAvLyBhcyBzaGFsbG93IHJlbmRlcmluZyBvciBzbmFwc2hvdHMgdGhlbiB3ZSBleGl0XG4gICAgICAvLyBlYXJseSB0byBwcmV2ZW50IGFueSB1bmhhbmRsZWQgZXJyb3JzIGJlaW5nIHRocm93bi5cbiAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICFkb2N1bWVudC5jcmVhdGVFbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICBpZiAoY29uZmlnICYmIHR5cGVvZiBjb25maWcuaGFuZGxlQ2xpY2tPdXRzaWRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX19jbGlja091dHNpZGVIYW5kbGVyUHJvcCA9IGNvbmZpZy5oYW5kbGVDbGlja091dHNpZGUoaW5zdGFuY2UpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fX2NsaWNrT3V0c2lkZUhhbmRsZXJQcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JhcHBlZENvbXBvbmVudDogXCIgKyBjb21wb25lbnROYW1lICsgXCIgbGFja3MgYSBmdW5jdGlvbiBmb3IgcHJvY2Vzc2luZyBvdXRzaWRlIGNsaWNrIGV2ZW50cyBzcGVjaWZpZWQgYnkgdGhlIGhhbmRsZUNsaWNrT3V0c2lkZSBjb25maWcgb3B0aW9uLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbXBvbmVudE5vZGUgPSB0aGlzLl9fZ2V0Q29tcG9uZW50Tm9kZSgpOyAvLyByZXR1cm4gZWFybHkgc28gd2UgZG9udCBpbml0aWF0ZSBvbkNsaWNrT3V0c2lkZVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlT25DbGlja091dHNpZGUpIHJldHVybjtcbiAgICAgIHRoaXMuZW5hYmxlT25DbGlja091dHNpZGUoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50Tm9kZSA9IHRoaXMuX19nZXRDb21wb25lbnROb2RlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGRvY3VtZW50J3MgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGlzIGNvbXBvbmVudFxuICAgICAqL1xuXG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuZGlzYWJsZU9uQ2xpY2tPdXRzaWRlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYW4gYmUgY2FsbGVkIHRvIGV4cGxpY2l0bHkgZW5hYmxlIGV2ZW50IGxpc3RlbmluZ1xuICAgICAqIGZvciBjbGlja3MgYW5kIHRvdWNoZXMgb3V0c2lkZSBvZiB0aGlzIGVsZW1lbnQuXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIFBhc3MtdGhyb3VnaCByZW5kZXJcbiAgICAgKi9cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBleGNsdWRlU2Nyb2xsYmFyID0gX3Byb3BzLmV4Y2x1ZGVTY3JvbGxiYXIsXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJleGNsdWRlU2Nyb2xsYmFyXCJdKTtcblxuICAgICAgaWYgKFdyYXBwZWRDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICAgICAgcHJvcHMucmVmID0gdGhpcy5nZXRSZWY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wcy53cmFwcGVkUmVmID0gdGhpcy5nZXRSZWY7XG4gICAgICB9XG5cbiAgICAgIHByb3BzLmRpc2FibGVPbkNsaWNrT3V0c2lkZSA9IHRoaXMuZGlzYWJsZU9uQ2xpY2tPdXRzaWRlO1xuICAgICAgcHJvcHMuZW5hYmxlT25DbGlja091dHNpZGUgPSB0aGlzLmVuYWJsZU9uQ2xpY2tPdXRzaWRlO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgcHJvcHMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gb25DbGlja091dHNpZGU7XG4gIH0oQ29tcG9uZW50KSwgX2NsYXNzLmRpc3BsYXlOYW1lID0gXCJPbkNsaWNrT3V0c2lkZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIiwgX2NsYXNzLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBldmVudFR5cGVzOiBbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0J10sXG4gICAgZXhjbHVkZVNjcm9sbGJhcjogY29uZmlnICYmIGNvbmZpZy5leGNsdWRlU2Nyb2xsYmFyIHx8IGZhbHNlLFxuICAgIG91dHNpZGVDbGlja0lnbm9yZUNsYXNzOiBJR05PUkVfQ0xBU1NfTkFNRSxcbiAgICBwcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gICAgc3RvcFByb3BhZ2F0aW9uOiBmYWxzZVxuICB9LCBfY2xhc3MuZ2V0Q2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFdyYXBwZWRDb21wb25lbnQuZ2V0Q2xhc3MgPyBXcmFwcGVkQ29tcG9uZW50LmdldENsYXNzKCkgOiBXcmFwcGVkQ29tcG9uZW50O1xuICB9LCBfdGVtcDtcbn1cblxuZXhwb3J0IHsgSUdOT1JFX0NMQVNTX05BTUUgfTtcbmV4cG9ydCBkZWZhdWx0IG9uQ2xpY2tPdXRzaWRlSE9DO1xuIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBMb2Rhc2ggPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9vcGVuanNmLm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cbjsoZnVuY3Rpb24oKSB7XG5cbiAgLyoqIFVzZWQgYXMgYSBzYWZlIHJlZmVyZW5jZSBmb3IgYHVuZGVmaW5lZGAgaW4gcHJlLUVTNSBlbnZpcm9ubWVudHMuICovXG4gIHZhciB1bmRlZmluZWQ7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLiAqL1xuICB2YXIgVkVSU0lPTiA9ICc0LjE3LjE1JztcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbiAgdmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbiAgLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xuICB2YXIgQ09SRV9FUlJPUl9URVhUID0gJ1Vuc3VwcG9ydGVkIGNvcmUtanMgdXNlLiBUcnkgaHR0cHM6Ly9ucG1zLmlvL3NlYXJjaD9xPXBvbnlmaWxsLicsXG4gICAgICBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbiAgdmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nLFxuICAgICAgcmVUcmltU3RhcnQgPSAvXlxccysvLFxuICAgICAgcmVUcmltRW5kID0gL1xccyskLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3cmFwIGRldGFpbCBjb21tZW50cy4gKi9cbiAgdmFyIHJlV3JhcENvbW1lbnQgPSAvXFx7KD86XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAuK1xcXSBcXCpcXC8pP1xcbj8vLFxuICAgICAgcmVXcmFwRGV0YWlscyA9IC9cXHtcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoICguKylcXF0gXFwqLyxcbiAgICAgIHJlU3BsaXREZXRhaWxzID0gLyw/ICYgLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3b3JkcyBjb21wb3NlZCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlQXNjaWlXb3JkID0gL1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2hcbiAgICogW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS5cbiAgICovXG4gIHZhciByZUVzVGVtcGxhdGUgPSAvXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUZsYWdzID0gL1xcdyokLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xuICB2YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xuICB2YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xuICB2YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG4gIHZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgICByc0xvd2VyUmFuZ2UgPSAnYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmJyxcbiAgICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgICAgcnNQdW5jdHVhdGlvblJhbmdlID0gJ1xcXFx1MjAwMC1cXFxcdTIwNmYnLFxuICAgICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnLFxuICAgICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbiAgdmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLFxuICAgICAgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgICByc0RpZ2l0cyA9ICdcXFxcZCsnLFxuICAgICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgICAgcnNNaXNjID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyByc0JyZWFrUmFuZ2UgKyByc0RpZ2l0cyArIHJzRGluZ2JhdFJhbmdlICsgcnNMb3dlclJhbmdlICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgICByc1VwcGVyID0gJ1snICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbiAgdmFyIHJzTWlzY0xvd2VyID0gJyg/OicgKyByc0xvd2VyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc09wdENvbnRyTG93ZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICAgIHJzT3B0Q29udHJVcHBlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OkR8TEx8TXxSRXxTfFR8VkUpKT8nLFxuICAgICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKScsXG4gICAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcSxcbiAgICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xuICB2YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICAgKi9cbiAgdmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbiAgdmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG4gIHZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzTWlzY1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTWlzY0xvd2VyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gICAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgICByc09yZFVwcGVyLFxuICAgIHJzT3JkTG93ZXIsXG4gICAgcnNEaWdpdHMsXG4gICAgcnNFbW9qaVxuICBdLmpvaW4oJ3wnKSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezJ9W2Etel18WzAtOV1bYS16QS1aXXxbYS16QS1aXVswLTldfFteYS16QS1aMC05IF0vO1xuXG4gIC8qKiBVc2VkIHRvIGFzc2lnbiBkZWZhdWx0IGBjb250ZXh0YCBvYmplY3QgcHJvcGVydGllcy4gKi9cbiAgdmFyIGNvbnRleHRQcm9wcyA9IFtcbiAgICAnQXJyYXknLCAnQnVmZmVyJywgJ0RhdGFWaWV3JywgJ0RhdGUnLCAnRXJyb3InLCAnRmxvYXQzMkFycmF5JywgJ0Zsb2F0NjRBcnJheScsXG4gICAgJ0Z1bmN0aW9uJywgJ0ludDhBcnJheScsICdJbnQxNkFycmF5JywgJ0ludDMyQXJyYXknLCAnTWFwJywgJ01hdGgnLCAnT2JqZWN0JyxcbiAgICAnUHJvbWlzZScsICdSZWdFeHAnLCAnU2V0JywgJ1N0cmluZycsICdTeW1ib2wnLCAnVHlwZUVycm9yJywgJ1VpbnQ4QXJyYXknLFxuICAgICdVaW50OENsYW1wZWRBcnJheScsICdVaW50MTZBcnJheScsICdVaW50MzJBcnJheScsICdXZWFrTWFwJyxcbiAgICAnXycsICdjbGVhclRpbWVvdXQnLCAnaXNGaW5pdGUnLCAncGFyc2VJbnQnLCAnc2V0VGltZW91dCdcbiAgXTtcblxuICAvKiogVXNlZCB0byBtYWtlIHRlbXBsYXRlIHNvdXJjZVVSTHMgZWFzaWVyIHRvIGlkZW50aWZ5LiAqL1xuICB2YXIgdGVtcGxhdGVDb3VudGVyID0gLTE7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xuICB2YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbiAgdHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgdHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxuICB0eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG4gIHZhciBjbG9uZWFibGVUYWdzID0ge307XG4gIGNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIGNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBtYXAgTGF0aW4gVW5pY29kZSBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuICovXG4gIHZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gICAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAgICdcXHhjMCc6ICdBJywgICdcXHhjMSc6ICdBJywgJ1xceGMyJzogJ0EnLCAnXFx4YzMnOiAnQScsICdcXHhjNCc6ICdBJywgJ1xceGM1JzogJ0EnLFxuICAgICdcXHhlMCc6ICdhJywgICdcXHhlMSc6ICdhJywgJ1xceGUyJzogJ2EnLCAnXFx4ZTMnOiAnYScsICdcXHhlNCc6ICdhJywgJ1xceGU1JzogJ2EnLFxuICAgICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgICAnXFx4ZDAnOiAnRCcsICAnXFx4ZjAnOiAnZCcsXG4gICAgJ1xceGM4JzogJ0UnLCAgJ1xceGM5JzogJ0UnLCAnXFx4Y2EnOiAnRScsICdcXHhjYic6ICdFJyxcbiAgICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAgICdcXHhjYyc6ICdJJywgICdcXHhjZCc6ICdJJywgJ1xceGNlJzogJ0knLCAnXFx4Y2YnOiAnSScsXG4gICAgJ1xceGVjJzogJ2knLCAgJ1xceGVkJzogJ2knLCAnXFx4ZWUnOiAnaScsICdcXHhlZic6ICdpJyxcbiAgICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICAgJ1xceGQyJzogJ08nLCAgJ1xceGQzJzogJ08nLCAnXFx4ZDQnOiAnTycsICdcXHhkNSc6ICdPJywgJ1xceGQ2JzogJ08nLCAnXFx4ZDgnOiAnTycsXG4gICAgJ1xceGYyJzogJ28nLCAgJ1xceGYzJzogJ28nLCAnXFx4ZjQnOiAnbycsICdcXHhmNSc6ICdvJywgJ1xceGY2JzogJ28nLCAnXFx4ZjgnOiAnbycsXG4gICAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgICAnXFx4ZjknOiAndScsICAnXFx4ZmEnOiAndScsICdcXHhmYic6ICd1JywgJ1xceGZjJzogJ3UnLFxuICAgICdcXHhkZCc6ICdZJywgICdcXHhmZCc6ICd5JywgJ1xceGZmJzogJ3knLFxuICAgICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICAgJ1xceGRlJzogJ1RoJywgJ1xceGZlJzogJ3RoJyxcbiAgICAnXFx4ZGYnOiAnc3MnLFxuICAgIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICAgJ1xcdTAxMDAnOiAnQScsICAnXFx1MDEwMic6ICdBJywgJ1xcdTAxMDQnOiAnQScsXG4gICAgJ1xcdTAxMDEnOiAnYScsICAnXFx1MDEwMyc6ICdhJywgJ1xcdTAxMDUnOiAnYScsXG4gICAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAgICdcXHUwMTA3JzogJ2MnLCAgJ1xcdTAxMDknOiAnYycsICdcXHUwMTBiJzogJ2MnLCAnXFx1MDEwZCc6ICdjJyxcbiAgICAnXFx1MDEwZSc6ICdEJywgICdcXHUwMTEwJzogJ0QnLCAnXFx1MDEwZic6ICdkJywgJ1xcdTAxMTEnOiAnZCcsXG4gICAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgICAnXFx1MDExMyc6ICdlJywgICdcXHUwMTE1JzogJ2UnLCAnXFx1MDExNyc6ICdlJywgJ1xcdTAxMTknOiAnZScsICdcXHUwMTFiJzogJ2UnLFxuICAgICdcXHUwMTFjJzogJ0cnLCAgJ1xcdTAxMWUnOiAnRycsICdcXHUwMTIwJzogJ0cnLCAnXFx1MDEyMic6ICdHJyxcbiAgICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICAgJ1xcdTAxMjQnOiAnSCcsICAnXFx1MDEyNic6ICdIJywgJ1xcdTAxMjUnOiAnaCcsICdcXHUwMTI3JzogJ2gnLFxuICAgICdcXHUwMTI4JzogJ0knLCAgJ1xcdTAxMmEnOiAnSScsICdcXHUwMTJjJzogJ0knLCAnXFx1MDEyZSc6ICdJJywgJ1xcdTAxMzAnOiAnSScsXG4gICAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgICAnXFx1MDEzNCc6ICdKJywgICdcXHUwMTM1JzogJ2onLFxuICAgICdcXHUwMTM2JzogJ0snLCAgJ1xcdTAxMzcnOiAnaycsICdcXHUwMTM4JzogJ2snLFxuICAgICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICAgJ1xcdTAxM2EnOiAnbCcsICAnXFx1MDEzYyc6ICdsJywgJ1xcdTAxM2UnOiAnbCcsICdcXHUwMTQwJzogJ2wnLCAnXFx1MDE0Mic6ICdsJyxcbiAgICAnXFx1MDE0Myc6ICdOJywgICdcXHUwMTQ1JzogJ04nLCAnXFx1MDE0Nyc6ICdOJywgJ1xcdTAxNGEnOiAnTicsXG4gICAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAgICdcXHUwMTRjJzogJ08nLCAgJ1xcdTAxNGUnOiAnTycsICdcXHUwMTUwJzogJ08nLFxuICAgICdcXHUwMTRkJzogJ28nLCAgJ1xcdTAxNGYnOiAnbycsICdcXHUwMTUxJzogJ28nLFxuICAgICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAgICdcXHUwMTU1JzogJ3InLCAgJ1xcdTAxNTcnOiAncicsICdcXHUwMTU5JzogJ3InLFxuICAgICdcXHUwMTVhJzogJ1MnLCAgJ1xcdTAxNWMnOiAnUycsICdcXHUwMTVlJzogJ1MnLCAnXFx1MDE2MCc6ICdTJyxcbiAgICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICAgJ1xcdTAxNjInOiAnVCcsICAnXFx1MDE2NCc6ICdUJywgJ1xcdTAxNjYnOiAnVCcsXG4gICAgJ1xcdTAxNjMnOiAndCcsICAnXFx1MDE2NSc6ICd0JywgJ1xcdTAxNjcnOiAndCcsXG4gICAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICAgJ1xcdTAxNjknOiAndScsICAnXFx1MDE2Yic6ICd1JywgJ1xcdTAxNmQnOiAndScsICdcXHUwMTZmJzogJ3UnLCAnXFx1MDE3MSc6ICd1JywgJ1xcdTAxNzMnOiAndScsXG4gICAgJ1xcdTAxNzQnOiAnVycsICAnXFx1MDE3NSc6ICd3JyxcbiAgICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgICAnXFx1MDE3OSc6ICdaJywgICdcXHUwMTdiJzogJ1onLCAnXFx1MDE3ZCc6ICdaJyxcbiAgICAnXFx1MDE3YSc6ICd6JywgICdcXHUwMTdjJzogJ3onLCAnXFx1MDE3ZSc6ICd6JyxcbiAgICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgICAnXFx1MDE1Mic6ICdPZScsICdcXHUwMTUzJzogJ29lJyxcbiAgICAnXFx1MDE0OSc6IFwiJ25cIiwgJ1xcdTAxN2YnOiAncydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLiAqL1xuICB2YXIgaHRtbEVzY2FwZXMgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy4gKi9cbiAgdmFyIGh0bWxVbmVzY2FwZXMgPSB7XG4gICAgJyZhbXA7JzogJyYnLFxuICAgICcmbHQ7JzogJzwnLFxuICAgICcmZ3Q7JzogJz4nLFxuICAgICcmcXVvdDsnOiAnXCInLFxuICAgICcmIzM5Oyc6IFwiJ1wiXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciBzdHJpbmdFc2NhcGVzID0ge1xuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHInOiAncicsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIC8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG4gIHZhciBmcmVlUGFyc2VGbG9hdCA9IHBhcnNlRmxvYXQsXG4gICAgICBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbiAgdmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbiAgLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG4gIHZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG4gIHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG4gIHZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbiAgLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbiAgdmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4gIC8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xuICB2YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICAgIGlmICh0eXBlcykge1xuICAgICAgICByZXR1cm4gdHlwZXM7XG4gICAgICB9XG5cbiAgICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSgpKTtcblxuICAvKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xuICB2YXIgbm9kZUlzQXJyYXlCdWZmZXIgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0FycmF5QnVmZmVyLFxuICAgICAgbm9kZUlzRGF0ZSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzRGF0ZSxcbiAgICAgIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwLFxuICAgICAgbm9kZUlzUmVnRXhwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNSZWdFeHAsXG4gICAgICBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldCxcbiAgICAgIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VBZ2dyZWdhdG9yYCBmb3IgYXJyYXlzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUFnZ3JlZ2F0b3IoYXJyYXksIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoUmlnaHQoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmV2ZXJ5YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUV2ZXJ5KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKCFwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhcnJheUluY2x1ZGVzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gICAgfVxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlUmlnaHQoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5Wy0tbGVuZ3RoXTtcbiAgICB9XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGFuIEFTQ0lJIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICB2YXIgYXNjaWlTaXplID0gYmFzZVByb3BlcnR5KCdsZW5ndGgnKTtcblxuICAvKipcbiAgICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYW4gQVNDSUkgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5maW5kS2V5YCBhbmQgYF8uZmluZExhc3RLZXlgLFxuICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gXG4gICAqIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQgb3IgaXRzIGtleSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kS2V5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZWFjaEZ1bmMpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmVzdWx0ID0ga2V5O1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgsIGZyb21SaWdodCkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mV2l0aChhcnJheSwgdmFsdWUsIGZyb21JbmRleCwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lYW5gIGFuZCBgXy5tZWFuQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VNZWFuKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gbGVuZ3RoID8gKGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSAvIGxlbmd0aCkgOiBOQU47XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAsIHdpdGhvdXQgc3VwcG9ydFxuICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmAgdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaXRBY2N1bSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnQgb2ZcbiAgICogIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VSZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGVhY2hGdW5jKSB7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxuICAgICAgICA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICAgIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZSB0aGVcbiAgICogc29ydCBvcmRlciBvZiBgYXJyYXlgIGFuZCByZXBsYWNlcyBjcml0ZXJpYSBvYmplY3RzIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZ1xuICAgKiB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhcnJheVtsZW5ndGhdID0gYXJyYXlbbGVuZ3RoXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnN1bWAgYW5kIGBfLnN1bUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIHJlc3VsdCxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdKTtcbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBjdXJyZW50IDogKHJlc3VsdCArIGN1cnJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAgICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1BhaXJzYCBhbmQgYF8udG9QYWlyc0luYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5XG4gICAqIG9mIGtleS12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUb1BhaXJzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIFtrZXksIG9iamVjdFtrZXldXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLmxlbmd0aCA/IGl0ZXJhdGVlcyA6IFtpZGVudGl0eV0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICB2YWxJc05hTiA9IHZhbHVlICE9PSB2YWx1ZSxcbiAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSxcbiAgICAgICAgICB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gY29tcHV0ZWQgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCxcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgIHZhciBzZXRMb3cgPSByZXRIaWdoZXN0IHx8IG90aElzUmVmbGV4aXZlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgb3RoSXNEZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgIW90aElzTnVsbCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRVbmlxYCBhbmQgYF8uc29ydGVkVW5pcUJ5YCB3aXRob3V0XG4gICAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgICAgICB2YXIgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvTnVtYmVyYCB3aGljaCBkb2Vzbid0IGVuc3VyZSBjb3JyZWN0XG4gICAgICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgaWYgKHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gYmFzZVNldChvYmplY3QsIHBhdGgsIHVwZGF0ZXIoYmFzZUdldChvYmplY3QsIHBhdGgpKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRyb3BXaGlsZWAgYW5kIGBfLnRha2VXaGlsZWBcbiAgICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVyZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVJlZHVjZShhY3Rpb25zLCBmdW5jdGlvbihyZXN1bHQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLnhvcmAsIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLFxuICAgICAgICAgICAgb3RoSW5kZXggPSAtMTtcblxuICAgICAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGJhc2VEaWZmZXJlbmNlKHJlc3VsdFtpbmRleF0gfHwgYXJyYXksIGFycmF5c1tvdGhJbmRleF0sIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnppcE9iamVjdGAgd2hpY2ggYXNzaWducyB2YWx1ZXMgdXNpbmcgYGFzc2lnbkZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdCwgcHJvcHNbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGBiYXNlUmVzdGAgYWxpYXMgd2hpY2ggY2FuIGJlIHJlcGxhY2VkIHdpdGggYGlkZW50aXR5YCBieSBtb2R1bGVcbiAgICAgKiByZXBsYWNlbWVudCBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgY2FzdFJlc3QgPSBiYXNlUmVzdDtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICAgICAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYGNsZWFyVGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL2NsZWFyVGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gaWQgVGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0IG9mIHRoZSB0aW1lciB0byBjbGVhci5cbiAgICAgKi9cbiAgICB2YXIgY2xlYXJUaW1lb3V0ID0gY3R4Q2xlYXJUaW1lb3V0IHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcm9vdC5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgICAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgICAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgICAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuICAgICAqXG4gICAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAgICAgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG4gICAgICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcbiAgICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICAgICAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgICAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgICAgIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uZ3JvdXBCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaW5pdGlhbGl6ZXJdIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgaW5pdGlhbGl6ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUFnZ3JlZ2F0b3IgOiBiYXNlQWdncmVnYXRvcixcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdGlhbGl6ZXIgPyBpbml0aWFsaXplcigpIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGFjY3VtdWxhdG9yKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgICAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVc2UgYSBgc3dpdGNoYCBzdGF0ZW1lbnQgdG8gd29yayB3aXRoIGNsYXNzIGNvbnN0cnVjdG9ycy4gU2VlXG4gICAgICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgY2FzZSA3OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgICAgICByZXN1bHQgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcblxuICAgICAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleEZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuICAgICAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuICAgICAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLCBwYXJ0aWFsIGFwcGxpY2F0aW9uLCBhbmQgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZFxuICAgICAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgICAgICBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICAgICAgaWYgKGlzQ3VycmllZCAmJiBsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB0aGlzQXJnLFxuICAgICAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoYXJnUG9zKSB7XG4gICAgICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5pbnZlcnRCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b0l0ZXJhdGVlIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlcihzZXR0ZXIsIHRvSXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIHRvSXRlcmF0ZWUoaXRlcmF0ZWUpLCB7fSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgdXNlZCBmb3IgYHVuZGVmaW5lZGAgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTWF0aE9wZXJhdGlvbihvcGVyYXRvciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvU3RyaW5nKG90aGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLm92ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgb3ZlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVPdmVyKGFycmF5RnVuYykge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGl0ZXJhdGVlcykge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgdmFyIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYCBiYXNlZCBvbiBgbGVuZ3RoYC4gVGhlIGBjaGFyc2Agc3RyaW5nXG4gICAgICogaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQgPyAnICcgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuXG4gICAgICB2YXIgY2hhcnNMZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBjaGFyc0xlbmd0aCA/IGJhc2VSZXBlYXQoY2hhcnMsIGxlbmd0aCkgOiBjaGFycztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gICAgICByZXR1cm4gaGFzVW5pY29kZShjaGFycylcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShyZXN1bHQpLCAwLCBsZW5ndGgpLmpvaW4oJycpXG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucmFuZ2VgIG9yIGBfLnJhbmdlUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgICAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcmVsYXRpb25hbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZWxhdGlvbmFsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKG9wZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3RoZXIgPSB0b051bWJlcihvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICAgICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gICAgICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgICAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5yb3VuZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgTWF0aGAgbWV0aG9kIHRvIHVzZSB3aGVuIHJvdW5kaW5nLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gTWF0aFttZXRob2ROYW1lXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDAgOiBuYXRpdmVNaW4odG9JbnRlZ2VyKHByZWNpc2lvbiksIDI5Mik7XG4gICAgICAgIGlmIChwcmVjaXNpb24gJiYgbmF0aXZlSXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgICAgIC8vIFNoaWZ0IHdpdGggZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYXZvaWQgZmxvYXRpbmctcG9pbnQgaXNzdWVzLlxuICAgICAgICAgIC8vIFNlZSBbTUROXShodHRwczovL21kbi5pby9yb3VuZCNFeGFtcGxlcykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICB2YXIgcGFpciA9ICh0b1N0cmluZyhudW1iZXIpICsgJ2UnKS5zcGxpdCgnZScpLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGZ1bmMocGFpclswXSArICdlJyArICgrcGFpclsxXSArIHByZWNpc2lvbikpO1xuXG4gICAgICAgICAgcGFpciA9ICh0b1N0cmluZyh2YWx1ZSkgKyAnZScpLnNwbGl0KCdlJyk7XG4gICAgICAgICAgcmV0dXJuICsocGFpclswXSArICdlJyArICgrcGFpclsxXSAtIHByZWNpc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jKG51bWJlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzZXQgb2JqZWN0IG9mIGB2YWx1ZXNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhZGQgdG8gdGhlIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICAgICAqL1xuICAgIHZhciBjcmVhdGVTZXQgPSAhKFNldCAmJiAoMSAvIHNldFRvQXJyYXkobmV3IFNldChbLC0wXSkpWzFdKSA9PSBJTkZJTklUWSkgPyBub29wIDogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8udG9QYWlyc2Agb3IgYF8udG9QYWlyc0luYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYWlycyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVUb1BhaXJzKGtleXNGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICAgICAgaWYgKHRhZyA9PSBtYXBUYWcpIHtcbiAgICAgICAgICByZXR1cm4gbWFwVG9BcnJheShvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvUGFpcnMob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZVRvUGFpcnMob2JqZWN0LCBrZXlzRnVuYyhvYmplY3QpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZWl0aGVyIGN1cnJpZXMgb3IgaW52b2tlcyBgZnVuY2Agd2l0aCBvcHRpb25hbFxuICAgICAqIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAgIDEgLSBgXy5iaW5kYFxuICAgICAqICAgIDIgLSBgXy5iaW5kS2V5YFxuICAgICAqICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICAgICAqICAgIDggLSBgXy5jdXJyeWBcbiAgICAgKiAgIDE2IC0gYF8uY3VycnlSaWdodGBcbiAgICAgKiAgIDMyIC0gYF8ucGFydGlhbGBcbiAgICAgKiAgIDY0IC0gYF8ucGFydGlhbFJpZ2h0YFxuICAgICAqICAxMjggLSBgXy5yZWFyZ2BcbiAgICAgKiAgMjU2IC0gYF8uYXJ5YFxuICAgICAqICA1MTIgLSBgXy5mbGlwYFxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAoIWlzQmluZEtleSAmJiB0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXJ0aWFscyA/IHBhcnRpYWxzLmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFyeSA9IGFyeSA9PT0gdW5kZWZpbmVkID8gYXJ5IDogbmF0aXZlTWF4KHRvSW50ZWdlcihhcnkpLCAwKTtcbiAgICAgIGFyaXR5ID0gYXJpdHkgPT09IHVuZGVmaW5lZCA/IGFyaXR5IDogdG9JbnRlZ2VyKGFyaXR5KTtcbiAgICAgIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAoYml0bWFzayAmIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgICAgICBob2xkZXJzUmlnaHQgPSBob2xkZXJzO1xuXG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogZ2V0RGF0YShmdW5jKTtcblxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsXG4gICAgICAgIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWVyZ2VEYXRhKG5ld0RhdGEsIGRhdGEpO1xuICAgICAgfVxuICAgICAgZnVuYyA9IG5ld0RhdGFbMF07XG4gICAgICBiaXRtYXNrID0gbmV3RGF0YVsxXTtcbiAgICAgIHRoaXNBcmcgPSBuZXdEYXRhWzJdO1xuICAgICAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICAgICAgaG9sZGVycyA9IG5ld0RhdGFbNF07XG4gICAgICBhcml0eSA9IG5ld0RhdGFbOV0gPSBuZXdEYXRhWzldID09PSB1bmRlZmluZWRcbiAgICAgICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgICAgICA6IG5hdGl2ZU1heChuZXdEYXRhWzldIC0gbGVuZ3RoLCAwKTtcblxuICAgICAgaWYgKCFhcml0eSAmJiBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJpdG1hc2sgfHwgYml0bWFzayA9PSBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpO1xuICAgICAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBXUkFQX1BBUlRJQUxfRkxBRyB8fCBiaXRtYXNrID09IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcoc2V0dGVyKHJlc3VsdCwgbmV3RGF0YSksIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduSW5gIHVzZSB0byBhc3NpZ24gcHJvcGVydGllc1xuICAgICAqIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNBc3NpZ25JbihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICByZXR1cm4gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c0RlZXBgIHRvIGN1c3RvbWl6ZSBpdHMgYF8ubWVyZ2VgIHVzZSB0byBtZXJnZSBzb3VyY2VcbiAgICAgKiBvYmplY3RzIGludG8gZGVzdGluYXRpb24gb2JqZWN0cyB0aGF0IGFyZSBwYXNzZWQgdGhydS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHBhcmVudCBvYmplY3Qgb2YgYHNyY1ZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c01lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spIHtcbiAgICAgIGlmIChpc09iamVjdChvYmpWYWx1ZSkgJiYgaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG9ialZhbHVlKTtcbiAgICAgICAgYmFzZU1lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwgdW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vbWl0YCB0byBjdXN0b21pemUgaXRzIGBfLmNsb25lRGVlcGAgdXNlIHRvIG9ubHkgY2xvbmUgcGxhaW5cbiAgICAgKiBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW5jbG9uZWQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgdG8gZGVmZXIgY2xvbmluZyB0byBgXy5jbG9uZURlZXBgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbU9taXRDbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICAgICAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICAgICAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAgICAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAgICAgKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICAgICAgY2FzZSBlcnJvclRhZzpcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gICAgICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gICAgICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICAgICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gaW5zZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLmpvaW4obGVuZ3RoID4gMiA/ICcsICcgOiAnICcpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICAgICApIHtcbiAgICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaXMgY2FwYWJsZSBvZiBiZWluZyBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2FibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICAgICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gICAgICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gICAgICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gICAgICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIE1lcmdpbmcgbWV0YWRhdGEgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZXJzIHVzZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gICAgICogYF8ucmVhcmdgIG1vZGlmeSBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmVcbiAgICAgKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAgICAgKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICAgICAqIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICAgICAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICAgKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5XG4gICAgICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gICAgICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYHNldFRpbWVvdXRgXShodHRwczovL21kbi5pby9zZXRUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIHNldFRpbWVvdXQgPSBjdHhTZXRUaW1lb3V0IHx8IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICAgIHJldHVybiByb290LnNldFRpbWVvdXQoZnVuYywgd2FpdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gICAgICogd2l0aCB3cmFwcGVyIGRldGFpbHMgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYHdyYXBwZXJgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgICAgIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAgICAgKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgc2l6ZSA9IHNpemUgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHNpemU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtyYW5kXTtcblxuICAgICAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBhcnJheS5sZW5ndGggPSBzaXplO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICAgICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB3cmFwcGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdyYXBwZXIgVGhlIHdyYXBwZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHdyYXBwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVyLl9fd3JhcHBlZF9fLCB3cmFwcGVyLl9fY2hhaW5fXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19pbmRleF9fICA9IHdyYXBwZXIuX19pbmRleF9fO1xuICAgICAgcmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29uY2F0ZW5hdGluZyBgYXJyYXlgIHdpdGggYW55IGFkZGl0aW9uYWwgYXJyYXlzXG4gICAgICogYW5kL29yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob3RoZXIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCAtIDEpLFxuICAgICAgICAgIGFycmF5ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBhcmdzW2luZGV4IC0gMV0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UHVzaChpc0FycmF5KGFycmF5KSA/IGNvcHlBcnJheShhcnJheSkgOiBbYXJyYXldLCBiYXNlRmxhdHRlbihhcmdzLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kaWZmZXJlbmNlQnkoW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCBbeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBvcmRlciBhbmRcbiAgICAgKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VXaXRoKG9iamVjdHMsIFt7ICd4JzogMSwgJ3knOiAyIH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoY29tcGFyYXRvcikpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOCwgMTBdLCAnKicsIDEsIDMpO1xuICAgICAqIC8vID0+IFs0LCAnKicsICcqJywgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ3BlYmJsZXMnOyB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgICAgID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKVxuICAgICAgICAgIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dO1xuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gICAgICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXV0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZmlyc3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5oZWFkKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDAsIC0xKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZClcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgaWYgKGl0ZXJhdGVlID09PSBsYXN0KG1hcHBlZCkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzXG4gICAgICogb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZXBhcmF0b3I9JywnXSBUaGUgZWxlbWVudCBzZXBhcmF0b3IuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgam9pbmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5qb2luKFsnYScsICdiJywgJ2MnXSwgJ34nKTtcbiAgICAgKiAvLyA9PiAnYX5ifmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gam9pbihhcnJheSwgc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgYXJyYXlgIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgICA/IHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpXG4gICAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCBhdCBpbmRleCBgbmAgb2YgYGFycmF5YC4gSWYgYG5gIGlzIG5lZ2F0aXZlLCB0aGUgbnRoXG4gICAgICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAtMik7XG4gICAgICogLy8gPT4gJ2MnO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aChhcnJheSwgbikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5yZW1vdmVgXG4gICAgICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIHZhciBwdWxsID0gYmFzZVJlc3QocHVsbEFsbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZUJ5YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDMgfSwgeyAneCc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VXaXRoYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAzLCAneSc6IDQgfSwgeyAneCc6IDUsICd5JzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbFdpdGgoYXJyYXksIFt7ICd4JzogMywgJ3knOiA0IH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlcywgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gICAgICogYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IFtpbmRleGVzXSBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHB1bGxlZCk7XG4gICAgICogLy8gPT4gWydiJywgJ2QnXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSBmbGF0UmVzdChmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG5cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gICAgICB9KS5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICAgICAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIGBhcnJheWAgc28gdGhhdCB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGUgc2Vjb25kXG4gICAgICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YCBhbmQgaXMgYmFzZWQgb25cbiAgICAgKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucmV2ZXJzZShhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXG4gICAgICogW2BBcnJheSNzbGljZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3NsaWNlKSB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZVxuICAgICAqIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgJiYgdHlwZW9mIGVuZCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIGlmIChlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXkpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjEsIDIuM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWlsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFpbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMSwgbGVuZ3RoKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuIEVsZW1lbnRzIGFyZVxuICAgICAqIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tIHRoZSBmaXJzdFxuICAgICAqIGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbkJ5KFsyLjFdLCBbMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAgICAgKiBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAgICAgKiBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pcVdpdGgob2JqZWN0cywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcVdpdGgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgZ3JvdXBlZFxuICAgICAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAgICAgKiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgICAgIGlmIChpdGVyYXRlZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlNYXAocmVzdWx0LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHVuZGVmaW5lZCwgZ3JvdXApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIGdpdmVuIHZhbHVlcyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZVxuICAgICAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cy4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXJcbiAgICAgKiB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLndpdGhvdXRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZFxuICAgICAqIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lXG4gICAgICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3JCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yLCAzLjRdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ueG9yV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB4b3JXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IGJhc2VSZXN0KHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gICAgICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcE9iamVjdGAgZXhjZXB0IHRoYXQgaXQgc3VwcG9ydHMgcHJvcGVydHkgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0RGVlcChbJ2EuYlswXS5jJywgJ2EuYlsxXS5kJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiBbeyAnYyc6IDEgfSwgeyAnZCc6IDIgfV0gfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0RGVlcChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBiYXNlU2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIGdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gYSArIGIgKyBjO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgaXRlcmF0ZWUgPSBsZW5ndGggPiAxID8gYXJyYXlzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpdGVyYXRlZSA9IHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gKGFycmF5cy5wb3AoKSwgaXRlcmF0ZWUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgd3JhcHMgYHZhbHVlYCB3aXRoIGV4cGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLiBUaGUgcmVzdWx0IG9mIHN1Y2ggc2VxdWVuY2VzIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gX1xuICAgICAqICAgLmNoYWluKHVzZXJzKVxuICAgICAqICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAqICAgICByZXR1cm4gby51c2VyICsgJyBpcyAnICsgby5hZ2U7XG4gICAgICogICB9KVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvXG4gICAgICogXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlIGluIG9yZGVyIHRvIG1vZGlmeSBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgIC8vIE11dGF0ZSBpbnB1dCBhcnJheS5cbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwicGFzcyB0aHJ1XCIgdmFsdWVzIHJlcGxhY2luZyBpbnRlcm1lZGlhdGVcbiAgICAgKiByZXN1bHRzIGluIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXygnICBhYmMgICcpXG4gICAgICogIC5jaGFpbigpXG4gICAgICogIC50cmltKClcbiAgICAgKiAgLnRocnUoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocnUodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8uYXRgLlxuICAgICAqXG4gICAgICogQG5hbWUgYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXyhvYmplY3QpLmF0KFsnYVswXS5iLmMnLCAnYVsxXSddKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVyQXQgPSBmbGF0UmVzdChmdW5jdGlvbihwYXRocykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICBzdGFydCA9IGxlbmd0aCA/IHBhdGhzWzBdIDogMCxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHsgcmV0dXJuIGJhc2VBdChvYmplY3QsIHBhdGhzKTsgfTtcblxuICAgICAgaWYgKGxlbmd0aCA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGggfHxcbiAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgdmFsdWUuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLFxuICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsIHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGlmIChsZW5ndGggJiYgIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHdpdGggZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpLmhlYWQoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGggZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycylcbiAgICAgKiAgIC5jaGFpbigpXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLnB1c2goMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkID0gd3JhcHBlZC5jb21taXQoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLmxhc3QoKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNvbW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih0aGlzLnZhbHVlKCksIHRoaXMuX19jaGFpbl9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IHZhbHVlIG9uIGEgd3JhcHBlZCBvYmplY3QgZm9sbG93aW5nIHRoZVxuICAgICAqIFtpdGVyYXRvciBwcm90b2NvbF0oaHR0cHM6Ly9tZG4uaW8vaXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAbmFtZSBuZXh0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV4dCBpdGVyYXRvciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDEgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAyIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiB0cnVlLCAndmFsdWUnOiB1bmRlZmluZWQgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgaWYgKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBkb25lID0gdGhpcy5fX2luZGV4X18gPj0gdGhpcy5fX3ZhbHVlc19fLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQgOiB0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK107XG5cbiAgICAgIHJldHVybiB7ICdkb25lJzogZG9uZSwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB3cmFwcGVyIHRvIGJlIGl0ZXJhYmxlLlxuICAgICAqXG4gICAgICogQG5hbWUgU3ltYm9sLml0ZXJhdG9yXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZFtTeW1ib2wuaXRlcmF0b3JdKCkgPT09IHdyYXBwZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogQXJyYXkuZnJvbSh3cmFwcGVkKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9JdGVyYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW4gc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGxhbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSkubWFwKHNxdWFyZSk7XG4gICAgICogdmFyIG90aGVyID0gd3JhcHBlZC5wbGFudChbMywgNF0pO1xuICAgICAqXG4gICAgICogb3RoZXIudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbOSwgMTZdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBiYXNlTG9kYXNoKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHdyYXBwZXJDbG9uZShwYXJlbnQpO1xuICAgICAgICBjbG9uZS5fX2luZGV4X18gPSAwO1xuICAgICAgICBjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldmlvdXMgPSBjbG9uZTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Ll9fd3JhcHBlZF9fO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5yZXZlcnNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIHRoZSB3cmFwcGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgICAnYXJncyc6IFtyZXZlcnNlXSxcbiAgICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgKytyZXN1bHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogW2VtcHR5IGNvbGxlY3Rpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbXB0eV9zZXQpIGJlY2F1c2VcbiAgICAgKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICAgICAqIGVsZW1lbnRzIG9mIGVtcHR5IGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8ucmVqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKi9cbiAgICB2YXIgZmluZCA9IGNyZWF0ZUZpbmQoZmluZEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWNvbGxlY3Rpb24ubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0KFsxLCAyLCAzLCA0XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIHZhciBmaW5kTGFzdCA9IGNyZWF0ZUZpbmQoZmluZExhc3RJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmxhdHRlbmVkIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aHJ1IGBpdGVyYXRlZWAgYW5kIGZsYXR0ZW5pbmcgdGhlIG1hcHBlZCByZXN1bHRzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW24sIG5dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZWVwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVlcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIElORklOSVRZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZXB0aChbMSwgMl0sIGR1cGxpY2F0ZSwgMik7XG4gICAgICogLy8gPT4gW1sxLCAxXSwgWzIsIDJdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZXB0aChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgZGVwdGgpIHtcbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gICAgICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBlYWNoXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBhbGlhcyBlYWNoUmlnaHRcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2hSaWdodChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMmAgdGhlbiBgMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2hSaWdodCA6IGJhc2VFYWNoUmlnaHQ7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgb3JkZXIgb2YgZ3JvdXBlZCB2YWx1ZXNcbiAgICAgKiBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIGBjb2xsZWN0aW9uYC4gVGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiB2YWx1ZSBvZiBlYWNoIGtleSBpcyBhbiBhcnJheSBvZiBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGVcbiAgICAgKiBrZXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi4zXSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmdyb3VwQnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogWydvbmUnLCAndHdvJ10sICc1JzogWyd0aHJlZSddIH1cbiAgICAgKi9cbiAgICB2YXIgZ3JvdXBCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgYSBzdHJpbmcsIGl0J3NcbiAgICAgKiBjaGVja2VkIGZvciBhIHN1YnN0cmluZyBvZiBgdmFsdWVgLCBvdGhlcndpc2VcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGlzIHVzZWQgZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzXG4gICAgICogdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoeyAnYSc6IDEsICdiJzogMiB9LCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKCdhYmNkJywgJ2JjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgICBjb2xsZWN0aW9uID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCAmJiAhZ3VhcmQpID8gdG9JbnRlZ2VyKGZyb21JbmRleCkgOiAwO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgICBmcm9tSW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKVxuICAgICAgICA/IChmcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKVxuICAgICAgICA6ICghIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAsIHJldHVybmluZ1xuICAgICAqIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mIGVhY2ggaW52b2tlZCBtZXRob2QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqIGFyZSBwcm92aWRlZCB0byBlYWNoIGludm9rZWQgbWV0aG9kLiBJZiBgcGF0aGAgaXMgYSBmdW5jdGlvbiwgaXQncyBpbnZva2VkXG4gICAgICogZm9yLCBhbmQgYHRoaXNgIGJvdW5kIHRvLCBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbnxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBlYWNoIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoW1s1LCAxLCA3XSwgWzMsIDIsIDFdXSwgJ3NvcnQnKTtcbiAgICAgKiAvLyA9PiBbWzEsIDUsIDddLCBbMSwgMiwgM11dXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbMTIzLCA0NTZdLCBTdHJpbmcucHJvdG90eXBlLnNwbGl0LCAnJyk7XG4gICAgICogLy8gPT4gW1snMScsICcyJywgJzMnXSwgWyc0JywgJzUnLCAnNiddXVxuICAgICAqL1xuICAgIHZhciBpbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBwYXRoLCBhcmdzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0Z1bmMgPSB0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGlzRnVuYyA/IGFwcGx5KHBhdGgsIHZhbHVlLCBhcmdzKSA6IGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgZnVuY3Rpb24obykge1xuICAgICAqICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoby5jb2RlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdkJzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCAnZGlyJyk7XG4gICAgICogLy8gPT4geyAnbGVmdCc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAncmlnaHQnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIga2V5QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAgICAgKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAgICAgKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0QnlgIGV4Y2VwdCB0aGF0IGl0IGFsbG93cyBzcGVjaWZ5aW5nIHRoZSBzb3J0XG4gICAgICogb3JkZXJzIG9mIHRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS4gSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXNcbiAgICAgKiBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLCBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvclxuICAgICAqIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXIgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5W118RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3JkZXJzXSBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gU29ydCBieSBgdXNlcmAgaW4gYXNjZW5kaW5nIG9yZGVyIGFuZCBieSBgYWdlYCBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqIF8ub3JkZXJCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddLCBbJ2FzYycsICdkZXNjJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMsIGd1YXJkKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheShpdGVyYXRlZXMpKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGl0ZXJhdGVlcyA9PSBudWxsID8gW10gOiBbaXRlcmF0ZWVzXTtcbiAgICAgIH1cbiAgICAgIG9yZGVycyA9IGd1YXJkID8gdW5kZWZpbmVkIDogb3JkZXJzO1xuICAgICAgaWYgKCFpc0FycmF5KG9yZGVycykpIHtcbiAgICAgICAgb3JkZXJzID0gb3JkZXJzID09IG51bGwgPyBbXSA6IFtvcmRlcnNdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gdHdvIGdyb3VwcywgdGhlIGZpcnN0IG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLCB0aGUgc2Vjb25kIG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkgZm9yLiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1sncGViYmxlcyddLCBbJ2Jhcm5leScsICdmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAncGViYmxlcyddLCBbJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICovXG4gICAgdmFyIHBhcnRpdGlvbiA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5ID8gMCA6IDFdLnB1c2godmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gW1tdLCBbXV07IH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVkdWNlcyBgY29sbGVjdGlvbmAgdG8gYSB2YWx1ZSB3aGljaCBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy4gSWYgYGFjY3VtdWxhdG9yYFxuICAgICAqIGlzIG5vdCBnaXZlbiwgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIGlzIHVzZWQgYXMgdGhlIGluaXRpYWxcbiAgICAgKiB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAgICAgKiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8ucmVkdWNlYCwgYF8ucmVkdWNlUmlnaHRgLCBhbmQgYF8udHJhbnNmb3JtYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhc3NpZ25gLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGluY2x1ZGVzYCwgYG1lcmdlYCwgYG9yZGVyQnlgLFxuICAgICAqIGFuZCBgc29ydEJ5YFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbihzdW0sIG4pIHtcbiAgICAgKiAgIHJldHVybiBzdW0gKyBuO1xuICAgICAqIH0sIDApO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogICByZXR1cm4gcmVzdWx0O1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2UgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJlZHVjZWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1swLCAxXSwgWzIsIDNdLCBbNCwgNV1dO1xuICAgICAqXG4gICAgICogXy5yZWR1Y2VSaWdodChhcnJheSwgZnVuY3Rpb24oZmxhdHRlbmVkLCBvdGhlcikge1xuICAgICAqICAgcmV0dXJuIGZsYXR0ZW5lZC5jb25jYXQob3RoZXIpO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgNSwgMiwgMywgMCwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlUmlnaHQgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgOyB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aGF0IGBwcmVkaWNhdGVgIGRvZXMgKipub3QqKiByZXR1cm4gdHJ1dGh5IGZvci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8uZmlsdGVyXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHJhbmRvbSBlbGVtZW50IGZyb20gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGUgOiBiYXNlU2FtcGxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBgbmAgcmFuZG9tIGVsZW1lbnRzIGF0IHVuaXF1ZSBrZXlzIGZyb20gYGNvbGxlY3Rpb25gIHVwIHRvIHRoZVxuICAgICAqIHNpemUgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszLCAxXVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgNCk7XG4gICAgICogLy8gPT4gWzIsIDMsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGVTaXplIDogYmFzZVNhbXBsZVNpemU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHNodWZmbGVkIHZhbHVlcywgdXNpbmcgYSB2ZXJzaW9uIG9mIHRoZVxuICAgICAqIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNodWZmbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiBbNCwgMSwgMywgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2h1ZmZsZSA6IGJhc2VTaHVmZmxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc2l6ZSBvZiBgY29sbGVjdGlvbmAgYnkgcmV0dXJuaW5nIGl0cyBsZW5ndGggZm9yIGFycmF5LWxpa2VcbiAgICAgKiB2YWx1ZXMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29sbGVjdGlvbiBzaXplLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiA3XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKSA/IHN0cmluZ1NpemUoY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcoY29sbGVjdGlvbik7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNvbWUgOiBiYXNlU29tZTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzLCBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSByZXN1bHRzIG9mXG4gICAgICogcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uIHRocnUgZWFjaCBpdGVyYXRlZS4gVGhpcyBtZXRob2RcbiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2ZcbiAgICAgKiBlcXVhbCBlbGVtZW50cy4gVGhlIGl0ZXJhdGVlcyBhcmUgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgW2Z1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlcjsgfV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgNDBdLCBbJ2ZyZWQnLCA0OF1dXG4gICAgICovXG4gICAgdmFyIHNvcnRCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcykge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPiAxICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaXRlcmF0ZWVzWzBdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAgICAgKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBEYXRlXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICAgICAqIH0sIF8ubm93KCkpO1xuICAgICAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gICAgICovXG4gICAgdmFyIG5vdyA9IGN0eE5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByb290LkRhdGUubm93KCk7XG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5iZWZvcmVgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogYGZ1bmNgIG9uY2UgaXQncyBjYWxsZWQgYG5gIG9yIG1vcmUgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGJlZm9yZSBgZnVuY2AgaXMgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F2ZXMgPSBbJ3Byb2ZpbGUnLCAnc2V0dGluZ3MnXTtcbiAgICAgKlxuICAgICAqIHZhciBkb25lID0gXy5hZnRlcihzYXZlcy5sZW5ndGgsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ2RvbmUgc2F2aW5nIScpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHNhdmVzLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICogICBhc3luY1NhdmUoeyAndHlwZSc6IHR5cGUsICdjb21wbGV0ZSc6IGRvbmUgfSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnZG9uZSBzYXZpbmchJyBhZnRlciB0aGUgdHdvIGFzeW5jIHNhdmVzIGhhdmUgY29tcGxldGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPCAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB1cCB0byBgbmAgYXJndW1lbnRzLFxuICAgICAqIGlnbm9yaW5nIGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IGNhcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy5hcnkocGFyc2VJbnQsIDEpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJ5KGZ1bmMsIG4sIGd1YXJkKSB7XG4gICAgICBuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBuO1xuICAgICAgbiA9IChmdW5jICYmIG4gPT0gbnVsbCkgPyBmdW5jLmxlbmd0aCA6IG47XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0FSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzXG4gICAgICogb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoaWxlIGl0J3MgY2FsbGVkIGxlc3MgdGhhbiBgbmAgdGltZXMuIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYXQgd2hpY2ggYGZ1bmNgIGlzIG5vIGxvbmdlciBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmJlZm9yZSg1LCBhZGRDb250YWN0VG9MaXN0KSk7XG4gICAgICogLy8gPT4gQWxsb3dzIGFkZGluZyB1cCB0byA0IGNvbnRhY3RzIHRvIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJlZm9yZShuLCBmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA+IDApIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPD0gMSkge1xuICAgICAgICAgIGZ1bmMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgXG4gICAgICogYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIG5hdGl2ZSBgRnVuY3Rpb24jYmluZGAsIHRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYmluZC5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kKSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYG9iamVjdFtrZXldYCB3aXRoIGBwYXJ0aWFsc2BcbiAgICAgKiBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG8gcmVmZXJlbmNlXG4gICAgICogbWV0aG9kcyB0aGF0IG1heSBiZSByZWRlZmluZWQgb3IgZG9uJ3QgeWV0IGV4aXN0LiBTZWVcbiAgICAgKiBbUGV0ZXIgTWljaGF1eCdzIGFydGljbGVdKGh0dHA6Ly9wZXRlci5taWNoYXV4LmNhL2FydGljbGVzL2xhenktZnVuY3Rpb24tZGVmaW5pdGlvbi1wYXR0ZXJuKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZEtleS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludm9rZSB0aGUgbWV0aG9kIG9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ3VzZXInOiAnZnJlZCcsXG4gICAgICogICAnZ3JlZXQnOiBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogb2JqZWN0LmdyZWV0ID0gZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZEtleSA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwga2V5LCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmRLZXkpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGtleSwgYml0bWFzaywgb2JqZWN0LCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGFyZ3VtZW50cyBvZiBgZnVuY2AgYW5kIGVpdGhlciBpbnZva2VzXG4gICAgICogYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhdCBsZWFzdCBgYXJpdHlgIG51bWJlciBvZiBhcmd1bWVudHMgaGF2ZVxuICAgICAqIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGhlIHJlbWFpbmluZyBgZnVuY2BcbiAgICAgKiBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBtYXkgYmUgc3BlY2lmaWVkIGlmIGBmdW5jLmxlbmd0aGBcbiAgICAgKiBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgxKSgyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnkucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY3VycnlgIGV4Y2VwdCB0aGF0IGFyZ3VtZW50cyBhcmUgYXBwbGllZCB0byBgZnVuY2BcbiAgICAgKiBpbiB0aGUgbWFubmVyIG9mIGBfLnBhcnRpYWxSaWdodGAgaW5zdGVhZCBvZiBgXy5wYXJ0aWFsYC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeVJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5UmlnaHQoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMykoMikoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDIsIDMpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgzKSgxLCBfKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeVJpZ2h0KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnlSaWdodC5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gICAgICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gICAgICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICAgICAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICAgICAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICAgICAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAgICAgKiBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAgICAgKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KSk7XG4gICAgICpcbiAgICAgKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICAgICAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICAgICAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAgICAgKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsYXN0QXJncyxcbiAgICAgICAgICBsYXN0VGhpcyxcbiAgICAgICAgICBtYXhXYWl0LFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICB0aW1lcklkLFxuICAgICAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICAgICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICAgICAgcmV0dXJuIG1heGluZ1xuICAgICAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgICAgICA6IHRpbWVXYWl0aW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgICAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgICAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgICAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgICAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgICAgIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICAgICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgaW52b2tpbmcgdGhlIGBmdW5jYCB1bnRpbCB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcyBjbGVhcmVkLiBBbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgJ2RlZmVycmVkJyk7XG4gICAgICogLy8gPT4gTG9ncyAnZGVmZXJyZWQnIGFmdGVyIG9uZSBtaWxsaXNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVmZXIgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIDEsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBgZnVuY2AgYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVsYXkoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgMTAwMCwgJ2xhdGVyJyk7XG4gICAgICogLy8gPT4gTG9ncyAnbGF0ZXInIGFmdGVyIG9uZSBzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlbGF5ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCB0b051bWJlcih3YWl0KSB8fCAwLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIHJldmVyc2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZmxpcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsaXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmbGlwcGVkID0gXy5mbGlwKGZ1bmN0aW9uKCkge1xuICAgICAqICAgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmxpcHBlZCgnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+IFsnZCcsICdjJywgJ2InLCAnYSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxpcChmdW5jKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0ZMSVBfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gICAgICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAgICAgKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAgICAgKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICAgICAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gICAgICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAgICAgKlxuICAgICAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogdmFsdWVzKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKlxuICAgICAqIG9iamVjdC5hID0gMjtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICAgICAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICpcbiAgICAgKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICAgICAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgICAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gICAgICByZXR1cm4gbWVtb2l6ZWQ7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG4gICAgbWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbmVnYXRlcyB0aGUgcmVzdWx0IG9mIHRoZSBwcmVkaWNhdGUgYGZ1bmNgLiBUaGVcbiAgICAgKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgdG8gbmVnYXRlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG5lZ2F0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzRXZlbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbMSwgMiwgMywgNCwgNSwgNl0sIF8ubmVnYXRlKGlzRXZlbikpO1xuICAgICAqIC8vID0+IFsxLCAzLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBpbnZva2luZyBgZnVuY2Agb25jZS4gUmVwZWF0IGNhbGxzXG4gICAgICogdG8gdGhlIGZ1bmN0aW9uIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGludm9jYXRpb24uIFRoZSBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyA9PiBgY3JlYXRlQXBwbGljYXRpb25gIGlzIGludm9rZWQgb25jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uY2UoZnVuYykge1xuICAgICAgcmV0dXJuIGJlZm9yZSgyLCBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudHMgdHJhbnNmb3JtZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbdHJhbnNmb3Jtcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm1zLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkb3VibGVkKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyQXJncyhmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4gW3gsIHldO1xuICAgICAqIH0sIFtzcXVhcmUsIGRvdWJsZWRdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoOSwgMyk7XG4gICAgICogLy8gPT4gWzgxLCA2XVxuICAgICAqXG4gICAgICogZnVuYygxMCwgNSk7XG4gICAgICogLy8gPT4gWzEwMCwgMTBdXG4gICAgICovXG4gICAgdmFyIG92ZXJBcmdzID0gY2FzdFJlc3QoZnVuY3Rpb24oZnVuYywgdHJhbnNmb3Jtcykge1xuICAgICAgdHJhbnNmb3JtcyA9ICh0cmFuc2Zvcm1zLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodHJhbnNmb3Jtc1swXSkpXG4gICAgICAgID8gYXJyYXlNYXAodHJhbnNmb3Jtc1swXSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKVxuICAgICAgICA6IGFycmF5TWFwKGJhc2VGbGF0dGVuKHRyYW5zZm9ybXMsIDEpLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgZnVuY3NMZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGFyZ3MubGVuZ3RoLCBmdW5jc0xlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IHRyYW5zZm9ybXNbaW5kZXhdLmNhbGwodGhpcywgYXJnc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGVcbiAgICAgKiBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYmluZGAgZXhjZXB0IGl0IGRvZXMgKipub3QqKlxuICAgICAqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsKGdyZWV0LCAnaGVsbG8nKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsKGdyZWV0LCBfLCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wYXJ0aWFsYCBleGNlcHQgdGhhdCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHNcbiAgICAgKiBhcmUgYXBwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdoZWxsbycsIF8pO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbFJpZ2h0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsUmlnaHQpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIGFycmFuZ2VkIGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBzcGVjaWZpZWQgYGluZGV4ZXNgIHdoZXJlIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgZmlyc3QgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVhcnJhbmdlIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJndW1lbnQgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfSwgWzIsIDAsIDFdKTtcbiAgICAgKlxuICAgICAqIHJlYXJnZWQoJ2InLCAnYycsICdhJylcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICB2YXIgcmVhcmcgPSBmbGF0UmVzdChmdW5jdGlvbihmdW5jLCBpbmRleGVzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1JFQVJHX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGluZGV4ZXMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGZyb20gYHN0YXJ0YCBhbmQgYmV5b25kIHByb3ZpZGVkIGFzXG4gICAgICogYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3Jlc3QgcGFyYW1ldGVyXShodHRwczovL21kbi5pby9yZXN0X3BhcmFtZXRlcnMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnJlc3QoZnVuY3Rpb24od2hhdCwgbmFtZXMpIHtcbiAgICAgKiAgIHJldHVybiB3aGF0ICsgJyAnICsgXy5pbml0aWFsKG5hbWVzKS5qb2luKCcsICcpICtcbiAgICAgKiAgICAgKF8uc2l6ZShuYW1lcykgPiAxID8gJywgJiAnIDogJycpICsgXy5sYXN0KG5hbWVzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheSgnaGVsbG8nLCAnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcycpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09PSB1bmRlZmluZWQgPyBzdGFydCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuYywgc3RhcnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZSBmdW5jdGlvbiBhbmQgYW4gYXJyYXkgb2YgYXJndW1lbnRzIG11Y2ggbGlrZVxuICAgICAqIFtgRnVuY3Rpb24jYXBwbHlgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3ByZWFkIG9wZXJhdG9yXShodHRwczovL21kbi5pby9zcHJlYWRfb3BlcmF0b3IpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc3ByZWFkIGFyZ3VtZW50cyBvdmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzcHJlYWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnNwcmVhZChmdW5jdGlvbih3aG8sIHdoYXQpIHtcbiAgICAgKiAgIHJldHVybiB3aG8gKyAnIHNheXMgJyArIHdoYXQ7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoWydmcmVkJywgJ2hlbGxvJ10pO1xuICAgICAqIC8vID0+ICdmcmVkIHNheXMgaGVsbG8nXG4gICAgICpcbiAgICAgKiB2YXIgbnVtYmVycyA9IFByb21pc2UuYWxsKFtcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSg0MCksXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoMzYpXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBudW1iZXJzLnRoZW4oXy5zcHJlYWQoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIHggKyB5O1xuICAgICAqIH0pKTtcbiAgICAgKiAvLyA9PiBhIFByb21pc2Ugb2YgNzZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcHJlYWQoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKHN0YXJ0KSwgMCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmdzW3N0YXJ0XSxcbiAgICAgICAgICAgIG90aGVyQXJncyA9IGNhc3RTbGljZShhcmdzLCAwLCBzdGFydCk7XG5cbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgYXJyYXlQdXNoKG90aGVyQXJncywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICAgICAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gICAgICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICAgICAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICAgICAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAgICAgKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gICAgICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICAgICAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICAgICAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAgICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB1cCB0byBvbmUgYXJndW1lbnQsIGlnbm9yaW5nIGFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLnVuYXJ5KHBhcnNlSW50KSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuYXJ5KGZ1bmMpIHtcbiAgICAgIHJldHVybiBhcnkoZnVuYywgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byBgd3JhcHBlcmAgYXMgaXRzIGZpcnN0XG4gICAgICogYXJndW1lbnQuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24gYXJlIGFwcGVuZGVkXG4gICAgICogdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGB3cmFwcGVyYC4gVGhlIHdyYXBwZXIgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbd3JhcHBlcj1pZGVudGl0eV0gVGhlIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBwID0gXy53cmFwKF8uZXNjYXBlLCBmdW5jdGlvbihmdW5jLCB0ZXh0KSB7XG4gICAgICogICByZXR1cm4gJzxwPicgKyBmdW5jKHRleHQpICsgJzwvcD4nO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogcCgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnPHA+ZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGFydGlhbChjYXN0RnVuY3Rpb24od3JhcHBlciksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIGFzIGFuIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KDEpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW251bGxdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWRdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICogY29uc29sZS5sb2coXy5jYXN0QXJyYXkoYXJyYXkpID09PSBhcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICAgICAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gICAgICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICAgICAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gICAgICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICAgICAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZS4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsXG4gICAgICogY2xvbmluZyBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB1cCB0byBmb3VyIGFyZ3VtZW50czsgKHZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZVdpdGhgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lRGVlcFdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG9iamVjdGAgY29uZm9ybXMgdG8gYHNvdXJjZWAgYnkgaW52b2tpbmcgdGhlIHByZWRpY2F0ZVxuICAgICAqIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDI7IH0gfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtc1RvKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlID09IG51bGwgfHwgYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcShOYU4sIE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZ3QoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3QgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VHdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID49IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlCdWZmZXJgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXlCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXlCdWZmZXIgPSBub2RlSXNBcnJheUJ1ZmZlciA/IGJhc2VVbmFyeShub2RlSXNBcnJheUJ1ZmZlcikgOiBiYXNlSXNBcnJheUJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAgICAgKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gICAgICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICAgICAqIGlzIGFuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGJvb2xlYW4gcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKGZhbHNlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBib29sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRGF0ZWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0RhdGUgPSBub2RlSXNEYXRlID8gYmFzZVVuYXJ5KG5vZGVJc0RhdGUpIDogYmFzZUlzRGF0ZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KCc8Ym9keT4nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gICAgICpcbiAgICAgKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gICAgICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICAgICAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHRydWUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSgxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICAgICAgfVxuICAgICAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAgICAgKiBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICAgICAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAgICAgKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICAgICAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICAgICAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIG9iamVjdCA9PT0gb3RoZXI7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0VxdWFsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggdXAgdG9cbiAgICAgKiBzaXggYXJndW1lbnRzOiAob2JqVmFsdWUsIG90aFZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKG90aFZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2hlbGxvJywgJ2dvb2RieWUnXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbFdpdGgoYXJyYXksIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbFdpdGgodmFsdWUsIG90aGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIodmFsdWUsIG90aGVyKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgdW5kZWZpbmVkLCBjdXN0b21pemVyKSA6ICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGBFcnJvcmAsIGBFdmFsRXJyb3JgLCBgUmFuZ2VFcnJvcmAsIGBSZWZlcmVuY2VFcnJvcmAsXG4gICAgICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKEVycm9yKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZS5uYW1lID09ICdzdHJpbmcnICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgcHJpbWl0aXZlIG51bWJlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzRmluaXRlYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzRmluaXRlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgbmF0aXZlSXNGaW5pdGUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oXyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAgICAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0ludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICAgICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICAgICAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAgICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgICAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2Uoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYG9iamVjdGAgYW5kIGBzb3VyY2VgIHRvXG4gICAgICogZGV0ZXJtaW5lIGlmIGBvYmplY3RgIGNvbnRhaW5zIGVxdWl2YWxlbnQgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8ubWF0Y2hlc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNNYXRjaGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIGZpdmVcbiAgICAgKiBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGluZGV4fGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKHNyY1ZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnZ3JlZXRpbmcnOiAnaGVsbG8nIH07XG4gICAgICogdmFyIHNvdXJjZSA9IHsgJ2dyZWV0aW5nJzogJ2hpJyB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgTmFOYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzTmFOKSBhbmQgaXMgbm90IHRoZSBzYW1lIGFzXG4gICAgICogZ2xvYmFsIFtgaXNOYU5gXShodHRwczovL21kbi5pby9pc05hTikgd2hpY2ggcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1iZXIgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTihuZXcgTnVtYmVyKE5hTikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgICAgIC8vIEFuIGBOYU5gIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGYuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWVcbiAgICAgIC8vIEFjdGl2ZVggb2JqZWN0cyBpbiBJRS5cbiAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgIT0gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJpc3RpbmUgbmF0aXZlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGNhbid0IHJlbGlhYmx5IGRldGVjdCBuYXRpdmUgZnVuY3Rpb25zIGluIHRoZSBwcmVzZW5jZVxuICAgICAqIG9mIHRoZSBjb3JlLWpzIHBhY2thZ2UgYmVjYXVzZSBjb3JlLWpzIGNpcmN1bXZlbnRzIHRoaXMga2luZCBvZiBkZXRlY3Rpb24uXG4gICAgICogRGVzcGl0ZSBtdWx0aXBsZSByZXF1ZXN0cywgdGhlIGNvcmUtanMgbWFpbnRhaW5lciBoYXMgbWFkZSBpdCBjbGVhcjogYW55XG4gICAgICogYXR0ZW1wdCB0byBmaXggdGhlIGRldGVjdGlvbiB3aWxsIGJlIG9ic3RydWN0ZWQuIEFzIGEgcmVzdWx0LCB3ZSdyZSBsZWZ0XG4gICAgICogd2l0aCBsaXR0bGUgY2hvaWNlIGJ1dCB0byB0aHJvdyBhbiBlcnJvci4gVW5mb3J0dW5hdGVseSwgdGhpcyBhbHNvIGFmZmVjdHNcbiAgICAgKiBwYWNrYWdlcywgbGlrZSBbYmFiZWwtcG9seWZpbGxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JhYmVsLXBvbHlmaWxsKSxcbiAgICAgKiB3aGljaCByZWx5IG9uIGNvcmUtanMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoXyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKGlzTWFza2FibGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihDT1JFX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bGwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bGwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbnVsbGlzaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05pbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmVcbiAgICAgKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICAgICAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjguMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgICAgIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gICAgICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgICAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgUmVnRXhwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoL2FiYy8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoJy9hYmMvJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNSZWdFeHAgPSBub2RlSXNSZWdFeHAgPyBiYXNlVW5hcnkobm9kZUlzUmVnRXhwKSA6IGJhc2VJc1JlZ0V4cDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLiBBbiBpbnRlZ2VyIGlzIHNhZmUgaWYgaXQncyBhbiBJRUVFLTc1NFxuICAgICAqIGRvdWJsZSBwcmVjaXNpb24gbnVtYmVyIHdoaWNoIGlzbid0IHRoZSByZXN1bHQgb2YgYSByb3VuZGVkIHVuc2FmZSBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNTYWZlSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc1NhZmVJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAtTUFYX1NBRkVfSU5URUdFUiAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHdlYWtNYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSB3ZWFrU2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdCgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlTHQpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdGUoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHRlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9BcnJheSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyBzdHJpbmdUb0FycmF5KHZhbHVlKSA6IGNvcHlBcnJheSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3ltSXRlcmF0b3IgJiYgdmFsdWVbc3ltSXRlcmF0b3JdKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclRvQXJyYXkodmFsdWVbc3ltSXRlcmF0b3JdKCkpO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgZnVuYyA9IHRhZyA9PSBtYXBUYWcgPyBtYXBUb0FycmF5IDogKHRhZyA9PSBzZXRUYWcgPyBzZXRUb0FycmF5IDogdmFsdWVzKTtcblxuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTIuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgICAgIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIgc3VpdGFibGUgZm9yIHVzZSBhcyB0aGUgbGVuZ3RoIG9mIGFuXG4gICAgICogYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA0Mjk0OTY3Mjk1XG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAwLCBNQVhfQVJSQVlfTEVOR1RIKSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBJbmZpbml0eVxuICAgICAqXG4gICAgICogXy50b051bWJlcignMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBUaGUgc291cmNlVVJMIGdldHMgaW5qZWN0ZWQgaW50byB0aGUgc291cmNlIHRoYXQncyBldmFsLWVkLCBzbyBiZSBjYXJlZnVsXG4gICAgICAvLyB3aXRoIGxvb2t1cCAoaW4gY2FzZSBvZiBlLmcuIHByb3RvdHlwZSBwb2xsdXRpb24pLCBhbmQgc3RyaXAgbmV3bGluZXMgaWYgYW55LlxuICAgICAgLy8gQSBuZXdsaW5lIHdvdWxkbid0IGJlIGEgdmFsaWQgc291cmNlVVJMIGFueXdheSwgYW5kIGl0J2QgZW5hYmxlIGNvZGUgaW5qZWN0aW9uLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICAgICAgICA/IChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9bXFxyXFxuXS9nLCAnICcpXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIC8vIExpa2Ugd2l0aCBzb3VyY2VVUkwsIHdlIHRha2UgY2FyZSB0byBub3QgY2hlY2sgdGhlIG9wdGlvbidzIHByb3RvdHlwZSxcbiAgICAgIC8vIGFzIHRoaXMgY29uZmlndXJhdGlvbiBpcyBhIGNvZGUgaW5qZWN0aW9uIHZlY3Rvci5cbiAgICAgIHZhciB2YXJpYWJsZSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3ZhcmlhYmxlJykgJiYgb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltRW5kLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZVxuICAgICAqIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdCB0byBgc3JjVmFsdWVgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZVxuICAgICAqIG9iamVjdCB2YWx1ZSBpcyBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3RcbiAgICAgKiBgc3JjVmFsdWVgIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlXG4gICAgICogYF8uaXNFcXVhbGAgZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZChvYmplY3RzLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMikgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDEpIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZCgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InXSkpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1ldGhvZGA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiB0aGUgbWV0aG9kIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlXG4gICAgICogb2JqZWN0IHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24sIHRoZW4gbWV0aG9kc1xuICAgICAqIGFyZSBhZGRlZCB0byBpdHMgcHJvdG90eXBlIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVXNlIGBfLnJ1bkluQ29udGV4dGAgdG8gY3JlYXRlIGEgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdG9cbiAgICAgKiBhdm9pZCBjb25mbGljdHMgY2F1c2VkIGJ5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBbb2JqZWN0PWxvZGFzaF0gVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoYWluPXRydWVdIFNwZWNpZnkgd2hldGhlciBtaXhpbnMgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIHByb3BzKTtcblxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNPYmplY3Qoc291cmNlKSAmJiAobWV0aG9kTmFtZXMubGVuZ3RoIHx8ICFwcm9wcy5sZW5ndGgpKSkge1xuICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICBzb3VyY2UgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykgfHwgISFvcHRpb25zLmNoYWluLFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcblxuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187XG4gICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMgPSByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG5cbiAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5fID0gb2xkRGFzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIGFyZ3VtZW50IGF0IGluZGV4IGBuYC4gSWYgYG5gIGlzIG5lZ2F0aXZlLFxuICAgICAqIHRoZSBudGggYXJndW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFzcy10aHJ1IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKDEpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoLTIpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGhBcmcobikge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHJldHVybiBiYXNlTnRoKGFyZ3MsIG4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgaXRlcmF0ZWVzYCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGVpciByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlcihbTWF0aC5tYXgsIE1hdGgubWluXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDEsIDIsIDMsIDQpO1xuICAgICAqIC8vID0+IFs0LCAxXVxuICAgICAqL1xuICAgIHZhciBvdmVyID0gY3JlYXRlT3ZlcihhcnJheU1hcCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbGwqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gbG9kYXNoRnVuYy5uYW1lICsgJyc7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIGtleSkpIHtcbiAgICAgICAgICByZWFsTmFtZXNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlYWxOYW1lc1trZXldLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGFkZExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbnZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxudmFyIGhhc0Jhc2VuYW1lID0gZXhwb3J0cy5oYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGV4cG9ydHMuc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxudmFyIHN0cmlwVHJhaWxpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbnZhciBwYXJzZVBhdGggPSBleHBvcnRzLnBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxudmFyIGNyZWF0ZVBhdGggPSBleHBvcnRzLmNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50OyIsIid1c2Ugc3RyaWN0JztcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gVG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIG93bkVudW1lcmFibGVLZXlzKG9iaikge1xuXHR2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaik7XG5cblx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRrZXlzID0ga2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopKTtcblx0fVxuXG5cdHJldHVybiBrZXlzLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG5cdFx0cmV0dXJuIHByb3BJc0VudW1lcmFibGUuY2FsbChvYmosIGtleSk7XG5cdH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIga2V5cztcblx0dmFyIHRvID0gVG9PYmplY3QodGFyZ2V0KTtcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBhcmd1bWVudHNbc107XG5cdFx0a2V5cyA9IG93bkVudW1lcmFibGVLZXlzKE9iamVjdChmcm9tKSk7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRvW2tleXNbaV1dID0gZnJvbVtrZXlzW2ldXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCJ7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbX2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIihcIi5jb25jYXQoaXRlbVsyXSwgXCIpIGFuZCAoXCIpLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIilcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCkuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9jcmVhdGVVbmNvbnRyb2xsYWJsZSA9IHJlcXVpcmUoJy4vY3JlYXRlVW5jb250cm9sbGFibGUnKTtcblxudmFyIF9jcmVhdGVVbmNvbnRyb2xsYWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVVbmNvbnRyb2xsYWJsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBtaXhpbiA9IHtcbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgLy9sZXQgdGhlIGZvcmNlVXBkYXRlIHRyaWdnZXIgdGhlIHVwZGF0ZVxuICAgIHJldHVybiAhdGhpcy5fbm90aWZ5aW5nO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzZXQoY29tcG9uZW50LCBwcm9wTmFtZSwgaGFuZGxlciwgdmFsdWUsIGFyZ3MpIHtcbiAgaWYgKGhhbmRsZXIpIHtcbiAgICBjb21wb25lbnQuX25vdGlmeWluZyA9IHRydWU7XG4gICAgaGFuZGxlci5jYWxsLmFwcGx5KGhhbmRsZXIsIFtjb21wb25lbnQsIHZhbHVlXS5jb25jYXQoYXJncykpO1xuICAgIGNvbXBvbmVudC5fbm90aWZ5aW5nID0gZmFsc2U7XG4gIH1cblxuICBjb21wb25lbnQuX3ZhbHVlc1twcm9wTmFtZV0gPSB2YWx1ZTtcblxuICBpZiAoIWNvbXBvbmVudC51bm1vdW50ZWQpIGNvbXBvbmVudC5mb3JjZVVwZGF0ZSgpO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVVuY29udHJvbGxhYmxlMi5kZWZhdWx0KShtaXhpbiwgc2V0KTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8vIFNvdXJjZTogaHR0cDovL2pzZmlkZGxlLm5ldC92V3g4Vi9cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTYwMzE5NS9mdWxsLWxpc3Qtb2YtamF2YXNjcmlwdC1rZXljb2Rlc1xuXG4vKipcbiAqIENvbmVuaWVuY2UgbWV0aG9kIHJldHVybnMgY29ycmVzcG9uZGluZyB2YWx1ZSBmb3IgZ2l2ZW4ga2V5TmFtZSBvciBrZXlDb2RlLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGtleUNvZGUge051bWJlcn0gb3Iga2V5TmFtZSB7U3RyaW5nfVxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGtleUNvZGUoc2VhcmNoSW5wdXQpIHtcbiAgLy8gS2V5Ym9hcmQgRXZlbnRzXG4gIGlmIChzZWFyY2hJbnB1dCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHNlYXJjaElucHV0KSB7XG4gICAgdmFyIGhhc0tleUNvZGUgPSBzZWFyY2hJbnB1dC53aGljaCB8fCBzZWFyY2hJbnB1dC5rZXlDb2RlIHx8IHNlYXJjaElucHV0LmNoYXJDb2RlXG4gICAgaWYgKGhhc0tleUNvZGUpIHNlYXJjaElucHV0ID0gaGFzS2V5Q29kZVxuICB9XG5cbiAgLy8gTnVtYmVyc1xuICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBzZWFyY2hJbnB1dCkgcmV0dXJuIG5hbWVzW3NlYXJjaElucHV0XVxuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSAoY2FzdCB0byBzdHJpbmcpXG4gIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoSW5wdXQpXG5cbiAgLy8gY2hlY2sgY29kZXNcbiAgdmFyIGZvdW5kTmFtZWRLZXkgPSBjb2Rlc1tzZWFyY2gudG9Mb3dlckNhc2UoKV1cbiAgaWYgKGZvdW5kTmFtZWRLZXkpIHJldHVybiBmb3VuZE5hbWVkS2V5XG5cbiAgLy8gY2hlY2sgYWxpYXNlc1xuICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbc2VhcmNoLnRvTG93ZXJDYXNlKCldXG4gIGlmIChmb3VuZE5hbWVkS2V5KSByZXR1cm4gZm91bmROYW1lZEtleVxuXG4gIC8vIHdlaXJkIGNoYXJhY3Rlcj9cbiAgaWYgKHNlYXJjaC5sZW5ndGggPT09IDEpIHJldHVybiBzZWFyY2guY2hhckNvZGVBdCgwKVxuXG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiBDb21wYXJlcyBhIGtleWJvYXJkIGV2ZW50IHdpdGggYSBnaXZlbiBrZXlDb2RlIG9yIGtleU5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgS2V5Ym9hcmQgZXZlbnQgdGhhdCBzaG91bGQgYmUgdGVzdGVkXG4gKiBAcGFyYW0ge01peGVkfSBrZXlDb2RlIHtOdW1iZXJ9IG9yIGtleU5hbWUge1N0cmluZ31cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5rZXlDb2RlLmlzRXZlbnRLZXkgPSBmdW5jdGlvbiBpc0V2ZW50S2V5KGV2ZW50LCBuYW1lT3JDb2RlKSB7XG4gIGlmIChldmVudCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIGV2ZW50KSB7XG4gICAgdmFyIGtleUNvZGUgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlIHx8IGV2ZW50LmNoYXJDb2RlXG4gICAgaWYgKGtleUNvZGUgPT09IG51bGwgfHwga2V5Q29kZSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgbmFtZU9yQ29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGNoZWNrIGNvZGVzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGNvZGVzW25hbWVPckNvZGUudG9Mb3dlckNhc2UoKV1cbiAgICAgIGlmIChmb3VuZE5hbWVkS2V5KSB7IHJldHVybiBmb3VuZE5hbWVkS2V5ID09PSBrZXlDb2RlOyB9XG4gICAgXG4gICAgICAvLyBjaGVjayBhbGlhc2VzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbbmFtZU9yQ29kZS50b0xvd2VyQ2FzZSgpXVxuICAgICAgaWYgKGZvdW5kTmFtZWRLZXkpIHsgcmV0dXJuIGZvdW5kTmFtZWRLZXkgPT09IGtleUNvZGU7IH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lT3JDb2RlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG5hbWVPckNvZGUgPT09IGtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBrZXlDb2RlO1xuXG4vKipcbiAqIEdldCBieSBuYW1lXG4gKlxuICogICBleHBvcnRzLmNvZGVbJ2VudGVyJ10gLy8gPT4gMTNcbiAqL1xuXG52YXIgY29kZXMgPSBleHBvcnRzLmNvZGUgPSBleHBvcnRzLmNvZGVzID0ge1xuICAnYmFja3NwYWNlJzogOCxcbiAgJ3RhYic6IDksXG4gICdlbnRlcic6IDEzLFxuICAnc2hpZnQnOiAxNixcbiAgJ2N0cmwnOiAxNyxcbiAgJ2FsdCc6IDE4LFxuICAncGF1c2UvYnJlYWsnOiAxOSxcbiAgJ2NhcHMgbG9jayc6IDIwLFxuICAnZXNjJzogMjcsXG4gICdzcGFjZSc6IDMyLFxuICAncGFnZSB1cCc6IDMzLFxuICAncGFnZSBkb3duJzogMzQsXG4gICdlbmQnOiAzNSxcbiAgJ2hvbWUnOiAzNixcbiAgJ2xlZnQnOiAzNyxcbiAgJ3VwJzogMzgsXG4gICdyaWdodCc6IDM5LFxuICAnZG93bic6IDQwLFxuICAnaW5zZXJ0JzogNDUsXG4gICdkZWxldGUnOiA0NixcbiAgJ2NvbW1hbmQnOiA5MSxcbiAgJ2xlZnQgY29tbWFuZCc6IDkxLFxuICAncmlnaHQgY29tbWFuZCc6IDkzLFxuICAnbnVtcGFkIConOiAxMDYsXG4gICdudW1wYWQgKyc6IDEwNyxcbiAgJ251bXBhZCAtJzogMTA5LFxuICAnbnVtcGFkIC4nOiAxMTAsXG4gICdudW1wYWQgLyc6IDExMSxcbiAgJ251bSBsb2NrJzogMTQ0LFxuICAnc2Nyb2xsIGxvY2snOiAxNDUsXG4gICdteSBjb21wdXRlcic6IDE4MixcbiAgJ215IGNhbGN1bGF0b3InOiAxODMsXG4gICc7JzogMTg2LFxuICAnPSc6IDE4NyxcbiAgJywnOiAxODgsXG4gICctJzogMTg5LFxuICAnLic6IDE5MCxcbiAgJy8nOiAxOTEsXG4gICdgJzogMTkyLFxuICAnWyc6IDIxOSxcbiAgJ1xcXFwnOiAyMjAsXG4gICddJzogMjIxLFxuICBcIidcIjogMjIyXG59XG5cbi8vIEhlbHBlciBhbGlhc2VzXG5cbnZhciBhbGlhc2VzID0gZXhwb3J0cy5hbGlhc2VzID0ge1xuICAnd2luZG93cyc6IDkxLFxuICAn4oenJzogMTYsXG4gICfijKUnOiAxOCxcbiAgJ+KMgyc6IDE3LFxuICAn4oyYJzogOTEsXG4gICdjdGwnOiAxNyxcbiAgJ2NvbnRyb2wnOiAxNyxcbiAgJ29wdGlvbic6IDE4LFxuICAncGF1c2UnOiAxOSxcbiAgJ2JyZWFrJzogMTksXG4gICdjYXBzJzogMjAsXG4gICdyZXR1cm4nOiAxMyxcbiAgJ2VzY2FwZSc6IDI3LFxuICAnc3BjJzogMzIsXG4gICdzcGFjZWJhcic6IDMyLFxuICAncGd1cCc6IDMzLFxuICAncGdkbic6IDM0LFxuICAnaW5zJzogNDUsXG4gICdkZWwnOiA0NixcbiAgJ2NtZCc6IDkxXG59XG5cbi8qIVxuICogUHJvZ3JhbWF0aWNhbGx5IGFkZCB0aGUgZm9sbG93aW5nXG4gKi9cblxuLy8gbG93ZXIgY2FzZSBjaGFyc1xuZm9yIChpID0gOTc7IGkgPCAxMjM7IGkrKykgY29kZXNbU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpIC0gMzJcblxuLy8gbnVtYmVyc1xuZm9yICh2YXIgaSA9IDQ4OyBpIDwgNTg7IGkrKykgY29kZXNbaSAtIDQ4XSA9IGlcblxuLy8gZnVuY3Rpb24ga2V5c1xuZm9yIChpID0gMTsgaSA8IDEzOyBpKyspIGNvZGVzWydmJytpXSA9IGkgKyAxMTFcblxuLy8gbnVtcGFkIGtleXNcbmZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSBjb2Rlc1snbnVtcGFkICcraV0gPSBpICsgOTZcblxuLyoqXG4gKiBHZXQgYnkgY29kZVxuICpcbiAqICAgZXhwb3J0cy5uYW1lWzEzXSAvLyA9PiAnRW50ZXInXG4gKi9cblxudmFyIG5hbWVzID0gZXhwb3J0cy5uYW1lcyA9IGV4cG9ydHMudGl0bGUgPSB7fSAvLyB0aXRsZSBmb3IgYmFja3dhcmQgY29tcGF0XG5cbi8vIENyZWF0ZSByZXZlcnNlIG1hcHBpbmdcbmZvciAoaSBpbiBjb2RlcykgbmFtZXNbY29kZXNbaV1dID0gaVxuXG4vLyBBZGQgYWxpYXNlc1xuZm9yICh2YXIgYWxpYXMgaW4gYWxpYXNlcykge1xuICBjb2Rlc1thbGlhc10gPSBhbGlhc2VzW2FsaWFzXVxufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC92YWx1ZXNcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoX0RPTVV0aWxzLmNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0hpc3RvcnkpKCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICEoMCwgX0RPTVV0aWxzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UpKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gX0RPTVV0aWxzLmdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCFiYXNlbmFtZSB8fCAoMCwgX1BhdGhVdGlscy5oYXNCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLnN0cmlwQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoKDAsIF9ET01VdGlscy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KShldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGV4cG9ydHMuY3JlYXRlTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lID0gcmVxdWlyZSgncmVzb2x2ZS1wYXRobmFtZScpO1xuXG52YXIgX3Jlc29sdmVQYXRobmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNvbHZlUGF0aG5hbWUpO1xuXG52YXIgX3ZhbHVlRXF1YWwgPSByZXF1aXJlKCd2YWx1ZS1lcXVhbCcpO1xuXG52YXIgX3ZhbHVlRXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsdWVFcXVhbCk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICgwLCBfcmVzb2x2ZVBhdGhuYW1lMi5kZWZhdWx0KShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxudmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiAoMCwgX3ZhbHVlRXF1YWwyLmRlZmF1bHQpKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSBleHBvcnRzLmNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbnZhciBhZGRFdmVudExpc3RlbmVyID0gZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIGdldENvbmZpcm1hdGlvbiA9IGV4cG9ydHMuZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbnZhciBzdXBwb3J0c0hpc3RvcnkgPSBleHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG52YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGV4cG9ydHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbnZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbnZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZXhwb3J0cy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgc3RyaWN0VXJpRW5jb2RlID0gcmVxdWlyZSgnc3RyaWN0LXVyaS1lbmNvZGUnKTtcbnZhciBvYmplY3RBc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG52YXIgZGVjb2RlQ29tcG9uZW50ID0gcmVxdWlyZSgnZGVjb2RlLXVyaS1jb21wb25lbnQnKTtcblxuZnVuY3Rpb24gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdHMpIHtcblx0c3dpdGNoIChvcHRzLmFycmF5Rm9ybWF0KSB7XG5cdFx0Y2FzZSAnaW5kZXgnOlxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBpbmRleCkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgPyBbXG5cdFx0XHRcdFx0ZW5jb2RlKGtleSwgb3B0cyksXG5cdFx0XHRcdFx0J1snLFxuXHRcdFx0XHRcdGluZGV4LFxuXHRcdFx0XHRcdCddJ1xuXHRcdFx0XHRdLmpvaW4oJycpIDogW1xuXHRcdFx0XHRcdGVuY29kZShrZXksIG9wdHMpLFxuXHRcdFx0XHRcdCdbJyxcblx0XHRcdFx0XHRlbmNvZGUoaW5kZXgsIG9wdHMpLFxuXHRcdFx0XHRcdCddPScsXG5cdFx0XHRcdFx0ZW5jb2RlKHZhbHVlLCBvcHRzKVxuXHRcdFx0XHRdLmpvaW4oJycpO1xuXHRcdFx0fTtcblxuXHRcdGNhc2UgJ2JyYWNrZXQnOlxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IGVuY29kZShrZXksIG9wdHMpIDogW1xuXHRcdFx0XHRcdGVuY29kZShrZXksIG9wdHMpLFxuXHRcdFx0XHRcdCdbXT0nLFxuXHRcdFx0XHRcdGVuY29kZSh2YWx1ZSwgb3B0cylcblx0XHRcdFx0XS5qb2luKCcnKTtcblx0XHRcdH07XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IGVuY29kZShrZXksIG9wdHMpIDogW1xuXHRcdFx0XHRcdGVuY29kZShrZXksIG9wdHMpLFxuXHRcdFx0XHRcdCc9Jyxcblx0XHRcdFx0XHRlbmNvZGUodmFsdWUsIG9wdHMpXG5cdFx0XHRcdF0uam9pbignJyk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdHMpIHtcblx0dmFyIHJlc3VsdDtcblxuXHRzd2l0Y2ggKG9wdHMuYXJyYXlGb3JtYXQpIHtcblx0XHRjYXNlICdpbmRleCc6XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSB7XG5cdFx0XHRcdHJlc3VsdCA9IC9cXFsoXFxkKilcXF0kLy5leGVjKGtleSk7XG5cblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcW1xcZCpcXF0kLywgJycpO1xuXG5cdFx0XHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0ge307XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldW3Jlc3VsdFsxXV0gPSB2YWx1ZTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpIHtcblx0XHRcdFx0cmVzdWx0ID0gLyhcXFtcXF0pJC8uZXhlYyhrZXkpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxbXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH0gZWxzZSBpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpIHtcblx0XHRcdFx0aWYgKGFjY3VtdWxhdG9yW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gW10uY29uY2F0KGFjY3VtdWxhdG9yW2tleV0sIHZhbHVlKTtcblx0XHRcdH07XG5cdH1cbn1cblxuZnVuY3Rpb24gZW5jb2RlKHZhbHVlLCBvcHRzKSB7XG5cdGlmIChvcHRzLmVuY29kZSkge1xuXHRcdHJldHVybiBvcHRzLnN0cmljdCA/IHN0cmljdFVyaUVuY29kZSh2YWx1ZSkgOiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBrZXlzU29ydGVyKGlucHV0KSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dC5zb3J0KCk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBrZXlzU29ydGVyKE9iamVjdC5rZXlzKGlucHV0KSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuXHRcdFx0cmV0dXJuIE51bWJlcihhKSAtIE51bWJlcihiKTtcblx0XHR9KS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIGlucHV0W2tleV07XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3Qoc3RyKSB7XG5cdHZhciBxdWVyeVN0YXJ0ID0gc3RyLmluZGV4T2YoJz8nKTtcblx0aWYgKHF1ZXJ5U3RhcnQgPT09IC0xKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cdHJldHVybiBzdHIuc2xpY2UocXVlcnlTdGFydCArIDEpO1xufVxuXG5mdW5jdGlvbiBwYXJzZShzdHIsIG9wdHMpIHtcblx0b3B0cyA9IG9iamVjdEFzc2lnbih7YXJyYXlGb3JtYXQ6ICdub25lJ30sIG9wdHMpO1xuXG5cdHZhciBmb3JtYXR0ZXIgPSBwYXJzZXJGb3JBcnJheUZvcm1hdChvcHRzKTtcblxuXHQvLyBDcmVhdGUgYW4gb2JqZWN0IHdpdGggbm8gcHJvdG90eXBlXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nL2lzc3Vlcy80N1xuXHR2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuXHRpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0c3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKC9eWz8jJl0vLCAnJyk7XG5cblx0aWYgKCFzdHIpIHtcblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0c3RyLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcblx0XHR2YXIgcGFydHMgPSBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKS5zcGxpdCgnPScpO1xuXHRcdC8vIEZpcmVmb3ggKHByZSA0MCkgZGVjb2RlcyBgJTNEYCB0byBgPWBcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZy9wdWxsLzM3XG5cdFx0dmFyIGtleSA9IHBhcnRzLnNoaWZ0KCk7XG5cdFx0dmFyIHZhbCA9IHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0cy5qb2luKCc9JykgOiB1bmRlZmluZWQ7XG5cblx0XHQvLyBtaXNzaW5nIGA9YCBzaG91bGQgYmUgYG51bGxgOlxuXHRcdC8vIGh0dHA6Ly93My5vcmcvVFIvMjAxMi9XRC11cmwtMjAxMjA1MjQvI2NvbGxlY3QtdXJsLXBhcmFtZXRlcnNcblx0XHR2YWwgPSB2YWwgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZWNvZGVDb21wb25lbnQodmFsKTtcblxuXHRcdGZvcm1hdHRlcihkZWNvZGVDb21wb25lbnQoa2V5KSwgdmFsLCByZXQpO1xuXHR9KTtcblxuXHRyZXR1cm4gT2JqZWN0LmtleXMocmV0KS5zb3J0KCkucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGtleSkge1xuXHRcdHZhciB2YWwgPSByZXRba2V5XTtcblx0XHRpZiAoQm9vbGVhbih2YWwpICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbCkpIHtcblx0XHRcdC8vIFNvcnQgb2JqZWN0IGtleXMsIG5vdCB2YWx1ZXNcblx0XHRcdHJlc3VsdFtrZXldID0ga2V5c1NvcnRlcih2YWwpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHRba2V5XSA9IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbn1cblxuZXhwb3J0cy5leHRyYWN0ID0gZXh0cmFjdDtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcblxuZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG5cdHZhciBkZWZhdWx0cyA9IHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZSdcblx0fTtcblxuXHRvcHRzID0gb2JqZWN0QXNzaWduKGRlZmF1bHRzLCBvcHRzKTtcblxuXHRpZiAob3B0cy5zb3J0ID09PSBmYWxzZSkge1xuXHRcdG9wdHMuc29ydCA9IGZ1bmN0aW9uICgpIHt9O1xuXHR9XG5cblx0dmFyIGZvcm1hdHRlciA9IGVuY29kZXJGb3JBcnJheUZvcm1hdChvcHRzKTtcblxuXHRyZXR1cm4gb2JqID8gT2JqZWN0LmtleXMob2JqKS5zb3J0KG9wdHMuc29ydCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0XHR2YXIgdmFsID0gb2JqW2tleV07XG5cblx0XHRpZiAodmFsID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cblx0XHRpZiAodmFsID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0cyk7XG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuXHRcdFx0dmFyIHJlc3VsdCA9IFtdO1xuXG5cdFx0XHR2YWwuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWwyKSB7XG5cdFx0XHRcdGlmICh2YWwyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQucHVzaChmb3JtYXR0ZXIoa2V5LCB2YWwyLCByZXN1bHQubGVuZ3RoKSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHJlc3VsdC5qb2luKCcmJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVuY29kZShrZXksIG9wdHMpICsgJz0nICsgZW5jb2RlKHZhbCwgb3B0cyk7XG5cdH0pLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuXHRcdHJldHVybiB4Lmxlbmd0aCA+IDA7XG5cdH0pLmpvaW4oJyYnKSA6ICcnO1xufTtcblxuZXhwb3J0cy5wYXJzZVVybCA9IGZ1bmN0aW9uIChzdHIsIG9wdHMpIHtcblx0cmV0dXJuIHtcblx0XHR1cmw6IHN0ci5zcGxpdCgnPycpWzBdIHx8ICcnLFxuXHRcdHF1ZXJ5OiBwYXJzZShleHRyYWN0KHN0ciksIG9wdHMpXG5cdH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKSpdL2csIGZ1bmN0aW9uIChjKSB7XG5cdFx0cmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0fSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRva2VuID0gJyVbYS1mMC05XXsyfSc7XG52YXIgc2luZ2xlTWF0Y2hlciA9IG5ldyBSZWdFeHAodG9rZW4sICdnaScpO1xudmFyIG11bHRpTWF0Y2hlciA9IG5ldyBSZWdFeHAoJygnICsgdG9rZW4gKyAnKSsnLCAnZ2knKTtcblxuZnVuY3Rpb24gZGVjb2RlQ29tcG9uZW50cyhjb21wb25lbnRzLCBzcGxpdCkge1xuXHR0cnkge1xuXHRcdC8vIFRyeSB0byBkZWNvZGUgdGhlIGVudGlyZSBzdHJpbmcgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGNvbXBvbmVudHMuam9pbignJykpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBEbyBub3RoaW5nXG5cdH1cblxuXHRpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gY29tcG9uZW50cztcblx0fVxuXG5cdHNwbGl0ID0gc3BsaXQgfHwgMTtcblxuXHQvLyBTcGxpdCB0aGUgYXJyYXkgaW4gMiBwYXJ0c1xuXHR2YXIgbGVmdCA9IGNvbXBvbmVudHMuc2xpY2UoMCwgc3BsaXQpO1xuXHR2YXIgcmlnaHQgPSBjb21wb25lbnRzLnNsaWNlKHNwbGl0KTtcblxuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKFtdLCBkZWNvZGVDb21wb25lbnRzKGxlZnQpLCBkZWNvZGVDb21wb25lbnRzKHJpZ2h0KSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHR2YXIgdG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcik7XG5cblx0XHRmb3IgKHZhciBpID0gMTsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aW5wdXQgPSBkZWNvZGVDb21wb25lbnRzKHRva2VucywgaSkuam9pbignJyk7XG5cblx0XHRcdHRva2VucyA9IGlucHV0Lm1hdGNoKHNpbmdsZU1hdGNoZXIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbnB1dDtcblx0fVxufVxuXG5mdW5jdGlvbiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoaW5wdXQpIHtcblx0Ly8gS2VlcCB0cmFjayBvZiBhbGwgdGhlIHJlcGxhY2VtZW50cyBhbmQgcHJlZmlsbCB0aGUgbWFwIHdpdGggdGhlIGBCT01gXG5cdHZhciByZXBsYWNlTWFwID0ge1xuXHRcdCclRkUlRkYnOiAnXFx1RkZGRFxcdUZGRkQnLFxuXHRcdCclRkYlRkUnOiAnXFx1RkZGRFxcdUZGRkQnXG5cdH07XG5cblx0dmFyIG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR3aGlsZSAobWF0Y2gpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gRGVjb2RlIGFzIGJpZyBjaHVua3MgYXMgcG9zc2libGVcblx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzBdKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHZhciByZXN1bHQgPSBkZWNvZGUobWF0Y2hbMF0pO1xuXG5cdFx0XHRpZiAocmVzdWx0ICE9PSBtYXRjaFswXSkge1xuXHRcdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0fVxuXG5cdC8vIEFkZCBgJUMyYCBhdCB0aGUgZW5kIG9mIHRoZSBtYXAgdG8gbWFrZSBzdXJlIGl0IGRvZXMgbm90IHJlcGxhY2UgdGhlIGNvbWJpbmF0b3IgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZVxuXHRyZXBsYWNlTWFwWyclQzInXSA9ICdcXHVGRkZEJztcblxuXHR2YXIgZW50cmllcyA9IE9iamVjdC5rZXlzKHJlcGxhY2VNYXApO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuXHRcdC8vIFJlcGxhY2UgYWxsIGRlY29kZWQgY29tcG9uZW50c1xuXHRcdHZhciBrZXkgPSBlbnRyaWVzW2ldO1xuXHRcdGlucHV0ID0gaW5wdXQucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgJ2cnKSwgcmVwbGFjZU1hcFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZW5jb2RlZFVSSSkge1xuXHRpZiAodHlwZW9mIGVuY29kZWRVUkkgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYGVuY29kZWRVUklgIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2AsIGdvdCBgJyArIHR5cGVvZiBlbmNvZGVkVVJJICsgJ2AnKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0ZW5jb2RlZFVSSSA9IGVuY29kZWRVUkkucmVwbGFjZSgvXFwrL2csICcgJyk7XG5cblx0XHQvLyBUcnkgdGhlIGJ1aWx0IGluIGRlY29kZXIgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBGYWxsYmFjayB0byBhIG1vcmUgYWR2YW5jZWQgZGVjb2RlclxuXHRcdHJldHVybiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpLFxuXHRQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyksXG5cdGNyZWF0ZUNsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyksXG5cdG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpLFxuXHRSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG5cdENhbGVuZGFyQ29udGFpbmVyID0gcmVxdWlyZSgnLi9zcmMvQ2FsZW5kYXJDb250YWluZXInKVxuXHQ7XG5cbnZhciB2aWV3TW9kZXMgPSBPYmplY3QuZnJlZXplKHtcblx0WUVBUlM6ICd5ZWFycycsXG5cdE1PTlRIUzogJ21vbnRocycsXG5cdERBWVM6ICdkYXlzJyxcblx0VElNRTogJ3RpbWUnLFxufSk7XG5cbnZhciBUWVBFUyA9IFByb3BUeXBlcztcbnZhciBEYXRldGltZSA9IGNyZWF0ZUNsYXNzKHtcblx0cHJvcFR5cGVzOiB7XG5cdFx0Ly8gdmFsdWU6IFRZUEVTLm9iamVjdCB8IFRZUEVTLnN0cmluZyxcblx0XHQvLyBkZWZhdWx0VmFsdWU6IFRZUEVTLm9iamVjdCB8IFRZUEVTLnN0cmluZyxcblx0XHQvLyB2aWV3RGF0ZTogVFlQRVMub2JqZWN0IHwgVFlQRVMuc3RyaW5nLFxuXHRcdG9uRm9jdXM6IFRZUEVTLmZ1bmMsXG5cdFx0b25CbHVyOiBUWVBFUy5mdW5jLFxuXHRcdG9uQ2hhbmdlOiBUWVBFUy5mdW5jLFxuXHRcdG9uVmlld01vZGVDaGFuZ2U6IFRZUEVTLmZ1bmMsXG5cdFx0bG9jYWxlOiBUWVBFUy5zdHJpbmcsXG5cdFx0dXRjOiBUWVBFUy5ib29sLFxuXHRcdGlucHV0OiBUWVBFUy5ib29sLFxuXHRcdC8vIGRhdGVGb3JtYXQ6IFRZUEVTLnN0cmluZyB8IFRZUEVTLmJvb2wsXG5cdFx0Ly8gdGltZUZvcm1hdDogVFlQRVMuc3RyaW5nIHwgVFlQRVMuYm9vbCxcblx0XHRpbnB1dFByb3BzOiBUWVBFUy5vYmplY3QsXG5cdFx0dGltZUNvbnN0cmFpbnRzOiBUWVBFUy5vYmplY3QsXG5cdFx0dmlld01vZGU6IFRZUEVTLm9uZU9mKFt2aWV3TW9kZXMuWUVBUlMsIHZpZXdNb2Rlcy5NT05USFMsIHZpZXdNb2Rlcy5EQVlTLCB2aWV3TW9kZXMuVElNRV0pLFxuXHRcdGlzVmFsaWREYXRlOiBUWVBFUy5mdW5jLFxuXHRcdG9wZW46IFRZUEVTLmJvb2wsXG5cdFx0c3RyaWN0UGFyc2luZzogVFlQRVMuYm9vbCxcblx0XHRjbG9zZU9uU2VsZWN0OiBUWVBFUy5ib29sLFxuXHRcdGNsb3NlT25UYWI6IFRZUEVTLmJvb2xcblx0fSxcblxuXHRnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGVGcm9tUHJvcHMoIHRoaXMucHJvcHMgKTtcblxuXHRcdGlmICggc3RhdGUub3BlbiA9PT0gdW5kZWZpbmVkIClcblx0XHRcdHN0YXRlLm9wZW4gPSAhdGhpcy5wcm9wcy5pbnB1dDtcblxuXHRcdHN0YXRlLmN1cnJlbnRWaWV3ID0gdGhpcy5wcm9wcy5kYXRlRm9ybWF0ID9cblx0XHRcdCh0aGlzLnByb3BzLnZpZXdNb2RlIHx8IHN0YXRlLnVwZGF0ZU9uIHx8IHZpZXdNb2Rlcy5EQVlTKSA6IHZpZXdNb2Rlcy5USU1FO1xuXG5cdFx0cmV0dXJuIHN0YXRlO1xuXHR9LFxuXG5cdHBhcnNlRGF0ZTogZnVuY3Rpb24gKGRhdGUsIGZvcm1hdHMpIHtcblx0XHR2YXIgcGFyc2VkRGF0ZTtcblxuXHRcdGlmIChkYXRlICYmIHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJylcblx0XHRcdHBhcnNlZERhdGUgPSB0aGlzLmxvY2FsTW9tZW50KGRhdGUsIGZvcm1hdHMuZGF0ZXRpbWUpO1xuXHRcdGVsc2UgaWYgKGRhdGUpXG5cdFx0XHRwYXJzZWREYXRlID0gdGhpcy5sb2NhbE1vbWVudChkYXRlKTtcblxuXHRcdGlmIChwYXJzZWREYXRlICYmICFwYXJzZWREYXRlLmlzVmFsaWQoKSlcblx0XHRcdHBhcnNlZERhdGUgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHBhcnNlZERhdGU7XG5cdH0sXG5cblx0Z2V0U3RhdGVGcm9tUHJvcHM6IGZ1bmN0aW9uKCBwcm9wcyApIHtcblx0XHR2YXIgZm9ybWF0cyA9IHRoaXMuZ2V0Rm9ybWF0cyggcHJvcHMgKSxcblx0XHRcdGRhdGUgPSBwcm9wcy52YWx1ZSB8fCBwcm9wcy5kZWZhdWx0VmFsdWUsXG5cdFx0XHRzZWxlY3RlZERhdGUsIHZpZXdEYXRlLCB1cGRhdGVPbiwgaW5wdXRWYWx1ZVxuXHRcdFx0O1xuXG5cdFx0c2VsZWN0ZWREYXRlID0gdGhpcy5wYXJzZURhdGUoZGF0ZSwgZm9ybWF0cyk7XG5cblx0XHR2aWV3RGF0ZSA9IHRoaXMucGFyc2VEYXRlKHByb3BzLnZpZXdEYXRlLCBmb3JtYXRzKTtcblxuXHRcdHZpZXdEYXRlID0gc2VsZWN0ZWREYXRlID9cblx0XHRcdHNlbGVjdGVkRGF0ZS5jbG9uZSgpLnN0YXJ0T2YoJ21vbnRoJykgOlxuXHRcdFx0dmlld0RhdGUgPyB2aWV3RGF0ZS5jbG9uZSgpLnN0YXJ0T2YoJ21vbnRoJykgOiB0aGlzLmxvY2FsTW9tZW50KCkuc3RhcnRPZignbW9udGgnKTtcblxuXHRcdHVwZGF0ZU9uID0gdGhpcy5nZXRVcGRhdGVPbihmb3JtYXRzKTtcblxuXHRcdGlmICggc2VsZWN0ZWREYXRlIClcblx0XHRcdGlucHV0VmFsdWUgPSBzZWxlY3RlZERhdGUuZm9ybWF0KGZvcm1hdHMuZGF0ZXRpbWUpO1xuXHRcdGVsc2UgaWYgKCBkYXRlLmlzVmFsaWQgJiYgIWRhdGUuaXNWYWxpZCgpIClcblx0XHRcdGlucHV0VmFsdWUgPSAnJztcblx0XHRlbHNlXG5cdFx0XHRpbnB1dFZhbHVlID0gZGF0ZSB8fCAnJztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR1cGRhdGVPbjogdXBkYXRlT24sXG5cdFx0XHRpbnB1dEZvcm1hdDogZm9ybWF0cy5kYXRldGltZSxcblx0XHRcdHZpZXdEYXRlOiB2aWV3RGF0ZSxcblx0XHRcdHNlbGVjdGVkRGF0ZTogc2VsZWN0ZWREYXRlLFxuXHRcdFx0aW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcblx0XHRcdG9wZW46IHByb3BzLm9wZW5cblx0XHR9O1xuXHR9LFxuXG5cdGdldFVwZGF0ZU9uOiBmdW5jdGlvbiggZm9ybWF0cyApIHtcblx0XHRpZiAoIGZvcm1hdHMuZGF0ZS5tYXRjaCgvW2xMRF0vKSApIHtcblx0XHRcdHJldHVybiB2aWV3TW9kZXMuREFZUztcblx0XHR9IGVsc2UgaWYgKCBmb3JtYXRzLmRhdGUuaW5kZXhPZignTScpICE9PSAtMSApIHtcblx0XHRcdHJldHVybiB2aWV3TW9kZXMuTU9OVEhTO1xuXHRcdH0gZWxzZSBpZiAoIGZvcm1hdHMuZGF0ZS5pbmRleE9mKCdZJykgIT09IC0xICkge1xuXHRcdFx0cmV0dXJuIHZpZXdNb2Rlcy5ZRUFSUztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlld01vZGVzLkRBWVM7XG5cdH0sXG5cblx0Z2V0Rm9ybWF0czogZnVuY3Rpb24oIHByb3BzICkge1xuXHRcdHZhciBmb3JtYXRzID0ge1xuXHRcdFx0XHRkYXRlOiBwcm9wcy5kYXRlRm9ybWF0IHx8ICcnLFxuXHRcdFx0XHR0aW1lOiBwcm9wcy50aW1lRm9ybWF0IHx8ICcnXG5cdFx0XHR9LFxuXHRcdFx0bG9jYWxlID0gdGhpcy5sb2NhbE1vbWVudCggcHJvcHMuZGF0ZSwgbnVsbCwgcHJvcHMgKS5sb2NhbGVEYXRhKClcblx0XHRcdDtcblxuXHRcdGlmICggZm9ybWF0cy5kYXRlID09PSB0cnVlICkge1xuXHRcdFx0Zm9ybWF0cy5kYXRlID0gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KCdMJyk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCB0aGlzLmdldFVwZGF0ZU9uKGZvcm1hdHMpICE9PSB2aWV3TW9kZXMuREFZUyApIHtcblx0XHRcdGZvcm1hdHMudGltZSA9ICcnO1xuXHRcdH1cblxuXHRcdGlmICggZm9ybWF0cy50aW1lID09PSB0cnVlICkge1xuXHRcdFx0Zm9ybWF0cy50aW1lID0gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KCdMVCcpO1xuXHRcdH1cblxuXHRcdGZvcm1hdHMuZGF0ZXRpbWUgPSBmb3JtYXRzLmRhdGUgJiYgZm9ybWF0cy50aW1lID9cblx0XHRcdGZvcm1hdHMuZGF0ZSArICcgJyArIGZvcm1hdHMudGltZSA6XG5cdFx0XHRmb3JtYXRzLmRhdGUgfHwgZm9ybWF0cy50aW1lXG5cdFx0O1xuXG5cdFx0cmV0dXJuIGZvcm1hdHM7XG5cdH0sXG5cblx0Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24oIG5leHRQcm9wcyApIHtcblx0XHR2YXIgZm9ybWF0cyA9IHRoaXMuZ2V0Rm9ybWF0cyggbmV4dFByb3BzICksXG5cdFx0XHR1cGRhdGVkU3RhdGUgPSB7fVxuXHRcdDtcblxuXHRcdGlmICggbmV4dFByb3BzLnZhbHVlICE9PSB0aGlzLnByb3BzLnZhbHVlIHx8XG5cdFx0XHRmb3JtYXRzLmRhdGV0aW1lICE9PSB0aGlzLmdldEZvcm1hdHMoIHRoaXMucHJvcHMgKS5kYXRldGltZSApIHtcblx0XHRcdHVwZGF0ZWRTdGF0ZSA9IHRoaXMuZ2V0U3RhdGVGcm9tUHJvcHMoIG5leHRQcm9wcyApO1xuXHRcdH1cblxuXHRcdGlmICggdXBkYXRlZFN0YXRlLm9wZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdHlwZW9mIG5leHRQcm9wcy5vcGVuICE9PSAndW5kZWZpbmVkJyApIHtcblx0XHRcdFx0dXBkYXRlZFN0YXRlLm9wZW4gPSBuZXh0UHJvcHMub3Blbjtcblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMucHJvcHMuY2xvc2VPblNlbGVjdCAmJiB0aGlzLnN0YXRlLmN1cnJlbnRWaWV3ICE9PSB2aWV3TW9kZXMuVElNRSApIHtcblx0XHRcdFx0dXBkYXRlZFN0YXRlLm9wZW4gPSBmYWxzZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHVwZGF0ZWRTdGF0ZS5vcGVuID0gdGhpcy5zdGF0ZS5vcGVuO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggbmV4dFByb3BzLnZpZXdNb2RlICE9PSB0aGlzLnByb3BzLnZpZXdNb2RlICkge1xuXHRcdFx0dXBkYXRlZFN0YXRlLmN1cnJlbnRWaWV3ID0gbmV4dFByb3BzLnZpZXdNb2RlO1xuXHRcdH1cblxuXHRcdGlmICggbmV4dFByb3BzLmxvY2FsZSAhPT0gdGhpcy5wcm9wcy5sb2NhbGUgKSB7XG5cdFx0XHRpZiAoIHRoaXMuc3RhdGUudmlld0RhdGUgKSB7XG5cdFx0XHRcdHZhciB1cGRhdGVkVmlld0RhdGUgPSB0aGlzLnN0YXRlLnZpZXdEYXRlLmNsb25lKCkubG9jYWxlKCBuZXh0UHJvcHMubG9jYWxlICk7XG5cdFx0XHRcdHVwZGF0ZWRTdGF0ZS52aWV3RGF0ZSA9IHVwZGF0ZWRWaWV3RGF0ZTtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUgKSB7XG5cdFx0XHRcdHZhciB1cGRhdGVkU2VsZWN0ZWREYXRlID0gdGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUuY2xvbmUoKS5sb2NhbGUoIG5leHRQcm9wcy5sb2NhbGUgKTtcblx0XHRcdFx0dXBkYXRlZFN0YXRlLnNlbGVjdGVkRGF0ZSA9IHVwZGF0ZWRTZWxlY3RlZERhdGU7XG5cdFx0XHRcdHVwZGF0ZWRTdGF0ZS5pbnB1dFZhbHVlID0gdXBkYXRlZFNlbGVjdGVkRGF0ZS5mb3JtYXQoIGZvcm1hdHMuZGF0ZXRpbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIG5leHRQcm9wcy51dGMgIT09IHRoaXMucHJvcHMudXRjICkge1xuXHRcdFx0aWYgKCBuZXh0UHJvcHMudXRjICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuc3RhdGUudmlld0RhdGUgKVxuXHRcdFx0XHRcdHVwZGF0ZWRTdGF0ZS52aWV3RGF0ZSA9IHRoaXMuc3RhdGUudmlld0RhdGUuY2xvbmUoKS51dGMoKTtcblx0XHRcdFx0aWYgKCB0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZSApIHtcblx0XHRcdFx0XHR1cGRhdGVkU3RhdGUuc2VsZWN0ZWREYXRlID0gdGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUuY2xvbmUoKS51dGMoKTtcblx0XHRcdFx0XHR1cGRhdGVkU3RhdGUuaW5wdXRWYWx1ZSA9IHVwZGF0ZWRTdGF0ZS5zZWxlY3RlZERhdGUuZm9ybWF0KCBmb3JtYXRzLmRhdGV0aW1lICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICggdGhpcy5zdGF0ZS52aWV3RGF0ZSApXG5cdFx0XHRcdFx0dXBkYXRlZFN0YXRlLnZpZXdEYXRlID0gdGhpcy5zdGF0ZS52aWV3RGF0ZS5jbG9uZSgpLmxvY2FsKCk7XG5cdFx0XHRcdGlmICggdGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUgKSB7XG5cdFx0XHRcdFx0dXBkYXRlZFN0YXRlLnNlbGVjdGVkRGF0ZSA9IHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlLmNsb25lKCkubG9jYWwoKTtcblx0XHRcdFx0XHR1cGRhdGVkU3RhdGUuaW5wdXRWYWx1ZSA9IHVwZGF0ZWRTdGF0ZS5zZWxlY3RlZERhdGUuZm9ybWF0KGZvcm1hdHMuZGF0ZXRpbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBuZXh0UHJvcHMudmlld0RhdGUgIT09IHRoaXMucHJvcHMudmlld0RhdGUgKSB7XG5cdFx0XHR1cGRhdGVkU3RhdGUudmlld0RhdGUgPSBtb21lbnQobmV4dFByb3BzLnZpZXdEYXRlKTtcblx0XHR9XG5cdFx0Ly93ZSBzaG91bGQgb25seSBzaG93IGEgdmFsaWQgZGF0ZSBpZiB3ZSBhcmUgcHJvdmlkZWQgYSBpc1ZhbGlkRGF0ZSBmdW5jdGlvbi4gUmVtb3ZlZCBpbiAyLjEwLjNcblx0XHQvKmlmICh0aGlzLnByb3BzLmlzVmFsaWREYXRlKSB7XG5cdFx0XHR1cGRhdGVkU3RhdGUudmlld0RhdGUgPSB1cGRhdGVkU3RhdGUudmlld0RhdGUgfHwgdGhpcy5zdGF0ZS52aWV3RGF0ZTtcblx0XHRcdHdoaWxlICghdGhpcy5wcm9wcy5pc1ZhbGlkRGF0ZSh1cGRhdGVkU3RhdGUudmlld0RhdGUpKSB7XG5cdFx0XHRcdHVwZGF0ZWRTdGF0ZS52aWV3RGF0ZSA9IHVwZGF0ZWRTdGF0ZS52aWV3RGF0ZS5hZGQoMSwgJ2RheScpO1xuXHRcdFx0fVxuXHRcdH0qL1xuXHRcdHRoaXMuc2V0U3RhdGUoIHVwZGF0ZWRTdGF0ZSApO1xuXHR9LFxuXG5cdG9uSW5wdXRDaGFuZ2U6IGZ1bmN0aW9uKCBlICkge1xuXHRcdHZhciB2YWx1ZSA9IGUudGFyZ2V0ID09PSBudWxsID8gZSA6IGUudGFyZ2V0LnZhbHVlLFxuXHRcdFx0bG9jYWxNb21lbnQgPSB0aGlzLmxvY2FsTW9tZW50KCB2YWx1ZSwgdGhpcy5zdGF0ZS5pbnB1dEZvcm1hdCApLFxuXHRcdFx0dXBkYXRlID0geyBpbnB1dFZhbHVlOiB2YWx1ZSB9XG5cdFx0XHQ7XG5cblx0XHRpZiAoIGxvY2FsTW9tZW50LmlzVmFsaWQoKSAmJiAhdGhpcy5wcm9wcy52YWx1ZSApIHtcblx0XHRcdHVwZGF0ZS5zZWxlY3RlZERhdGUgPSBsb2NhbE1vbWVudDtcblx0XHRcdHVwZGF0ZS52aWV3RGF0ZSA9IGxvY2FsTW9tZW50LmNsb25lKCkuc3RhcnRPZignbW9udGgnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dXBkYXRlLnNlbGVjdGVkRGF0ZSA9IG51bGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuc2V0U3RhdGUoIHVwZGF0ZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcm9wcy5vbkNoYW5nZSggbG9jYWxNb21lbnQuaXNWYWxpZCgpID8gbG9jYWxNb21lbnQgOiB0aGlzLnN0YXRlLmlucHV0VmFsdWUgKTtcblx0XHR9KTtcblx0fSxcblxuXHRvbklucHV0S2V5OiBmdW5jdGlvbiggZSApIHtcblx0XHRpZiAoIGUud2hpY2ggPT09IDkgJiYgdGhpcy5wcm9wcy5jbG9zZU9uVGFiICkge1xuXHRcdFx0dGhpcy5jbG9zZUNhbGVuZGFyKCk7XG5cdFx0fVxuXHR9LFxuXG5cdHNob3dWaWV3OiBmdW5jdGlvbiggdmlldyApIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdG1lLnN0YXRlLmN1cnJlbnRWaWV3ICE9PSB2aWV3ICYmIG1lLnByb3BzLm9uVmlld01vZGVDaGFuZ2UoIHZpZXcgKTtcblx0XHRcdG1lLnNldFN0YXRlKHsgY3VycmVudFZpZXc6IHZpZXcgfSk7XG5cdFx0fTtcblx0fSxcblxuXHRzZXREYXRlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHR2YXIgbWUgPSB0aGlzLFxuXHRcdFx0bmV4dFZpZXdzID0ge1xuXHRcdFx0XHRtb250aDogdmlld01vZGVzLkRBWVMsXG5cdFx0XHRcdHllYXI6IHZpZXdNb2Rlcy5NT05USFMsXG5cdFx0XHR9XG5cdFx0O1xuXHRcdHJldHVybiBmdW5jdGlvbiggZSApIHtcblx0XHRcdG1lLnNldFN0YXRlKHtcblx0XHRcdFx0dmlld0RhdGU6IG1lLnN0YXRlLnZpZXdEYXRlLmNsb25lKClbIHR5cGUgXSggcGFyc2VJbnQoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyksIDEwKSApLnN0YXJ0T2YoIHR5cGUgKSxcblx0XHRcdFx0Y3VycmVudFZpZXc6IG5leHRWaWV3c1sgdHlwZSBdXG5cdFx0XHR9KTtcblx0XHRcdG1lLnByb3BzLm9uVmlld01vZGVDaGFuZ2UoIG5leHRWaWV3c1sgdHlwZSBdICk7XG5cdFx0fTtcblx0fSxcblxuXHRhZGRUaW1lOiBmdW5jdGlvbiggYW1vdW50LCB0eXBlLCB0b1NlbGVjdGVkICkge1xuXHRcdHJldHVybiB0aGlzLnVwZGF0ZVRpbWUoICdhZGQnLCBhbW91bnQsIHR5cGUsIHRvU2VsZWN0ZWQgKTtcblx0fSxcblxuXHRzdWJ0cmFjdFRpbWU6IGZ1bmN0aW9uKCBhbW91bnQsIHR5cGUsIHRvU2VsZWN0ZWQgKSB7XG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlVGltZSggJ3N1YnRyYWN0JywgYW1vdW50LCB0eXBlLCB0b1NlbGVjdGVkICk7XG5cdH0sXG5cblx0dXBkYXRlVGltZTogZnVuY3Rpb24oIG9wLCBhbW91bnQsIHR5cGUsIHRvU2VsZWN0ZWQgKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB1cGRhdGUgPSB7fSxcblx0XHRcdFx0ZGF0ZSA9IHRvU2VsZWN0ZWQgPyAnc2VsZWN0ZWREYXRlJyA6ICd2aWV3RGF0ZSdcblx0XHRcdDtcblxuXHRcdFx0dXBkYXRlWyBkYXRlIF0gPSBtZS5zdGF0ZVsgZGF0ZSBdLmNsb25lKClbIG9wIF0oIGFtb3VudCwgdHlwZSApO1xuXG5cdFx0XHRtZS5zZXRTdGF0ZSggdXBkYXRlICk7XG5cdFx0fTtcblx0fSxcblxuXHRhbGxvd2VkU2V0VGltZTogWydob3VycycsICdtaW51dGVzJywgJ3NlY29uZHMnLCAnbWlsbGlzZWNvbmRzJ10sXG5cdHNldFRpbWU6IGZ1bmN0aW9uKCB0eXBlLCB2YWx1ZSApIHtcblx0XHR2YXIgaW5kZXggPSB0aGlzLmFsbG93ZWRTZXRUaW1lLmluZGV4T2YoIHR5cGUgKSArIDEsXG5cdFx0XHRzdGF0ZSA9IHRoaXMuc3RhdGUsXG5cdFx0XHRkYXRlID0gKHN0YXRlLnNlbGVjdGVkRGF0ZSB8fCBzdGF0ZS52aWV3RGF0ZSkuY2xvbmUoKSxcblx0XHRcdG5leHRUeXBlXG5cdFx0XHQ7XG5cblx0XHQvLyBJdCBpcyBuZWVkZWQgdG8gc2V0IGFsbCB0aGUgdGltZSBwcm9wZXJ0aWVzXG5cdFx0Ly8gdG8gbm90IHRvIHJlc2V0IHRoZSB0aW1lXG5cdFx0ZGF0ZVsgdHlwZSBdKCB2YWx1ZSApO1xuXHRcdGZvciAoOyBpbmRleCA8IHRoaXMuYWxsb3dlZFNldFRpbWUubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRuZXh0VHlwZSA9IHRoaXMuYWxsb3dlZFNldFRpbWVbaW5kZXhdO1xuXHRcdFx0ZGF0ZVsgbmV4dFR5cGUgXSggZGF0ZVtuZXh0VHlwZV0oKSApO1xuXHRcdH1cblxuXHRcdGlmICggIXRoaXMucHJvcHMudmFsdWUgKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0c2VsZWN0ZWREYXRlOiBkYXRlLFxuXHRcdFx0XHRpbnB1dFZhbHVlOiBkYXRlLmZvcm1hdCggc3RhdGUuaW5wdXRGb3JtYXQgKVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHRoaXMucHJvcHMub25DaGFuZ2UoIGRhdGUgKTtcblx0fSxcblxuXHR1cGRhdGVTZWxlY3RlZERhdGU6IGZ1bmN0aW9uKCBlLCBjbG9zZSApIHtcblx0XHR2YXIgdGFyZ2V0ID0gZS50YXJnZXQsXG5cdFx0XHRtb2RpZmllciA9IDAsXG5cdFx0XHR2aWV3RGF0ZSA9IHRoaXMuc3RhdGUudmlld0RhdGUsXG5cdFx0XHRjdXJyZW50RGF0ZSA9IHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlIHx8IHZpZXdEYXRlLFxuXHRcdFx0ZGF0ZVxuXHRcdFx0O1xuXG5cdFx0aWYgKHRhcmdldC5jbGFzc05hbWUuaW5kZXhPZigncmR0RGF5JykgIT09IC0xKSB7XG5cdFx0XHRpZiAodGFyZ2V0LmNsYXNzTmFtZS5pbmRleE9mKCdyZHROZXcnKSAhPT0gLTEpXG5cdFx0XHRcdG1vZGlmaWVyID0gMTtcblx0XHRcdGVsc2UgaWYgKHRhcmdldC5jbGFzc05hbWUuaW5kZXhPZigncmR0T2xkJykgIT09IC0xKVxuXHRcdFx0XHRtb2RpZmllciA9IC0xO1xuXG5cdFx0XHRkYXRlID0gdmlld0RhdGUuY2xvbmUoKVxuXHRcdFx0XHQubW9udGgoIHZpZXdEYXRlLm1vbnRoKCkgKyBtb2RpZmllciApXG5cdFx0XHRcdC5kYXRlKCBwYXJzZUludCggdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpLCAxMCApICk7XG5cdFx0fSBlbHNlIGlmICh0YXJnZXQuY2xhc3NOYW1lLmluZGV4T2YoJ3JkdE1vbnRoJykgIT09IC0xKSB7XG5cdFx0XHRkYXRlID0gdmlld0RhdGUuY2xvbmUoKVxuXHRcdFx0XHQubW9udGgoIHBhcnNlSW50KCB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyksIDEwICkgKVxuXHRcdFx0XHQuZGF0ZSggY3VycmVudERhdGUuZGF0ZSgpICk7XG5cdFx0fSBlbHNlIGlmICh0YXJnZXQuY2xhc3NOYW1lLmluZGV4T2YoJ3JkdFllYXInKSAhPT0gLTEpIHtcblx0XHRcdGRhdGUgPSB2aWV3RGF0ZS5jbG9uZSgpXG5cdFx0XHRcdC5tb250aCggY3VycmVudERhdGUubW9udGgoKSApXG5cdFx0XHRcdC5kYXRlKCBjdXJyZW50RGF0ZS5kYXRlKCkgKVxuXHRcdFx0XHQueWVhciggcGFyc2VJbnQoIHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSwgMTAgKSApO1xuXHRcdH1cblxuXHRcdGRhdGUuaG91cnMoIGN1cnJlbnREYXRlLmhvdXJzKCkgKVxuXHRcdFx0Lm1pbnV0ZXMoIGN1cnJlbnREYXRlLm1pbnV0ZXMoKSApXG5cdFx0XHQuc2Vjb25kcyggY3VycmVudERhdGUuc2Vjb25kcygpIClcblx0XHRcdC5taWxsaXNlY29uZHMoIGN1cnJlbnREYXRlLm1pbGxpc2Vjb25kcygpICk7XG5cblx0XHRpZiAoICF0aGlzLnByb3BzLnZhbHVlICkge1xuXHRcdFx0dmFyIG9wZW4gPSAhKCB0aGlzLnByb3BzLmNsb3NlT25TZWxlY3QgJiYgY2xvc2UgKTtcblx0XHRcdGlmICggIW9wZW4gKSB7XG5cdFx0XHRcdHRoaXMucHJvcHMub25CbHVyKCBkYXRlICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRzZWxlY3RlZERhdGU6IGRhdGUsXG5cdFx0XHRcdHZpZXdEYXRlOiBkYXRlLmNsb25lKCkuc3RhcnRPZignbW9udGgnKSxcblx0XHRcdFx0aW5wdXRWYWx1ZTogZGF0ZS5mb3JtYXQoIHRoaXMuc3RhdGUuaW5wdXRGb3JtYXQgKSxcblx0XHRcdFx0b3Blbjogb3BlblxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggdGhpcy5wcm9wcy5jbG9zZU9uU2VsZWN0ICYmIGNsb3NlICkge1xuXHRcdFx0XHR0aGlzLmNsb3NlQ2FsZW5kYXIoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnByb3BzLm9uQ2hhbmdlKCBkYXRlICk7XG5cdH0sXG5cblx0b3BlbkNhbGVuZGFyOiBmdW5jdGlvbiggZSApIHtcblx0XHRpZiAoICF0aGlzLnN0YXRlLm9wZW4gKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHsgb3BlbjogdHJ1ZSB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhpcy5wcm9wcy5vbkZvY3VzKCBlICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sXG5cblx0Y2xvc2VDYWxlbmRhcjogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMucHJvcHMub25CbHVyKCB0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZSB8fCB0aGlzLnN0YXRlLmlucHV0VmFsdWUgKTtcblx0XHR9KTtcblx0fSxcblxuXHRoYW5kbGVDbGlja091dHNpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggdGhpcy5wcm9wcy5pbnB1dCAmJiB0aGlzLnN0YXRlLm9wZW4gJiYgIXRoaXMucHJvcHMub3BlbiAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlT25DbGlja091dHNpZGUgKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHsgb3BlbjogZmFsc2UgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMucHJvcHMub25CbHVyKCB0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZSB8fCB0aGlzLnN0YXRlLmlucHV0VmFsdWUgKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRsb2NhbE1vbWVudDogZnVuY3Rpb24oIGRhdGUsIGZvcm1hdCwgcHJvcHMgKSB7XG5cdFx0cHJvcHMgPSBwcm9wcyB8fCB0aGlzLnByb3BzO1xuXHRcdHZhciBtb21lbnRGbiA9IHByb3BzLnV0YyA/IG1vbWVudC51dGMgOiBtb21lbnQ7XG5cdFx0dmFyIG0gPSBtb21lbnRGbiggZGF0ZSwgZm9ybWF0LCBwcm9wcy5zdHJpY3RQYXJzaW5nICk7XG5cdFx0aWYgKCBwcm9wcy5sb2NhbGUgKVxuXHRcdFx0bS5sb2NhbGUoIHByb3BzLmxvY2FsZSApO1xuXHRcdHJldHVybiBtO1xuXHR9LFxuXG5cdGNvbXBvbmVudFByb3BzOiB7XG5cdFx0ZnJvbVByb3BzOiBbJ3ZhbHVlJywgJ2lzVmFsaWREYXRlJywgJ3JlbmRlckRheScsICdyZW5kZXJNb250aCcsICdyZW5kZXJZZWFyJywgJ3RpbWVDb25zdHJhaW50cyddLFxuXHRcdGZyb21TdGF0ZTogWyd2aWV3RGF0ZScsICdzZWxlY3RlZERhdGUnLCAndXBkYXRlT24nXSxcblx0XHRmcm9tVGhpczogWydzZXREYXRlJywgJ3NldFRpbWUnLCAnc2hvd1ZpZXcnLCAnYWRkVGltZScsICdzdWJ0cmFjdFRpbWUnLCAndXBkYXRlU2VsZWN0ZWREYXRlJywgJ2xvY2FsTW9tZW50JywgJ2hhbmRsZUNsaWNrT3V0c2lkZSddXG5cdH0sXG5cblx0Z2V0Q29tcG9uZW50UHJvcHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXMsXG5cdFx0XHRmb3JtYXRzID0gdGhpcy5nZXRGb3JtYXRzKCB0aGlzLnByb3BzICksXG5cdFx0XHRwcm9wcyA9IHtkYXRlRm9ybWF0OiBmb3JtYXRzLmRhdGUsIHRpbWVGb3JtYXQ6IGZvcm1hdHMudGltZX1cblx0XHRcdDtcblxuXHRcdHRoaXMuY29tcG9uZW50UHJvcHMuZnJvbVByb3BzLmZvckVhY2goIGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IG1lLnByb3BzWyBuYW1lIF07XG5cdFx0fSk7XG5cdFx0dGhpcy5jb21wb25lbnRQcm9wcy5mcm9tU3RhdGUuZm9yRWFjaCggZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gbWUuc3RhdGVbIG5hbWUgXTtcblx0XHR9KTtcblx0XHR0aGlzLmNvbXBvbmVudFByb3BzLmZyb21UaGlzLmZvckVhY2goIGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IG1lWyBuYW1lIF07XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gcHJvcHM7XG5cdH0sXG5cblx0cmVuZGVyOiBmdW5jdGlvbigpIHtcblx0XHQvLyBUT0RPOiBNYWtlIGEgZnVuY3Rpb24gb3IgY2xlYW4gdXAgdGhpcyBjb2RlLFxuXHRcdC8vIGxvZ2ljIHJpZ2h0IG5vdyBpcyByZWFsbHkgaGFyZCB0byBmb2xsb3dcblx0XHR2YXIgY2xhc3NOYW1lID0gJ3JkdCcgKyAodGhpcy5wcm9wcy5jbGFzc05hbWUgP1xuICAgICAgICAgICAgICAgICAgKCBBcnJheS5pc0FycmF5KCB0aGlzLnByb3BzLmNsYXNzTmFtZSApID9cbiAgICAgICAgICAgICAgICAgICcgJyArIHRoaXMucHJvcHMuY2xhc3NOYW1lLmpvaW4oICcgJyApIDogJyAnICsgdGhpcy5wcm9wcy5jbGFzc05hbWUpIDogJycpLFxuXHRcdFx0Y2hpbGRyZW4gPSBbXTtcblxuXHRcdGlmICggdGhpcy5wcm9wcy5pbnB1dCApIHtcblx0XHRcdHZhciBmaW5hbElucHV0UHJvcHMgPSBhc3NpZ24oe1xuXHRcdFx0XHR0eXBlOiAndGV4dCcsXG5cdFx0XHRcdGNsYXNzTmFtZTogJ2Zvcm0tY29udHJvbCcsXG5cdFx0XHRcdG9uQ2xpY2s6IHRoaXMub3BlbkNhbGVuZGFyLFxuXHRcdFx0XHRvbkZvY3VzOiB0aGlzLm9wZW5DYWxlbmRhcixcblx0XHRcdFx0b25DaGFuZ2U6IHRoaXMub25JbnB1dENoYW5nZSxcblx0XHRcdFx0b25LZXlEb3duOiB0aGlzLm9uSW5wdXRLZXksXG5cdFx0XHRcdHZhbHVlOiB0aGlzLnN0YXRlLmlucHV0VmFsdWUsXG5cdFx0XHR9LCB0aGlzLnByb3BzLmlucHV0UHJvcHMpO1xuXHRcdFx0aWYgKCB0aGlzLnByb3BzLnJlbmRlcklucHV0ICkge1xuXHRcdFx0XHRjaGlsZHJlbiA9IFsgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBrZXk6ICdpJyB9LCB0aGlzLnByb3BzLnJlbmRlcklucHV0KCBmaW5hbElucHV0UHJvcHMsIHRoaXMub3BlbkNhbGVuZGFyLCB0aGlzLmNsb3NlQ2FsZW5kYXIgKSkgXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNoaWxkcmVuID0gWyBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIGFzc2lnbih7IGtleTogJ2knIH0sIGZpbmFsSW5wdXRQcm9wcyApKV07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSArPSAnIHJkdFN0YXRpYyc7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnN0YXRlLm9wZW4gKVxuXHRcdFx0Y2xhc3NOYW1lICs9ICcgcmR0T3Blbic7XG5cblx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCggJ2RpdicsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSwgY2hpbGRyZW4uY29uY2F0KFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCggJ2RpdicsXG5cdFx0XHRcdHsga2V5OiAnZHQnLCBjbGFzc05hbWU6ICdyZHRQaWNrZXInIH0sXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoIENhbGVuZGFyQ29udGFpbmVyLCB7IHZpZXc6IHRoaXMuc3RhdGUuY3VycmVudFZpZXcsIHZpZXdQcm9wczogdGhpcy5nZXRDb21wb25lbnRQcm9wcygpLCBvbkNsaWNrT3V0c2lkZTogdGhpcy5oYW5kbGVDbGlja091dHNpZGUgfSlcblx0XHRcdClcblx0XHQpKTtcblx0fVxufSk7XG5cbkRhdGV0aW1lLmRlZmF1bHRQcm9wcyA9IHtcblx0Y2xhc3NOYW1lOiAnJyxcblx0ZGVmYXVsdFZhbHVlOiAnJyxcblx0aW5wdXRQcm9wczoge30sXG5cdGlucHV0OiB0cnVlLFxuXHRvbkZvY3VzOiBmdW5jdGlvbigpIHt9LFxuXHRvbkJsdXI6IGZ1bmN0aW9uKCkge30sXG5cdG9uQ2hhbmdlOiBmdW5jdGlvbigpIHt9LFxuXHRvblZpZXdNb2RlQ2hhbmdlOiBmdW5jdGlvbigpIHt9LFxuXHR0aW1lRm9ybWF0OiB0cnVlLFxuXHR0aW1lQ29uc3RyYWludHM6IHt9LFxuXHRkYXRlRm9ybWF0OiB0cnVlLFxuXHRzdHJpY3RQYXJzaW5nOiB0cnVlLFxuXHRjbG9zZU9uU2VsZWN0OiBmYWxzZSxcblx0Y2xvc2VPblRhYjogdHJ1ZSxcblx0dXRjOiBmYWxzZVxufTtcblxuLy8gTWFrZSBtb21lbnQgYWNjZXNzaWJsZSB0aHJvdWdoIHRoZSBEYXRldGltZSBjbGFzc1xuRGF0ZXRpbWUubW9tZW50ID0gbW9tZW50O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGV0aW1lO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xufVxuXG52YXIgTUlYSU5TX0tFWSA9ICdtaXhpbnMnO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gYWxsb3cgdGhlIGNyZWF0aW9uIG9mIGFub255bW91cyBmdW5jdGlvbnMgd2hpY2ggZG8gbm90XG4vLyBoYXZlIC5uYW1lIHNldCB0byB0aGUgbmFtZSBvZiB0aGUgdmFyaWFibGUgYmVpbmcgYXNzaWduZWQgdG8uXG5mdW5jdGlvbiBpZGVudGl0eShmbikge1xuICByZXR1cm4gZm47XG59XG5cbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcztcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge1xuICAgIHByb3A6ICdwcm9wJyxcbiAgICBjb250ZXh0OiAnY29udGV4dCcsXG4gICAgY2hpbGRDb250ZXh0OiAnY2hpbGQgY29udGV4dCdcbiAgfTtcbn0gZWxzZSB7XG4gIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge307XG59XG5cbmZ1bmN0aW9uIGZhY3RvcnkoUmVhY3RDb21wb25lbnQsIGlzVmFsaWRFbGVtZW50LCBSZWFjdE5vb3BVcGRhdGVRdWV1ZSkge1xuICAvKipcbiAgICogUG9saWNpZXMgdGhhdCBkZXNjcmliZSBtZXRob2RzIGluIGBSZWFjdENsYXNzSW50ZXJmYWNlYC5cbiAgICovXG5cbiAgdmFyIGluamVjdGVkTWl4aW5zID0gW107XG5cbiAgLyoqXG4gICAqIENvbXBvc2l0ZSBjb21wb25lbnRzIGFyZSBoaWdoZXItbGV2ZWwgY29tcG9uZW50cyB0aGF0IGNvbXBvc2Ugb3RoZXIgY29tcG9zaXRlXG4gICAqIG9yIGhvc3QgY29tcG9uZW50cy5cbiAgICpcbiAgICogVG8gY3JlYXRlIGEgbmV3IHR5cGUgb2YgYFJlYWN0Q2xhc3NgLCBwYXNzIGEgc3BlY2lmaWNhdGlvbiBvZlxuICAgKiB5b3VyIG5ldyBjbGFzcyB0byBgUmVhY3QuY3JlYXRlQ2xhc3NgLiBUaGUgb25seSByZXF1aXJlbWVudCBvZiB5b3VyIGNsYXNzXG4gICAqIHNwZWNpZmljYXRpb24gaXMgdGhhdCB5b3UgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLlxuICAgKlxuICAgKiAgIHZhciBNeUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIHJldHVybiA8ZGl2PkhlbGxvIFdvcmxkPC9kaXY+O1xuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBUaGUgY2xhc3Mgc3BlY2lmaWNhdGlvbiBzdXBwb3J0cyBhIHNwZWNpZmljIHByb3RvY29sIG9mIG1ldGhvZHMgdGhhdCBoYXZlXG4gICAqIHNwZWNpYWwgbWVhbmluZyAoZS5nLiBgcmVuZGVyYCkuIFNlZSBgUmVhY3RDbGFzc0ludGVyZmFjZWAgZm9yXG4gICAqIG1vcmUgdGhlIGNvbXByZWhlbnNpdmUgcHJvdG9jb2wuIEFueSBvdGhlciBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGluIHRoZVxuICAgKiBjbGFzcyBzcGVjaWZpY2F0aW9uIHdpbGwgYmUgYXZhaWxhYmxlIG9uIHRoZSBwcm90b3R5cGUuXG4gICAqXG4gICAqIEBpbnRlcmZhY2UgUmVhY3RDbGFzc0ludGVyZmFjZVxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHZhciBSZWFjdENsYXNzSW50ZXJmYWNlID0ge1xuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIE1peGluIG9iamVjdHMgdG8gaW5jbHVkZSB3aGVuIGRlZmluaW5nIHlvdXIgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHR5cGUge2FycmF5fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIG1peGluczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgdGhhdCBzaG91bGQgYmUgZGVmaW5lZCBvblxuICAgICAqIHRoZSBjb21wb25lbnQncyBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIGl0cyBwcm90b3R5cGUgKHN0YXRpYyBtZXRob2RzKS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgc3RhdGljczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIERlZmluaXRpb24gb2YgcHJvcCB0eXBlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIHByb3BUeXBlczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbnRleHRUeXBlczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyB0aGlzIGNvbXBvbmVudCBzZXRzIGZvciBpdHMgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLy8gPT09PSBEZWZpbml0aW9uIG1ldGhvZHMgPT09PVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC4gVmFsdWVzIGluIHRoZSBtYXBwaW5nIHdpbGwgYmUgc2V0IG9uXG4gICAgICogYHRoaXMucHJvcHNgIGlmIHRoYXQgcHJvcCBpcyBub3Qgc3BlY2lmaWVkIChpLmUuIHVzaW5nIGFuIGBpbmAgY2hlY2spLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBiZWZvcmUgYGdldEluaXRpYWxTdGF0ZWAgYW5kIHRoZXJlZm9yZSBjYW5ub3QgcmVseVxuICAgICAqIG9uIGB0aGlzLnN0YXRlYCBvciB1c2UgYHRoaXMuc2V0U3RhdGVgLlxuICAgICAqXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGdldERlZmF1bHRQcm9wczogJ0RFRklORV9NQU5ZX01FUkdFRCcsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIG9uY2UgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC4gVGhlIHJldHVybiB2YWx1ZSB3aWxsIGJlIHVzZWRcbiAgICAgKiBhcyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiBgdGhpcy5zdGF0ZWAuXG4gICAgICpcbiAgICAgKiAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIHJldHVybiB7XG4gICAgICogICAgICAgaXNPbjogZmFsc2UsXG4gICAgICogICAgICAgZm9vQmF6OiBuZXcgQmF6Rm9vKClcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGdldEluaXRpYWxTdGF0ZTogJ0RFRklORV9NQU5ZX01FUkdFRCcsXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgZ2V0Q2hpbGRDb250ZXh0OiAnREVGSU5FX01BTllfTUVSR0VEJyxcblxuICAgIC8qKlxuICAgICAqIFVzZXMgcHJvcHMgZnJvbSBgdGhpcy5wcm9wc2AgYW5kIHN0YXRlIGZyb20gYHRoaXMuc3RhdGVgIHRvIHJlbmRlciB0aGVcbiAgICAgKiBzdHJ1Y3R1cmUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIE5vIGd1YXJhbnRlZXMgYXJlIG1hZGUgYWJvdXQgd2hlbiBvciBob3cgb2Z0ZW4gdGhpcyBtZXRob2QgaXMgaW52b2tlZCwgc29cbiAgICAgKiBpdCBtdXN0IG5vdCBoYXZlIHNpZGUgZWZmZWN0cy5cbiAgICAgKlxuICAgICAqICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgdmFyIG5hbWUgPSB0aGlzLnByb3BzLm5hbWU7XG4gICAgICogICAgIHJldHVybiA8ZGl2PkhlbGxvLCB7bmFtZX0hPC9kaXY+O1xuICAgICAqICAgfVxuICAgICAqXG4gICAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gICAgICogQHJlcXVpcmVkXG4gICAgICovXG4gICAgcmVuZGVyOiAnREVGSU5FX09OQ0UnLFxuXG4gICAgLy8gPT09PSBEZWxlZ2F0ZSBtZXRob2RzID09PT1cblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluaXRpYWxseSBjcmVhdGVkIGFuZCBhYm91dCB0byBiZSBtb3VudGVkLlxuICAgICAqIFRoaXMgbWF5IGhhdmUgc2lkZSBlZmZlY3RzLCBidXQgYW55IGV4dGVybmFsIHN1YnNjcmlwdGlvbnMgb3IgZGF0YSBjcmVhdGVkXG4gICAgICogYnkgdGhpcyBtZXRob2QgbXVzdCBiZSBjbGVhbmVkIHVwIGluIGBjb21wb25lbnRXaWxsVW5tb3VudGAuXG4gICAgICpcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnRXaWxsTW91bnQ6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkIGFuZCBoYXMgYSBET00gcmVwcmVzZW50YXRpb24uXG4gICAgICogSG93ZXZlciwgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIERPTSBub2RlIGlzIGluIHRoZSBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIG9wZXJhdGUgb24gdGhlIERPTSB3aGVuIHRoZSBjb21wb25lbnQgaGFzXG4gICAgICogYmVlbiBtb3VudGVkIChpbml0aWFsaXplZCBhbmQgcmVuZGVyZWQpIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcm9vdE5vZGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBjb21wb25lbnQuXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50RGlkTW91bnQ6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIGJlZm9yZSB0aGUgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wcy5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHJlYWN0IHRvIGEgcHJvcCB0cmFuc2l0aW9uIGJ5IHVwZGF0aW5nIHRoZVxuICAgICAqIHN0YXRlIHVzaW5nIGB0aGlzLnNldFN0YXRlYC4gQ3VycmVudCBwcm9wcyBhcmUgYWNjZXNzZWQgdmlhIGB0aGlzLnByb3BzYC5cbiAgICAgKlxuICAgICAqICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgICAqICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgKiAgICAgICBsaWtlc0luY3JlYXNpbmc6IG5leHRQcm9wcy5saWtlQ291bnQgPiB0aGlzLnByb3BzLmxpa2VDb3VudFxuICAgICAqICAgICB9KTtcbiAgICAgKiAgIH1cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgYGNvbXBvbmVudFdpbGxSZWNlaXZlU3RhdGVgLiBBbiBpbmNvbWluZyBwcm9wXG4gICAgICogdHJhbnNpdGlvbiBtYXkgY2F1c2UgYSBzdGF0ZSBjaGFuZ2UsIGJ1dCB0aGUgb3Bwb3NpdGUgaXMgbm90IHRydWUuIElmIHlvdVxuICAgICAqIG5lZWQgaXQsIHlvdSBhcmUgcHJvYmFibHkgbG9va2luZyBmb3IgYGNvbXBvbmVudFdpbGxVcGRhdGVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoaWxlIGRlY2lkaW5nIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHVwZGF0ZWQgYXMgYSByZXN1bHQgb2ZcbiAgICAgKiByZWNlaXZpbmcgbmV3IHByb3BzLCBzdGF0ZSBhbmQvb3IgY29udGV4dC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGByZXR1cm4gZmFsc2VgIHdoZW4geW91J3JlIGNlcnRhaW4gdGhhdCB0aGVcbiAgICAgKiB0cmFuc2l0aW9uIHRvIHRoZSBuZXcgcHJvcHMvc3RhdGUvY29udGV4dCB3aWxsIG5vdCByZXF1aXJlIGEgY29tcG9uZW50XG4gICAgICogdXBkYXRlLlxuICAgICAqXG4gICAgICogICBzaG91bGRDb21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCkge1xuICAgICAqICAgICByZXR1cm4gIWVxdWFsKG5leHRQcm9wcywgdGhpcy5wcm9wcykgfHxcbiAgICAgKiAgICAgICAhZXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKSB8fFxuICAgICAqICAgICAgICFlcXVhbChuZXh0Q29udGV4dCwgdGhpcy5jb250ZXh0KTtcbiAgICAgKiAgIH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIHVwZGF0ZS5cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBzaG91bGRDb21wb25lbnRVcGRhdGU6ICdERUZJTkVfT05DRScsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhYm91dCB0byB1cGRhdGUgZHVlIHRvIGEgdHJhbnNpdGlvbiBmcm9tXG4gICAgICogYHRoaXMucHJvcHNgLCBgdGhpcy5zdGF0ZWAgYW5kIGB0aGlzLmNvbnRleHRgIHRvIGBuZXh0UHJvcHNgLCBgbmV4dFN0YXRlYFxuICAgICAqIGFuZCBgbmV4dENvbnRleHRgLlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gcGVyZm9ybSBwcmVwYXJhdGlvbiBiZWZvcmUgYW4gdXBkYXRlIG9jY3Vycy5cbiAgICAgKlxuICAgICAqIE5PVEU6IFlvdSAqKmNhbm5vdCoqIHVzZSBgdGhpcy5zZXRTdGF0ZSgpYCBpbiB0aGlzIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50V2lsbFVwZGF0ZTogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50J3MgRE9NIHJlcHJlc2VudGF0aW9uIGhhcyBiZWVuIHVwZGF0ZWQuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuICAgICAqIGJlZW4gdXBkYXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2UHJvcHNcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IHByZXZTdGF0ZVxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gcHJldkNvbnRleHRcbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudERpZFVwZGF0ZTogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIGJlIHJlbW92ZWQgZnJvbSBpdHMgcGFyZW50IGFuZCBoYXZlXG4gICAgICogaXRzIERPTSByZXByZXNlbnRhdGlvbiBkZXN0cm95ZWQuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBkZWFsbG9jYXRlIGFueSBleHRlcm5hbCByZXNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGVyZSBpcyBubyBgY29tcG9uZW50RGlkVW5tb3VudGAgc2luY2UgeW91ciBjb21wb25lbnQgd2lsbCBoYXZlIGJlZW5cbiAgICAgKiBkZXN0cm95ZWQgYnkgdGhhdCBwb2ludC5cbiAgICAgKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZW1lbnQgZm9yIChkZXByZWNhdGVkKSBgY29tcG9uZW50V2lsbE1vdW50YC5cbiAgICAgKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQ6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlbWVudCBmb3IgKGRlcHJlY2F0ZWQpIGBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzYC5cbiAgICAgKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZW1lbnQgZm9yIChkZXByZWNhdGVkKSBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZTogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8vID09PT0gQWR2YW5jZWQgbWV0aG9kcyA9PT09XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjb21wb25lbnQncyBjdXJyZW50bHkgbW91bnRlZCBET00gcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGlzIGltcGxlbWVudHMgUmVhY3QncyByZW5kZXJpbmcgYW5kIHJlY29uY2lsaWF0aW9uIGFsZ29yaXRobS5cbiAgICAgKiBTb3BoaXN0aWNhdGVkIGNsaWVudHMgbWF5IHdpc2ggdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAb3ZlcnJpZGFibGVcbiAgICAgKi9cbiAgICB1cGRhdGVDb21wb25lbnQ6ICdPVkVSUklERV9CQVNFJ1xuICB9O1xuXG4gIC8qKlxuICAgKiBTaW1pbGFyIHRvIFJlYWN0Q2xhc3NJbnRlcmZhY2UgYnV0IGZvciBzdGF0aWMgbWV0aG9kcy5cbiAgICovXG4gIHZhciBSZWFjdENsYXNzU3RhdGljSW50ZXJmYWNlID0ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGludm9rZWQgYWZ0ZXIgYSBjb21wb25lbnQgaXMgaW5zdGFudGlhdGVkIGFuZCB3aGVuIGl0XG4gICAgICogcmVjZWl2ZXMgbmV3IHByb3BzLiBSZXR1cm4gYW4gb2JqZWN0IHRvIHVwZGF0ZSBzdGF0ZSBpbiByZXNwb25zZSB0b1xuICAgICAqIHByb3AgY2hhbmdlcy4gUmV0dXJuIG51bGwgdG8gaW5kaWNhdGUgbm8gY2hhbmdlIHRvIHN0YXRlLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHJldHVybmVkLCBpdHMga2V5cyB3aWxsIGJlIG1lcmdlZCBpbnRvIHRoZSBleGlzdGluZyBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge29iamVjdCB8fCBudWxsfVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogJ0RFRklORV9NQU5ZX01FUkdFRCdcbiAgfTtcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGNsYXNzIHNwZWNpZmljYXRpb24ga2V5cyB0byBzcGVjaWFsIHByb2Nlc3NpbmcgZnVuY3Rpb25zLlxuICAgKlxuICAgKiBBbHRob3VnaCB0aGVzZSBhcmUgZGVjbGFyZWQgbGlrZSBpbnN0YW5jZSBwcm9wZXJ0aWVzIGluIHRoZSBzcGVjaWZpY2F0aW9uXG4gICAqIHdoZW4gZGVmaW5pbmcgY2xhc3NlcyB1c2luZyBgUmVhY3QuY3JlYXRlQ2xhc3NgLCB0aGV5IGFyZSBhY3R1YWxseSBzdGF0aWNcbiAgICogYW5kIGFyZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRoZSBwcm90b3R5cGUuIERlc3BpdGVcbiAgICogYmVpbmcgc3RhdGljLCB0aGV5IG11c3QgYmUgZGVmaW5lZCBvdXRzaWRlIG9mIHRoZSBcInN0YXRpY3NcIiBrZXkgdW5kZXJcbiAgICogd2hpY2ggYWxsIG90aGVyIHN0YXRpYyBtZXRob2RzIGFyZSBkZWZpbmVkLlxuICAgKi9cbiAgdmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcbiAgICBkaXNwbGF5TmFtZTogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGRpc3BsYXlOYW1lKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIH0sXG4gICAgbWl4aW5zOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgbWl4aW5zKSB7XG4gICAgICBpZiAobWl4aW5zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIG1peGluc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMsICdjaGlsZENvbnRleHQnKTtcbiAgICAgIH1cbiAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID0gX2Fzc2lnbihcbiAgICAgICAge30sXG4gICAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgICBjaGlsZENvbnRleHRUeXBlc1xuICAgICAgKTtcbiAgICB9LFxuICAgIGNvbnRleHRUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGNvbnRleHRUeXBlcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMsICdjb250ZXh0Jyk7XG4gICAgICB9XG4gICAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMgPSBfYXNzaWduKFxuICAgICAgICB7fSxcbiAgICAgICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLFxuICAgICAgICBjb250ZXh0VHlwZXNcbiAgICAgICk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBTcGVjaWFsIGNhc2UgZ2V0RGVmYXVsdFByb3BzIHdoaWNoIHNob3VsZCBtb3ZlIGludG8gc3RhdGljcyBidXQgcmVxdWlyZXNcbiAgICAgKiBhdXRvbWF0aWMgbWVyZ2luZy5cbiAgICAgKi9cbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBnZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oXG4gICAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzLFxuICAgICAgICAgIGdldERlZmF1bHRQcm9wc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvcFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIHByb3BUeXBlcywgJ3Byb3AnKTtcbiAgICAgIH1cbiAgICAgIENvbnN0cnVjdG9yLnByb3BUeXBlcyA9IF9hc3NpZ24oe30sIENvbnN0cnVjdG9yLnByb3BUeXBlcywgcHJvcFR5cGVzKTtcbiAgICB9LFxuICAgIHN0YXRpY3M6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgICBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcyk7XG4gICAgfSxcbiAgICBhdXRvYmluZDogZnVuY3Rpb24oKSB7fVxuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiB0eXBlRGVmKSB7XG4gICAgICBpZiAodHlwZURlZi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgLy8gdXNlIGEgd2FybmluZyBpbnN0ZWFkIG9mIGFuIF9pbnZhcmlhbnQgc28gY29tcG9uZW50c1xuICAgICAgICAvLyBkb24ndCBzaG93IHVwIGluIHByb2QgYnV0IG9ubHkgaW4gX19ERVZfX1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgICB0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICtcbiAgICAgICAgICAgICAgJ1JlYWN0LlByb3BUeXBlcy4nLFxuICAgICAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q2xhc3MnLFxuICAgICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLFxuICAgICAgICAgICAgcHJvcE5hbWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKSB7XG4gICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpXG4gICAgICA/IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV1cbiAgICAgIDogbnVsbDtcblxuICAgIC8vIERpc2FsbG93IG92ZXJyaWRpbmcgb2YgYmFzZSBjbGFzcyBtZXRob2RzIHVubGVzcyBleHBsaWNpdGx5IGFsbG93ZWQuXG4gICAgaWYgKFJlYWN0Q2xhc3NNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgX2ludmFyaWFudChcbiAgICAgICAgc3BlY1BvbGljeSA9PT0gJ09WRVJSSURFX0JBU0UnLFxuICAgICAgICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIG92ZXJyaWRlICcgK1xuICAgICAgICAgICdgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyAnICtcbiAgICAgICAgICAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRGlzYWxsb3cgZGVmaW5pbmcgbWV0aG9kcyBtb3JlIHRoYW4gb25jZSB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICBfaW52YXJpYW50KFxuICAgICAgICBzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTlknIHx8IHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuICAgICAgICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICtcbiAgICAgICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlICcgK1xuICAgICAgICAgICd0byBhIG1peGluLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1peGluIGhlbHBlciB3aGljaCBoYW5kbGVzIHBvbGljeSB2YWxpZGF0aW9uIGFuZCByZXNlcnZlZFxuICAgKiBzcGVjaWZpY2F0aW9uIGtleXMgd2hlbiBidWlsZGluZyBSZWFjdCBjbGFzc2VzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciB0eXBlb2ZTcGVjID0gdHlwZW9mIHNwZWM7XG4gICAgICAgIHZhciBpc01peGluVmFsaWQgPSB0eXBlb2ZTcGVjID09PSAnb2JqZWN0JyAmJiBzcGVjICE9PSBudWxsO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgIGlzTWl4aW5WYWxpZCxcbiAgICAgICAgICAgIFwiJXM6IFlvdSdyZSBhdHRlbXB0aW5nIHRvIGluY2x1ZGUgYSBtaXhpbiB0aGF0IGlzIGVpdGhlciBudWxsIFwiICtcbiAgICAgICAgICAgICAgJ29yIG5vdCBhbiBvYmplY3QuIENoZWNrIHRoZSBtaXhpbnMgaW5jbHVkZWQgYnkgdGhlIGNvbXBvbmVudCwgJyArXG4gICAgICAgICAgICAgICdhcyB3ZWxsIGFzIGFueSBtaXhpbnMgdGhleSBpbmNsdWRlIHRoZW1zZWx2ZXMuICcgK1xuICAgICAgICAgICAgICAnRXhwZWN0ZWQgb2JqZWN0IGJ1dCBnb3QgJXMuJyxcbiAgICAgICAgICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJyxcbiAgICAgICAgICAgIHNwZWMgPT09IG51bGwgPyBudWxsIDogdHlwZW9mU3BlY1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9pbnZhcmlhbnQoXG4gICAgICB0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAgIFwiUmVhY3RDbGFzczogWW91J3JlIGF0dGVtcHRpbmcgdG8gXCIgK1xuICAgICAgICAndXNlIGEgY29tcG9uZW50IGNsYXNzIG9yIGZ1bmN0aW9uIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgJyArXG4gICAgICAgICdyZWd1bGFyIG9iamVjdC4nXG4gICAgKTtcbiAgICBfaW52YXJpYW50KFxuICAgICAgIWlzVmFsaWRFbGVtZW50KHNwZWMpLFxuICAgICAgXCJSZWFjdENsYXNzOiBZb3UncmUgYXR0ZW1wdGluZyB0byBcIiArXG4gICAgICAgICd1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nXG4gICAgKTtcblxuICAgIHZhciBwcm90byA9IENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICB2YXIgYXV0b0JpbmRQYWlycyA9IHByb3RvLl9fcmVhY3RBdXRvQmluZFBhaXJzO1xuXG4gICAgLy8gQnkgaGFuZGxpbmcgbWl4aW5zIGJlZm9yZSBhbnkgb3RoZXIgcHJvcGVydGllcywgd2UgZW5zdXJlIHRoZSBzYW1lXG4gICAgLy8gY2hhaW5pbmcgb3JkZXIgaXMgYXBwbGllZCB0byBtZXRob2RzIHdpdGggREVGSU5FX01BTlkgcG9saWN5LCB3aGV0aGVyXG4gICAgLy8gbWl4aW5zIGFyZSBsaXN0ZWQgYmVmb3JlIG9yIGFmdGVyIHRoZXNlIG1ldGhvZHMgaW4gdGhlIHNwZWMuXG4gICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICAgIFJFU0VSVkVEX1NQRUNfS0VZUy5taXhpbnMoQ29uc3RydWN0b3IsIHNwZWMubWl4aW5zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHNwZWMpIHtcbiAgICAgIGlmICghc3BlYy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUgPT09IE1JWElOU19LRVkpIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWQgbWl4aW5zIGluIGEgc3BlY2lhbCBjYXNlIGFib3ZlLlxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BlcnR5ID0gc3BlY1tuYW1lXTtcbiAgICAgIHZhciBpc0FscmVhZHlEZWZpbmVkID0gcHJvdG8uaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKGlzQWxyZWFkeURlZmluZWQsIG5hbWUpO1xuXG4gICAgICBpZiAoUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIFJFU0VSVkVEX1NQRUNfS0VZU1tuYW1lXShDb25zdHJ1Y3RvciwgcHJvcGVydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2V0dXAgbWV0aG9kcyBvbiBwcm90b3R5cGU6XG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbWVtYmVyIG1ldGhvZHMgc2hvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGJvdW5kOlxuICAgICAgICAvLyAxLiBFeHBlY3RlZCBSZWFjdENsYXNzIG1ldGhvZHMgKGluIHRoZSBcImludGVyZmFjZVwiKS5cbiAgICAgICAgLy8gMi4gT3ZlcnJpZGRlbiBtZXRob2RzICh0aGF0IHdlcmUgbWl4ZWQgaW4pLlxuICAgICAgICB2YXIgaXNSZWFjdENsYXNzTWV0aG9kID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIHZhciBzaG91bGRBdXRvQmluZCA9XG4gICAgICAgICAgaXNGdW5jdGlvbiAmJlxuICAgICAgICAgICFpc1JlYWN0Q2xhc3NNZXRob2QgJiZcbiAgICAgICAgICAhaXNBbHJlYWR5RGVmaW5lZCAmJlxuICAgICAgICAgIHNwZWMuYXV0b2JpbmQgIT09IGZhbHNlO1xuXG4gICAgICAgIGlmIChzaG91bGRBdXRvQmluZCkge1xuICAgICAgICAgIGF1dG9CaW5kUGFpcnMucHVzaChuYW1lLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNBbHJlYWR5RGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdO1xuXG4gICAgICAgICAgICAvLyBUaGVzZSBjYXNlcyBzaG91bGQgYWxyZWFkeSBiZSBjYXVnaHQgYnkgdmFsaWRhdGVNZXRob2RPdmVycmlkZS5cbiAgICAgICAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICAgICAgIGlzUmVhY3RDbGFzc01ldGhvZCAmJlxuICAgICAgICAgICAgICAgIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJyB8fFxuICAgICAgICAgICAgICAgICAgc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZJyksXG4gICAgICAgICAgICAgICdSZWFjdENsYXNzOiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgJyArXG4gICAgICAgICAgICAgICAgJ3doZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy4nLFxuICAgICAgICAgICAgICBzcGVjUG9saWN5LFxuICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBGb3IgbWV0aG9kcyB3aGljaCBhcmUgZGVmaW5lZCBtb3JlIHRoYW4gb25jZSwgY2FsbCB0aGUgZXhpc3RpbmdcbiAgICAgICAgICAgIC8vIG1ldGhvZHMgYmVmb3JlIGNhbGxpbmcgdGhlIG5ldyBwcm9wZXJ0eSwgbWVyZ2luZyBpZiBhcHByb3ByaWF0ZS5cbiAgICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJykge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWScpIHtcbiAgICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIC8vIEFkZCB2ZXJib3NlIGRpc3BsYXlOYW1lIHRvIHRoZSBmdW5jdGlvbiwgd2hpY2ggaGVscHMgd2hlbiBsb29raW5nXG4gICAgICAgICAgICAgIC8vIGF0IHByb2ZpbGluZyB0b29scy5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJyAmJiBzcGVjLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgICAgICAgcHJvdG9bbmFtZV0uZGlzcGxheU5hbWUgPSBzcGVjLmRpc3BsYXlOYW1lICsgJ18nICsgbmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgaWYgKCFzdGF0aWNzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdGF0aWNzKSB7XG4gICAgICB2YXIgcHJvcGVydHkgPSBzdGF0aWNzW25hbWVdO1xuICAgICAgaWYgKCFzdGF0aWNzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNSZXNlcnZlZCA9IG5hbWUgaW4gUkVTRVJWRURfU1BFQ19LRVlTO1xuICAgICAgX2ludmFyaWFudChcbiAgICAgICAgIWlzUmVzZXJ2ZWQsXG4gICAgICAgICdSZWFjdENsYXNzOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lIGEgcmVzZXJ2ZWQgJyArXG4gICAgICAgICAgJ3Byb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCAnICtcbiAgICAgICAgICAnYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSAnICtcbiAgICAgICAgICAnY29uc3RydWN0b3IuJyxcbiAgICAgICAgbmFtZVxuICAgICAgKTtcblxuICAgICAgdmFyIGlzQWxyZWFkeURlZmluZWQgPSBuYW1lIGluIENvbnN0cnVjdG9yO1xuICAgICAgaWYgKGlzQWxyZWFkeURlZmluZWQpIHtcbiAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzU3RhdGljSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpXG4gICAgICAgICAgPyBSZWFjdENsYXNzU3RhdGljSW50ZXJmYWNlW25hbWVdXG4gICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICAgc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZX01FUkdFRCcsXG4gICAgICAgICAgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArXG4gICAgICAgICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgJyArXG4gICAgICAgICAgICAnZHVlIHRvIGEgbWl4aW4uJyxcbiAgICAgICAgICBuYW1lXG4gICAgICAgICk7XG5cbiAgICAgICAgQ29uc3RydWN0b3JbbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihDb25zdHJ1Y3RvcltuYW1lXSwgcHJvcGVydHkpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgQ29uc3RydWN0b3JbbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdHdvIG9iamVjdHMsIGJ1dCB0aHJvdyBpZiBib3RoIGNvbnRhaW4gdGhlIHNhbWUga2V5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb25lIFRoZSBmaXJzdCBvYmplY3QsIHdoaWNoIGlzIG11dGF0ZWQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0d28gVGhlIHNlY29uZCBvYmplY3RcbiAgICogQHJldHVybiB7b2JqZWN0fSBvbmUgYWZ0ZXIgaXQgaGFzIGJlZW4gbXV0YXRlZCB0byBjb250YWluIGV2ZXJ5dGhpbmcgaW4gdHdvLlxuICAgKi9cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhvbmUsIHR3bykge1xuICAgIF9pbnZhcmlhbnQoXG4gICAgICBvbmUgJiYgdHdvICYmIHR5cGVvZiBvbmUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0d28gPT09ICdvYmplY3QnLFxuICAgICAgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLidcbiAgICApO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHR3bykge1xuICAgICAgaWYgKHR3by5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICAgb25lW2tleV0gPT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAnbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiAnICtcbiAgICAgICAgICAgICdUcmllZCB0byBtZXJnZSB0d28gb2JqZWN0cyB3aXRoIHRoZSBzYW1lIGtleTogYCVzYC4gVGhpcyBjb25mbGljdCAnICtcbiAgICAgICAgICAgICdtYXkgYmUgZHVlIHRvIGEgbWl4aW47IGluIHBhcnRpY3VsYXIsIHRoaXMgbWF5IGJlIGNhdXNlZCBieSB0d28gJyArXG4gICAgICAgICAgICAnZ2V0SW5pdGlhbFN0YXRlKCkgb3IgZ2V0RGVmYXVsdFByb3BzKCkgbWV0aG9kcyByZXR1cm5pbmcgb2JqZWN0cyAnICtcbiAgICAgICAgICAgICd3aXRoIGNsYXNoaW5nIGtleXMuJyxcbiAgICAgICAgICBrZXlcbiAgICAgICAgKTtcbiAgICAgICAgb25lW2tleV0gPSB0d29ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9uZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIG1lcmdlcyB0aGVpciByZXR1cm4gdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZFJlc3VsdCgpIHtcbiAgICAgIHZhciBhID0gb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgICAgdmFyIGMgPSB7fTtcbiAgICAgIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYywgYSk7XG4gICAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGIpO1xuICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIGlnbm9yZXMgdGhlaXIgcmV0dXJuIHZhbGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbmUsIHR3bykge1xuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQmluZHMgYSBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWV0aG9kIHRvIGJlIGJvdW5kLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGJvdW5kIG1ldGhvZC5cbiAgICovXG4gIGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICAgIHZhciBib3VuZE1ldGhvZCA9IG1ldGhvZC5iaW5kKGNvbXBvbmVudCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBudWxsO1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgICB2YXIgX2JpbmQgPSBib3VuZE1ldGhvZC5iaW5kO1xuICAgICAgYm91bmRNZXRob2QuYmluZCA9IGZ1bmN0aW9uKG5ld1RoaXMpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLFxuICAgICAgICAgICAgX2tleSA9IDE7XG4gICAgICAgICAgX2tleSA8IF9sZW47XG4gICAgICAgICAgX2tleSsrXG4gICAgICAgICkge1xuICAgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXNlciBpcyB0cnlpbmcgdG8gYmluZCgpIGFuIGF1dG9ib3VuZCBtZXRob2Q7IHdlIGVmZmVjdGl2ZWx5IHdpbGxcbiAgICAgICAgLy8gaWdub3JlIHRoZSB2YWx1ZSBvZiBcInRoaXNcIiB0aGF0IHRoZSB1c2VyIGlzIHRyeWluZyB0byB1c2UsIHNvXG4gICAgICAgIC8vIGxldCdzIHdhcm4uXG4gICAgICAgIGlmIChuZXdUaGlzICE9PSBjb21wb25lbnQgJiYgbmV3VGhpcyAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgK1xuICAgICAgICAgICAgICAgICdjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAlcycsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgJ2JpbmQoKTogWW91IGFyZSBiaW5kaW5nIGEgY29tcG9uZW50IG1ldGhvZCB0byB0aGUgY29tcG9uZW50LiAnICtcbiAgICAgICAgICAgICAgICAnUmVhY3QgZG9lcyB0aGlzIGZvciB5b3UgYXV0b21hdGljYWxseSBpbiBhIGhpZ2gtcGVyZm9ybWFuY2UgJyArXG4gICAgICAgICAgICAgICAgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzJyxcbiAgICAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcbiAgICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcbiAgICAgICAgcmV0dXJuIHJlYm91bmRNZXRob2Q7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYm91bmRNZXRob2Q7XG4gIH1cblxuICAvKipcbiAgICogQmluZHMgYWxsIGF1dG8tYm91bmQgbWV0aG9kcyBpbiBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICAgKi9cbiAgZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kcyhjb21wb25lbnQpIHtcbiAgICB2YXIgcGFpcnMgPSBjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kUGFpcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgdmFyIGF1dG9CaW5kS2V5ID0gcGFpcnNbaV07XG4gICAgICB2YXIgbWV0aG9kID0gcGFpcnNbaSArIDFdO1xuICAgICAgY29tcG9uZW50W2F1dG9CaW5kS2V5XSA9IGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIElzTW91bnRlZFByZU1peGluID0ge1xuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX19pc01vdW50ZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgSXNNb3VudGVkUG9zdE1peGluID0ge1xuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX19pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBtb3JlIHRvIHRoZSBSZWFjdENsYXNzIGJhc2UgY2xhc3MuIFRoZXNlIGFyZSBhbGwgbGVnYWN5IGZlYXR1cmVzIGFuZFxuICAgKiB0aGVyZWZvcmUgbm90IGFscmVhZHkgcGFydCBvZiB0aGUgbW9kZXJuIFJlYWN0Q29tcG9uZW50LlxuICAgKi9cbiAgdmFyIFJlYWN0Q2xhc3NNaXhpbiA9IHtcbiAgICAvKipcbiAgICAgKiBUT0RPOiBUaGlzIHdpbGwgYmUgZGVwcmVjYXRlZCBiZWNhdXNlIHN0YXRlIHNob3VsZCBhbHdheXMga2VlcCBhIGNvbnNpc3RlbnRcbiAgICAgKiB0eXBlIHNpZ25hdHVyZSBhbmQgdGhlIG9ubHkgdXNlIGNhc2UgZm9yIHRoaXMsIGlzIHRvIGF2b2lkIHRoYXQuXG4gICAgICovXG4gICAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbihuZXdTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKHRoaXMsIG5ld1N0YXRlLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQGZpbmFsXG4gICAgICovXG4gICAgaXNNb3VudGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgdGhpcy5fX2RpZFdhcm5Jc01vdW50ZWQsXG4gICAgICAgICAgJyVzOiBpc01vdW50ZWQgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwICcgK1xuICAgICAgICAgICAgJ3N1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gY29tcG9uZW50V2lsbFVubW91bnQgdG8gJyArXG4gICAgICAgICAgICAncHJldmVudCBtZW1vcnkgbGVha3MuJyxcbiAgICAgICAgICAodGhpcy5jb25zdHJ1Y3RvciAmJiB0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lKSB8fFxuICAgICAgICAgICAgdGhpcy5uYW1lIHx8XG4gICAgICAgICAgICAnQ29tcG9uZW50J1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl9fZGlkV2FybklzTW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gISF0aGlzLl9faXNNb3VudGVkO1xuICAgIH1cbiAgfTtcblxuICB2YXIgUmVhY3RDbGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uKCkge307XG4gIF9hc3NpZ24oXG4gICAgUmVhY3RDbGFzc0NvbXBvbmVudC5wcm90b3R5cGUsXG4gICAgUmVhY3RDb21wb25lbnQucHJvdG90eXBlLFxuICAgIFJlYWN0Q2xhc3NNaXhpblxuICApO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY29tcG9zaXRlIGNvbXBvbmVudCBjbGFzcyBnaXZlbiBhIGNsYXNzIHNwZWNpZmljYXRpb24uXG4gICAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jcmVhdGVjbGFzc1xuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3BlYyBDbGFzcyBzcGVjaWZpY2F0aW9uICh3aGljaCBtdXN0IGRlZmluZSBgcmVuZGVyYCkuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBDb21wb25lbnQgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZUNsYXNzKHNwZWMpIHtcbiAgICAvLyBUbyBrZWVwIG91ciB3YXJuaW5ncyBtb3JlIHVuZGVyc3RhbmRhYmxlLCB3ZSdsbCB1c2UgYSBsaXR0bGUgaGFjayBoZXJlIHRvXG4gICAgLy8gZW5zdXJlIHRoYXQgQ29uc3RydWN0b3IubmFtZSAhPT0gJ0NvbnN0cnVjdG9yJy4gVGhpcyBtYWtlcyBzdXJlIHdlIGRvbid0XG4gICAgLy8gdW5uZWNlc3NhcmlseSBpZGVudGlmeSBhIGNsYXNzIHdpdGhvdXQgZGlzcGxheU5hbWUgYXMgJ0NvbnN0cnVjdG9yJy5cbiAgICB2YXIgQ29uc3RydWN0b3IgPSBpZGVudGl0eShmdW5jdGlvbihwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICAgICAgLy8gVGhpcyBjb25zdHJ1Y3RvciBnZXRzIG92ZXJyaWRkZW4gYnkgbW9ja3MuIFRoZSBhcmd1bWVudCBpcyB1c2VkXG4gICAgICAvLyBieSBtb2NrcyB0byBhc3NlcnQgb24gd2hhdCBnZXRzIG1vdW50ZWQuXG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgdGhpcyBpbnN0YW5jZW9mIENvbnN0cnVjdG9yLFxuICAgICAgICAgICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICtcbiAgICAgICAgICAgICdKU1ggaW5zdGVhZC4gU2VlOiBodHRwczovL2ZiLm1lL3JlYWN0LWxlZ2FjeWZhY3RvcnknXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdpcmUgdXAgYXV0by1iaW5kaW5nXG4gICAgICBpZiAodGhpcy5fX3JlYWN0QXV0b0JpbmRQYWlycy5sZW5ndGgpIHtcbiAgICAgICAgYmluZEF1dG9CaW5kTWV0aG9kcyh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAgICAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcblxuICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG5cbiAgICAgIC8vIFJlYWN0Q2xhc3NlcyBkb2Vzbid0IGhhdmUgY29uc3RydWN0b3JzLiBJbnN0ZWFkLCB0aGV5IHVzZSB0aGVcbiAgICAgIC8vIGdldEluaXRpYWxTdGF0ZSBhbmQgY29tcG9uZW50V2lsbE1vdW50IG1ldGhvZHMgZm9yIGluaXRpYWxpemF0aW9uLlxuXG4gICAgICB2YXIgaW5pdGlhbFN0YXRlID0gdGhpcy5nZXRJbml0aWFsU3RhdGUgPyB0aGlzLmdldEluaXRpYWxTdGF0ZSgpIDogbnVsbDtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgaW5pdGlhbFN0YXRlID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICB0aGlzLmdldEluaXRpYWxTdGF0ZS5faXNNb2NrRnVuY3Rpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBiYWQgcHJhY3RpY2UuIENvbnNpZGVyIHdhcm5pbmcgaGVyZSBhbmRcbiAgICAgICAgICAvLyBkZXByZWNhdGluZyB0aGlzIGNvbnZlbmllbmNlLlxuICAgICAgICAgIGluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgIHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGluaXRpYWxTdGF0ZSksXG4gICAgICAgICclcy5nZXRJbml0aWFsU3RhdGUoKTogbXVzdCByZXR1cm4gYW4gb2JqZWN0IG9yIG51bGwnLFxuICAgICAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnXG4gICAgICApO1xuXG4gICAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIH0pO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBSZWFjdENsYXNzQ29tcG9uZW50KCk7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLl9fcmVhY3RBdXRvQmluZFBhaXJzID0gW107XG5cbiAgICBpbmplY3RlZE1peGlucy5mb3JFYWNoKG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCwgQ29uc3RydWN0b3IpKTtcblxuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBJc01vdW50ZWRQcmVNaXhpbik7XG4gICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpO1xuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBJc01vdW50ZWRQb3N0TWl4aW4pO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgZGVmYXVsdFByb3BzIHByb3BlcnR5IGFmdGVyIGFsbCBtaXhpbnMgaGF2ZSBiZWVuIG1lcmdlZC5cbiAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kZWZhdWx0UHJvcHMgPSBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMoKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gVGhpcyBpcyBhIHRhZyB0byBpbmRpY2F0ZSB0aGF0IHRoZSB1c2Ugb2YgdGhlc2UgbWV0aG9kIG5hbWVzIGlzIG9rLFxuICAgICAgLy8gc2luY2UgaXQncyB1c2VkIHdpdGggY3JlYXRlQ2xhc3MuIElmIGl0J3Mgbm90LCB0aGVuIGl0J3MgbGlrZWx5IGFcbiAgICAgIC8vIG1pc3Rha2Ugc28gd2UnbGwgd2FybiB5b3UgdG8gdXNlIHRoZSBzdGF0aWMgcHJvcGVydHksIHByb3BlcnR5XG4gICAgICAvLyBpbml0aWFsaXplciBvciBjb25zdHJ1Y3RvciByZXNwZWN0aXZlbHkuXG4gICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUpIHtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgIF9pbnZhcmlhbnQoXG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyLFxuICAgICAgJ2NyZWF0ZUNsYXNzKC4uLik6IENsYXNzIHNwZWNpZmljYXRpb24gbXVzdCBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuJ1xuICAgICk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRTaG91bGRVcGRhdGUsXG4gICAgICAgICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgK1xuICAgICAgICAgICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICtcbiAgICAgICAgICAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgK1xuICAgICAgICAgICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLFxuICAgICAgICBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCdcbiAgICAgICk7XG4gICAgICB3YXJuaW5nKFxuICAgICAgICAhQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMsXG4gICAgICAgICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgK1xuICAgICAgICAgICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/JyxcbiAgICAgICAgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnXG4gICAgICApO1xuICAgICAgd2FybmluZyhcbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyxcbiAgICAgICAgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMoKS4gJyArXG4gICAgICAgICAgJ0RpZCB5b3UgbWVhbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsXG4gICAgICAgIHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBSZWR1Y2UgdGltZSBzcGVudCBkb2luZyBsb29rdXBzIGJ5IHNldHRpbmcgdGhlc2Ugb24gdGhlIHByb3RvdHlwZS5cbiAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIFJlYWN0Q2xhc3NJbnRlcmZhY2UpIHtcbiAgICAgIGlmICghQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG5cdGNyZWF0ZUNsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyksXG5cdERheXNWaWV3ID0gcmVxdWlyZSgnLi9EYXlzVmlldycpLFxuXHRNb250aHNWaWV3ID0gcmVxdWlyZSgnLi9Nb250aHNWaWV3JyksXG5cdFllYXJzVmlldyA9IHJlcXVpcmUoJy4vWWVhcnNWaWV3JyksXG5cdFRpbWVWaWV3ID0gcmVxdWlyZSgnLi9UaW1lVmlldycpXG5cdDtcblxudmFyIENhbGVuZGFyQ29udGFpbmVyID0gY3JlYXRlQ2xhc3Moe1xuXHR2aWV3Q29tcG9uZW50czoge1xuXHRcdGRheXM6IERheXNWaWV3LFxuXHRcdG1vbnRoczogTW9udGhzVmlldyxcblx0XHR5ZWFyczogWWVhcnNWaWV3LFxuXHRcdHRpbWU6IFRpbWVWaWV3XG5cdH0sXG5cblx0cmVuZGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCggdGhpcy52aWV3Q29tcG9uZW50c1sgdGhpcy5wcm9wcy52aWV3IF0sIHRoaXMucHJvcHMudmlld1Byb3BzICk7XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbGVuZGFyQ29udGFpbmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuXHRjcmVhdGVDbGFzcyA9IHJlcXVpcmUoJ2NyZWF0ZS1yZWFjdC1jbGFzcycpLFxuXHRtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKSxcblx0b25DbGlja091dHNpZGUgPSByZXF1aXJlKCdyZWFjdC1vbmNsaWNrb3V0c2lkZScpLmRlZmF1bHRcblx0O1xuXG52YXIgRGF0ZVRpbWVQaWNrZXJEYXlzID0gb25DbGlja091dHNpZGUoIGNyZWF0ZUNsYXNzKHtcblx0cmVuZGVyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZm9vdGVyID0gdGhpcy5yZW5kZXJGb290ZXIoKSxcblx0XHRcdGRhdGUgPSB0aGlzLnByb3BzLnZpZXdEYXRlLFxuXHRcdFx0bG9jYWxlID0gZGF0ZS5sb2NhbGVEYXRhKCksXG5cdFx0XHR0YWJsZUNoaWxkcmVuXG5cdFx0XHQ7XG5cblx0XHR0YWJsZUNoaWxkcmVuID0gW1xuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgndGhlYWQnLCB7IGtleTogJ3RoJyB9LCBbXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RyJywgeyBrZXk6ICdoJyB9LCBbXG5cdFx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgndGgnLCB7IGtleTogJ3AnLCBjbGFzc05hbWU6ICdyZHRQcmV2Jywgb25DbGljazogdGhpcy5wcm9wcy5zdWJ0cmFjdFRpbWUoIDEsICdtb250aHMnICl9LCBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywge30sICfigLknICkpLFxuXHRcdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RoJywgeyBrZXk6ICdzJywgY2xhc3NOYW1lOiAncmR0U3dpdGNoJywgb25DbGljazogdGhpcy5wcm9wcy5zaG93VmlldyggJ21vbnRocycgKSwgY29sU3BhbjogNSwgJ2RhdGEtdmFsdWUnOiB0aGlzLnByb3BzLnZpZXdEYXRlLm1vbnRoKCkgfSwgbG9jYWxlLm1vbnRocyggZGF0ZSApICsgJyAnICsgZGF0ZS55ZWFyKCkgKSxcblx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCd0aCcsIHsga2V5OiAnbicsIGNsYXNzTmFtZTogJ3JkdE5leHQnLCBvbkNsaWNrOiB0aGlzLnByb3BzLmFkZFRpbWUoIDEsICdtb250aHMnICl9LCBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywge30sICfigLonICkpXG5cdFx0XHRcdF0pLFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCd0cicsIHsga2V5OiAnZCd9LCB0aGlzLmdldERheXNPZldlZWsoIGxvY2FsZSApLm1hcCggZnVuY3Rpb24oIGRheSwgaW5kZXggKSB7IHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCd0aCcsIHsga2V5OiBkYXkgKyBpbmRleCwgY2xhc3NOYW1lOiAnZG93J30sIGRheSApOyB9KSApXG5cdFx0XHRdKSxcblx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5JywgeyBrZXk6ICd0YicgfSwgdGhpcy5yZW5kZXJEYXlzKCkpXG5cdFx0XTtcblxuXHRcdGlmICggZm9vdGVyIClcblx0XHRcdHRhYmxlQ2hpbGRyZW4ucHVzaCggZm9vdGVyICk7XG5cblx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdyZHREYXlzJyB9LFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgndGFibGUnLCB7fSwgdGFibGVDaGlsZHJlbiApXG5cdFx0KTtcblx0fSxcblxuXHQvKipcblx0ICogR2V0IGEgbGlzdCBvZiB0aGUgZGF5cyBvZiB0aGUgd2Vla1xuXHQgKiBkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgbG9jYWxlXG5cdCAqIEByZXR1cm4ge2FycmF5fSBBIGxpc3Qgd2l0aCB0aGUgc2hvcnRuYW1lIG9mIHRoZSBkYXlzXG5cdCAqL1xuXHRnZXREYXlzT2ZXZWVrOiBmdW5jdGlvbiggbG9jYWxlICkge1xuXHRcdHZhciBkYXlzID0gbG9jYWxlLl93ZWVrZGF5c01pbixcblx0XHRcdGZpcnN0ID0gbG9jYWxlLmZpcnN0RGF5T2ZXZWVrKCksXG5cdFx0XHRkb3cgPSBbXSxcblx0XHRcdGkgPSAwXG5cdFx0XHQ7XG5cblx0XHRkYXlzLmZvckVhY2goIGZ1bmN0aW9uKCBkYXkgKSB7XG5cdFx0XHRkb3dbICg3ICsgKCBpKysgKSAtIGZpcnN0KSAlIDcgXSA9IGRheTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBkb3c7XG5cdH0sXG5cblx0cmVuZGVyRGF5czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGRhdGUgPSB0aGlzLnByb3BzLnZpZXdEYXRlLFxuXHRcdFx0c2VsZWN0ZWQgPSB0aGlzLnByb3BzLnNlbGVjdGVkRGF0ZSAmJiB0aGlzLnByb3BzLnNlbGVjdGVkRGF0ZS5jbG9uZSgpLFxuXHRcdFx0cHJldk1vbnRoID0gZGF0ZS5jbG9uZSgpLnN1YnRyYWN0KCAxLCAnbW9udGhzJyApLFxuXHRcdFx0Y3VycmVudFllYXIgPSBkYXRlLnllYXIoKSxcblx0XHRcdGN1cnJlbnRNb250aCA9IGRhdGUubW9udGgoKSxcblx0XHRcdHdlZWtzID0gW10sXG5cdFx0XHRkYXlzID0gW10sXG5cdFx0XHRyZW5kZXJlciA9IHRoaXMucHJvcHMucmVuZGVyRGF5IHx8IHRoaXMucmVuZGVyRGF5LFxuXHRcdFx0aXNWYWxpZCA9IHRoaXMucHJvcHMuaXNWYWxpZERhdGUgfHwgdGhpcy5hbHdheXNWYWxpZERhdGUsXG5cdFx0XHRjbGFzc2VzLCBpc0Rpc2FibGVkLCBkYXlQcm9wcywgY3VycmVudERhdGVcblx0XHRcdDtcblxuXHRcdC8vIEdvIHRvIHRoZSBsYXN0IHdlZWsgb2YgdGhlIHByZXZpb3VzIG1vbnRoXG5cdFx0cHJldk1vbnRoLmRhdGUoIHByZXZNb250aC5kYXlzSW5Nb250aCgpICkuc3RhcnRPZiggJ3dlZWsnICk7XG5cdFx0dmFyIGxhc3REYXkgPSBwcmV2TW9udGguY2xvbmUoKS5hZGQoIDQyLCAnZCcgKTtcblxuXHRcdHdoaWxlICggcHJldk1vbnRoLmlzQmVmb3JlKCBsYXN0RGF5ICkgKSB7XG5cdFx0XHRjbGFzc2VzID0gJ3JkdERheSc7XG5cdFx0XHRjdXJyZW50RGF0ZSA9IHByZXZNb250aC5jbG9uZSgpO1xuXG5cdFx0XHRpZiAoICggcHJldk1vbnRoLnllYXIoKSA9PT0gY3VycmVudFllYXIgJiYgcHJldk1vbnRoLm1vbnRoKCkgPCBjdXJyZW50TW9udGggKSB8fCAoIHByZXZNb250aC55ZWFyKCkgPCBjdXJyZW50WWVhciApIClcblx0XHRcdFx0Y2xhc3NlcyArPSAnIHJkdE9sZCc7XG5cdFx0XHRlbHNlIGlmICggKCBwcmV2TW9udGgueWVhcigpID09PSBjdXJyZW50WWVhciAmJiBwcmV2TW9udGgubW9udGgoKSA+IGN1cnJlbnRNb250aCApIHx8ICggcHJldk1vbnRoLnllYXIoKSA+IGN1cnJlbnRZZWFyICkgKVxuXHRcdFx0XHRjbGFzc2VzICs9ICcgcmR0TmV3JztcblxuXHRcdFx0aWYgKCBzZWxlY3RlZCAmJiBwcmV2TW9udGguaXNTYW1lKCBzZWxlY3RlZCwgJ2RheScgKSApXG5cdFx0XHRcdGNsYXNzZXMgKz0gJyByZHRBY3RpdmUnO1xuXG5cdFx0XHRpZiAoIHByZXZNb250aC5pc1NhbWUoIG1vbWVudCgpLCAnZGF5JyApIClcblx0XHRcdFx0Y2xhc3NlcyArPSAnIHJkdFRvZGF5JztcblxuXHRcdFx0aXNEaXNhYmxlZCA9ICFpc1ZhbGlkKCBjdXJyZW50RGF0ZSwgc2VsZWN0ZWQgKTtcblx0XHRcdGlmICggaXNEaXNhYmxlZCApXG5cdFx0XHRcdGNsYXNzZXMgKz0gJyByZHREaXNhYmxlZCc7XG5cblx0XHRcdGRheVByb3BzID0ge1xuXHRcdFx0XHRrZXk6IHByZXZNb250aC5mb3JtYXQoICdNX0QnICksXG5cdFx0XHRcdCdkYXRhLXZhbHVlJzogcHJldk1vbnRoLmRhdGUoKSxcblx0XHRcdFx0Y2xhc3NOYW1lOiBjbGFzc2VzXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoICFpc0Rpc2FibGVkIClcblx0XHRcdFx0ZGF5UHJvcHMub25DbGljayA9IHRoaXMudXBkYXRlU2VsZWN0ZWREYXRlO1xuXG5cdFx0XHRkYXlzLnB1c2goIHJlbmRlcmVyKCBkYXlQcm9wcywgY3VycmVudERhdGUsIHNlbGVjdGVkICkgKTtcblxuXHRcdFx0aWYgKCBkYXlzLmxlbmd0aCA9PT0gNyApIHtcblx0XHRcdFx0d2Vla3MucHVzaCggUmVhY3QuY3JlYXRlRWxlbWVudCgndHInLCB7IGtleTogcHJldk1vbnRoLmZvcm1hdCggJ01fRCcgKX0sIGRheXMgKSApO1xuXHRcdFx0XHRkYXlzID0gW107XG5cdFx0XHR9XG5cblx0XHRcdHByZXZNb250aC5hZGQoIDEsICdkJyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB3ZWVrcztcblx0fSxcblxuXHR1cGRhdGVTZWxlY3RlZERhdGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR0aGlzLnByb3BzLnVwZGF0ZVNlbGVjdGVkRGF0ZSggZXZlbnQsIHRydWUgKTtcblx0fSxcblxuXHRyZW5kZXJEYXk6IGZ1bmN0aW9uKCBwcm9wcywgY3VycmVudERhdGUgKSB7XG5cdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RkJywgIHByb3BzLCBjdXJyZW50RGF0ZS5kYXRlKCkgKTtcblx0fSxcblxuXHRyZW5kZXJGb290ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXMucHJvcHMudGltZUZvcm1hdCApXG5cdFx0XHRyZXR1cm4gJyc7XG5cblx0XHR2YXIgZGF0ZSA9IHRoaXMucHJvcHMuc2VsZWN0ZWREYXRlIHx8IHRoaXMucHJvcHMudmlld0RhdGU7XG5cblx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgndGZvb3QnLCB7IGtleTogJ3RmJ30sXG5cdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCd0cicsIHt9LFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCd0ZCcsIHsgb25DbGljazogdGhpcy5wcm9wcy5zaG93VmlldyggJ3RpbWUnICksIGNvbFNwYW46IDcsIGNsYXNzTmFtZTogJ3JkdFRpbWVUb2dnbGUnIH0sIGRhdGUuZm9ybWF0KCB0aGlzLnByb3BzLnRpbWVGb3JtYXQgKSlcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFsd2F5c1ZhbGlkRGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIDE7XG5cdH0sXG5cblx0aGFuZGxlQ2xpY2tPdXRzaWRlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnByb3BzLmhhbmRsZUNsaWNrT3V0c2lkZSgpO1xuXHR9XG59KSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZVRpbWVQaWNrZXJEYXlzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuXHRjcmVhdGVDbGFzcyA9IHJlcXVpcmUoJ2NyZWF0ZS1yZWFjdC1jbGFzcycpLFxuXHRvbkNsaWNrT3V0c2lkZSA9IHJlcXVpcmUoJ3JlYWN0LW9uY2xpY2tvdXRzaWRlJykuZGVmYXVsdFxuXHQ7XG5cbnZhciBEYXRlVGltZVBpY2tlck1vbnRocyA9IG9uQ2xpY2tPdXRzaWRlKCBjcmVhdGVDbGFzcyh7XG5cdHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAncmR0TW9udGhzJyB9LCBbXG5cdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCd0YWJsZScsIHsga2V5OiAnYScgfSwgUmVhY3QuY3JlYXRlRWxlbWVudCgndGhlYWQnLCB7fSwgUmVhY3QuY3JlYXRlRWxlbWVudCgndHInLCB7fSwgW1xuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCd0aCcsIHsga2V5OiAncHJldicsIGNsYXNzTmFtZTogJ3JkdFByZXYnLCBvbkNsaWNrOiB0aGlzLnByb3BzLnN1YnRyYWN0VGltZSggMSwgJ3llYXJzJyApfSwgUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHt9LCAn4oC5JyApKSxcblx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgndGgnLCB7IGtleTogJ3llYXInLCBjbGFzc05hbWU6ICdyZHRTd2l0Y2gnLCBvbkNsaWNrOiB0aGlzLnByb3BzLnNob3dWaWV3KCAneWVhcnMnICksIGNvbFNwYW46IDIsICdkYXRhLXZhbHVlJzogdGhpcy5wcm9wcy52aWV3RGF0ZS55ZWFyKCkgfSwgdGhpcy5wcm9wcy52aWV3RGF0ZS55ZWFyKCkgKSxcblx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgndGgnLCB7IGtleTogJ25leHQnLCBjbGFzc05hbWU6ICdyZHROZXh0Jywgb25DbGljazogdGhpcy5wcm9wcy5hZGRUaW1lKCAxLCAneWVhcnMnICl9LCBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywge30sICfigLonICkpXG5cdFx0XHRdKSkpLFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgndGFibGUnLCB7IGtleTogJ21vbnRocycgfSwgUmVhY3QuY3JlYXRlRWxlbWVudCgndGJvZHknLCB7IGtleTogJ2InIH0sIHRoaXMucmVuZGVyTW9udGhzKCkpKVxuXHRcdF0pO1xuXHR9LFxuXG5cdHJlbmRlck1vbnRoczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGRhdGUgPSB0aGlzLnByb3BzLnNlbGVjdGVkRGF0ZSxcblx0XHRcdG1vbnRoID0gdGhpcy5wcm9wcy52aWV3RGF0ZS5tb250aCgpLFxuXHRcdFx0eWVhciA9IHRoaXMucHJvcHMudmlld0RhdGUueWVhcigpLFxuXHRcdFx0cm93cyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRtb250aHMgPSBbXSxcblx0XHRcdHJlbmRlcmVyID0gdGhpcy5wcm9wcy5yZW5kZXJNb250aCB8fCB0aGlzLnJlbmRlck1vbnRoLFxuXHRcdFx0aXNWYWxpZCA9IHRoaXMucHJvcHMuaXNWYWxpZERhdGUgfHwgdGhpcy5hbHdheXNWYWxpZERhdGUsXG5cdFx0XHRjbGFzc2VzLCBwcm9wcywgY3VycmVudE1vbnRoLCBpc0Rpc2FibGVkLCBub09mRGF5c0luTW9udGgsIGRheXNJbk1vbnRoLCB2YWxpZERheSxcblx0XHRcdC8vIERhdGUgaXMgaXJyZWxldmFudCBiZWNhdXNlIHdlJ3JlIG9ubHkgaW50ZXJlc3RlZCBpbiBtb250aFxuXHRcdFx0aXJyZWxldmFudERhdGUgPSAxXG5cdFx0XHQ7XG5cblx0XHR3aGlsZSAoaSA8IDEyKSB7XG5cdFx0XHRjbGFzc2VzID0gJ3JkdE1vbnRoJztcblx0XHRcdGN1cnJlbnRNb250aCA9XG5cdFx0XHRcdHRoaXMucHJvcHMudmlld0RhdGUuY2xvbmUoKS5zZXQoeyB5ZWFyOiB5ZWFyLCBtb250aDogaSwgZGF0ZTogaXJyZWxldmFudERhdGUgfSk7XG5cblx0XHRcdG5vT2ZEYXlzSW5Nb250aCA9IGN1cnJlbnRNb250aC5lbmRPZiggJ21vbnRoJyApLmZvcm1hdCggJ0QnICk7XG5cdFx0XHRkYXlzSW5Nb250aCA9IEFycmF5LmZyb20oeyBsZW5ndGg6IG5vT2ZEYXlzSW5Nb250aCB9LCBmdW5jdGlvbiggZSwgaSApIHtcblx0XHRcdFx0cmV0dXJuIGkgKyAxO1xuXHRcdFx0fSk7XG5cblx0XHRcdHZhbGlkRGF5ID0gZGF5c0luTW9udGguZmluZChmdW5jdGlvbiggZCApIHtcblx0XHRcdFx0dmFyIGRheSA9IGN1cnJlbnRNb250aC5jbG9uZSgpLnNldCggJ2RhdGUnLCBkICk7XG5cdFx0XHRcdHJldHVybiBpc1ZhbGlkKCBkYXkgKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRpc0Rpc2FibGVkID0gKCB2YWxpZERheSA9PT0gdW5kZWZpbmVkICk7XG5cblx0XHRcdGlmICggaXNEaXNhYmxlZCApXG5cdFx0XHRcdGNsYXNzZXMgKz0gJyByZHREaXNhYmxlZCc7XG5cblx0XHRcdGlmICggZGF0ZSAmJiBpID09PSBkYXRlLm1vbnRoKCkgJiYgeWVhciA9PT0gZGF0ZS55ZWFyKCkgKVxuXHRcdFx0XHRjbGFzc2VzICs9ICcgcmR0QWN0aXZlJztcblxuXHRcdFx0cHJvcHMgPSB7XG5cdFx0XHRcdGtleTogaSxcblx0XHRcdFx0J2RhdGEtdmFsdWUnOiBpLFxuXHRcdFx0XHRjbGFzc05hbWU6IGNsYXNzZXNcblx0XHRcdH07XG5cblx0XHRcdGlmICggIWlzRGlzYWJsZWQgKVxuXHRcdFx0XHRwcm9wcy5vbkNsaWNrID0gKCB0aGlzLnByb3BzLnVwZGF0ZU9uID09PSAnbW9udGhzJyA/XG5cdFx0XHRcdFx0dGhpcy51cGRhdGVTZWxlY3RlZE1vbnRoIDogdGhpcy5wcm9wcy5zZXREYXRlKCAnbW9udGgnICkgKTtcblxuXHRcdFx0bW9udGhzLnB1c2goIHJlbmRlcmVyKCBwcm9wcywgaSwgeWVhciwgZGF0ZSAmJiBkYXRlLmNsb25lKCkgKSApO1xuXG5cdFx0XHRpZiAoIG1vbnRocy5sZW5ndGggPT09IDQgKSB7XG5cdFx0XHRcdHJvd3MucHVzaCggUmVhY3QuY3JlYXRlRWxlbWVudCgndHInLCB7IGtleTogbW9udGggKyAnXycgKyByb3dzLmxlbmd0aCB9LCBtb250aHMgKSApO1xuXHRcdFx0XHRtb250aHMgPSBbXTtcblx0XHRcdH1cblxuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiByb3dzO1xuXHR9LFxuXG5cdHVwZGF0ZVNlbGVjdGVkTW9udGg6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR0aGlzLnByb3BzLnVwZGF0ZVNlbGVjdGVkRGF0ZSggZXZlbnQgKTtcblx0fSxcblxuXHRyZW5kZXJNb250aDogZnVuY3Rpb24oIHByb3BzLCBtb250aCApIHtcblx0XHR2YXIgbG9jYWxNb21lbnQgPSB0aGlzLnByb3BzLnZpZXdEYXRlO1xuXHRcdHZhciBtb250aFN0ciA9IGxvY2FsTW9tZW50LmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCggbG9jYWxNb21lbnQubW9udGgoIG1vbnRoICkgKTtcblx0XHR2YXIgc3RyTGVuZ3RoID0gMztcblx0XHQvLyBCZWNhdXNlIHNvbWUgbW9udGhzIGFyZSB1cCB0byA1IGNoYXJhY3RlcnMgbG9uZywgd2Ugd2FudCB0b1xuXHRcdC8vIHVzZSBhIGZpeGVkIHN0cmluZyBsZW5ndGggZm9yIGNvbnNpc3RlbmN5XG5cdFx0dmFyIG1vbnRoU3RyRml4ZWRMZW5ndGggPSBtb250aFN0ci5zdWJzdHJpbmcoIDAsIHN0ckxlbmd0aCApO1xuXHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCd0ZCcsIHByb3BzLCBjYXBpdGFsaXplKCBtb250aFN0ckZpeGVkTGVuZ3RoICkgKTtcblx0fSxcblxuXHRhbHdheXNWYWxpZERhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAxO1xuXHR9LFxuXG5cdGhhbmRsZUNsaWNrT3V0c2lkZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5wcm9wcy5oYW5kbGVDbGlja091dHNpZGUoKTtcblx0fVxufSkpO1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplKCBzdHIgKSB7XG5cdHJldHVybiBzdHIuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSggMSApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGVUaW1lUGlja2VyTW9udGhzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuXHRjcmVhdGVDbGFzcyA9IHJlcXVpcmUoJ2NyZWF0ZS1yZWFjdC1jbGFzcycpLFxuXHRvbkNsaWNrT3V0c2lkZSA9IHJlcXVpcmUoJ3JlYWN0LW9uY2xpY2tvdXRzaWRlJykuZGVmYXVsdFxuXHQ7XG5cbnZhciBEYXRlVGltZVBpY2tlclllYXJzID0gb25DbGlja091dHNpZGUoIGNyZWF0ZUNsYXNzKHtcblx0cmVuZGVyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgeWVhciA9IHBhcnNlSW50KCB0aGlzLnByb3BzLnZpZXdEYXRlLnllYXIoKSAvIDEwLCAxMCApICogMTA7XG5cblx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdyZHRZZWFycycgfSwgW1xuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgndGFibGUnLCB7IGtleTogJ2EnIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJywge30sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RyJywge30sIFtcblx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgndGgnLCB7IGtleTogJ3ByZXYnLCBjbGFzc05hbWU6ICdyZHRQcmV2Jywgb25DbGljazogdGhpcy5wcm9wcy5zdWJ0cmFjdFRpbWUoIDEwLCAneWVhcnMnICl9LCBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywge30sICfigLknICkpLFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCd0aCcsIHsga2V5OiAneWVhcicsIGNsYXNzTmFtZTogJ3JkdFN3aXRjaCcsIG9uQ2xpY2s6IHRoaXMucHJvcHMuc2hvd1ZpZXcoICd5ZWFycycgKSwgY29sU3BhbjogMiB9LCB5ZWFyICsgJy0nICsgKCB5ZWFyICsgOSApICksXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RoJywgeyBrZXk6ICduZXh0JywgY2xhc3NOYW1lOiAncmR0TmV4dCcsIG9uQ2xpY2s6IHRoaXMucHJvcHMuYWRkVGltZSggMTAsICd5ZWFycycgKX0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7fSwgJ+KAuicgKSlcblx0XHRcdF0pKSksXG5cdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCd0YWJsZScsIHsga2V5OiAneWVhcnMnIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5JywgIHt9LCB0aGlzLnJlbmRlclllYXJzKCB5ZWFyICkpKVxuXHRcdF0pO1xuXHR9LFxuXG5cdHJlbmRlclllYXJzOiBmdW5jdGlvbiggeWVhciApIHtcblx0XHR2YXIgeWVhcnMgPSBbXSxcblx0XHRcdGkgPSAtMSxcblx0XHRcdHJvd3MgPSBbXSxcblx0XHRcdHJlbmRlcmVyID0gdGhpcy5wcm9wcy5yZW5kZXJZZWFyIHx8IHRoaXMucmVuZGVyWWVhcixcblx0XHRcdHNlbGVjdGVkRGF0ZSA9IHRoaXMucHJvcHMuc2VsZWN0ZWREYXRlLFxuXHRcdFx0aXNWYWxpZCA9IHRoaXMucHJvcHMuaXNWYWxpZERhdGUgfHwgdGhpcy5hbHdheXNWYWxpZERhdGUsXG5cdFx0XHRjbGFzc2VzLCBwcm9wcywgY3VycmVudFllYXIsIGlzRGlzYWJsZWQsIG5vT2ZEYXlzSW5ZZWFyLCBkYXlzSW5ZZWFyLCB2YWxpZERheSxcblx0XHRcdC8vIE1vbnRoIGFuZCBkYXRlIGFyZSBpcnJlbGV2YW50IGhlcmUgYmVjYXVzZVxuXHRcdFx0Ly8gd2UncmUgb25seSBpbnRlcmVzdGVkIGluIHRoZSB5ZWFyXG5cdFx0XHRpcnJlbGV2YW50TW9udGggPSAwLFxuXHRcdFx0aXJyZWxldmFudERhdGUgPSAxXG5cdFx0XHQ7XG5cblx0XHR5ZWFyLS07XG5cdFx0d2hpbGUgKGkgPCAxMSkge1xuXHRcdFx0Y2xhc3NlcyA9ICdyZHRZZWFyJztcblx0XHRcdGN1cnJlbnRZZWFyID0gdGhpcy5wcm9wcy52aWV3RGF0ZS5jbG9uZSgpLnNldChcblx0XHRcdFx0eyB5ZWFyOiB5ZWFyLCBtb250aDogaXJyZWxldmFudE1vbnRoLCBkYXRlOiBpcnJlbGV2YW50RGF0ZSB9ICk7XG5cblx0XHRcdC8vIE5vdCBzdXJlIHdoYXQgJ3JkdE9sZCcgaXMgZm9yLCBjb21tZW50aW5nIG91dCBmb3Igbm93IGFzIGl0J3Mgbm90IHdvcmtpbmcgcHJvcGVybHlcblx0XHRcdC8vIGlmICggaSA9PT0gLTEgfCBpID09PSAxMCApXG5cdFx0XHRcdC8vIGNsYXNzZXMgKz0gJyByZHRPbGQnO1xuXG5cdFx0XHRub09mRGF5c0luWWVhciA9IGN1cnJlbnRZZWFyLmVuZE9mKCAneWVhcicgKS5mb3JtYXQoICdEREQnICk7XG5cdFx0XHRkYXlzSW5ZZWFyID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogbm9PZkRheXNJblllYXIgfSwgZnVuY3Rpb24oIGUsIGkgKSB7XG5cdFx0XHRcdHJldHVybiBpICsgMTtcblx0XHRcdH0pO1xuXG5cdFx0XHR2YWxpZERheSA9IGRheXNJblllYXIuZmluZChmdW5jdGlvbiggZCApIHtcblx0XHRcdFx0dmFyIGRheSA9IGN1cnJlbnRZZWFyLmNsb25lKCkuZGF5T2ZZZWFyKCBkICk7XG5cdFx0XHRcdHJldHVybiBpc1ZhbGlkKCBkYXkgKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRpc0Rpc2FibGVkID0gKCB2YWxpZERheSA9PT0gdW5kZWZpbmVkICk7XG5cblx0XHRcdGlmICggaXNEaXNhYmxlZCApXG5cdFx0XHRcdGNsYXNzZXMgKz0gJyByZHREaXNhYmxlZCc7XG5cblx0XHRcdGlmICggc2VsZWN0ZWREYXRlICYmIHNlbGVjdGVkRGF0ZS55ZWFyKCkgPT09IHllYXIgKVxuXHRcdFx0XHRjbGFzc2VzICs9ICcgcmR0QWN0aXZlJztcblxuXHRcdFx0cHJvcHMgPSB7XG5cdFx0XHRcdGtleTogeWVhcixcblx0XHRcdFx0J2RhdGEtdmFsdWUnOiB5ZWFyLFxuXHRcdFx0XHRjbGFzc05hbWU6IGNsYXNzZXNcblx0XHRcdH07XG5cblx0XHRcdGlmICggIWlzRGlzYWJsZWQgKVxuXHRcdFx0XHRwcm9wcy5vbkNsaWNrID0gKCB0aGlzLnByb3BzLnVwZGF0ZU9uID09PSAneWVhcnMnID9cblx0XHRcdFx0XHR0aGlzLnVwZGF0ZVNlbGVjdGVkWWVhciA6IHRoaXMucHJvcHMuc2V0RGF0ZSgneWVhcicpICk7XG5cblx0XHRcdHllYXJzLnB1c2goIHJlbmRlcmVyKCBwcm9wcywgeWVhciwgc2VsZWN0ZWREYXRlICYmIHNlbGVjdGVkRGF0ZS5jbG9uZSgpICkpO1xuXG5cdFx0XHRpZiAoIHllYXJzLmxlbmd0aCA9PT0gNCApIHtcblx0XHRcdFx0cm93cy5wdXNoKCBSZWFjdC5jcmVhdGVFbGVtZW50KCd0cicsIHsga2V5OiBpIH0sIHllYXJzICkgKTtcblx0XHRcdFx0eWVhcnMgPSBbXTtcblx0XHRcdH1cblxuXHRcdFx0eWVhcisrO1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiByb3dzO1xuXHR9LFxuXG5cdHVwZGF0ZVNlbGVjdGVkWWVhcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHRoaXMucHJvcHMudXBkYXRlU2VsZWN0ZWREYXRlKCBldmVudCApO1xuXHR9LFxuXG5cdHJlbmRlclllYXI6IGZ1bmN0aW9uKCBwcm9wcywgeWVhciApIHtcblx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgndGQnLCAgcHJvcHMsIHllYXIgKTtcblx0fSxcblxuXHRhbHdheXNWYWxpZERhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAxO1xuXHR9LFxuXG5cdGhhbmRsZUNsaWNrT3V0c2lkZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5wcm9wcy5oYW5kbGVDbGlja091dHNpZGUoKTtcblx0fVxufSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGVUaW1lUGlja2VyWWVhcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG5cdGNyZWF0ZUNsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyksXG5cdGFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKSxcblx0b25DbGlja091dHNpZGUgPSByZXF1aXJlKCdyZWFjdC1vbmNsaWNrb3V0c2lkZScpLmRlZmF1bHRcblx0O1xuXG52YXIgRGF0ZVRpbWVQaWNrZXJUaW1lID0gb25DbGlja091dHNpZGUoIGNyZWF0ZUNsYXNzKHtcblx0Z2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5jYWxjdWxhdGVTdGF0ZSggdGhpcy5wcm9wcyApO1xuXHR9LFxuXG5cdGNhbGN1bGF0ZVN0YXRlOiBmdW5jdGlvbiggcHJvcHMgKSB7XG5cdFx0dmFyIGRhdGUgPSBwcm9wcy5zZWxlY3RlZERhdGUgfHwgcHJvcHMudmlld0RhdGUsXG5cdFx0XHRmb3JtYXQgPSBwcm9wcy50aW1lRm9ybWF0LFxuXHRcdFx0Y291bnRlcnMgPSBbXVxuXHRcdFx0O1xuXG5cdFx0aWYgKCBmb3JtYXQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdoJykgIT09IC0xICkge1xuXHRcdFx0Y291bnRlcnMucHVzaCgnaG91cnMnKTtcblx0XHRcdGlmICggZm9ybWF0LmluZGV4T2YoJ20nKSAhPT0gLTEgKSB7XG5cdFx0XHRcdGNvdW50ZXJzLnB1c2goJ21pbnV0ZXMnKTtcblx0XHRcdFx0aWYgKCBmb3JtYXQuaW5kZXhPZigncycpICE9PSAtMSApIHtcblx0XHRcdFx0XHRjb3VudGVycy5wdXNoKCdzZWNvbmRzJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgaG91cnMgPSBkYXRlLmZvcm1hdCggJ0gnICk7XG5cdFx0XG5cdFx0dmFyIGRheXBhcnQgPSBmYWxzZTtcblx0XHRpZiAoIHRoaXMuc3RhdGUgIT09IG51bGwgJiYgdGhpcy5wcm9wcy50aW1lRm9ybWF0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZiggJyBhJyApICE9PSAtMSApIHtcblx0XHRcdGlmICggdGhpcy5wcm9wcy50aW1lRm9ybWF0LmluZGV4T2YoICcgQScgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdGRheXBhcnQgPSAoIGhvdXJzID49IDEyICkgPyAnUE0nIDogJ0FNJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRheXBhcnQgPSAoIGhvdXJzID49IDEyICkgPyAncG0nIDogJ2FtJztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0aG91cnM6IGhvdXJzLFxuXHRcdFx0bWludXRlczogZGF0ZS5mb3JtYXQoICdtbScgKSxcblx0XHRcdHNlY29uZHM6IGRhdGUuZm9ybWF0KCAnc3MnICksXG5cdFx0XHRtaWxsaXNlY29uZHM6IGRhdGUuZm9ybWF0KCAnU1NTJyApLFxuXHRcdFx0ZGF5cGFydDogZGF5cGFydCxcblx0XHRcdGNvdW50ZXJzOiBjb3VudGVyc1xuXHRcdH07XG5cdH0sXG5cblx0cmVuZGVyQ291bnRlcjogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSAnZGF5cGFydCcgKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSB0aGlzLnN0YXRlWyB0eXBlIF07XG5cdFx0XHRpZiAoIHR5cGUgPT09ICdob3VycycgJiYgdGhpcy5wcm9wcy50aW1lRm9ybWF0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZiggJyBhJyApICE9PSAtMSApIHtcblx0XHRcdFx0dmFsdWUgPSAoIHZhbHVlIC0gMSApICUgMTIgKyAxO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IDAgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSAxMjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsga2V5OiB0eXBlLCBjbGFzc05hbWU6ICdyZHRDb3VudGVyJyB9LCBbXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGtleTogJ3VwJywgY2xhc3NOYW1lOiAncmR0QnRuJywgb25Ub3VjaFN0YXJ0OiB0aGlzLm9uU3RhcnRDbGlja2luZygnaW5jcmVhc2UnLCB0eXBlKSwgb25Nb3VzZURvd246IHRoaXMub25TdGFydENsaWNraW5nKCAnaW5jcmVhc2UnLCB0eXBlICksIG9uQ29udGV4dE1lbnU6IHRoaXMuZGlzYWJsZUNvbnRleHRNZW51IH0sICfilrInICksXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsga2V5OiAnYycsIGNsYXNzTmFtZTogJ3JkdENvdW50JyB9LCB2YWx1ZSApLFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBrZXk6ICdkbycsIGNsYXNzTmFtZTogJ3JkdEJ0bicsIG9uVG91Y2hTdGFydDogdGhpcy5vblN0YXJ0Q2xpY2tpbmcoJ2RlY3JlYXNlJywgdHlwZSksIG9uTW91c2VEb3duOiB0aGlzLm9uU3RhcnRDbGlja2luZyggJ2RlY3JlYXNlJywgdHlwZSApLCBvbkNvbnRleHRNZW51OiB0aGlzLmRpc2FibGVDb250ZXh0TWVudSB9LCAn4pa8JyApXG5cdFx0XHRdKTtcblx0XHR9XG5cdFx0cmV0dXJuICcnO1xuXHR9LFxuXG5cdHJlbmRlckRheVBhcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGtleTogJ2RheVBhcnQnLCBjbGFzc05hbWU6ICdyZHRDb3VudGVyJyB9LCBbXG5cdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBrZXk6ICd1cCcsIGNsYXNzTmFtZTogJ3JkdEJ0bicsIG9uVG91Y2hTdGFydDogdGhpcy5vblN0YXJ0Q2xpY2tpbmcoJ3RvZ2dsZURheVBhcnQnLCAnaG91cnMnKSwgb25Nb3VzZURvd246IHRoaXMub25TdGFydENsaWNraW5nKCAndG9nZ2xlRGF5UGFydCcsICdob3VycycpLCBvbkNvbnRleHRNZW51OiB0aGlzLmRpc2FibGVDb250ZXh0TWVudSB9LCAn4payJyApLFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBrZXk6IHRoaXMuc3RhdGUuZGF5cGFydCwgY2xhc3NOYW1lOiAncmR0Q291bnQnIH0sIHRoaXMuc3RhdGUuZGF5cGFydCApLFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsga2V5OiAnZG8nLCBjbGFzc05hbWU6ICdyZHRCdG4nLCBvblRvdWNoU3RhcnQ6IHRoaXMub25TdGFydENsaWNraW5nKCd0b2dnbGVEYXlQYXJ0JywgJ2hvdXJzJyksIG9uTW91c2VEb3duOiB0aGlzLm9uU3RhcnRDbGlja2luZyggJ3RvZ2dsZURheVBhcnQnLCAnaG91cnMnKSwgb25Db250ZXh0TWVudTogdGhpcy5kaXNhYmxlQ29udGV4dE1lbnUgfSwgJ+KWvCcgKVxuXHRcdF0pO1xuXHR9LFxuXG5cdHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcyxcblx0XHRcdGNvdW50ZXJzID0gW11cblx0XHQ7XG5cblx0XHR0aGlzLnN0YXRlLmNvdW50ZXJzLmZvckVhY2goIGZ1bmN0aW9uKCBjICkge1xuXHRcdFx0aWYgKCBjb3VudGVycy5sZW5ndGggKVxuXHRcdFx0XHRjb3VudGVycy5wdXNoKCBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGtleTogJ3NlcCcgKyBjb3VudGVycy5sZW5ndGgsIGNsYXNzTmFtZTogJ3JkdENvdW50ZXJTZXBhcmF0b3InIH0sICc6JyApICk7XG5cdFx0XHRjb3VudGVycy5wdXNoKCBtZS5yZW5kZXJDb3VudGVyKCBjICkgKTtcblx0XHR9KTtcblxuXHRcdGlmICggdGhpcy5zdGF0ZS5kYXlwYXJ0ICE9PSBmYWxzZSApIHtcblx0XHRcdGNvdW50ZXJzLnB1c2goIG1lLnJlbmRlckRheVBhcnQoKSApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5zdGF0ZS5jb3VudGVycy5sZW5ndGggPT09IDMgJiYgdGhpcy5wcm9wcy50aW1lRm9ybWF0LmluZGV4T2YoICdTJyApICE9PSAtMSApIHtcblx0XHRcdGNvdW50ZXJzLnB1c2goIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAncmR0Q291bnRlclNlcGFyYXRvcicsIGtleTogJ3NlcDUnIH0sICc6JyApICk7XG5cdFx0XHRjb3VudGVycy5wdXNoKFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ3JkdENvdW50ZXIgcmR0TWlsbGknLCBrZXk6ICdtJyB9LFxuXHRcdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB2YWx1ZTogdGhpcy5zdGF0ZS5taWxsaXNlY29uZHMsIHR5cGU6ICd0ZXh0Jywgb25DaGFuZ2U6IHRoaXMudXBkYXRlTWlsbGkgfSApXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ3JkdFRpbWUnIH0sXG5cdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCd0YWJsZScsIHt9LCBbXG5cdFx0XHRcdHRoaXMucmVuZGVySGVhZGVyKCksXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5JywgeyBrZXk6ICdiJ30sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RyJywge30sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RkJywge30sXG5cdFx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdyZHRDb3VudGVycycgfSwgY291bnRlcnMgKVxuXHRcdFx0XHQpKSlcblx0XHRcdF0pXG5cdFx0KTtcblx0fSxcblxuXHRjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0bWUudGltZUNvbnN0cmFpbnRzID0ge1xuXHRcdFx0aG91cnM6IHtcblx0XHRcdFx0bWluOiAwLFxuXHRcdFx0XHRtYXg6IDIzLFxuXHRcdFx0XHRzdGVwOiAxXG5cdFx0XHR9LFxuXHRcdFx0bWludXRlczoge1xuXHRcdFx0XHRtaW46IDAsXG5cdFx0XHRcdG1heDogNTksXG5cdFx0XHRcdHN0ZXA6IDFcblx0XHRcdH0sXG5cdFx0XHRzZWNvbmRzOiB7XG5cdFx0XHRcdG1pbjogMCxcblx0XHRcdFx0bWF4OiA1OSxcblx0XHRcdFx0c3RlcDogMVxuXHRcdFx0fSxcblx0XHRcdG1pbGxpc2Vjb25kczoge1xuXHRcdFx0XHRtaW46IDAsXG5cdFx0XHRcdG1heDogOTk5LFxuXHRcdFx0XHRzdGVwOiAxXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRbJ2hvdXJzJywgJ21pbnV0ZXMnLCAnc2Vjb25kcycsICdtaWxsaXNlY29uZHMnXS5mb3JFYWNoKCBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdGFzc2lnbihtZS50aW1lQ29uc3RyYWludHNbIHR5cGUgXSwgbWUucHJvcHMudGltZUNvbnN0cmFpbnRzWyB0eXBlIF0pO1xuXHRcdH0pO1xuXHRcdHRoaXMuc2V0U3RhdGUoIHRoaXMuY2FsY3VsYXRlU3RhdGUoIHRoaXMucHJvcHMgKSApO1xuXHR9LFxuXG5cdGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKCBuZXh0UHJvcHMgKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSggdGhpcy5jYWxjdWxhdGVTdGF0ZSggbmV4dFByb3BzICkgKTtcblx0fSxcblxuXHR1cGRhdGVNaWxsaTogZnVuY3Rpb24oIGUgKSB7XG5cdFx0dmFyIG1pbGxpID0gcGFyc2VJbnQoIGUudGFyZ2V0LnZhbHVlLCAxMCApO1xuXHRcdGlmICggbWlsbGkgPT09IGUudGFyZ2V0LnZhbHVlICYmIG1pbGxpID49IDAgJiYgbWlsbGkgPCAxMDAwICkge1xuXHRcdFx0dGhpcy5wcm9wcy5zZXRUaW1lKCAnbWlsbGlzZWNvbmRzJywgbWlsbGkgKTtcblx0XHRcdHRoaXMuc2V0U3RhdGUoIHsgbWlsbGlzZWNvbmRzOiBtaWxsaSB9ICk7XG5cdFx0fVxuXHR9LFxuXG5cdHJlbmRlckhlYWRlcjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpcy5wcm9wcy5kYXRlRm9ybWF0IClcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0dmFyIGRhdGUgPSB0aGlzLnByb3BzLnNlbGVjdGVkRGF0ZSB8fCB0aGlzLnByb3BzLnZpZXdEYXRlO1xuXHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCd0aGVhZCcsIHsga2V5OiAnaCcgfSwgUmVhY3QuY3JlYXRlRWxlbWVudCgndHInLCB7fSxcblx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RoJywgeyBjbGFzc05hbWU6ICdyZHRTd2l0Y2gnLCBjb2xTcGFuOiA0LCBvbkNsaWNrOiB0aGlzLnByb3BzLnNob3dWaWV3KCAnZGF5cycgKSB9LCBkYXRlLmZvcm1hdCggdGhpcy5wcm9wcy5kYXRlRm9ybWF0ICkgKVxuXHRcdCkpO1xuXHR9LFxuXG5cdG9uU3RhcnRDbGlja2luZzogZnVuY3Rpb24oIGFjdGlvbiwgdHlwZSApIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHVwZGF0ZSA9IHt9O1xuXHRcdFx0dXBkYXRlWyB0eXBlIF0gPSBtZVsgYWN0aW9uIF0oIHR5cGUgKTtcblx0XHRcdG1lLnNldFN0YXRlKCB1cGRhdGUgKTtcblxuXHRcdFx0bWUudGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0bWUuaW5jcmVhc2VUaW1lciA9IHNldEludGVydmFsKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR1cGRhdGVbIHR5cGUgXSA9IG1lWyBhY3Rpb24gXSggdHlwZSApO1xuXHRcdFx0XHRcdG1lLnNldFN0YXRlKCB1cGRhdGUgKTtcblx0XHRcdFx0fSwgNzApO1xuXHRcdFx0fSwgNTAwKTtcblxuXHRcdFx0bWUubW91c2VVcExpc3RlbmVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dCggbWUudGltZXIgKTtcblx0XHRcdFx0Y2xlYXJJbnRlcnZhbCggbWUuaW5jcmVhc2VUaW1lciApO1xuXHRcdFx0XHRtZS5wcm9wcy5zZXRUaW1lKCB0eXBlLCBtZS5zdGF0ZVsgdHlwZSBdICk7XG5cdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBtZS5tb3VzZVVwTGlzdGVuZXIgKTtcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2hlbmQnLCBtZS5tb3VzZVVwTGlzdGVuZXIgKTtcblx0XHRcdH07XG5cblx0XHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBtZS5tb3VzZVVwTGlzdGVuZXIgKTtcblx0XHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoZW5kJywgbWUubW91c2VVcExpc3RlbmVyICk7XG5cdFx0fTtcblx0fSxcblxuXHRkaXNhYmxlQ29udGV4dE1lbnU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRwYWRWYWx1ZXM6IHtcblx0XHRob3VyczogMSxcblx0XHRtaW51dGVzOiAyLFxuXHRcdHNlY29uZHM6IDIsXG5cdFx0bWlsbGlzZWNvbmRzOiAzXG5cdH0sXG5cblx0dG9nZ2xlRGF5UGFydDogZnVuY3Rpb24oIHR5cGUgKSB7IC8vIHR5cGUgaXMgYWx3YXlzICdob3Vycydcblx0XHR2YXIgdmFsdWUgPSBwYXJzZUludCggdGhpcy5zdGF0ZVsgdHlwZSBdLCAxMCkgKyAxMjtcblx0XHRpZiAoIHZhbHVlID4gdGhpcy50aW1lQ29uc3RyYWludHNbIHR5cGUgXS5tYXggKVxuXHRcdFx0dmFsdWUgPSB0aGlzLnRpbWVDb25zdHJhaW50c1sgdHlwZSBdLm1pbiArICggdmFsdWUgLSAoIHRoaXMudGltZUNvbnN0cmFpbnRzWyB0eXBlIF0ubWF4ICsgMSApICk7XG5cdFx0cmV0dXJuIHRoaXMucGFkKCB0eXBlLCB2YWx1ZSApO1xuXHR9LFxuXG5cdGluY3JlYXNlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHR2YXIgdmFsdWUgPSBwYXJzZUludCggdGhpcy5zdGF0ZVsgdHlwZSBdLCAxMCkgKyB0aGlzLnRpbWVDb25zdHJhaW50c1sgdHlwZSBdLnN0ZXA7XG5cdFx0aWYgKCB2YWx1ZSA+IHRoaXMudGltZUNvbnN0cmFpbnRzWyB0eXBlIF0ubWF4IClcblx0XHRcdHZhbHVlID0gdGhpcy50aW1lQ29uc3RyYWludHNbIHR5cGUgXS5taW4gKyAoIHZhbHVlIC0gKCB0aGlzLnRpbWVDb25zdHJhaW50c1sgdHlwZSBdLm1heCArIDEgKSApO1xuXHRcdHJldHVybiB0aGlzLnBhZCggdHlwZSwgdmFsdWUgKTtcblx0fSxcblxuXHRkZWNyZWFzZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0dmFyIHZhbHVlID0gcGFyc2VJbnQoIHRoaXMuc3RhdGVbIHR5cGUgXSwgMTApIC0gdGhpcy50aW1lQ29uc3RyYWludHNbIHR5cGUgXS5zdGVwO1xuXHRcdGlmICggdmFsdWUgPCB0aGlzLnRpbWVDb25zdHJhaW50c1sgdHlwZSBdLm1pbiApXG5cdFx0XHR2YWx1ZSA9IHRoaXMudGltZUNvbnN0cmFpbnRzWyB0eXBlIF0ubWF4ICsgMSAtICggdGhpcy50aW1lQ29uc3RyYWludHNbIHR5cGUgXS5taW4gLSB2YWx1ZSApO1xuXHRcdHJldHVybiB0aGlzLnBhZCggdHlwZSwgdmFsdWUgKTtcblx0fSxcblxuXHRwYWQ6IGZ1bmN0aW9uKCB0eXBlLCB2YWx1ZSApIHtcblx0XHR2YXIgc3RyID0gdmFsdWUgKyAnJztcblx0XHR3aGlsZSAoIHN0ci5sZW5ndGggPCB0aGlzLnBhZFZhbHVlc1sgdHlwZSBdIClcblx0XHRcdHN0ciA9ICcwJyArIHN0cjtcblx0XHRyZXR1cm4gc3RyO1xuXHR9LFxuXG5cdGhhbmRsZUNsaWNrT3V0c2lkZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5wcm9wcy5oYW5kbGVDbGlja091dHNpZGUoKTtcblx0fVxufSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGVUaW1lUGlja2VyVGltZTtcbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi45JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5FWElUSU5HID0gZXhwb3J0cy5FTlRFUkVEID0gZXhwb3J0cy5FTlRFUklORyA9IGV4cG9ydHMuRVhJVEVEID0gZXhwb3J0cy5VTk1PVU5URUQgPSB2b2lkIDA7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKFwiLi91dGlscy9Qcm9wVHlwZXNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0cy5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG52YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnRzLkVYSVRFRCA9IEVYSVRFRDtcbnZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnRzLkVOVEVSSU5HID0gRU5URVJJTkc7XG52YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydHMuRU5URVJFRCA9IEVOVEVSRUQ7XG52YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbmV4cG9ydHMuRVhJVElORyA9IEVYSVRJTkc7XG5cbnZhciBUcmFuc2l0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0LnRyYW5zaXRpb25Hcm91cDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uR3JvdXA6IG51bGwgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcblxuICAgIH07XG4gIH07XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuXG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICB2YXIgbm9kZSA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdChub2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQudHJhbnNpdGlvbkdyb3VwID8gdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Hcm91cC5pc01vdW50aW5nIDogbW91bnRpbmc7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlcikge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpO1xuXG4gICAgICBfdGhpczIub25UcmFuc2l0aW9uRW5kKG5vZGUsIGVudGVyVGltZW91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdChub2RlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFWElUSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7IC8vIGZpbHRlciBwcm9wcyBmb3IgVHJhbnN0aXRpb25cblxuXG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuaW47XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMubW91bnRPbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnVubW91bnRPbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudGltZW91dDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hZGRFbmRMaXN0ZW5lcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmVkO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0ZWQ7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuVHJhbnNpdGlvbi5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBmdW5jdGlvbiB0cmFuc2l0aW9uR3JvdXAoKSB7fVxufTtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCwgYCd1bm1vdW50ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5vcm1hbGx5IGEgY29tcG9uZW50IGlzIG5vdCB0cmFuc2l0aW9uZWQgaWYgaXQgaXMgc2hvd24gd2hlbiB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50IG1vdW50cy5cbiAgICogSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3QgbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZVxuICAgKiBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluIGFzIHNvb24gYXMgdGhlIGA8VHJhbnNpdGlvbj5gIG1vdW50cy5cbiAgICpcbiAgICogPiBOb3RlOiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgXCJhcHBlYXJcIiBzdGF0ZXMuIGBhcHBlYXJgIG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGBlbnRlcmAgdHJhbnNpdGlvbi5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZC5cbiAgICpcbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9uczpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9ezUwMH1cbiAgICogYGBgXG4gICAqXG4gICAqIG9yIGluZGl2aWR1YWxseTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGFwcGVhcjogNTAwLFxuICAgKiAgZW50ZXI6IDMwMCxcbiAgICogIGV4aXQ6IDUwMCxcbiAgICogfX1cbiAgICogYGBgXG4gICAqXG4gICAqIC0gYGFwcGVhcmAgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mIGBlbnRlcmBcbiAgICogLSBgZW50ZXJgIGRlZmF1bHRzIHRvIGAwYFxuICAgKiAtIGBleGl0YCBkZWZhdWx0cyB0byBgMGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIsIGFwcGVhcj86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIHZhciBwdCA9IF9Qcm9wVHlwZXMudGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuICoqTm90ZToqKiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jIC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxufSA6IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuICBvbkVudGVyOiBub29wLFxuICBvbkVudGVyaW5nOiBub29wLFxuICBvbkVudGVyZWQ6IG5vb3AsXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblRyYW5zaXRpb24uVU5NT1VOVEVEID0gMDtcblRyYW5zaXRpb24uRVhJVEVEID0gMTtcblRyYW5zaXRpb24uRU5URVJJTkcgPSAyO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gMztcblRyYW5zaXRpb24uRVhJVElORyA9IDQ7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShUcmFuc2l0aW9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZWFjdC1kYXRldGltZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3JlYWN0LWRhdGV0aW1lLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZWFjdC1kYXRldGltZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohXFxuICogaHR0cHM6Ly9naXRodWIuY29tL1lvdUNhbkJvb2tNZS9yZWFjdC1kYXRldGltZVxcbiAqL1xcblxcbi5yZHQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ucmR0UGlja2VyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMjUwcHg7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBtYXJnaW4tdG9wOiAxcHg7XFxuICB6LWluZGV4OiA5OTk5OSAhaW1wb3J0YW50O1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDNweCByZ2JhKDAsMCwwLC4xKTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNmOWY5Zjk7XFxufVxcbi5yZHRPcGVuIC5yZHRQaWNrZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5yZHRTdGF0aWMgLnJkdFBpY2tlciB7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgcG9zaXRpb246IHN0YXRpYztcXG59XFxuXFxuLnJkdFBpY2tlciAucmR0VGltZVRvZ2dsZSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5yZHRQaWNrZXIgdGFibGUge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW46IDA7XFxufVxcbi5yZHRQaWNrZXIgdGQsXFxuLnJkdFBpY2tlciB0aCB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBoZWlnaHQ6IDI4cHg7XFxufVxcbi5yZHRQaWNrZXIgdGQge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ucmR0UGlja2VyIHRkLnJkdERheTpob3ZlcixcXG4ucmR0UGlja2VyIHRkLnJkdEhvdXI6aG92ZXIsXFxuLnJkdFBpY2tlciB0ZC5yZHRNaW51dGU6aG92ZXIsXFxuLnJkdFBpY2tlciB0ZC5yZHRTZWNvbmQ6aG92ZXIsXFxuLnJkdFBpY2tlciAucmR0VGltZVRvZ2dsZTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjZWVlZWVlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ucmR0UGlja2VyIHRkLnJkdE9sZCxcXG4ucmR0UGlja2VyIHRkLnJkdE5ldyB7XFxuICBjb2xvcjogIzk5OTk5OTtcXG59XFxuLnJkdFBpY2tlciB0ZC5yZHRUb2RheSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5yZHRQaWNrZXIgdGQucmR0VG9kYXk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgYm9yZGVyLWxlZnQ6IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCAjNDI4YmNhO1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiA0cHg7XFxuICByaWdodDogNHB4O1xcbn1cXG4ucmR0UGlja2VyIHRkLnJkdEFjdGl2ZSxcXG4ucmR0UGlja2VyIHRkLnJkdEFjdGl2ZTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDI4YmNhO1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LXNoYWRvdzogMCAtMXB4IDAgcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG59XFxuLnJkdFBpY2tlciB0ZC5yZHRBY3RpdmUucmR0VG9kYXk6YmVmb3JlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNmZmY7XFxufVxcbi5yZHRQaWNrZXIgdGQucmR0RGlzYWJsZWQsXFxuLnJkdFBpY2tlciB0ZC5yZHREaXNhYmxlZDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgY29sb3I6ICM5OTk5OTk7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG5cXG4ucmR0UGlja2VyIHRkIHNwYW4ucmR0T2xkIHtcXG4gIGNvbG9yOiAjOTk5OTk5O1xcbn1cXG4ucmR0UGlja2VyIHRkIHNwYW4ucmR0RGlzYWJsZWQsXFxuLnJkdFBpY2tlciB0ZCBzcGFuLnJkdERpc2FibGVkOmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBjb2xvcjogIzk5OTk5OTtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcbi5yZHRQaWNrZXIgdGgge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmOWY5Zjk7XFxufVxcbi5yZHRQaWNrZXIgLmRvdyB7XFxuICB3aWR0aDogMTQuMjg1NyU7XFxuICBib3JkZXItYm90dG9tOiBub25lO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4ucmR0UGlja2VyIHRoLnJkdFN3aXRjaCB7XFxuICB3aWR0aDogMTAwcHg7XFxufVxcbi5yZHRQaWNrZXIgdGgucmR0TmV4dCxcXG4ucmR0UGlja2VyIHRoLnJkdFByZXYge1xcbiAgZm9udC1zaXplOiAyMXB4O1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG59XFxuXFxuLnJkdFByZXYgc3BhbixcXG4ucmR0TmV4dCBzcGFuIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lOyAvKiBpT1MgU2FmYXJpICovXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOyAgIC8qIENocm9tZS9TYWZhcmkvT3BlcmEgKi9cXG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTsgICAgLyogS29ucXVlcm9yICovXFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lOyAgICAgIC8qIEZpcmVmb3ggKi9cXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTsgICAgICAgLyogSW50ZXJuZXQgRXhwbG9yZXIvRWRnZSAqL1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi5yZHRQaWNrZXIgdGgucmR0RGlzYWJsZWQsXFxuLnJkdFBpY2tlciB0aC5yZHREaXNhYmxlZDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgY29sb3I6ICM5OTk5OTk7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG4ucmR0UGlja2VyIHRoZWFkIHRyOmZpcnN0LWNoaWxkIHRoIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnJkdFBpY2tlciB0aGVhZCB0cjpmaXJzdC1jaGlsZCB0aDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjZWVlZWVlO1xcbn1cXG5cXG4ucmR0UGlja2VyIHRmb290IHtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZjlmOWY5O1xcbn1cXG5cXG4ucmR0UGlja2VyIGJ1dHRvbiB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ucmR0UGlja2VyIGJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcbn1cXG5cXG4ucmR0UGlja2VyIHRoZWFkIGJ1dHRvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxudGQucmR0TW9udGgsXFxudGQucmR0WWVhciB7XFxuICBoZWlnaHQ6IDUwcHg7XFxuICB3aWR0aDogMjUlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG50ZC5yZHRNb250aDpob3ZlcixcXG50ZC5yZHRZZWFyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6ICNlZWU7XFxufVxcblxcbi5yZHRDb3VudGVycyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5yZHRDb3VudGVycyA+IGRpdiB7XFxuICBmbG9hdDogbGVmdDtcXG59XFxuXFxuLnJkdENvdW50ZXIge1xcbiAgaGVpZ2h0OiAxMDBweDtcXG59XFxuXFxuLnJkdENvdW50ZXIge1xcbiAgd2lkdGg6IDQwcHg7XFxufVxcblxcbi5yZHRDb3VudGVyU2VwYXJhdG9yIHtcXG4gIGxpbmUtaGVpZ2h0OiAxMDBweDtcXG59XFxuXFxuLnJkdENvdW50ZXIgLnJkdEJ0biB7XFxuICBoZWlnaHQ6IDQwJTtcXG4gIGxpbmUtaGVpZ2h0OiA0MHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuXFxuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7IC8qIGlPUyBTYWZhcmkgKi9cXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7ICAgLyogQ2hyb21lL1NhZmFyaS9PcGVyYSAqL1xcbiAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lOyAgICAvKiBLb25xdWVyb3IgKi9cXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7ICAgICAgLyogRmlyZWZveCAqL1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAgICAgICAvKiBJbnRlcm5ldCBFeHBsb3Jlci9FZGdlICovXFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuLnJkdENvdW50ZXIgLnJkdEJ0bjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjZWVlO1xcbn1cXG4ucmR0Q291bnRlciAucmR0Q291bnQge1xcbiAgaGVpZ2h0OiAyMCU7XFxuICBmb250LXNpemU6IDEuMmVtO1xcbn1cXG5cXG4ucmR0TWlsbGkge1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIHBhZGRpbmctbGVmdDogOHB4O1xcbiAgd2lkdGg6IDQ4cHg7XFxufVxcblxcbi5yZHRNaWxsaSBpbnB1dCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGZvbnQtc2l6ZTogMS4yZW07XFxuICBtYXJnaW4tdG9wOiAzN3B4O1xcbn1cXG5cXG4ucmR0VGltZSB0ZCB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblwiLCBcIlwiXSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVztcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGtleSwgb3duLCBvdXQ7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG93biAmJiBoYXMoZXhwb3J0cywga2V5KSkgY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbiAoQykge1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDKCk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmIChJU19QUk9UTykge1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmICh0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKSBoaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2luRE9NXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBIVE1MIERPTSBhbmQgU1ZHIERPTSBtYXkgaGF2ZSBkaWZmZXJlbnQgc3VwcG9ydCBsZXZlbHMsXG4gIC8vIHNvIHdlIG5lZWQgdG8gY2hlY2sgb24gY29udGV4dCBpbnN0ZWFkIG9mIGEgZG9jdW1lbnQgcm9vdCBlbGVtZW50LlxuICByZXR1cm4gX2luRE9NLmRlZmF1bHQgPyBmdW5jdGlvbiAoY29udGV4dCwgbm9kZSkge1xuICAgIGlmIChjb250ZXh0LmNvbnRhaW5zKSB7XG4gICAgICByZXR1cm4gY29udGV4dC5jb250YWlucyhub2RlKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRleHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBjb250ZXh0ID09PSBub2RlIHx8ICEhKGNvbnRleHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24obm9kZSkgJiAxNik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxsYmFjayhjb250ZXh0LCBub2RlKTtcbiAgICB9XG4gIH0gOiBmYWxsYmFjaztcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbmZ1bmN0aW9uIGZhbGxiYWNrKGNvbnRleHQsIG5vZGUpIHtcbiAgaWYgKG5vZGUpIGRvIHtcbiAgICBpZiAobm9kZSA9PT0gY29udGV4dCkgcmV0dXJuIHRydWU7XG4gIH0gd2hpbGUgKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWxsO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcicpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gYWxsKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsaWRhdG9ycyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHZhbGlkYXRvcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBmdW5jdGlvbiBhbGxQcm9wVHlwZXMoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gICAgdmFsaWRhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uICh2YWxpZGF0b3IpIHtcbiAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IHZhbGlkYXRvci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgIGVycm9yID0gcmVzdWx0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKGFsbFByb3BUeXBlcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1JlcXVpcmVkRm9yQTExeTtcbmZ1bmN0aW9uIGlzUmVxdWlyZWRGb3JBMTF5KHZhbGlkYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lU2FmZSArICdgIGlzIHJlcXVpcmVkIHRvIG1ha2UgJyArICgnYCcgKyBjb21wb25lbnROYW1lU2FmZSArICdgIGFjY2Vzc2libGUgZm9yIHVzZXJzIG9mIGFzc2lzdGl2ZSAnKSArICd0ZWNobm9sb2dpZXMgc3VjaCBhcyBzY3JlZW4gcmVhZGVycy4nKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiA1ID8gX2xlbiAtIDUgOiAwKSwgX2tleSA9IDU7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDVdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IuYXBwbHkodW5kZWZpbmVkLCBbcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lXS5jb25jYXQoYXJncykpO1xuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLyogSmF2YXNjcmlwdCBwbG90dGluZyBsaWJyYXJ5IGZvciBqUXVlcnksIHZlcnNpb24gMC44LjMuXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMDctMjAxNCBJT0xBIGFuZCBPbGUgTGF1cnNlbi5cclxuTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG5cclxuKi9cclxuKGZ1bmN0aW9uKCQpeyQuY29sb3I9e307JC5jb2xvci5tYWtlPWZ1bmN0aW9uKHIsZyxiLGEpe3ZhciBvPXt9O28ucj1yfHwwO28uZz1nfHwwO28uYj1ifHwwO28uYT1hIT1udWxsP2E6MTtvLmFkZD1mdW5jdGlvbihjLGQpe2Zvcih2YXIgaT0wO2k8Yy5sZW5ndGg7KytpKW9bYy5jaGFyQXQoaSldKz1kO3JldHVybiBvLm5vcm1hbGl6ZSgpfTtvLnNjYWxlPWZ1bmN0aW9uKGMsZil7Zm9yKHZhciBpPTA7aTxjLmxlbmd0aDsrK2kpb1tjLmNoYXJBdChpKV0qPWY7cmV0dXJuIG8ubm9ybWFsaXplKCl9O28udG9TdHJpbmc9ZnVuY3Rpb24oKXtpZihvLmE+PTEpe3JldHVyblwicmdiKFwiK1tvLnIsby5nLG8uYl0uam9pbihcIixcIikrXCIpXCJ9ZWxzZXtyZXR1cm5cInJnYmEoXCIrW28ucixvLmcsby5iLG8uYV0uam9pbihcIixcIikrXCIpXCJ9fTtvLm5vcm1hbGl6ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGNsYW1wKG1pbix2YWx1ZSxtYXgpe3JldHVybiB2YWx1ZTxtaW4/bWluOnZhbHVlPm1heD9tYXg6dmFsdWV9by5yPWNsYW1wKDAscGFyc2VJbnQoby5yKSwyNTUpO28uZz1jbGFtcCgwLHBhcnNlSW50KG8uZyksMjU1KTtvLmI9Y2xhbXAoMCxwYXJzZUludChvLmIpLDI1NSk7by5hPWNsYW1wKDAsby5hLDEpO3JldHVybiBvfTtvLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuICQuY29sb3IubWFrZShvLnIsby5iLG8uZyxvLmEpfTtyZXR1cm4gby5ub3JtYWxpemUoKX07JC5jb2xvci5leHRyYWN0PWZ1bmN0aW9uKGVsZW0sY3NzKXt2YXIgYztkb3tjPWVsZW0uY3NzKGNzcykudG9Mb3dlckNhc2UoKTtpZihjIT1cIlwiJiZjIT1cInRyYW5zcGFyZW50XCIpYnJlYWs7ZWxlbT1lbGVtLnBhcmVudCgpfXdoaWxlKGVsZW0ubGVuZ3RoJiYhJC5ub2RlTmFtZShlbGVtLmdldCgwKSxcImJvZHlcIikpO2lmKGM9PVwicmdiYSgwLCAwLCAwLCAwKVwiKWM9XCJ0cmFuc3BhcmVudFwiO3JldHVybiAkLmNvbG9yLnBhcnNlKGMpfTskLmNvbG9yLnBhcnNlPWZ1bmN0aW9uKHN0cil7dmFyIHJlcyxtPSQuY29sb3IubWFrZTtpZihyZXM9L3JnYlxcKFxccyooWzAtOV17MSwzfSlcXHMqLFxccyooWzAtOV17MSwzfSlcXHMqLFxccyooWzAtOV17MSwzfSlcXHMqXFwpLy5leGVjKHN0cikpcmV0dXJuIG0ocGFyc2VJbnQocmVzWzFdLDEwKSxwYXJzZUludChyZXNbMl0sMTApLHBhcnNlSW50KHJlc1szXSwxMCkpO2lmKHJlcz0vcmdiYVxcKFxccyooWzAtOV17MSwzfSlcXHMqLFxccyooWzAtOV17MSwzfSlcXHMqLFxccyooWzAtOV17MSwzfSlcXHMqLFxccyooWzAtOV0rKD86XFwuWzAtOV0rKT8pXFxzKlxcKS8uZXhlYyhzdHIpKXJldHVybiBtKHBhcnNlSW50KHJlc1sxXSwxMCkscGFyc2VJbnQocmVzWzJdLDEwKSxwYXJzZUludChyZXNbM10sMTApLHBhcnNlRmxvYXQocmVzWzRdKSk7aWYocmVzPS9yZ2JcXChcXHMqKFswLTldKyg/OlxcLlswLTldKyk/KVxcJVxccyosXFxzKihbMC05XSsoPzpcXC5bMC05XSspPylcXCVcXHMqLFxccyooWzAtOV0rKD86XFwuWzAtOV0rKT8pXFwlXFxzKlxcKS8uZXhlYyhzdHIpKXJldHVybiBtKHBhcnNlRmxvYXQocmVzWzFdKSoyLjU1LHBhcnNlRmxvYXQocmVzWzJdKSoyLjU1LHBhcnNlRmxvYXQocmVzWzNdKSoyLjU1KTtpZihyZXM9L3JnYmFcXChcXHMqKFswLTldKyg/OlxcLlswLTldKyk/KVxcJVxccyosXFxzKihbMC05XSsoPzpcXC5bMC05XSspPylcXCVcXHMqLFxccyooWzAtOV0rKD86XFwuWzAtOV0rKT8pXFwlXFxzKixcXHMqKFswLTldKyg/OlxcLlswLTldKyk/KVxccypcXCkvLmV4ZWMoc3RyKSlyZXR1cm4gbShwYXJzZUZsb2F0KHJlc1sxXSkqMi41NSxwYXJzZUZsb2F0KHJlc1syXSkqMi41NSxwYXJzZUZsb2F0KHJlc1szXSkqMi41NSxwYXJzZUZsb2F0KHJlc1s0XSkpO2lmKHJlcz0vIyhbYS1mQS1GMC05XXsyfSkoW2EtZkEtRjAtOV17Mn0pKFthLWZBLUYwLTldezJ9KS8uZXhlYyhzdHIpKXJldHVybiBtKHBhcnNlSW50KHJlc1sxXSwxNikscGFyc2VJbnQocmVzWzJdLDE2KSxwYXJzZUludChyZXNbM10sMTYpKTtpZihyZXM9LyMoW2EtZkEtRjAtOV0pKFthLWZBLUYwLTldKShbYS1mQS1GMC05XSkvLmV4ZWMoc3RyKSlyZXR1cm4gbShwYXJzZUludChyZXNbMV0rcmVzWzFdLDE2KSxwYXJzZUludChyZXNbMl0rcmVzWzJdLDE2KSxwYXJzZUludChyZXNbM10rcmVzWzNdLDE2KSk7dmFyIG5hbWU9JC50cmltKHN0cikudG9Mb3dlckNhc2UoKTtpZihuYW1lPT1cInRyYW5zcGFyZW50XCIpcmV0dXJuIG0oMjU1LDI1NSwyNTUsMCk7ZWxzZXtyZXM9bG9va3VwQ29sb3JzW25hbWVdfHxbMCwwLDBdO3JldHVybiBtKHJlc1swXSxyZXNbMV0scmVzWzJdKX19O3ZhciBsb29rdXBDb2xvcnM9e2FxdWE6WzAsMjU1LDI1NV0sYXp1cmU6WzI0MCwyNTUsMjU1XSxiZWlnZTpbMjQ1LDI0NSwyMjBdLGJsYWNrOlswLDAsMF0sYmx1ZTpbMCwwLDI1NV0sYnJvd246WzE2NSw0Miw0Ml0sY3lhbjpbMCwyNTUsMjU1XSxkYXJrYmx1ZTpbMCwwLDEzOV0sZGFya2N5YW46WzAsMTM5LDEzOV0sZGFya2dyZXk6WzE2OSwxNjksMTY5XSxkYXJrZ3JlZW46WzAsMTAwLDBdLGRhcmtraGFraTpbMTg5LDE4MywxMDddLGRhcmttYWdlbnRhOlsxMzksMCwxMzldLGRhcmtvbGl2ZWdyZWVuOls4NSwxMDcsNDddLGRhcmtvcmFuZ2U6WzI1NSwxNDAsMF0sZGFya29yY2hpZDpbMTUzLDUwLDIwNF0sZGFya3JlZDpbMTM5LDAsMF0sZGFya3NhbG1vbjpbMjMzLDE1MCwxMjJdLGRhcmt2aW9sZXQ6WzE0OCwwLDIxMV0sZnVjaHNpYTpbMjU1LDAsMjU1XSxnb2xkOlsyNTUsMjE1LDBdLGdyZWVuOlswLDEyOCwwXSxpbmRpZ286Wzc1LDAsMTMwXSxraGFraTpbMjQwLDIzMCwxNDBdLGxpZ2h0Ymx1ZTpbMTczLDIxNiwyMzBdLGxpZ2h0Y3lhbjpbMjI0LDI1NSwyNTVdLGxpZ2h0Z3JlZW46WzE0NCwyMzgsMTQ0XSxsaWdodGdyZXk6WzIxMSwyMTEsMjExXSxsaWdodHBpbms6WzI1NSwxODIsMTkzXSxsaWdodHllbGxvdzpbMjU1LDI1NSwyMjRdLGxpbWU6WzAsMjU1LDBdLG1hZ2VudGE6WzI1NSwwLDI1NV0sbWFyb29uOlsxMjgsMCwwXSxuYXZ5OlswLDAsMTI4XSxvbGl2ZTpbMTI4LDEyOCwwXSxvcmFuZ2U6WzI1NSwxNjUsMF0scGluazpbMjU1LDE5MiwyMDNdLHB1cnBsZTpbMTI4LDAsMTI4XSx2aW9sZXQ6WzEyOCwwLDEyOF0scmVkOlsyNTUsMCwwXSxzaWx2ZXI6WzE5MiwxOTIsMTkyXSx3aGl0ZTpbMjU1LDI1NSwyNTVdLHllbGxvdzpbMjU1LDI1NSwwXX19KShqUXVlcnkpOyhmdW5jdGlvbigkKXt2YXIgaGFzT3duUHJvcGVydHk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtpZighJC5mbi5kZXRhY2gpeyQuZm4uZGV0YWNoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2lmKHRoaXMucGFyZW50Tm9kZSl7dGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpfX0pfX1mdW5jdGlvbiBDYW52YXMoY2xzLGNvbnRhaW5lcil7dmFyIGVsZW1lbnQ9Y29udGFpbmVyLmNoaWxkcmVuKFwiLlwiK2NscylbMF07aWYoZWxlbWVudD09bnVsbCl7ZWxlbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO2VsZW1lbnQuY2xhc3NOYW1lPWNsczskKGVsZW1lbnQpLmNzcyh7ZGlyZWN0aW9uOlwibHRyXCIscG9zaXRpb246XCJhYnNvbHV0ZVwiLGxlZnQ6MCx0b3A6MH0pLmFwcGVuZFRvKGNvbnRhaW5lcik7aWYoIWVsZW1lbnQuZ2V0Q29udGV4dCl7aWYod2luZG93Lkdfdm1sQ2FudmFzTWFuYWdlcil7ZWxlbWVudD13aW5kb3cuR192bWxDYW52YXNNYW5hZ2VyLmluaXRFbGVtZW50KGVsZW1lbnQpfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiQ2FudmFzIGlzIG5vdCBhdmFpbGFibGUuIElmIHlvdSdyZSB1c2luZyBJRSB3aXRoIGEgZmFsbC1iYWNrIHN1Y2ggYXMgRXhjYW52YXMsIHRoZW4gdGhlcmUncyBlaXRoZXIgYSBtaXN0YWtlIGluIHlvdXIgY29uZGl0aW9uYWwgaW5jbHVkZSwgb3IgdGhlIHBhZ2UgaGFzIG5vIERPQ1RZUEUgYW5kIGlzIHJlbmRlcmluZyBpbiBRdWlya3MgTW9kZS5cIil9fX10aGlzLmVsZW1lbnQ9ZWxlbWVudDt2YXIgY29udGV4dD10aGlzLmNvbnRleHQ9ZWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7dmFyIGRldmljZVBpeGVsUmF0aW89d2luZG93LmRldmljZVBpeGVsUmF0aW98fDEsYmFja2luZ1N0b3JlUmF0aW89Y29udGV4dC53ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvfHxjb250ZXh0Lm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW98fGNvbnRleHQubXNCYWNraW5nU3RvcmVQaXhlbFJhdGlvfHxjb250ZXh0Lm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvfHxjb250ZXh0LmJhY2tpbmdTdG9yZVBpeGVsUmF0aW98fDE7dGhpcy5waXhlbFJhdGlvPWRldmljZVBpeGVsUmF0aW8vYmFja2luZ1N0b3JlUmF0aW87dGhpcy5yZXNpemUoY29udGFpbmVyLndpZHRoKCksY29udGFpbmVyLmhlaWdodCgpKTt0aGlzLnRleHRDb250YWluZXI9bnVsbDt0aGlzLnRleHQ9e307dGhpcy5fdGV4dENhY2hlPXt9fUNhbnZhcy5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKHdpZHRoLGhlaWdodCl7aWYod2lkdGg8PTB8fGhlaWdodDw9MCl7dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkaW1lbnNpb25zIGZvciBwbG90LCB3aWR0aCA9IFwiK3dpZHRoK1wiLCBoZWlnaHQgPSBcIitoZWlnaHQpfXZhciBlbGVtZW50PXRoaXMuZWxlbWVudCxjb250ZXh0PXRoaXMuY29udGV4dCxwaXhlbFJhdGlvPXRoaXMucGl4ZWxSYXRpbztpZih0aGlzLndpZHRoIT13aWR0aCl7ZWxlbWVudC53aWR0aD13aWR0aCpwaXhlbFJhdGlvO2VsZW1lbnQuc3R5bGUud2lkdGg9d2lkdGgrXCJweFwiO3RoaXMud2lkdGg9d2lkdGh9aWYodGhpcy5oZWlnaHQhPWhlaWdodCl7ZWxlbWVudC5oZWlnaHQ9aGVpZ2h0KnBpeGVsUmF0aW87ZWxlbWVudC5zdHlsZS5oZWlnaHQ9aGVpZ2h0K1wicHhcIjt0aGlzLmhlaWdodD1oZWlnaHR9Y29udGV4dC5yZXN0b3JlKCk7Y29udGV4dC5zYXZlKCk7Y29udGV4dC5zY2FsZShwaXhlbFJhdGlvLHBpeGVsUmF0aW8pfTtDYW52YXMucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLDAsdGhpcy53aWR0aCx0aGlzLmhlaWdodCl9O0NhbnZhcy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7dmFyIGNhY2hlPXRoaXMuX3RleHRDYWNoZTtmb3IodmFyIGxheWVyS2V5IGluIGNhY2hlKXtpZihoYXNPd25Qcm9wZXJ0eS5jYWxsKGNhY2hlLGxheWVyS2V5KSl7dmFyIGxheWVyPXRoaXMuZ2V0VGV4dExheWVyKGxheWVyS2V5KSxsYXllckNhY2hlPWNhY2hlW2xheWVyS2V5XTtsYXllci5oaWRlKCk7Zm9yKHZhciBzdHlsZUtleSBpbiBsYXllckNhY2hlKXtpZihoYXNPd25Qcm9wZXJ0eS5jYWxsKGxheWVyQ2FjaGUsc3R5bGVLZXkpKXt2YXIgc3R5bGVDYWNoZT1sYXllckNhY2hlW3N0eWxlS2V5XTtmb3IodmFyIGtleSBpbiBzdHlsZUNhY2hlKXtpZihoYXNPd25Qcm9wZXJ0eS5jYWxsKHN0eWxlQ2FjaGUsa2V5KSl7dmFyIHBvc2l0aW9ucz1zdHlsZUNhY2hlW2tleV0ucG9zaXRpb25zO2Zvcih2YXIgaT0wLHBvc2l0aW9uO3Bvc2l0aW9uPXBvc2l0aW9uc1tpXTtpKyspe2lmKHBvc2l0aW9uLmFjdGl2ZSl7aWYoIXBvc2l0aW9uLnJlbmRlcmVkKXtsYXllci5hcHBlbmQocG9zaXRpb24uZWxlbWVudCk7cG9zaXRpb24ucmVuZGVyZWQ9dHJ1ZX19ZWxzZXtwb3NpdGlvbnMuc3BsaWNlKGktLSwxKTtpZihwb3NpdGlvbi5yZW5kZXJlZCl7cG9zaXRpb24uZWxlbWVudC5kZXRhY2goKX19fWlmKHBvc2l0aW9ucy5sZW5ndGg9PTApe2RlbGV0ZSBzdHlsZUNhY2hlW2tleV19fX19fWxheWVyLnNob3coKX19fTtDYW52YXMucHJvdG90eXBlLmdldFRleHRMYXllcj1mdW5jdGlvbihjbGFzc2VzKXt2YXIgbGF5ZXI9dGhpcy50ZXh0W2NsYXNzZXNdO2lmKGxheWVyPT1udWxsKXtpZih0aGlzLnRleHRDb250YWluZXI9PW51bGwpe3RoaXMudGV4dENvbnRhaW5lcj0kKFwiPGRpdiBjbGFzcz0nZmxvdC10ZXh0Jz48L2Rpdj5cIikuY3NzKHtwb3NpdGlvbjpcImFic29sdXRlXCIsdG9wOjAsbGVmdDowLGJvdHRvbTowLHJpZ2h0OjAsXCJmb250LXNpemVcIjpcInNtYWxsZXJcIixjb2xvcjpcIiM1NDU0NTRcIn0pLmluc2VydEFmdGVyKHRoaXMuZWxlbWVudCl9bGF5ZXI9dGhpcy50ZXh0W2NsYXNzZXNdPSQoXCI8ZGl2PjwvZGl2PlwiKS5hZGRDbGFzcyhjbGFzc2VzKS5jc3Moe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix0b3A6MCxsZWZ0OjAsYm90dG9tOjAscmlnaHQ6MH0pLmFwcGVuZFRvKHRoaXMudGV4dENvbnRhaW5lcil9cmV0dXJuIGxheWVyfTtDYW52YXMucHJvdG90eXBlLmdldFRleHRJbmZvPWZ1bmN0aW9uKGxheWVyLHRleHQsZm9udCxhbmdsZSx3aWR0aCl7dmFyIHRleHRTdHlsZSxsYXllckNhY2hlLHN0eWxlQ2FjaGUsaW5mbzt0ZXh0PVwiXCIrdGV4dDtpZih0eXBlb2YgZm9udD09PVwib2JqZWN0XCIpe3RleHRTdHlsZT1mb250LnN0eWxlK1wiIFwiK2ZvbnQudmFyaWFudCtcIiBcIitmb250LndlaWdodCtcIiBcIitmb250LnNpemUrXCJweC9cIitmb250LmxpbmVIZWlnaHQrXCJweCBcIitmb250LmZhbWlseX1lbHNle3RleHRTdHlsZT1mb250fWxheWVyQ2FjaGU9dGhpcy5fdGV4dENhY2hlW2xheWVyXTtpZihsYXllckNhY2hlPT1udWxsKXtsYXllckNhY2hlPXRoaXMuX3RleHRDYWNoZVtsYXllcl09e319c3R5bGVDYWNoZT1sYXllckNhY2hlW3RleHRTdHlsZV07aWYoc3R5bGVDYWNoZT09bnVsbCl7c3R5bGVDYWNoZT1sYXllckNhY2hlW3RleHRTdHlsZV09e319aW5mbz1zdHlsZUNhY2hlW3RleHRdO2lmKGluZm89PW51bGwpe3ZhciBlbGVtZW50PSQoXCI8ZGl2PjwvZGl2PlwiKS5odG1sKHRleHQpLmNzcyh7cG9zaXRpb246XCJhYnNvbHV0ZVwiLFwibWF4LXdpZHRoXCI6d2lkdGgsdG9wOi05OTk5fSkuYXBwZW5kVG8odGhpcy5nZXRUZXh0TGF5ZXIobGF5ZXIpKTtpZih0eXBlb2YgZm9udD09PVwib2JqZWN0XCIpe2VsZW1lbnQuY3NzKHtmb250OnRleHRTdHlsZSxjb2xvcjpmb250LmNvbG9yfSl9ZWxzZSBpZih0eXBlb2YgZm9udD09PVwic3RyaW5nXCIpe2VsZW1lbnQuYWRkQ2xhc3MoZm9udCl9aW5mbz1zdHlsZUNhY2hlW3RleHRdPXt3aWR0aDplbGVtZW50Lm91dGVyV2lkdGgodHJ1ZSksaGVpZ2h0OmVsZW1lbnQub3V0ZXJIZWlnaHQodHJ1ZSksZWxlbWVudDplbGVtZW50LHBvc2l0aW9uczpbXX07ZWxlbWVudC5kZXRhY2goKX1yZXR1cm4gaW5mb307Q2FudmFzLnByb3RvdHlwZS5hZGRUZXh0PWZ1bmN0aW9uKGxheWVyLHgseSx0ZXh0LGZvbnQsYW5nbGUsd2lkdGgsaGFsaWduLHZhbGlnbil7dmFyIGluZm89dGhpcy5nZXRUZXh0SW5mbyhsYXllcix0ZXh0LGZvbnQsYW5nbGUsd2lkdGgpLHBvc2l0aW9ucz1pbmZvLnBvc2l0aW9ucztpZihoYWxpZ249PVwiY2VudGVyXCIpe3gtPWluZm8ud2lkdGgvMn1lbHNlIGlmKGhhbGlnbj09XCJyaWdodFwiKXt4LT1pbmZvLndpZHRofWlmKHZhbGlnbj09XCJtaWRkbGVcIil7eS09aW5mby5oZWlnaHQvMn1lbHNlIGlmKHZhbGlnbj09XCJib3R0b21cIil7eS09aW5mby5oZWlnaHR9Zm9yKHZhciBpPTAscG9zaXRpb247cG9zaXRpb249cG9zaXRpb25zW2ldO2krKyl7aWYocG9zaXRpb24ueD09eCYmcG9zaXRpb24ueT09eSl7cG9zaXRpb24uYWN0aXZlPXRydWU7cmV0dXJufX1wb3NpdGlvbj17YWN0aXZlOnRydWUscmVuZGVyZWQ6ZmFsc2UsZWxlbWVudDpwb3NpdGlvbnMubGVuZ3RoP2luZm8uZWxlbWVudC5jbG9uZSgpOmluZm8uZWxlbWVudCx4OngseTp5fTtwb3NpdGlvbnMucHVzaChwb3NpdGlvbik7cG9zaXRpb24uZWxlbWVudC5jc3Moe3RvcDpNYXRoLnJvdW5kKHkpLGxlZnQ6TWF0aC5yb3VuZCh4KSxcInRleHQtYWxpZ25cIjpoYWxpZ259KX07Q2FudmFzLnByb3RvdHlwZS5yZW1vdmVUZXh0PWZ1bmN0aW9uKGxheWVyLHgseSx0ZXh0LGZvbnQsYW5nbGUpe2lmKHRleHQ9PW51bGwpe3ZhciBsYXllckNhY2hlPXRoaXMuX3RleHRDYWNoZVtsYXllcl07aWYobGF5ZXJDYWNoZSE9bnVsbCl7Zm9yKHZhciBzdHlsZUtleSBpbiBsYXllckNhY2hlKXtpZihoYXNPd25Qcm9wZXJ0eS5jYWxsKGxheWVyQ2FjaGUsc3R5bGVLZXkpKXt2YXIgc3R5bGVDYWNoZT1sYXllckNhY2hlW3N0eWxlS2V5XTtmb3IodmFyIGtleSBpbiBzdHlsZUNhY2hlKXtpZihoYXNPd25Qcm9wZXJ0eS5jYWxsKHN0eWxlQ2FjaGUsa2V5KSl7dmFyIHBvc2l0aW9ucz1zdHlsZUNhY2hlW2tleV0ucG9zaXRpb25zO2Zvcih2YXIgaT0wLHBvc2l0aW9uO3Bvc2l0aW9uPXBvc2l0aW9uc1tpXTtpKyspe3Bvc2l0aW9uLmFjdGl2ZT1mYWxzZX19fX19fX1lbHNle3ZhciBwb3NpdGlvbnM9dGhpcy5nZXRUZXh0SW5mbyhsYXllcix0ZXh0LGZvbnQsYW5nbGUpLnBvc2l0aW9ucztmb3IodmFyIGk9MCxwb3NpdGlvbjtwb3NpdGlvbj1wb3NpdGlvbnNbaV07aSsrKXtpZihwb3NpdGlvbi54PT14JiZwb3NpdGlvbi55PT15KXtwb3NpdGlvbi5hY3RpdmU9ZmFsc2V9fX19O2Z1bmN0aW9uIFBsb3QocGxhY2Vob2xkZXIsZGF0YV8sb3B0aW9uc18scGx1Z2lucyl7dmFyIHNlcmllcz1bXSxvcHRpb25zPXtjb2xvcnM6W1wiI2VkYzI0MFwiLFwiI2FmZDhmOFwiLFwiI2NiNGI0YlwiLFwiIzRkYTc0ZFwiLFwiIzk0NDBlZFwiXSxsZWdlbmQ6e3Nob3c6dHJ1ZSxub0NvbHVtbnM6MSxsYWJlbEZvcm1hdHRlcjpudWxsLGxhYmVsQm94Qm9yZGVyQ29sb3I6XCIjY2NjXCIsY29udGFpbmVyOm51bGwscG9zaXRpb246XCJuZVwiLG1hcmdpbjo1LGJhY2tncm91bmRDb2xvcjpudWxsLGJhY2tncm91bmRPcGFjaXR5Oi44NSxzb3J0ZWQ6bnVsbH0seGF4aXM6e3Nob3c6bnVsbCxwb3NpdGlvbjpcImJvdHRvbVwiLG1vZGU6bnVsbCxmb250Om51bGwsY29sb3I6bnVsbCx0aWNrQ29sb3I6bnVsbCx0cmFuc2Zvcm06bnVsbCxpbnZlcnNlVHJhbnNmb3JtOm51bGwsbWluOm51bGwsbWF4Om51bGwsYXV0b3NjYWxlTWFyZ2luOm51bGwsdGlja3M6bnVsbCx0aWNrRm9ybWF0dGVyOm51bGwsbGFiZWxXaWR0aDpudWxsLGxhYmVsSGVpZ2h0Om51bGwscmVzZXJ2ZVNwYWNlOm51bGwsdGlja0xlbmd0aDpudWxsLGFsaWduVGlja3NXaXRoQXhpczpudWxsLHRpY2tEZWNpbWFsczpudWxsLHRpY2tTaXplOm51bGwsbWluVGlja1NpemU6bnVsbH0seWF4aXM6e2F1dG9zY2FsZU1hcmdpbjouMDIscG9zaXRpb246XCJsZWZ0XCJ9LHhheGVzOltdLHlheGVzOltdLHNlcmllczp7cG9pbnRzOntzaG93OmZhbHNlLHJhZGl1czozLGxpbmVXaWR0aDoyLGZpbGw6dHJ1ZSxmaWxsQ29sb3I6XCIjZmZmZmZmXCIsc3ltYm9sOlwiY2lyY2xlXCJ9LGxpbmVzOntsaW5lV2lkdGg6MixmaWxsOmZhbHNlLGZpbGxDb2xvcjpudWxsLHN0ZXBzOmZhbHNlfSxiYXJzOntzaG93OmZhbHNlLGxpbmVXaWR0aDoyLGJhcldpZHRoOjEsZmlsbDp0cnVlLGZpbGxDb2xvcjpudWxsLGFsaWduOlwibGVmdFwiLGhvcml6b250YWw6ZmFsc2UsemVybzp0cnVlfSxzaGFkb3dTaXplOjMsaGlnaGxpZ2h0Q29sb3I6bnVsbH0sZ3JpZDp7c2hvdzp0cnVlLGFib3ZlRGF0YTpmYWxzZSxjb2xvcjpcIiM1NDU0NTRcIixiYWNrZ3JvdW5kQ29sb3I6bnVsbCxib3JkZXJDb2xvcjpudWxsLHRpY2tDb2xvcjpudWxsLG1hcmdpbjowLGxhYmVsTWFyZ2luOjUsYXhpc01hcmdpbjo4LGJvcmRlcldpZHRoOjIsbWluQm9yZGVyTWFyZ2luOm51bGwsbWFya2luZ3M6bnVsbCxtYXJraW5nc0NvbG9yOlwiI2Y0ZjRmNFwiLG1hcmtpbmdzTGluZVdpZHRoOjIsY2xpY2thYmxlOmZhbHNlLGhvdmVyYWJsZTpmYWxzZSxhdXRvSGlnaGxpZ2h0OnRydWUsbW91c2VBY3RpdmVSYWRpdXM6MTB9LGludGVyYWN0aW9uOntyZWRyYXdPdmVybGF5SW50ZXJ2YWw6MWUzLzYwfSxob29rczp7fX0sc3VyZmFjZT1udWxsLG92ZXJsYXk9bnVsbCxldmVudEhvbGRlcj1udWxsLGN0eD1udWxsLG9jdHg9bnVsbCx4YXhlcz1bXSx5YXhlcz1bXSxwbG90T2Zmc2V0PXtsZWZ0OjAscmlnaHQ6MCx0b3A6MCxib3R0b206MH0scGxvdFdpZHRoPTAscGxvdEhlaWdodD0wLGhvb2tzPXtwcm9jZXNzT3B0aW9uczpbXSxwcm9jZXNzUmF3RGF0YTpbXSxwcm9jZXNzRGF0YXBvaW50czpbXSxwcm9jZXNzT2Zmc2V0OltdLGRyYXdCYWNrZ3JvdW5kOltdLGRyYXdTZXJpZXM6W10sZHJhdzpbXSxiaW5kRXZlbnRzOltdLGRyYXdPdmVybGF5OltdLHNodXRkb3duOltdfSxwbG90PXRoaXM7cGxvdC5zZXREYXRhPXNldERhdGE7cGxvdC5zZXR1cEdyaWQ9c2V0dXBHcmlkO3Bsb3QuZHJhdz1kcmF3O3Bsb3QuZ2V0UGxhY2Vob2xkZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcGxhY2Vob2xkZXJ9O3Bsb3QuZ2V0Q2FudmFzPWZ1bmN0aW9uKCl7cmV0dXJuIHN1cmZhY2UuZWxlbWVudH07cGxvdC5nZXRQbG90T2Zmc2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHBsb3RPZmZzZXR9O3Bsb3Qud2lkdGg9ZnVuY3Rpb24oKXtyZXR1cm4gcGxvdFdpZHRofTtwbG90LmhlaWdodD1mdW5jdGlvbigpe3JldHVybiBwbG90SGVpZ2h0fTtwbG90Lm9mZnNldD1mdW5jdGlvbigpe3ZhciBvPWV2ZW50SG9sZGVyLm9mZnNldCgpO28ubGVmdCs9cGxvdE9mZnNldC5sZWZ0O28udG9wKz1wbG90T2Zmc2V0LnRvcDtyZXR1cm4gb307cGxvdC5nZXREYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHNlcmllc307cGxvdC5nZXRBeGVzPWZ1bmN0aW9uKCl7dmFyIHJlcz17fSxpOyQuZWFjaCh4YXhlcy5jb25jYXQoeWF4ZXMpLGZ1bmN0aW9uKF8sYXhpcyl7aWYoYXhpcylyZXNbYXhpcy5kaXJlY3Rpb24rKGF4aXMubiE9MT9heGlzLm46XCJcIikrXCJheGlzXCJdPWF4aXN9KTtyZXR1cm4gcmVzfTtwbG90LmdldFhBeGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHhheGVzfTtwbG90LmdldFlBeGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHlheGVzfTtwbG90LmMycD1jYW52YXNUb0F4aXNDb29yZHM7cGxvdC5wMmM9YXhpc1RvQ2FudmFzQ29vcmRzO3Bsb3QuZ2V0T3B0aW9ucz1mdW5jdGlvbigpe3JldHVybiBvcHRpb25zfTtwbG90LmhpZ2hsaWdodD1oaWdobGlnaHQ7cGxvdC51bmhpZ2hsaWdodD11bmhpZ2hsaWdodDtwbG90LnRyaWdnZXJSZWRyYXdPdmVybGF5PXRyaWdnZXJSZWRyYXdPdmVybGF5O3Bsb3QucG9pbnRPZmZzZXQ9ZnVuY3Rpb24ocG9pbnQpe3JldHVybntsZWZ0OnBhcnNlSW50KHhheGVzW2F4aXNOdW1iZXIocG9pbnQsXCJ4XCIpLTFdLnAyYygrcG9pbnQueCkrcGxvdE9mZnNldC5sZWZ0LDEwKSx0b3A6cGFyc2VJbnQoeWF4ZXNbYXhpc051bWJlcihwb2ludCxcInlcIiktMV0ucDJjKCtwb2ludC55KStwbG90T2Zmc2V0LnRvcCwxMCl9fTtwbG90LnNodXRkb3duPXNodXRkb3duO3Bsb3QuZGVzdHJveT1mdW5jdGlvbigpe3NodXRkb3duKCk7cGxhY2Vob2xkZXIucmVtb3ZlRGF0YShcInBsb3RcIikuZW1wdHkoKTtzZXJpZXM9W107b3B0aW9ucz1udWxsO3N1cmZhY2U9bnVsbDtvdmVybGF5PW51bGw7ZXZlbnRIb2xkZXI9bnVsbDtjdHg9bnVsbDtvY3R4PW51bGw7eGF4ZXM9W107eWF4ZXM9W107aG9va3M9bnVsbDtoaWdobGlnaHRzPVtdO3Bsb3Q9bnVsbH07cGxvdC5yZXNpemU9ZnVuY3Rpb24oKXt2YXIgd2lkdGg9cGxhY2Vob2xkZXIud2lkdGgoKSxoZWlnaHQ9cGxhY2Vob2xkZXIuaGVpZ2h0KCk7c3VyZmFjZS5yZXNpemUod2lkdGgsaGVpZ2h0KTtvdmVybGF5LnJlc2l6ZSh3aWR0aCxoZWlnaHQpfTtwbG90Lmhvb2tzPWhvb2tzO2luaXRQbHVnaW5zKHBsb3QpO3BhcnNlT3B0aW9ucyhvcHRpb25zXyk7c2V0dXBDYW52YXNlcygpO3NldERhdGEoZGF0YV8pO3NldHVwR3JpZCgpO2RyYXcoKTtiaW5kRXZlbnRzKCk7ZnVuY3Rpb24gZXhlY3V0ZUhvb2tzKGhvb2ssYXJncyl7YXJncz1bcGxvdF0uY29uY2F0KGFyZ3MpO2Zvcih2YXIgaT0wO2k8aG9vay5sZW5ndGg7KytpKWhvb2tbaV0uYXBwbHkodGhpcyxhcmdzKX1mdW5jdGlvbiBpbml0UGx1Z2lucygpe3ZhciBjbGFzc2VzPXtDYW52YXM6Q2FudmFzfTtmb3IodmFyIGk9MDtpPHBsdWdpbnMubGVuZ3RoOysraSl7dmFyIHA9cGx1Z2luc1tpXTtwLmluaXQocGxvdCxjbGFzc2VzKTtpZihwLm9wdGlvbnMpJC5leHRlbmQodHJ1ZSxvcHRpb25zLHAub3B0aW9ucyl9fWZ1bmN0aW9uIHBhcnNlT3B0aW9ucyhvcHRzKXskLmV4dGVuZCh0cnVlLG9wdGlvbnMsb3B0cyk7aWYob3B0cyYmb3B0cy5jb2xvcnMpe29wdGlvbnMuY29sb3JzPW9wdHMuY29sb3JzfWlmKG9wdGlvbnMueGF4aXMuY29sb3I9PW51bGwpb3B0aW9ucy54YXhpcy5jb2xvcj0kLmNvbG9yLnBhcnNlKG9wdGlvbnMuZ3JpZC5jb2xvcikuc2NhbGUoXCJhXCIsLjIyKS50b1N0cmluZygpO2lmKG9wdGlvbnMueWF4aXMuY29sb3I9PW51bGwpb3B0aW9ucy55YXhpcy5jb2xvcj0kLmNvbG9yLnBhcnNlKG9wdGlvbnMuZ3JpZC5jb2xvcikuc2NhbGUoXCJhXCIsLjIyKS50b1N0cmluZygpO2lmKG9wdGlvbnMueGF4aXMudGlja0NvbG9yPT1udWxsKW9wdGlvbnMueGF4aXMudGlja0NvbG9yPW9wdGlvbnMuZ3JpZC50aWNrQ29sb3J8fG9wdGlvbnMueGF4aXMuY29sb3I7aWYob3B0aW9ucy55YXhpcy50aWNrQ29sb3I9PW51bGwpb3B0aW9ucy55YXhpcy50aWNrQ29sb3I9b3B0aW9ucy5ncmlkLnRpY2tDb2xvcnx8b3B0aW9ucy55YXhpcy5jb2xvcjtpZihvcHRpb25zLmdyaWQuYm9yZGVyQ29sb3I9PW51bGwpb3B0aW9ucy5ncmlkLmJvcmRlckNvbG9yPW9wdGlvbnMuZ3JpZC5jb2xvcjtpZihvcHRpb25zLmdyaWQudGlja0NvbG9yPT1udWxsKW9wdGlvbnMuZ3JpZC50aWNrQ29sb3I9JC5jb2xvci5wYXJzZShvcHRpb25zLmdyaWQuY29sb3IpLnNjYWxlKFwiYVwiLC4yMikudG9TdHJpbmcoKTt2YXIgaSxheGlzT3B0aW9ucyxheGlzQ291bnQsZm9udFNpemU9cGxhY2Vob2xkZXIuY3NzKFwiZm9udC1zaXplXCIpLGZvbnRTaXplRGVmYXVsdD1mb250U2l6ZT8rZm9udFNpemUucmVwbGFjZShcInB4XCIsXCJcIik6MTMsZm9udERlZmF1bHRzPXtzdHlsZTpwbGFjZWhvbGRlci5jc3MoXCJmb250LXN0eWxlXCIpLHNpemU6TWF0aC5yb3VuZCguOCpmb250U2l6ZURlZmF1bHQpLHZhcmlhbnQ6cGxhY2Vob2xkZXIuY3NzKFwiZm9udC12YXJpYW50XCIpLHdlaWdodDpwbGFjZWhvbGRlci5jc3MoXCJmb250LXdlaWdodFwiKSxmYW1pbHk6cGxhY2Vob2xkZXIuY3NzKFwiZm9udC1mYW1pbHlcIil9O2F4aXNDb3VudD1vcHRpb25zLnhheGVzLmxlbmd0aHx8MTtmb3IoaT0wO2k8YXhpc0NvdW50OysraSl7YXhpc09wdGlvbnM9b3B0aW9ucy54YXhlc1tpXTtpZihheGlzT3B0aW9ucyYmIWF4aXNPcHRpb25zLnRpY2tDb2xvcil7YXhpc09wdGlvbnMudGlja0NvbG9yPWF4aXNPcHRpb25zLmNvbG9yfWF4aXNPcHRpb25zPSQuZXh0ZW5kKHRydWUse30sb3B0aW9ucy54YXhpcyxheGlzT3B0aW9ucyk7b3B0aW9ucy54YXhlc1tpXT1heGlzT3B0aW9ucztpZihheGlzT3B0aW9ucy5mb250KXtheGlzT3B0aW9ucy5mb250PSQuZXh0ZW5kKHt9LGZvbnREZWZhdWx0cyxheGlzT3B0aW9ucy5mb250KTtpZighYXhpc09wdGlvbnMuZm9udC5jb2xvcil7YXhpc09wdGlvbnMuZm9udC5jb2xvcj1heGlzT3B0aW9ucy5jb2xvcn1pZighYXhpc09wdGlvbnMuZm9udC5saW5lSGVpZ2h0KXtheGlzT3B0aW9ucy5mb250LmxpbmVIZWlnaHQ9TWF0aC5yb3VuZChheGlzT3B0aW9ucy5mb250LnNpemUqMS4xNSl9fX1heGlzQ291bnQ9b3B0aW9ucy55YXhlcy5sZW5ndGh8fDE7Zm9yKGk9MDtpPGF4aXNDb3VudDsrK2kpe2F4aXNPcHRpb25zPW9wdGlvbnMueWF4ZXNbaV07aWYoYXhpc09wdGlvbnMmJiFheGlzT3B0aW9ucy50aWNrQ29sb3Ipe2F4aXNPcHRpb25zLnRpY2tDb2xvcj1heGlzT3B0aW9ucy5jb2xvcn1heGlzT3B0aW9ucz0kLmV4dGVuZCh0cnVlLHt9LG9wdGlvbnMueWF4aXMsYXhpc09wdGlvbnMpO29wdGlvbnMueWF4ZXNbaV09YXhpc09wdGlvbnM7aWYoYXhpc09wdGlvbnMuZm9udCl7YXhpc09wdGlvbnMuZm9udD0kLmV4dGVuZCh7fSxmb250RGVmYXVsdHMsYXhpc09wdGlvbnMuZm9udCk7aWYoIWF4aXNPcHRpb25zLmZvbnQuY29sb3Ipe2F4aXNPcHRpb25zLmZvbnQuY29sb3I9YXhpc09wdGlvbnMuY29sb3J9aWYoIWF4aXNPcHRpb25zLmZvbnQubGluZUhlaWdodCl7YXhpc09wdGlvbnMuZm9udC5saW5lSGVpZ2h0PU1hdGgucm91bmQoYXhpc09wdGlvbnMuZm9udC5zaXplKjEuMTUpfX19aWYob3B0aW9ucy54YXhpcy5ub1RpY2tzJiZvcHRpb25zLnhheGlzLnRpY2tzPT1udWxsKW9wdGlvbnMueGF4aXMudGlja3M9b3B0aW9ucy54YXhpcy5ub1RpY2tzO2lmKG9wdGlvbnMueWF4aXMubm9UaWNrcyYmb3B0aW9ucy55YXhpcy50aWNrcz09bnVsbClvcHRpb25zLnlheGlzLnRpY2tzPW9wdGlvbnMueWF4aXMubm9UaWNrcztpZihvcHRpb25zLngyYXhpcyl7b3B0aW9ucy54YXhlc1sxXT0kLmV4dGVuZCh0cnVlLHt9LG9wdGlvbnMueGF4aXMsb3B0aW9ucy54MmF4aXMpO29wdGlvbnMueGF4ZXNbMV0ucG9zaXRpb249XCJ0b3BcIjtpZihvcHRpb25zLngyYXhpcy5taW49PW51bGwpe29wdGlvbnMueGF4ZXNbMV0ubWluPW51bGx9aWYob3B0aW9ucy54MmF4aXMubWF4PT1udWxsKXtvcHRpb25zLnhheGVzWzFdLm1heD1udWxsfX1pZihvcHRpb25zLnkyYXhpcyl7b3B0aW9ucy55YXhlc1sxXT0kLmV4dGVuZCh0cnVlLHt9LG9wdGlvbnMueWF4aXMsb3B0aW9ucy55MmF4aXMpO29wdGlvbnMueWF4ZXNbMV0ucG9zaXRpb249XCJyaWdodFwiO2lmKG9wdGlvbnMueTJheGlzLm1pbj09bnVsbCl7b3B0aW9ucy55YXhlc1sxXS5taW49bnVsbH1pZihvcHRpb25zLnkyYXhpcy5tYXg9PW51bGwpe29wdGlvbnMueWF4ZXNbMV0ubWF4PW51bGx9fWlmKG9wdGlvbnMuZ3JpZC5jb2xvcmVkQXJlYXMpb3B0aW9ucy5ncmlkLm1hcmtpbmdzPW9wdGlvbnMuZ3JpZC5jb2xvcmVkQXJlYXM7aWYob3B0aW9ucy5ncmlkLmNvbG9yZWRBcmVhc0NvbG9yKW9wdGlvbnMuZ3JpZC5tYXJraW5nc0NvbG9yPW9wdGlvbnMuZ3JpZC5jb2xvcmVkQXJlYXNDb2xvcjtpZihvcHRpb25zLmxpbmVzKSQuZXh0ZW5kKHRydWUsb3B0aW9ucy5zZXJpZXMubGluZXMsb3B0aW9ucy5saW5lcyk7aWYob3B0aW9ucy5wb2ludHMpJC5leHRlbmQodHJ1ZSxvcHRpb25zLnNlcmllcy5wb2ludHMsb3B0aW9ucy5wb2ludHMpO2lmKG9wdGlvbnMuYmFycykkLmV4dGVuZCh0cnVlLG9wdGlvbnMuc2VyaWVzLmJhcnMsb3B0aW9ucy5iYXJzKTtpZihvcHRpb25zLnNoYWRvd1NpemUhPW51bGwpb3B0aW9ucy5zZXJpZXMuc2hhZG93U2l6ZT1vcHRpb25zLnNoYWRvd1NpemU7aWYob3B0aW9ucy5oaWdobGlnaHRDb2xvciE9bnVsbClvcHRpb25zLnNlcmllcy5oaWdobGlnaHRDb2xvcj1vcHRpb25zLmhpZ2hsaWdodENvbG9yO2ZvcihpPTA7aTxvcHRpb25zLnhheGVzLmxlbmd0aDsrK2kpZ2V0T3JDcmVhdGVBeGlzKHhheGVzLGkrMSkub3B0aW9ucz1vcHRpb25zLnhheGVzW2ldO2ZvcihpPTA7aTxvcHRpb25zLnlheGVzLmxlbmd0aDsrK2kpZ2V0T3JDcmVhdGVBeGlzKHlheGVzLGkrMSkub3B0aW9ucz1vcHRpb25zLnlheGVzW2ldO2Zvcih2YXIgbiBpbiBob29rcylpZihvcHRpb25zLmhvb2tzW25dJiZvcHRpb25zLmhvb2tzW25dLmxlbmd0aClob29rc1tuXT1ob29rc1tuXS5jb25jYXQob3B0aW9ucy5ob29rc1tuXSk7ZXhlY3V0ZUhvb2tzKGhvb2tzLnByb2Nlc3NPcHRpb25zLFtvcHRpb25zXSl9ZnVuY3Rpb24gc2V0RGF0YShkKXtzZXJpZXM9cGFyc2VEYXRhKGQpO2ZpbGxJblNlcmllc09wdGlvbnMoKTtwcm9jZXNzRGF0YSgpfWZ1bmN0aW9uIHBhcnNlRGF0YShkKXt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8ZC5sZW5ndGg7KytpKXt2YXIgcz0kLmV4dGVuZCh0cnVlLHt9LG9wdGlvbnMuc2VyaWVzKTtpZihkW2ldLmRhdGEhPW51bGwpe3MuZGF0YT1kW2ldLmRhdGE7ZGVsZXRlIGRbaV0uZGF0YTskLmV4dGVuZCh0cnVlLHMsZFtpXSk7ZFtpXS5kYXRhPXMuZGF0YX1lbHNlIHMuZGF0YT1kW2ldO3Jlcy5wdXNoKHMpfXJldHVybiByZXN9ZnVuY3Rpb24gYXhpc051bWJlcihvYmosY29vcmQpe3ZhciBhPW9ialtjb29yZCtcImF4aXNcIl07aWYodHlwZW9mIGE9PVwib2JqZWN0XCIpYT1hLm47aWYodHlwZW9mIGEhPVwibnVtYmVyXCIpYT0xO3JldHVybiBhfWZ1bmN0aW9uIGFsbEF4ZXMoKXtyZXR1cm4gJC5ncmVwKHhheGVzLmNvbmNhdCh5YXhlcyksZnVuY3Rpb24oYSl7cmV0dXJuIGF9KX1mdW5jdGlvbiBjYW52YXNUb0F4aXNDb29yZHMocG9zKXt2YXIgcmVzPXt9LGksYXhpcztmb3IoaT0wO2k8eGF4ZXMubGVuZ3RoOysraSl7YXhpcz14YXhlc1tpXTtpZihheGlzJiZheGlzLnVzZWQpcmVzW1wieFwiK2F4aXMubl09YXhpcy5jMnAocG9zLmxlZnQpfWZvcihpPTA7aTx5YXhlcy5sZW5ndGg7KytpKXtheGlzPXlheGVzW2ldO2lmKGF4aXMmJmF4aXMudXNlZClyZXNbXCJ5XCIrYXhpcy5uXT1heGlzLmMycChwb3MudG9wKX1pZihyZXMueDEhPT11bmRlZmluZWQpcmVzLng9cmVzLngxO2lmKHJlcy55MSE9PXVuZGVmaW5lZClyZXMueT1yZXMueTE7cmV0dXJuIHJlc31mdW5jdGlvbiBheGlzVG9DYW52YXNDb29yZHMocG9zKXt2YXIgcmVzPXt9LGksYXhpcyxrZXk7Zm9yKGk9MDtpPHhheGVzLmxlbmd0aDsrK2kpe2F4aXM9eGF4ZXNbaV07aWYoYXhpcyYmYXhpcy51c2VkKXtrZXk9XCJ4XCIrYXhpcy5uO2lmKHBvc1trZXldPT1udWxsJiZheGlzLm49PTEpa2V5PVwieFwiO2lmKHBvc1trZXldIT1udWxsKXtyZXMubGVmdD1heGlzLnAyYyhwb3Nba2V5XSk7YnJlYWt9fX1mb3IoaT0wO2k8eWF4ZXMubGVuZ3RoOysraSl7YXhpcz15YXhlc1tpXTtpZihheGlzJiZheGlzLnVzZWQpe2tleT1cInlcIitheGlzLm47aWYocG9zW2tleV09PW51bGwmJmF4aXMubj09MSlrZXk9XCJ5XCI7aWYocG9zW2tleV0hPW51bGwpe3Jlcy50b3A9YXhpcy5wMmMocG9zW2tleV0pO2JyZWFrfX19cmV0dXJuIHJlc31mdW5jdGlvbiBnZXRPckNyZWF0ZUF4aXMoYXhlcyxudW1iZXIpe2lmKCFheGVzW251bWJlci0xXSlheGVzW251bWJlci0xXT17bjpudW1iZXIsZGlyZWN0aW9uOmF4ZXM9PXhheGVzP1wieFwiOlwieVwiLG9wdGlvbnM6JC5leHRlbmQodHJ1ZSx7fSxheGVzPT14YXhlcz9vcHRpb25zLnhheGlzOm9wdGlvbnMueWF4aXMpfTtyZXR1cm4gYXhlc1tudW1iZXItMV19ZnVuY3Rpb24gZmlsbEluU2VyaWVzT3B0aW9ucygpe3ZhciBuZWVkZWRDb2xvcnM9c2VyaWVzLmxlbmd0aCxtYXhJbmRleD0tMSxpO2ZvcihpPTA7aTxzZXJpZXMubGVuZ3RoOysraSl7dmFyIHNjPXNlcmllc1tpXS5jb2xvcjtpZihzYyE9bnVsbCl7bmVlZGVkQ29sb3JzLS07aWYodHlwZW9mIHNjPT1cIm51bWJlclwiJiZzYz5tYXhJbmRleCl7bWF4SW5kZXg9c2N9fX1pZihuZWVkZWRDb2xvcnM8PW1heEluZGV4KXtuZWVkZWRDb2xvcnM9bWF4SW5kZXgrMX12YXIgYyxjb2xvcnM9W10sY29sb3JQb29sPW9wdGlvbnMuY29sb3JzLGNvbG9yUG9vbFNpemU9Y29sb3JQb29sLmxlbmd0aCx2YXJpYXRpb249MDtmb3IoaT0wO2k8bmVlZGVkQ29sb3JzO2krKyl7Yz0kLmNvbG9yLnBhcnNlKGNvbG9yUG9vbFtpJWNvbG9yUG9vbFNpemVdfHxcIiM2NjZcIik7aWYoaSVjb2xvclBvb2xTaXplPT0wJiZpKXtpZih2YXJpYXRpb24+PTApe2lmKHZhcmlhdGlvbjwuNSl7dmFyaWF0aW9uPS12YXJpYXRpb24tLjJ9ZWxzZSB2YXJpYXRpb249MH1lbHNlIHZhcmlhdGlvbj0tdmFyaWF0aW9ufWNvbG9yc1tpXT1jLnNjYWxlKFwicmdiXCIsMSt2YXJpYXRpb24pfXZhciBjb2xvcmk9MCxzO2ZvcihpPTA7aTxzZXJpZXMubGVuZ3RoOysraSl7cz1zZXJpZXNbaV07aWYocy5jb2xvcj09bnVsbCl7cy5jb2xvcj1jb2xvcnNbY29sb3JpXS50b1N0cmluZygpOysrY29sb3JpfWVsc2UgaWYodHlwZW9mIHMuY29sb3I9PVwibnVtYmVyXCIpcy5jb2xvcj1jb2xvcnNbcy5jb2xvcl0udG9TdHJpbmcoKTtpZihzLmxpbmVzLnNob3c9PW51bGwpe3ZhciB2LHNob3c9dHJ1ZTtmb3IodiBpbiBzKWlmKHNbdl0mJnNbdl0uc2hvdyl7c2hvdz1mYWxzZTticmVha31pZihzaG93KXMubGluZXMuc2hvdz10cnVlfWlmKHMubGluZXMuemVybz09bnVsbCl7cy5saW5lcy56ZXJvPSEhcy5saW5lcy5maWxsfXMueGF4aXM9Z2V0T3JDcmVhdGVBeGlzKHhheGVzLGF4aXNOdW1iZXIocyxcInhcIikpO3MueWF4aXM9Z2V0T3JDcmVhdGVBeGlzKHlheGVzLGF4aXNOdW1iZXIocyxcInlcIikpfX1mdW5jdGlvbiBwcm9jZXNzRGF0YSgpe3ZhciB0b3BTZW50cnk9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLGJvdHRvbVNlbnRyeT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksZmFrZUluZmluaXR5PU51bWJlci5NQVhfVkFMVUUsaSxqLGssbSxsZW5ndGgscyxwb2ludHMscHMseCx5LGF4aXMsdmFsLGYscCxkYXRhLGZvcm1hdDtmdW5jdGlvbiB1cGRhdGVBeGlzKGF4aXMsbWluLG1heCl7aWYobWluPGF4aXMuZGF0YW1pbiYmbWluIT0tZmFrZUluZmluaXR5KWF4aXMuZGF0YW1pbj1taW47aWYobWF4PmF4aXMuZGF0YW1heCYmbWF4IT1mYWtlSW5maW5pdHkpYXhpcy5kYXRhbWF4PW1heH0kLmVhY2goYWxsQXhlcygpLGZ1bmN0aW9uKF8sYXhpcyl7YXhpcy5kYXRhbWluPXRvcFNlbnRyeTtheGlzLmRhdGFtYXg9Ym90dG9tU2VudHJ5O2F4aXMudXNlZD1mYWxzZX0pO2ZvcihpPTA7aTxzZXJpZXMubGVuZ3RoOysraSl7cz1zZXJpZXNbaV07cy5kYXRhcG9pbnRzPXtwb2ludHM6W119O2V4ZWN1dGVIb29rcyhob29rcy5wcm9jZXNzUmF3RGF0YSxbcyxzLmRhdGEscy5kYXRhcG9pbnRzXSl9Zm9yKGk9MDtpPHNlcmllcy5sZW5ndGg7KytpKXtzPXNlcmllc1tpXTtkYXRhPXMuZGF0YTtmb3JtYXQ9cy5kYXRhcG9pbnRzLmZvcm1hdDtpZighZm9ybWF0KXtmb3JtYXQ9W107Zm9ybWF0LnB1c2goe3g6dHJ1ZSxudW1iZXI6dHJ1ZSxyZXF1aXJlZDp0cnVlfSk7Zm9ybWF0LnB1c2goe3k6dHJ1ZSxudW1iZXI6dHJ1ZSxyZXF1aXJlZDp0cnVlfSk7aWYocy5iYXJzLnNob3d8fHMubGluZXMuc2hvdyYmcy5saW5lcy5maWxsKXt2YXIgYXV0b3NjYWxlPSEhKHMuYmFycy5zaG93JiZzLmJhcnMuemVyb3x8cy5saW5lcy5zaG93JiZzLmxpbmVzLnplcm8pO2Zvcm1hdC5wdXNoKHt5OnRydWUsbnVtYmVyOnRydWUscmVxdWlyZWQ6ZmFsc2UsZGVmYXVsdFZhbHVlOjAsYXV0b3NjYWxlOmF1dG9zY2FsZX0pO2lmKHMuYmFycy5ob3Jpem9udGFsKXtkZWxldGUgZm9ybWF0W2Zvcm1hdC5sZW5ndGgtMV0ueTtmb3JtYXRbZm9ybWF0Lmxlbmd0aC0xXS54PXRydWV9fXMuZGF0YXBvaW50cy5mb3JtYXQ9Zm9ybWF0fWlmKHMuZGF0YXBvaW50cy5wb2ludHNpemUhPW51bGwpY29udGludWU7cy5kYXRhcG9pbnRzLnBvaW50c2l6ZT1mb3JtYXQubGVuZ3RoO3BzPXMuZGF0YXBvaW50cy5wb2ludHNpemU7cG9pbnRzPXMuZGF0YXBvaW50cy5wb2ludHM7dmFyIGluc2VydFN0ZXBzPXMubGluZXMuc2hvdyYmcy5saW5lcy5zdGVwcztzLnhheGlzLnVzZWQ9cy55YXhpcy51c2VkPXRydWU7Zm9yKGo9az0wO2o8ZGF0YS5sZW5ndGg7KytqLGsrPXBzKXtwPWRhdGFbal07dmFyIG51bGxpZnk9cD09bnVsbDtpZighbnVsbGlmeSl7Zm9yKG09MDttPHBzOysrbSl7dmFsPXBbbV07Zj1mb3JtYXRbbV07aWYoZil7aWYoZi5udW1iZXImJnZhbCE9bnVsbCl7dmFsPSt2YWw7aWYoaXNOYU4odmFsKSl2YWw9bnVsbDtlbHNlIGlmKHZhbD09SW5maW5pdHkpdmFsPWZha2VJbmZpbml0eTtlbHNlIGlmKHZhbD09LUluZmluaXR5KXZhbD0tZmFrZUluZmluaXR5fWlmKHZhbD09bnVsbCl7aWYoZi5yZXF1aXJlZCludWxsaWZ5PXRydWU7aWYoZi5kZWZhdWx0VmFsdWUhPW51bGwpdmFsPWYuZGVmYXVsdFZhbHVlfX1wb2ludHNbayttXT12YWx9fWlmKG51bGxpZnkpe2ZvcihtPTA7bTxwczsrK20pe3ZhbD1wb2ludHNbayttXTtpZih2YWwhPW51bGwpe2Y9Zm9ybWF0W21dO2lmKGYuYXV0b3NjYWxlIT09ZmFsc2Upe2lmKGYueCl7dXBkYXRlQXhpcyhzLnhheGlzLHZhbCx2YWwpfWlmKGYueSl7dXBkYXRlQXhpcyhzLnlheGlzLHZhbCx2YWwpfX19cG9pbnRzW2srbV09bnVsbH19ZWxzZXtpZihpbnNlcnRTdGVwcyYmaz4wJiZwb2ludHNbay1wc10hPW51bGwmJnBvaW50c1trLXBzXSE9cG9pbnRzW2tdJiZwb2ludHNbay1wcysxXSE9cG9pbnRzW2srMV0pe2ZvcihtPTA7bTxwczsrK20pcG9pbnRzW2srcHMrbV09cG9pbnRzW2srbV07cG9pbnRzW2srMV09cG9pbnRzW2stcHMrMV07ays9cHN9fX19Zm9yKGk9MDtpPHNlcmllcy5sZW5ndGg7KytpKXtzPXNlcmllc1tpXTtleGVjdXRlSG9va3MoaG9va3MucHJvY2Vzc0RhdGFwb2ludHMsW3Mscy5kYXRhcG9pbnRzXSl9Zm9yKGk9MDtpPHNlcmllcy5sZW5ndGg7KytpKXtzPXNlcmllc1tpXTtwb2ludHM9cy5kYXRhcG9pbnRzLnBvaW50cztwcz1zLmRhdGFwb2ludHMucG9pbnRzaXplO2Zvcm1hdD1zLmRhdGFwb2ludHMuZm9ybWF0O3ZhciB4bWluPXRvcFNlbnRyeSx5bWluPXRvcFNlbnRyeSx4bWF4PWJvdHRvbVNlbnRyeSx5bWF4PWJvdHRvbVNlbnRyeTtmb3Ioaj0wO2o8cG9pbnRzLmxlbmd0aDtqKz1wcyl7aWYocG9pbnRzW2pdPT1udWxsKWNvbnRpbnVlO2ZvcihtPTA7bTxwczsrK20pe3ZhbD1wb2ludHNbaittXTtmPWZvcm1hdFttXTtpZighZnx8Zi5hdXRvc2NhbGU9PT1mYWxzZXx8dmFsPT1mYWtlSW5maW5pdHl8fHZhbD09LWZha2VJbmZpbml0eSljb250aW51ZTtpZihmLngpe2lmKHZhbDx4bWluKXhtaW49dmFsO2lmKHZhbD54bWF4KXhtYXg9dmFsfWlmKGYueSl7aWYodmFsPHltaW4peW1pbj12YWw7aWYodmFsPnltYXgpeW1heD12YWx9fX1pZihzLmJhcnMuc2hvdyl7dmFyIGRlbHRhO3N3aXRjaChzLmJhcnMuYWxpZ24pe2Nhc2VcImxlZnRcIjpkZWx0YT0wO2JyZWFrO2Nhc2VcInJpZ2h0XCI6ZGVsdGE9LXMuYmFycy5iYXJXaWR0aDticmVhaztkZWZhdWx0OmRlbHRhPS1zLmJhcnMuYmFyV2lkdGgvMn1pZihzLmJhcnMuaG9yaXpvbnRhbCl7eW1pbis9ZGVsdGE7eW1heCs9ZGVsdGErcy5iYXJzLmJhcldpZHRofWVsc2V7eG1pbis9ZGVsdGE7eG1heCs9ZGVsdGErcy5iYXJzLmJhcldpZHRofX11cGRhdGVBeGlzKHMueGF4aXMseG1pbix4bWF4KTt1cGRhdGVBeGlzKHMueWF4aXMseW1pbix5bWF4KX0kLmVhY2goYWxsQXhlcygpLGZ1bmN0aW9uKF8sYXhpcyl7aWYoYXhpcy5kYXRhbWluPT10b3BTZW50cnkpYXhpcy5kYXRhbWluPW51bGw7aWYoYXhpcy5kYXRhbWF4PT1ib3R0b21TZW50cnkpYXhpcy5kYXRhbWF4PW51bGx9KX1mdW5jdGlvbiBzZXR1cENhbnZhc2VzKCl7cGxhY2Vob2xkZXIuY3NzKFwicGFkZGluZ1wiLDApLmNoaWxkcmVuKCkuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuISQodGhpcykuaGFzQ2xhc3MoXCJmbG90LW92ZXJsYXlcIikmJiEkKHRoaXMpLmhhc0NsYXNzKFwiZmxvdC1iYXNlXCIpfSkucmVtb3ZlKCk7aWYocGxhY2Vob2xkZXIuY3NzKFwicG9zaXRpb25cIik9PVwic3RhdGljXCIpcGxhY2Vob2xkZXIuY3NzKFwicG9zaXRpb25cIixcInJlbGF0aXZlXCIpO3N1cmZhY2U9bmV3IENhbnZhcyhcImZsb3QtYmFzZVwiLHBsYWNlaG9sZGVyKTtvdmVybGF5PW5ldyBDYW52YXMoXCJmbG90LW92ZXJsYXlcIixwbGFjZWhvbGRlcik7Y3R4PXN1cmZhY2UuY29udGV4dDtvY3R4PW92ZXJsYXkuY29udGV4dDtldmVudEhvbGRlcj0kKG92ZXJsYXkuZWxlbWVudCkudW5iaW5kKCk7dmFyIGV4aXN0aW5nPXBsYWNlaG9sZGVyLmRhdGEoXCJwbG90XCIpO2lmKGV4aXN0aW5nKXtleGlzdGluZy5zaHV0ZG93bigpO292ZXJsYXkuY2xlYXIoKX1wbGFjZWhvbGRlci5kYXRhKFwicGxvdFwiLHBsb3QpfWZ1bmN0aW9uIGJpbmRFdmVudHMoKXtpZihvcHRpb25zLmdyaWQuaG92ZXJhYmxlKXtldmVudEhvbGRlci5tb3VzZW1vdmUob25Nb3VzZU1vdmUpO2V2ZW50SG9sZGVyLmJpbmQoXCJtb3VzZWxlYXZlXCIsb25Nb3VzZUxlYXZlKX1pZihvcHRpb25zLmdyaWQuY2xpY2thYmxlKWV2ZW50SG9sZGVyLmNsaWNrKG9uQ2xpY2spO2V4ZWN1dGVIb29rcyhob29rcy5iaW5kRXZlbnRzLFtldmVudEhvbGRlcl0pfWZ1bmN0aW9uIHNodXRkb3duKCl7aWYocmVkcmF3VGltZW91dCljbGVhclRpbWVvdXQocmVkcmF3VGltZW91dCk7ZXZlbnRIb2xkZXIudW5iaW5kKFwibW91c2Vtb3ZlXCIsb25Nb3VzZU1vdmUpO2V2ZW50SG9sZGVyLnVuYmluZChcIm1vdXNlbGVhdmVcIixvbk1vdXNlTGVhdmUpO2V2ZW50SG9sZGVyLnVuYmluZChcImNsaWNrXCIsb25DbGljayk7ZXhlY3V0ZUhvb2tzKGhvb2tzLnNodXRkb3duLFtldmVudEhvbGRlcl0pfWZ1bmN0aW9uIHNldFRyYW5zZm9ybWF0aW9uSGVscGVycyhheGlzKXtmdW5jdGlvbiBpZGVudGl0eSh4KXtyZXR1cm4geH12YXIgcyxtLHQ9YXhpcy5vcHRpb25zLnRyYW5zZm9ybXx8aWRlbnRpdHksaXQ9YXhpcy5vcHRpb25zLmludmVyc2VUcmFuc2Zvcm07aWYoYXhpcy5kaXJlY3Rpb249PVwieFwiKXtzPWF4aXMuc2NhbGU9cGxvdFdpZHRoL01hdGguYWJzKHQoYXhpcy5tYXgpLXQoYXhpcy5taW4pKTttPU1hdGgubWluKHQoYXhpcy5tYXgpLHQoYXhpcy5taW4pKX1lbHNle3M9YXhpcy5zY2FsZT1wbG90SGVpZ2h0L01hdGguYWJzKHQoYXhpcy5tYXgpLXQoYXhpcy5taW4pKTtzPS1zO209TWF0aC5tYXgodChheGlzLm1heCksdChheGlzLm1pbikpfWlmKHQ9PWlkZW50aXR5KWF4aXMucDJjPWZ1bmN0aW9uKHApe3JldHVybihwLW0pKnN9O2Vsc2UgYXhpcy5wMmM9ZnVuY3Rpb24ocCl7cmV0dXJuKHQocCktbSkqc307aWYoIWl0KWF4aXMuYzJwPWZ1bmN0aW9uKGMpe3JldHVybiBtK2Mvc307ZWxzZSBheGlzLmMycD1mdW5jdGlvbihjKXtyZXR1cm4gaXQobStjL3MpfX1mdW5jdGlvbiBtZWFzdXJlVGlja0xhYmVscyhheGlzKXt2YXIgb3B0cz1heGlzLm9wdGlvbnMsdGlja3M9YXhpcy50aWNrc3x8W10sbGFiZWxXaWR0aD1vcHRzLmxhYmVsV2lkdGh8fDAsbGFiZWxIZWlnaHQ9b3B0cy5sYWJlbEhlaWdodHx8MCxtYXhXaWR0aD1sYWJlbFdpZHRofHwoYXhpcy5kaXJlY3Rpb249PVwieFwiP01hdGguZmxvb3Ioc3VyZmFjZS53aWR0aC8odGlja3MubGVuZ3RofHwxKSk6bnVsbCksbGVnYWN5U3R5bGVzPWF4aXMuZGlyZWN0aW9uK1wiQXhpcyBcIitheGlzLmRpcmVjdGlvbitheGlzLm4rXCJBeGlzXCIsbGF5ZXI9XCJmbG90LVwiK2F4aXMuZGlyZWN0aW9uK1wiLWF4aXMgZmxvdC1cIitheGlzLmRpcmVjdGlvbitheGlzLm4rXCItYXhpcyBcIitsZWdhY3lTdHlsZXMsZm9udD1vcHRzLmZvbnR8fFwiZmxvdC10aWNrLWxhYmVsIHRpY2tMYWJlbFwiO2Zvcih2YXIgaT0wO2k8dGlja3MubGVuZ3RoOysraSl7dmFyIHQ9dGlja3NbaV07aWYoIXQubGFiZWwpY29udGludWU7dmFyIGluZm89c3VyZmFjZS5nZXRUZXh0SW5mbyhsYXllcix0LmxhYmVsLGZvbnQsbnVsbCxtYXhXaWR0aCk7bGFiZWxXaWR0aD1NYXRoLm1heChsYWJlbFdpZHRoLGluZm8ud2lkdGgpO2xhYmVsSGVpZ2h0PU1hdGgubWF4KGxhYmVsSGVpZ2h0LGluZm8uaGVpZ2h0KX1heGlzLmxhYmVsV2lkdGg9b3B0cy5sYWJlbFdpZHRofHxsYWJlbFdpZHRoO2F4aXMubGFiZWxIZWlnaHQ9b3B0cy5sYWJlbEhlaWdodHx8bGFiZWxIZWlnaHR9ZnVuY3Rpb24gYWxsb2NhdGVBeGlzQm94Rmlyc3RQaGFzZShheGlzKXt2YXIgbHc9YXhpcy5sYWJlbFdpZHRoLGxoPWF4aXMubGFiZWxIZWlnaHQscG9zPWF4aXMub3B0aW9ucy5wb3NpdGlvbixpc1hBeGlzPWF4aXMuZGlyZWN0aW9uPT09XCJ4XCIsdGlja0xlbmd0aD1heGlzLm9wdGlvbnMudGlja0xlbmd0aCxheGlzTWFyZ2luPW9wdGlvbnMuZ3JpZC5heGlzTWFyZ2luLHBhZGRpbmc9b3B0aW9ucy5ncmlkLmxhYmVsTWFyZ2luLGlubmVybW9zdD10cnVlLG91dGVybW9zdD10cnVlLGZpcnN0PXRydWUsZm91bmQ9ZmFsc2U7JC5lYWNoKGlzWEF4aXM/eGF4ZXM6eWF4ZXMsZnVuY3Rpb24oaSxhKXtpZihhJiYoYS5zaG93fHxhLnJlc2VydmVTcGFjZSkpe2lmKGE9PT1heGlzKXtmb3VuZD10cnVlfWVsc2UgaWYoYS5vcHRpb25zLnBvc2l0aW9uPT09cG9zKXtpZihmb3VuZCl7b3V0ZXJtb3N0PWZhbHNlfWVsc2V7aW5uZXJtb3N0PWZhbHNlfX1pZighZm91bmQpe2ZpcnN0PWZhbHNlfX19KTtpZihvdXRlcm1vc3Qpe2F4aXNNYXJnaW49MH1pZih0aWNrTGVuZ3RoPT1udWxsKXt0aWNrTGVuZ3RoPWZpcnN0P1wiZnVsbFwiOjV9aWYoIWlzTmFOKCt0aWNrTGVuZ3RoKSlwYWRkaW5nKz0rdGlja0xlbmd0aDtpZihpc1hBeGlzKXtsaCs9cGFkZGluZztpZihwb3M9PVwiYm90dG9tXCIpe3Bsb3RPZmZzZXQuYm90dG9tKz1saCtheGlzTWFyZ2luO2F4aXMuYm94PXt0b3A6c3VyZmFjZS5oZWlnaHQtcGxvdE9mZnNldC5ib3R0b20saGVpZ2h0OmxofX1lbHNle2F4aXMuYm94PXt0b3A6cGxvdE9mZnNldC50b3ArYXhpc01hcmdpbixoZWlnaHQ6bGh9O3Bsb3RPZmZzZXQudG9wKz1saCtheGlzTWFyZ2lufX1lbHNle2x3Kz1wYWRkaW5nO2lmKHBvcz09XCJsZWZ0XCIpe2F4aXMuYm94PXtsZWZ0OnBsb3RPZmZzZXQubGVmdCtheGlzTWFyZ2luLHdpZHRoOmx3fTtwbG90T2Zmc2V0LmxlZnQrPWx3K2F4aXNNYXJnaW59ZWxzZXtwbG90T2Zmc2V0LnJpZ2h0Kz1sdytheGlzTWFyZ2luO2F4aXMuYm94PXtsZWZ0OnN1cmZhY2Uud2lkdGgtcGxvdE9mZnNldC5yaWdodCx3aWR0aDpsd319fWF4aXMucG9zaXRpb249cG9zO2F4aXMudGlja0xlbmd0aD10aWNrTGVuZ3RoO2F4aXMuYm94LnBhZGRpbmc9cGFkZGluZztheGlzLmlubmVybW9zdD1pbm5lcm1vc3R9ZnVuY3Rpb24gYWxsb2NhdGVBeGlzQm94U2Vjb25kUGhhc2UoYXhpcyl7aWYoYXhpcy5kaXJlY3Rpb249PVwieFwiKXtheGlzLmJveC5sZWZ0PXBsb3RPZmZzZXQubGVmdC1heGlzLmxhYmVsV2lkdGgvMjtheGlzLmJveC53aWR0aD1zdXJmYWNlLndpZHRoLXBsb3RPZmZzZXQubGVmdC1wbG90T2Zmc2V0LnJpZ2h0K2F4aXMubGFiZWxXaWR0aH1lbHNle2F4aXMuYm94LnRvcD1wbG90T2Zmc2V0LnRvcC1heGlzLmxhYmVsSGVpZ2h0LzI7YXhpcy5ib3guaGVpZ2h0PXN1cmZhY2UuaGVpZ2h0LXBsb3RPZmZzZXQuYm90dG9tLXBsb3RPZmZzZXQudG9wK2F4aXMubGFiZWxIZWlnaHR9fWZ1bmN0aW9uIGFkanVzdExheW91dEZvclRoaW5nc1N0aWNraW5nT3V0KCl7dmFyIG1pbk1hcmdpbj1vcHRpb25zLmdyaWQubWluQm9yZGVyTWFyZ2luLGF4aXMsaTtpZihtaW5NYXJnaW49PW51bGwpe21pbk1hcmdpbj0wO2ZvcihpPTA7aTxzZXJpZXMubGVuZ3RoOysraSltaW5NYXJnaW49TWF0aC5tYXgobWluTWFyZ2luLDIqKHNlcmllc1tpXS5wb2ludHMucmFkaXVzK3Nlcmllc1tpXS5wb2ludHMubGluZVdpZHRoLzIpKX12YXIgbWFyZ2lucz17bGVmdDptaW5NYXJnaW4scmlnaHQ6bWluTWFyZ2luLHRvcDptaW5NYXJnaW4sYm90dG9tOm1pbk1hcmdpbn07JC5lYWNoKGFsbEF4ZXMoKSxmdW5jdGlvbihfLGF4aXMpe2lmKGF4aXMucmVzZXJ2ZVNwYWNlJiZheGlzLnRpY2tzJiZheGlzLnRpY2tzLmxlbmd0aCl7aWYoYXhpcy5kaXJlY3Rpb249PT1cInhcIil7bWFyZ2lucy5sZWZ0PU1hdGgubWF4KG1hcmdpbnMubGVmdCxheGlzLmxhYmVsV2lkdGgvMik7bWFyZ2lucy5yaWdodD1NYXRoLm1heChtYXJnaW5zLnJpZ2h0LGF4aXMubGFiZWxXaWR0aC8yKX1lbHNle21hcmdpbnMuYm90dG9tPU1hdGgubWF4KG1hcmdpbnMuYm90dG9tLGF4aXMubGFiZWxIZWlnaHQvMik7bWFyZ2lucy50b3A9TWF0aC5tYXgobWFyZ2lucy50b3AsYXhpcy5sYWJlbEhlaWdodC8yKX19fSk7cGxvdE9mZnNldC5sZWZ0PU1hdGguY2VpbChNYXRoLm1heChtYXJnaW5zLmxlZnQscGxvdE9mZnNldC5sZWZ0KSk7cGxvdE9mZnNldC5yaWdodD1NYXRoLmNlaWwoTWF0aC5tYXgobWFyZ2lucy5yaWdodCxwbG90T2Zmc2V0LnJpZ2h0KSk7cGxvdE9mZnNldC50b3A9TWF0aC5jZWlsKE1hdGgubWF4KG1hcmdpbnMudG9wLHBsb3RPZmZzZXQudG9wKSk7cGxvdE9mZnNldC5ib3R0b209TWF0aC5jZWlsKE1hdGgubWF4KG1hcmdpbnMuYm90dG9tLHBsb3RPZmZzZXQuYm90dG9tKSl9ZnVuY3Rpb24gc2V0dXBHcmlkKCl7dmFyIGksYXhlcz1hbGxBeGVzKCksc2hvd0dyaWQ9b3B0aW9ucy5ncmlkLnNob3c7Zm9yKHZhciBhIGluIHBsb3RPZmZzZXQpe3ZhciBtYXJnaW49b3B0aW9ucy5ncmlkLm1hcmdpbnx8MDtwbG90T2Zmc2V0W2FdPXR5cGVvZiBtYXJnaW49PVwibnVtYmVyXCI/bWFyZ2luOm1hcmdpblthXXx8MH1leGVjdXRlSG9va3MoaG9va3MucHJvY2Vzc09mZnNldCxbcGxvdE9mZnNldF0pO2Zvcih2YXIgYSBpbiBwbG90T2Zmc2V0KXtpZih0eXBlb2Ygb3B0aW9ucy5ncmlkLmJvcmRlcldpZHRoPT1cIm9iamVjdFwiKXtwbG90T2Zmc2V0W2FdKz1zaG93R3JpZD9vcHRpb25zLmdyaWQuYm9yZGVyV2lkdGhbYV06MH1lbHNle3Bsb3RPZmZzZXRbYV0rPXNob3dHcmlkP29wdGlvbnMuZ3JpZC5ib3JkZXJXaWR0aDowfX0kLmVhY2goYXhlcyxmdW5jdGlvbihfLGF4aXMpe3ZhciBheGlzT3B0cz1heGlzLm9wdGlvbnM7YXhpcy5zaG93PWF4aXNPcHRzLnNob3c9PW51bGw/YXhpcy51c2VkOmF4aXNPcHRzLnNob3c7YXhpcy5yZXNlcnZlU3BhY2U9YXhpc09wdHMucmVzZXJ2ZVNwYWNlPT1udWxsP2F4aXMuc2hvdzpheGlzT3B0cy5yZXNlcnZlU3BhY2U7c2V0UmFuZ2UoYXhpcyl9KTtpZihzaG93R3JpZCl7dmFyIGFsbG9jYXRlZEF4ZXM9JC5ncmVwKGF4ZXMsZnVuY3Rpb24oYXhpcyl7cmV0dXJuIGF4aXMuc2hvd3x8YXhpcy5yZXNlcnZlU3BhY2V9KTskLmVhY2goYWxsb2NhdGVkQXhlcyxmdW5jdGlvbihfLGF4aXMpe3NldHVwVGlja0dlbmVyYXRpb24oYXhpcyk7c2V0VGlja3MoYXhpcyk7c25hcFJhbmdlVG9UaWNrcyhheGlzLGF4aXMudGlja3MpO21lYXN1cmVUaWNrTGFiZWxzKGF4aXMpfSk7Zm9yKGk9YWxsb2NhdGVkQXhlcy5sZW5ndGgtMTtpPj0wOy0taSlhbGxvY2F0ZUF4aXNCb3hGaXJzdFBoYXNlKGFsbG9jYXRlZEF4ZXNbaV0pO2FkanVzdExheW91dEZvclRoaW5nc1N0aWNraW5nT3V0KCk7JC5lYWNoKGFsbG9jYXRlZEF4ZXMsZnVuY3Rpb24oXyxheGlzKXthbGxvY2F0ZUF4aXNCb3hTZWNvbmRQaGFzZShheGlzKX0pfXBsb3RXaWR0aD1zdXJmYWNlLndpZHRoLXBsb3RPZmZzZXQubGVmdC1wbG90T2Zmc2V0LnJpZ2h0O3Bsb3RIZWlnaHQ9c3VyZmFjZS5oZWlnaHQtcGxvdE9mZnNldC5ib3R0b20tcGxvdE9mZnNldC50b3A7JC5lYWNoKGF4ZXMsZnVuY3Rpb24oXyxheGlzKXtzZXRUcmFuc2Zvcm1hdGlvbkhlbHBlcnMoYXhpcyl9KTtpZihzaG93R3JpZCl7ZHJhd0F4aXNMYWJlbHMoKX1pbnNlcnRMZWdlbmQoKX1mdW5jdGlvbiBzZXRSYW5nZShheGlzKXt2YXIgb3B0cz1heGlzLm9wdGlvbnMsbWluPSsob3B0cy5taW4hPW51bGw/b3B0cy5taW46YXhpcy5kYXRhbWluKSxtYXg9KyhvcHRzLm1heCE9bnVsbD9vcHRzLm1heDpheGlzLmRhdGFtYXgpLGRlbHRhPW1heC1taW47aWYoZGVsdGE9PTApe3ZhciB3aWRlbj1tYXg9PTA/MTouMDE7aWYob3B0cy5taW49PW51bGwpbWluLT13aWRlbjtpZihvcHRzLm1heD09bnVsbHx8b3B0cy5taW4hPW51bGwpbWF4Kz13aWRlbn1lbHNle3ZhciBtYXJnaW49b3B0cy5hdXRvc2NhbGVNYXJnaW47aWYobWFyZ2luIT1udWxsKXtpZihvcHRzLm1pbj09bnVsbCl7bWluLT1kZWx0YSptYXJnaW47aWYobWluPDAmJmF4aXMuZGF0YW1pbiE9bnVsbCYmYXhpcy5kYXRhbWluPj0wKW1pbj0wfWlmKG9wdHMubWF4PT1udWxsKXttYXgrPWRlbHRhKm1hcmdpbjtpZihtYXg+MCYmYXhpcy5kYXRhbWF4IT1udWxsJiZheGlzLmRhdGFtYXg8PTApbWF4PTB9fX1heGlzLm1pbj1taW47YXhpcy5tYXg9bWF4fWZ1bmN0aW9uIHNldHVwVGlja0dlbmVyYXRpb24oYXhpcyl7dmFyIG9wdHM9YXhpcy5vcHRpb25zO3ZhciBub1RpY2tzO2lmKHR5cGVvZiBvcHRzLnRpY2tzPT1cIm51bWJlclwiJiZvcHRzLnRpY2tzPjApbm9UaWNrcz1vcHRzLnRpY2tzO2Vsc2Ugbm9UaWNrcz0uMypNYXRoLnNxcnQoYXhpcy5kaXJlY3Rpb249PVwieFwiP3N1cmZhY2Uud2lkdGg6c3VyZmFjZS5oZWlnaHQpO3ZhciBkZWx0YT0oYXhpcy5tYXgtYXhpcy5taW4pL25vVGlja3MsZGVjPS1NYXRoLmZsb29yKE1hdGgubG9nKGRlbHRhKS9NYXRoLkxOMTApLG1heERlYz1vcHRzLnRpY2tEZWNpbWFscztpZihtYXhEZWMhPW51bGwmJmRlYz5tYXhEZWMpe2RlYz1tYXhEZWN9dmFyIG1hZ249TWF0aC5wb3coMTAsLWRlYyksbm9ybT1kZWx0YS9tYWduLHNpemU7aWYobm9ybTwxLjUpe3NpemU9MX1lbHNlIGlmKG5vcm08Myl7c2l6ZT0yO2lmKG5vcm0+Mi4yNSYmKG1heERlYz09bnVsbHx8ZGVjKzE8PW1heERlYykpe3NpemU9Mi41OysrZGVjfX1lbHNlIGlmKG5vcm08Ny41KXtzaXplPTV9ZWxzZXtzaXplPTEwfXNpemUqPW1hZ247aWYob3B0cy5taW5UaWNrU2l6ZSE9bnVsbCYmc2l6ZTxvcHRzLm1pblRpY2tTaXplKXtzaXplPW9wdHMubWluVGlja1NpemV9YXhpcy5kZWx0YT1kZWx0YTtheGlzLnRpY2tEZWNpbWFscz1NYXRoLm1heCgwLG1heERlYyE9bnVsbD9tYXhEZWM6ZGVjKTtheGlzLnRpY2tTaXplPW9wdHMudGlja1NpemV8fHNpemU7aWYob3B0cy5tb2RlPT1cInRpbWVcIiYmIWF4aXMudGlja0dlbmVyYXRvcil7dGhyb3cgbmV3IEVycm9yKFwiVGltZSBtb2RlIHJlcXVpcmVzIHRoZSBmbG90LnRpbWUgcGx1Z2luLlwiKX1pZighYXhpcy50aWNrR2VuZXJhdG9yKXtheGlzLnRpY2tHZW5lcmF0b3I9ZnVuY3Rpb24oYXhpcyl7dmFyIHRpY2tzPVtdLHN0YXJ0PWZsb29ySW5CYXNlKGF4aXMubWluLGF4aXMudGlja1NpemUpLGk9MCx2PU51bWJlci5OYU4scHJldjtkb3twcmV2PXY7dj1zdGFydCtpKmF4aXMudGlja1NpemU7dGlja3MucHVzaCh2KTsrK2l9d2hpbGUodjxheGlzLm1heCYmdiE9cHJldik7cmV0dXJuIHRpY2tzfTtheGlzLnRpY2tGb3JtYXR0ZXI9ZnVuY3Rpb24odmFsdWUsYXhpcyl7dmFyIGZhY3Rvcj1heGlzLnRpY2tEZWNpbWFscz9NYXRoLnBvdygxMCxheGlzLnRpY2tEZWNpbWFscyk6MTt2YXIgZm9ybWF0dGVkPVwiXCIrTWF0aC5yb3VuZCh2YWx1ZSpmYWN0b3IpL2ZhY3RvcjtpZihheGlzLnRpY2tEZWNpbWFscyE9bnVsbCl7dmFyIGRlY2ltYWw9Zm9ybWF0dGVkLmluZGV4T2YoXCIuXCIpO3ZhciBwcmVjaXNpb249ZGVjaW1hbD09LTE/MDpmb3JtYXR0ZWQubGVuZ3RoLWRlY2ltYWwtMTtpZihwcmVjaXNpb248YXhpcy50aWNrRGVjaW1hbHMpe3JldHVybihwcmVjaXNpb24/Zm9ybWF0dGVkOmZvcm1hdHRlZCtcIi5cIikrKFwiXCIrZmFjdG9yKS5zdWJzdHIoMSxheGlzLnRpY2tEZWNpbWFscy1wcmVjaXNpb24pfX1yZXR1cm4gZm9ybWF0dGVkfX1pZigkLmlzRnVuY3Rpb24ob3B0cy50aWNrRm9ybWF0dGVyKSlheGlzLnRpY2tGb3JtYXR0ZXI9ZnVuY3Rpb24odixheGlzKXtyZXR1cm5cIlwiK29wdHMudGlja0Zvcm1hdHRlcih2LGF4aXMpfTtpZihvcHRzLmFsaWduVGlja3NXaXRoQXhpcyE9bnVsbCl7dmFyIG90aGVyQXhpcz0oYXhpcy5kaXJlY3Rpb249PVwieFwiP3hheGVzOnlheGVzKVtvcHRzLmFsaWduVGlja3NXaXRoQXhpcy0xXTtpZihvdGhlckF4aXMmJm90aGVyQXhpcy51c2VkJiZvdGhlckF4aXMhPWF4aXMpe3ZhciBuaWNlVGlja3M9YXhpcy50aWNrR2VuZXJhdG9yKGF4aXMpO2lmKG5pY2VUaWNrcy5sZW5ndGg+MCl7aWYob3B0cy5taW49PW51bGwpYXhpcy5taW49TWF0aC5taW4oYXhpcy5taW4sbmljZVRpY2tzWzBdKTtpZihvcHRzLm1heD09bnVsbCYmbmljZVRpY2tzLmxlbmd0aD4xKWF4aXMubWF4PU1hdGgubWF4KGF4aXMubWF4LG5pY2VUaWNrc1tuaWNlVGlja3MubGVuZ3RoLTFdKX1heGlzLnRpY2tHZW5lcmF0b3I9ZnVuY3Rpb24oYXhpcyl7dmFyIHRpY2tzPVtdLHYsaTtmb3IoaT0wO2k8b3RoZXJBeGlzLnRpY2tzLmxlbmd0aDsrK2kpe3Y9KG90aGVyQXhpcy50aWNrc1tpXS52LW90aGVyQXhpcy5taW4pLyhvdGhlckF4aXMubWF4LW90aGVyQXhpcy5taW4pO3Y9YXhpcy5taW4rdiooYXhpcy5tYXgtYXhpcy5taW4pO3RpY2tzLnB1c2godil9cmV0dXJuIHRpY2tzfTtpZighYXhpcy5tb2RlJiZvcHRzLnRpY2tEZWNpbWFscz09bnVsbCl7dmFyIGV4dHJhRGVjPU1hdGgubWF4KDAsLU1hdGguZmxvb3IoTWF0aC5sb2coYXhpcy5kZWx0YSkvTWF0aC5MTjEwKSsxKSx0cz1heGlzLnRpY2tHZW5lcmF0b3IoYXhpcyk7aWYoISh0cy5sZW5ndGg+MSYmL1xcLi4qMCQvLnRlc3QoKHRzWzFdLXRzWzBdKS50b0ZpeGVkKGV4dHJhRGVjKSkpKWF4aXMudGlja0RlY2ltYWxzPWV4dHJhRGVjfX19fWZ1bmN0aW9uIHNldFRpY2tzKGF4aXMpe3ZhciBvdGlja3M9YXhpcy5vcHRpb25zLnRpY2tzLHRpY2tzPVtdO2lmKG90aWNrcz09bnVsbHx8dHlwZW9mIG90aWNrcz09XCJudW1iZXJcIiYmb3RpY2tzPjApdGlja3M9YXhpcy50aWNrR2VuZXJhdG9yKGF4aXMpO2Vsc2UgaWYob3RpY2tzKXtpZigkLmlzRnVuY3Rpb24ob3RpY2tzKSl0aWNrcz1vdGlja3MoYXhpcyk7ZWxzZSB0aWNrcz1vdGlja3N9dmFyIGksdjtheGlzLnRpY2tzPVtdO2ZvcihpPTA7aTx0aWNrcy5sZW5ndGg7KytpKXt2YXIgbGFiZWw9bnVsbDt2YXIgdD10aWNrc1tpXTtpZih0eXBlb2YgdD09XCJvYmplY3RcIil7dj0rdFswXTtpZih0Lmxlbmd0aD4xKWxhYmVsPXRbMV19ZWxzZSB2PSt0O2lmKGxhYmVsPT1udWxsKWxhYmVsPWF4aXMudGlja0Zvcm1hdHRlcih2LGF4aXMpO2lmKCFpc05hTih2KSlheGlzLnRpY2tzLnB1c2goe3Y6dixsYWJlbDpsYWJlbH0pfX1mdW5jdGlvbiBzbmFwUmFuZ2VUb1RpY2tzKGF4aXMsdGlja3Mpe2lmKGF4aXMub3B0aW9ucy5hdXRvc2NhbGVNYXJnaW4mJnRpY2tzLmxlbmd0aD4wKXtpZihheGlzLm9wdGlvbnMubWluPT1udWxsKWF4aXMubWluPU1hdGgubWluKGF4aXMubWluLHRpY2tzWzBdLnYpO2lmKGF4aXMub3B0aW9ucy5tYXg9PW51bGwmJnRpY2tzLmxlbmd0aD4xKWF4aXMubWF4PU1hdGgubWF4KGF4aXMubWF4LHRpY2tzW3RpY2tzLmxlbmd0aC0xXS52KX19ZnVuY3Rpb24gZHJhdygpe3N1cmZhY2UuY2xlYXIoKTtleGVjdXRlSG9va3MoaG9va3MuZHJhd0JhY2tncm91bmQsW2N0eF0pO3ZhciBncmlkPW9wdGlvbnMuZ3JpZDtpZihncmlkLnNob3cmJmdyaWQuYmFja2dyb3VuZENvbG9yKWRyYXdCYWNrZ3JvdW5kKCk7aWYoZ3JpZC5zaG93JiYhZ3JpZC5hYm92ZURhdGEpe2RyYXdHcmlkKCl9Zm9yKHZhciBpPTA7aTxzZXJpZXMubGVuZ3RoOysraSl7ZXhlY3V0ZUhvb2tzKGhvb2tzLmRyYXdTZXJpZXMsW2N0eCxzZXJpZXNbaV1dKTtkcmF3U2VyaWVzKHNlcmllc1tpXSl9ZXhlY3V0ZUhvb2tzKGhvb2tzLmRyYXcsW2N0eF0pO2lmKGdyaWQuc2hvdyYmZ3JpZC5hYm92ZURhdGEpe2RyYXdHcmlkKCl9c3VyZmFjZS5yZW5kZXIoKTt0cmlnZ2VyUmVkcmF3T3ZlcmxheSgpfWZ1bmN0aW9uIGV4dHJhY3RSYW5nZShyYW5nZXMsY29vcmQpe3ZhciBheGlzLGZyb20sdG8sa2V5LGF4ZXM9YWxsQXhlcygpO2Zvcih2YXIgaT0wO2k8YXhlcy5sZW5ndGg7KytpKXtheGlzPWF4ZXNbaV07aWYoYXhpcy5kaXJlY3Rpb249PWNvb3JkKXtrZXk9Y29vcmQrYXhpcy5uK1wiYXhpc1wiO2lmKCFyYW5nZXNba2V5XSYmYXhpcy5uPT0xKWtleT1jb29yZCtcImF4aXNcIjtpZihyYW5nZXNba2V5XSl7ZnJvbT1yYW5nZXNba2V5XS5mcm9tO3RvPXJhbmdlc1trZXldLnRvO2JyZWFrfX19aWYoIXJhbmdlc1trZXldKXtheGlzPWNvb3JkPT1cInhcIj94YXhlc1swXTp5YXhlc1swXTtmcm9tPXJhbmdlc1tjb29yZCtcIjFcIl07dG89cmFuZ2VzW2Nvb3JkK1wiMlwiXX1pZihmcm9tIT1udWxsJiZ0byE9bnVsbCYmZnJvbT50byl7dmFyIHRtcD1mcm9tO2Zyb209dG87dG89dG1wfXJldHVybntmcm9tOmZyb20sdG86dG8sYXhpczpheGlzfX1mdW5jdGlvbiBkcmF3QmFja2dyb3VuZCgpe2N0eC5zYXZlKCk7Y3R4LnRyYW5zbGF0ZShwbG90T2Zmc2V0LmxlZnQscGxvdE9mZnNldC50b3ApO2N0eC5maWxsU3R5bGU9Z2V0Q29sb3JPckdyYWRpZW50KG9wdGlvbnMuZ3JpZC5iYWNrZ3JvdW5kQ29sb3IscGxvdEhlaWdodCwwLFwicmdiYSgyNTUsIDI1NSwgMjU1LCAwKVwiKTtjdHguZmlsbFJlY3QoMCwwLHBsb3RXaWR0aCxwbG90SGVpZ2h0KTtjdHgucmVzdG9yZSgpfWZ1bmN0aW9uIGRyYXdHcmlkKCl7dmFyIGksYXhlcyxidyxiYztjdHguc2F2ZSgpO2N0eC50cmFuc2xhdGUocGxvdE9mZnNldC5sZWZ0LHBsb3RPZmZzZXQudG9wKTt2YXIgbWFya2luZ3M9b3B0aW9ucy5ncmlkLm1hcmtpbmdzO2lmKG1hcmtpbmdzKXtpZigkLmlzRnVuY3Rpb24obWFya2luZ3MpKXtheGVzPXBsb3QuZ2V0QXhlcygpO2F4ZXMueG1pbj1heGVzLnhheGlzLm1pbjtheGVzLnhtYXg9YXhlcy54YXhpcy5tYXg7YXhlcy55bWluPWF4ZXMueWF4aXMubWluO2F4ZXMueW1heD1heGVzLnlheGlzLm1heDttYXJraW5ncz1tYXJraW5ncyhheGVzKX1mb3IoaT0wO2k8bWFya2luZ3MubGVuZ3RoOysraSl7dmFyIG09bWFya2luZ3NbaV0seHJhbmdlPWV4dHJhY3RSYW5nZShtLFwieFwiKSx5cmFuZ2U9ZXh0cmFjdFJhbmdlKG0sXCJ5XCIpO2lmKHhyYW5nZS5mcm9tPT1udWxsKXhyYW5nZS5mcm9tPXhyYW5nZS5heGlzLm1pbjtpZih4cmFuZ2UudG89PW51bGwpeHJhbmdlLnRvPXhyYW5nZS5heGlzLm1heDtcclxuaWYoeXJhbmdlLmZyb209PW51bGwpeXJhbmdlLmZyb209eXJhbmdlLmF4aXMubWluO2lmKHlyYW5nZS50bz09bnVsbCl5cmFuZ2UudG89eXJhbmdlLmF4aXMubWF4O2lmKHhyYW5nZS50bzx4cmFuZ2UuYXhpcy5taW58fHhyYW5nZS5mcm9tPnhyYW5nZS5heGlzLm1heHx8eXJhbmdlLnRvPHlyYW5nZS5heGlzLm1pbnx8eXJhbmdlLmZyb20+eXJhbmdlLmF4aXMubWF4KWNvbnRpbnVlO3hyYW5nZS5mcm9tPU1hdGgubWF4KHhyYW5nZS5mcm9tLHhyYW5nZS5heGlzLm1pbik7eHJhbmdlLnRvPU1hdGgubWluKHhyYW5nZS50byx4cmFuZ2UuYXhpcy5tYXgpO3lyYW5nZS5mcm9tPU1hdGgubWF4KHlyYW5nZS5mcm9tLHlyYW5nZS5heGlzLm1pbik7eXJhbmdlLnRvPU1hdGgubWluKHlyYW5nZS50byx5cmFuZ2UuYXhpcy5tYXgpO3ZhciB4ZXF1YWw9eHJhbmdlLmZyb209PT14cmFuZ2UudG8seWVxdWFsPXlyYW5nZS5mcm9tPT09eXJhbmdlLnRvO2lmKHhlcXVhbCYmeWVxdWFsKXtjb250aW51ZX14cmFuZ2UuZnJvbT1NYXRoLmZsb29yKHhyYW5nZS5heGlzLnAyYyh4cmFuZ2UuZnJvbSkpO3hyYW5nZS50bz1NYXRoLmZsb29yKHhyYW5nZS5heGlzLnAyYyh4cmFuZ2UudG8pKTt5cmFuZ2UuZnJvbT1NYXRoLmZsb29yKHlyYW5nZS5heGlzLnAyYyh5cmFuZ2UuZnJvbSkpO3lyYW5nZS50bz1NYXRoLmZsb29yKHlyYW5nZS5heGlzLnAyYyh5cmFuZ2UudG8pKTtpZih4ZXF1YWx8fHllcXVhbCl7dmFyIGxpbmVXaWR0aD1tLmxpbmVXaWR0aHx8b3B0aW9ucy5ncmlkLm1hcmtpbmdzTGluZVdpZHRoLHN1YlBpeGVsPWxpbmVXaWR0aCUyPy41OjA7Y3R4LmJlZ2luUGF0aCgpO2N0eC5zdHJva2VTdHlsZT1tLmNvbG9yfHxvcHRpb25zLmdyaWQubWFya2luZ3NDb2xvcjtjdHgubGluZVdpZHRoPWxpbmVXaWR0aDtpZih4ZXF1YWwpe2N0eC5tb3ZlVG8oeHJhbmdlLnRvK3N1YlBpeGVsLHlyYW5nZS5mcm9tKTtjdHgubGluZVRvKHhyYW5nZS50bytzdWJQaXhlbCx5cmFuZ2UudG8pfWVsc2V7Y3R4Lm1vdmVUbyh4cmFuZ2UuZnJvbSx5cmFuZ2UudG8rc3ViUGl4ZWwpO2N0eC5saW5lVG8oeHJhbmdlLnRvLHlyYW5nZS50bytzdWJQaXhlbCl9Y3R4LnN0cm9rZSgpfWVsc2V7Y3R4LmZpbGxTdHlsZT1tLmNvbG9yfHxvcHRpb25zLmdyaWQubWFya2luZ3NDb2xvcjtjdHguZmlsbFJlY3QoeHJhbmdlLmZyb20seXJhbmdlLnRvLHhyYW5nZS50by14cmFuZ2UuZnJvbSx5cmFuZ2UuZnJvbS15cmFuZ2UudG8pfX19YXhlcz1hbGxBeGVzKCk7Ync9b3B0aW9ucy5ncmlkLmJvcmRlcldpZHRoO2Zvcih2YXIgaj0wO2o8YXhlcy5sZW5ndGg7KytqKXt2YXIgYXhpcz1heGVzW2pdLGJveD1heGlzLmJveCx0PWF4aXMudGlja0xlbmd0aCx4LHkseG9mZix5b2ZmO2lmKCFheGlzLnNob3d8fGF4aXMudGlja3MubGVuZ3RoPT0wKWNvbnRpbnVlO2N0eC5saW5lV2lkdGg9MTtpZihheGlzLmRpcmVjdGlvbj09XCJ4XCIpe3g9MDtpZih0PT1cImZ1bGxcIil5PWF4aXMucG9zaXRpb249PVwidG9wXCI/MDpwbG90SGVpZ2h0O2Vsc2UgeT1ib3gudG9wLXBsb3RPZmZzZXQudG9wKyhheGlzLnBvc2l0aW9uPT1cInRvcFwiP2JveC5oZWlnaHQ6MCl9ZWxzZXt5PTA7aWYodD09XCJmdWxsXCIpeD1heGlzLnBvc2l0aW9uPT1cImxlZnRcIj8wOnBsb3RXaWR0aDtlbHNlIHg9Ym94LmxlZnQtcGxvdE9mZnNldC5sZWZ0KyhheGlzLnBvc2l0aW9uPT1cImxlZnRcIj9ib3gud2lkdGg6MCl9aWYoIWF4aXMuaW5uZXJtb3N0KXtjdHguc3Ryb2tlU3R5bGU9YXhpcy5vcHRpb25zLmNvbG9yO2N0eC5iZWdpblBhdGgoKTt4b2ZmPXlvZmY9MDtpZihheGlzLmRpcmVjdGlvbj09XCJ4XCIpeG9mZj1wbG90V2lkdGgrMTtlbHNlIHlvZmY9cGxvdEhlaWdodCsxO2lmKGN0eC5saW5lV2lkdGg9PTEpe2lmKGF4aXMuZGlyZWN0aW9uPT1cInhcIil7eT1NYXRoLmZsb29yKHkpKy41fWVsc2V7eD1NYXRoLmZsb29yKHgpKy41fX1jdHgubW92ZVRvKHgseSk7Y3R4LmxpbmVUbyh4K3hvZmYseSt5b2ZmKTtjdHguc3Ryb2tlKCl9Y3R4LnN0cm9rZVN0eWxlPWF4aXMub3B0aW9ucy50aWNrQ29sb3I7Y3R4LmJlZ2luUGF0aCgpO2ZvcihpPTA7aTxheGlzLnRpY2tzLmxlbmd0aDsrK2kpe3ZhciB2PWF4aXMudGlja3NbaV0udjt4b2ZmPXlvZmY9MDtpZihpc05hTih2KXx8djxheGlzLm1pbnx8dj5heGlzLm1heHx8dD09XCJmdWxsXCImJih0eXBlb2YgYnc9PVwib2JqZWN0XCImJmJ3W2F4aXMucG9zaXRpb25dPjB8fGJ3PjApJiYodj09YXhpcy5taW58fHY9PWF4aXMubWF4KSljb250aW51ZTtpZihheGlzLmRpcmVjdGlvbj09XCJ4XCIpe3g9YXhpcy5wMmModik7eW9mZj10PT1cImZ1bGxcIj8tcGxvdEhlaWdodDp0O2lmKGF4aXMucG9zaXRpb249PVwidG9wXCIpeW9mZj0teW9mZn1lbHNle3k9YXhpcy5wMmModik7eG9mZj10PT1cImZ1bGxcIj8tcGxvdFdpZHRoOnQ7aWYoYXhpcy5wb3NpdGlvbj09XCJsZWZ0XCIpeG9mZj0teG9mZn1pZihjdHgubGluZVdpZHRoPT0xKXtpZihheGlzLmRpcmVjdGlvbj09XCJ4XCIpeD1NYXRoLmZsb29yKHgpKy41O2Vsc2UgeT1NYXRoLmZsb29yKHkpKy41fWN0eC5tb3ZlVG8oeCx5KTtjdHgubGluZVRvKHgreG9mZix5K3lvZmYpfWN0eC5zdHJva2UoKX1pZihidyl7YmM9b3B0aW9ucy5ncmlkLmJvcmRlckNvbG9yO2lmKHR5cGVvZiBidz09XCJvYmplY3RcInx8dHlwZW9mIGJjPT1cIm9iamVjdFwiKXtpZih0eXBlb2YgYnchPT1cIm9iamVjdFwiKXtidz17dG9wOmJ3LHJpZ2h0OmJ3LGJvdHRvbTpidyxsZWZ0OmJ3fX1pZih0eXBlb2YgYmMhPT1cIm9iamVjdFwiKXtiYz17dG9wOmJjLHJpZ2h0OmJjLGJvdHRvbTpiYyxsZWZ0OmJjfX1pZihidy50b3A+MCl7Y3R4LnN0cm9rZVN0eWxlPWJjLnRvcDtjdHgubGluZVdpZHRoPWJ3LnRvcDtjdHguYmVnaW5QYXRoKCk7Y3R4Lm1vdmVUbygwLWJ3LmxlZnQsMC1idy50b3AvMik7Y3R4LmxpbmVUbyhwbG90V2lkdGgsMC1idy50b3AvMik7Y3R4LnN0cm9rZSgpfWlmKGJ3LnJpZ2h0PjApe2N0eC5zdHJva2VTdHlsZT1iYy5yaWdodDtjdHgubGluZVdpZHRoPWJ3LnJpZ2h0O2N0eC5iZWdpblBhdGgoKTtjdHgubW92ZVRvKHBsb3RXaWR0aCtidy5yaWdodC8yLDAtYncudG9wKTtjdHgubGluZVRvKHBsb3RXaWR0aCtidy5yaWdodC8yLHBsb3RIZWlnaHQpO2N0eC5zdHJva2UoKX1pZihidy5ib3R0b20+MCl7Y3R4LnN0cm9rZVN0eWxlPWJjLmJvdHRvbTtjdHgubGluZVdpZHRoPWJ3LmJvdHRvbTtjdHguYmVnaW5QYXRoKCk7Y3R4Lm1vdmVUbyhwbG90V2lkdGgrYncucmlnaHQscGxvdEhlaWdodCtidy5ib3R0b20vMik7Y3R4LmxpbmVUbygwLHBsb3RIZWlnaHQrYncuYm90dG9tLzIpO2N0eC5zdHJva2UoKX1pZihidy5sZWZ0PjApe2N0eC5zdHJva2VTdHlsZT1iYy5sZWZ0O2N0eC5saW5lV2lkdGg9YncubGVmdDtjdHguYmVnaW5QYXRoKCk7Y3R4Lm1vdmVUbygwLWJ3LmxlZnQvMixwbG90SGVpZ2h0K2J3LmJvdHRvbSk7Y3R4LmxpbmVUbygwLWJ3LmxlZnQvMiwwKTtjdHguc3Ryb2tlKCl9fWVsc2V7Y3R4LmxpbmVXaWR0aD1idztjdHguc3Ryb2tlU3R5bGU9b3B0aW9ucy5ncmlkLmJvcmRlckNvbG9yO2N0eC5zdHJva2VSZWN0KC1idy8yLC1idy8yLHBsb3RXaWR0aCtidyxwbG90SGVpZ2h0K2J3KX19Y3R4LnJlc3RvcmUoKX1mdW5jdGlvbiBkcmF3QXhpc0xhYmVscygpeyQuZWFjaChhbGxBeGVzKCksZnVuY3Rpb24oXyxheGlzKXt2YXIgYm94PWF4aXMuYm94LGxlZ2FjeVN0eWxlcz1heGlzLmRpcmVjdGlvbitcIkF4aXMgXCIrYXhpcy5kaXJlY3Rpb24rYXhpcy5uK1wiQXhpc1wiLGxheWVyPVwiZmxvdC1cIitheGlzLmRpcmVjdGlvbitcIi1heGlzIGZsb3QtXCIrYXhpcy5kaXJlY3Rpb24rYXhpcy5uK1wiLWF4aXMgXCIrbGVnYWN5U3R5bGVzLGZvbnQ9YXhpcy5vcHRpb25zLmZvbnR8fFwiZmxvdC10aWNrLWxhYmVsIHRpY2tMYWJlbFwiLHRpY2sseCx5LGhhbGlnbix2YWxpZ247c3VyZmFjZS5yZW1vdmVUZXh0KGxheWVyKTtpZighYXhpcy5zaG93fHxheGlzLnRpY2tzLmxlbmd0aD09MClyZXR1cm47Zm9yKHZhciBpPTA7aTxheGlzLnRpY2tzLmxlbmd0aDsrK2kpe3RpY2s9YXhpcy50aWNrc1tpXTtpZighdGljay5sYWJlbHx8dGljay52PGF4aXMubWlufHx0aWNrLnY+YXhpcy5tYXgpY29udGludWU7aWYoYXhpcy5kaXJlY3Rpb249PVwieFwiKXtoYWxpZ249XCJjZW50ZXJcIjt4PXBsb3RPZmZzZXQubGVmdCtheGlzLnAyYyh0aWNrLnYpO2lmKGF4aXMucG9zaXRpb249PVwiYm90dG9tXCIpe3k9Ym94LnRvcCtib3gucGFkZGluZ31lbHNle3k9Ym94LnRvcCtib3guaGVpZ2h0LWJveC5wYWRkaW5nO3ZhbGlnbj1cImJvdHRvbVwifX1lbHNle3ZhbGlnbj1cIm1pZGRsZVwiO3k9cGxvdE9mZnNldC50b3ArYXhpcy5wMmModGljay52KTtpZihheGlzLnBvc2l0aW9uPT1cImxlZnRcIil7eD1ib3gubGVmdCtib3gud2lkdGgtYm94LnBhZGRpbmc7aGFsaWduPVwicmlnaHRcIn1lbHNle3g9Ym94LmxlZnQrYm94LnBhZGRpbmd9fXN1cmZhY2UuYWRkVGV4dChsYXllcix4LHksdGljay5sYWJlbCxmb250LG51bGwsbnVsbCxoYWxpZ24sdmFsaWduKX19KX1mdW5jdGlvbiBkcmF3U2VyaWVzKHNlcmllcyl7aWYoc2VyaWVzLmxpbmVzLnNob3cpZHJhd1Nlcmllc0xpbmVzKHNlcmllcyk7aWYoc2VyaWVzLmJhcnMuc2hvdylkcmF3U2VyaWVzQmFycyhzZXJpZXMpO2lmKHNlcmllcy5wb2ludHMuc2hvdylkcmF3U2VyaWVzUG9pbnRzKHNlcmllcyl9ZnVuY3Rpb24gZHJhd1Nlcmllc0xpbmVzKHNlcmllcyl7ZnVuY3Rpb24gcGxvdExpbmUoZGF0YXBvaW50cyx4b2Zmc2V0LHlvZmZzZXQsYXhpc3gsYXhpc3kpe3ZhciBwb2ludHM9ZGF0YXBvaW50cy5wb2ludHMscHM9ZGF0YXBvaW50cy5wb2ludHNpemUscHJldng9bnVsbCxwcmV2eT1udWxsO2N0eC5iZWdpblBhdGgoKTtmb3IodmFyIGk9cHM7aTxwb2ludHMubGVuZ3RoO2krPXBzKXt2YXIgeDE9cG9pbnRzW2ktcHNdLHkxPXBvaW50c1tpLXBzKzFdLHgyPXBvaW50c1tpXSx5Mj1wb2ludHNbaSsxXTtpZih4MT09bnVsbHx8eDI9PW51bGwpY29udGludWU7aWYoeTE8PXkyJiZ5MTxheGlzeS5taW4pe2lmKHkyPGF4aXN5Lm1pbiljb250aW51ZTt4MT0oYXhpc3kubWluLXkxKS8oeTIteTEpKih4Mi14MSkreDE7eTE9YXhpc3kubWlufWVsc2UgaWYoeTI8PXkxJiZ5MjxheGlzeS5taW4pe2lmKHkxPGF4aXN5Lm1pbiljb250aW51ZTt4Mj0oYXhpc3kubWluLXkxKS8oeTIteTEpKih4Mi14MSkreDE7eTI9YXhpc3kubWlufWlmKHkxPj15MiYmeTE+YXhpc3kubWF4KXtpZih5Mj5heGlzeS5tYXgpY29udGludWU7eDE9KGF4aXN5Lm1heC15MSkvKHkyLXkxKSooeDIteDEpK3gxO3kxPWF4aXN5Lm1heH1lbHNlIGlmKHkyPj15MSYmeTI+YXhpc3kubWF4KXtpZih5MT5heGlzeS5tYXgpY29udGludWU7eDI9KGF4aXN5Lm1heC15MSkvKHkyLXkxKSooeDIteDEpK3gxO3kyPWF4aXN5Lm1heH1pZih4MTw9eDImJngxPGF4aXN4Lm1pbil7aWYoeDI8YXhpc3gubWluKWNvbnRpbnVlO3kxPShheGlzeC5taW4teDEpLyh4Mi14MSkqKHkyLXkxKSt5MTt4MT1heGlzeC5taW59ZWxzZSBpZih4Mjw9eDEmJngyPGF4aXN4Lm1pbil7aWYoeDE8YXhpc3gubWluKWNvbnRpbnVlO3kyPShheGlzeC5taW4teDEpLyh4Mi14MSkqKHkyLXkxKSt5MTt4Mj1heGlzeC5taW59aWYoeDE+PXgyJiZ4MT5heGlzeC5tYXgpe2lmKHgyPmF4aXN4Lm1heCljb250aW51ZTt5MT0oYXhpc3gubWF4LXgxKS8oeDIteDEpKih5Mi15MSkreTE7eDE9YXhpc3gubWF4fWVsc2UgaWYoeDI+PXgxJiZ4Mj5heGlzeC5tYXgpe2lmKHgxPmF4aXN4Lm1heCljb250aW51ZTt5Mj0oYXhpc3gubWF4LXgxKS8oeDIteDEpKih5Mi15MSkreTE7eDI9YXhpc3gubWF4fWlmKHgxIT1wcmV2eHx8eTEhPXByZXZ5KWN0eC5tb3ZlVG8oYXhpc3gucDJjKHgxKSt4b2Zmc2V0LGF4aXN5LnAyYyh5MSkreW9mZnNldCk7cHJldng9eDI7cHJldnk9eTI7Y3R4LmxpbmVUbyhheGlzeC5wMmMoeDIpK3hvZmZzZXQsYXhpc3kucDJjKHkyKSt5b2Zmc2V0KX1jdHguc3Ryb2tlKCl9ZnVuY3Rpb24gcGxvdExpbmVBcmVhKGRhdGFwb2ludHMsYXhpc3gsYXhpc3kpe3ZhciBwb2ludHM9ZGF0YXBvaW50cy5wb2ludHMscHM9ZGF0YXBvaW50cy5wb2ludHNpemUsYm90dG9tPU1hdGgubWluKE1hdGgubWF4KDAsYXhpc3kubWluKSxheGlzeS5tYXgpLGk9MCx0b3AsYXJlYU9wZW49ZmFsc2UseXBvcz0xLHNlZ21lbnRTdGFydD0wLHNlZ21lbnRFbmQ9MDt3aGlsZSh0cnVlKXtpZihwcz4wJiZpPnBvaW50cy5sZW5ndGgrcHMpYnJlYWs7aSs9cHM7dmFyIHgxPXBvaW50c1tpLXBzXSx5MT1wb2ludHNbaS1wcyt5cG9zXSx4Mj1wb2ludHNbaV0seTI9cG9pbnRzW2kreXBvc107aWYoYXJlYU9wZW4pe2lmKHBzPjAmJngxIT1udWxsJiZ4Mj09bnVsbCl7c2VnbWVudEVuZD1pO3BzPS1wczt5cG9zPTI7Y29udGludWV9aWYocHM8MCYmaT09c2VnbWVudFN0YXJ0K3BzKXtjdHguZmlsbCgpO2FyZWFPcGVuPWZhbHNlO3BzPS1wczt5cG9zPTE7aT1zZWdtZW50U3RhcnQ9c2VnbWVudEVuZCtwcztjb250aW51ZX19aWYoeDE9PW51bGx8fHgyPT1udWxsKWNvbnRpbnVlO2lmKHgxPD14MiYmeDE8YXhpc3gubWluKXtpZih4MjxheGlzeC5taW4pY29udGludWU7eTE9KGF4aXN4Lm1pbi14MSkvKHgyLXgxKSooeTIteTEpK3kxO3gxPWF4aXN4Lm1pbn1lbHNlIGlmKHgyPD14MSYmeDI8YXhpc3gubWluKXtpZih4MTxheGlzeC5taW4pY29udGludWU7eTI9KGF4aXN4Lm1pbi14MSkvKHgyLXgxKSooeTIteTEpK3kxO3gyPWF4aXN4Lm1pbn1pZih4MT49eDImJngxPmF4aXN4Lm1heCl7aWYoeDI+YXhpc3gubWF4KWNvbnRpbnVlO3kxPShheGlzeC5tYXgteDEpLyh4Mi14MSkqKHkyLXkxKSt5MTt4MT1heGlzeC5tYXh9ZWxzZSBpZih4Mj49eDEmJngyPmF4aXN4Lm1heCl7aWYoeDE+YXhpc3gubWF4KWNvbnRpbnVlO3kyPShheGlzeC5tYXgteDEpLyh4Mi14MSkqKHkyLXkxKSt5MTt4Mj1heGlzeC5tYXh9aWYoIWFyZWFPcGVuKXtjdHguYmVnaW5QYXRoKCk7Y3R4Lm1vdmVUbyhheGlzeC5wMmMoeDEpLGF4aXN5LnAyYyhib3R0b20pKTthcmVhT3Blbj10cnVlfWlmKHkxPj1heGlzeS5tYXgmJnkyPj1heGlzeS5tYXgpe2N0eC5saW5lVG8oYXhpc3gucDJjKHgxKSxheGlzeS5wMmMoYXhpc3kubWF4KSk7Y3R4LmxpbmVUbyhheGlzeC5wMmMoeDIpLGF4aXN5LnAyYyhheGlzeS5tYXgpKTtjb250aW51ZX1lbHNlIGlmKHkxPD1heGlzeS5taW4mJnkyPD1heGlzeS5taW4pe2N0eC5saW5lVG8oYXhpc3gucDJjKHgxKSxheGlzeS5wMmMoYXhpc3kubWluKSk7Y3R4LmxpbmVUbyhheGlzeC5wMmMoeDIpLGF4aXN5LnAyYyhheGlzeS5taW4pKTtjb250aW51ZX12YXIgeDFvbGQ9eDEseDJvbGQ9eDI7aWYoeTE8PXkyJiZ5MTxheGlzeS5taW4mJnkyPj1heGlzeS5taW4pe3gxPShheGlzeS5taW4teTEpLyh5Mi15MSkqKHgyLXgxKSt4MTt5MT1heGlzeS5taW59ZWxzZSBpZih5Mjw9eTEmJnkyPGF4aXN5Lm1pbiYmeTE+PWF4aXN5Lm1pbil7eDI9KGF4aXN5Lm1pbi15MSkvKHkyLXkxKSooeDIteDEpK3gxO3kyPWF4aXN5Lm1pbn1pZih5MT49eTImJnkxPmF4aXN5Lm1heCYmeTI8PWF4aXN5Lm1heCl7eDE9KGF4aXN5Lm1heC15MSkvKHkyLXkxKSooeDIteDEpK3gxO3kxPWF4aXN5Lm1heH1lbHNlIGlmKHkyPj15MSYmeTI+YXhpc3kubWF4JiZ5MTw9YXhpc3kubWF4KXt4Mj0oYXhpc3kubWF4LXkxKS8oeTIteTEpKih4Mi14MSkreDE7eTI9YXhpc3kubWF4fWlmKHgxIT14MW9sZCl7Y3R4LmxpbmVUbyhheGlzeC5wMmMoeDFvbGQpLGF4aXN5LnAyYyh5MSkpfWN0eC5saW5lVG8oYXhpc3gucDJjKHgxKSxheGlzeS5wMmMoeTEpKTtjdHgubGluZVRvKGF4aXN4LnAyYyh4MiksYXhpc3kucDJjKHkyKSk7aWYoeDIhPXgyb2xkKXtjdHgubGluZVRvKGF4aXN4LnAyYyh4MiksYXhpc3kucDJjKHkyKSk7Y3R4LmxpbmVUbyhheGlzeC5wMmMoeDJvbGQpLGF4aXN5LnAyYyh5MikpfX19Y3R4LnNhdmUoKTtjdHgudHJhbnNsYXRlKHBsb3RPZmZzZXQubGVmdCxwbG90T2Zmc2V0LnRvcCk7Y3R4LmxpbmVKb2luPVwicm91bmRcIjt2YXIgbHc9c2VyaWVzLmxpbmVzLmxpbmVXaWR0aCxzdz1zZXJpZXMuc2hhZG93U2l6ZTtpZihsdz4wJiZzdz4wKXtjdHgubGluZVdpZHRoPXN3O2N0eC5zdHJva2VTdHlsZT1cInJnYmEoMCwwLDAsMC4xKVwiO3ZhciBhbmdsZT1NYXRoLlBJLzE4O3Bsb3RMaW5lKHNlcmllcy5kYXRhcG9pbnRzLE1hdGguc2luKGFuZ2xlKSoobHcvMitzdy8yKSxNYXRoLmNvcyhhbmdsZSkqKGx3LzIrc3cvMiksc2VyaWVzLnhheGlzLHNlcmllcy55YXhpcyk7Y3R4LmxpbmVXaWR0aD1zdy8yO3Bsb3RMaW5lKHNlcmllcy5kYXRhcG9pbnRzLE1hdGguc2luKGFuZ2xlKSoobHcvMitzdy80KSxNYXRoLmNvcyhhbmdsZSkqKGx3LzIrc3cvNCksc2VyaWVzLnhheGlzLHNlcmllcy55YXhpcyl9Y3R4LmxpbmVXaWR0aD1sdztjdHguc3Ryb2tlU3R5bGU9c2VyaWVzLmNvbG9yO3ZhciBmaWxsU3R5bGU9Z2V0RmlsbFN0eWxlKHNlcmllcy5saW5lcyxzZXJpZXMuY29sb3IsMCxwbG90SGVpZ2h0KTtpZihmaWxsU3R5bGUpe2N0eC5maWxsU3R5bGU9ZmlsbFN0eWxlO3Bsb3RMaW5lQXJlYShzZXJpZXMuZGF0YXBvaW50cyxzZXJpZXMueGF4aXMsc2VyaWVzLnlheGlzKX1pZihsdz4wKXBsb3RMaW5lKHNlcmllcy5kYXRhcG9pbnRzLDAsMCxzZXJpZXMueGF4aXMsc2VyaWVzLnlheGlzKTtjdHgucmVzdG9yZSgpfWZ1bmN0aW9uIGRyYXdTZXJpZXNQb2ludHMoc2VyaWVzKXtmdW5jdGlvbiBwbG90UG9pbnRzKGRhdGFwb2ludHMscmFkaXVzLGZpbGxTdHlsZSxvZmZzZXQsc2hhZG93LGF4aXN4LGF4aXN5LHN5bWJvbCl7dmFyIHBvaW50cz1kYXRhcG9pbnRzLnBvaW50cyxwcz1kYXRhcG9pbnRzLnBvaW50c2l6ZTtmb3IodmFyIGk9MDtpPHBvaW50cy5sZW5ndGg7aSs9cHMpe3ZhciB4PXBvaW50c1tpXSx5PXBvaW50c1tpKzFdO2lmKHg9PW51bGx8fHg8YXhpc3gubWlufHx4PmF4aXN4Lm1heHx8eTxheGlzeS5taW58fHk+YXhpc3kubWF4KWNvbnRpbnVlO2N0eC5iZWdpblBhdGgoKTt4PWF4aXN4LnAyYyh4KTt5PWF4aXN5LnAyYyh5KStvZmZzZXQ7aWYoc3ltYm9sPT1cImNpcmNsZVwiKWN0eC5hcmMoeCx5LHJhZGl1cywwLHNoYWRvdz9NYXRoLlBJOk1hdGguUEkqMixmYWxzZSk7ZWxzZSBzeW1ib2woY3R4LHgseSxyYWRpdXMsc2hhZG93KTtjdHguY2xvc2VQYXRoKCk7aWYoZmlsbFN0eWxlKXtjdHguZmlsbFN0eWxlPWZpbGxTdHlsZTtjdHguZmlsbCgpfWN0eC5zdHJva2UoKX19Y3R4LnNhdmUoKTtjdHgudHJhbnNsYXRlKHBsb3RPZmZzZXQubGVmdCxwbG90T2Zmc2V0LnRvcCk7dmFyIGx3PXNlcmllcy5wb2ludHMubGluZVdpZHRoLHN3PXNlcmllcy5zaGFkb3dTaXplLHJhZGl1cz1zZXJpZXMucG9pbnRzLnJhZGl1cyxzeW1ib2w9c2VyaWVzLnBvaW50cy5zeW1ib2w7aWYobHc9PTApbHc9MWUtNDtpZihsdz4wJiZzdz4wKXt2YXIgdz1zdy8yO2N0eC5saW5lV2lkdGg9dztjdHguc3Ryb2tlU3R5bGU9XCJyZ2JhKDAsMCwwLDAuMSlcIjtwbG90UG9pbnRzKHNlcmllcy5kYXRhcG9pbnRzLHJhZGl1cyxudWxsLHcrdy8yLHRydWUsc2VyaWVzLnhheGlzLHNlcmllcy55YXhpcyxzeW1ib2wpO2N0eC5zdHJva2VTdHlsZT1cInJnYmEoMCwwLDAsMC4yKVwiO3Bsb3RQb2ludHMoc2VyaWVzLmRhdGFwb2ludHMscmFkaXVzLG51bGwsdy8yLHRydWUsc2VyaWVzLnhheGlzLHNlcmllcy55YXhpcyxzeW1ib2wpfWN0eC5saW5lV2lkdGg9bHc7Y3R4LnN0cm9rZVN0eWxlPXNlcmllcy5jb2xvcjtwbG90UG9pbnRzKHNlcmllcy5kYXRhcG9pbnRzLHJhZGl1cyxnZXRGaWxsU3R5bGUoc2VyaWVzLnBvaW50cyxzZXJpZXMuY29sb3IpLDAsZmFsc2Usc2VyaWVzLnhheGlzLHNlcmllcy55YXhpcyxzeW1ib2wpO2N0eC5yZXN0b3JlKCl9ZnVuY3Rpb24gZHJhd0Jhcih4LHksYixiYXJMZWZ0LGJhclJpZ2h0LGZpbGxTdHlsZUNhbGxiYWNrLGF4aXN4LGF4aXN5LGMsaG9yaXpvbnRhbCxsaW5lV2lkdGgpe3ZhciBsZWZ0LHJpZ2h0LGJvdHRvbSx0b3AsZHJhd0xlZnQsZHJhd1JpZ2h0LGRyYXdUb3AsZHJhd0JvdHRvbSx0bXA7aWYoaG9yaXpvbnRhbCl7ZHJhd0JvdHRvbT1kcmF3UmlnaHQ9ZHJhd1RvcD10cnVlO2RyYXdMZWZ0PWZhbHNlO2xlZnQ9YjtyaWdodD14O3RvcD15K2JhckxlZnQ7Ym90dG9tPXkrYmFyUmlnaHQ7aWYocmlnaHQ8bGVmdCl7dG1wPXJpZ2h0O3JpZ2h0PWxlZnQ7bGVmdD10bXA7ZHJhd0xlZnQ9dHJ1ZTtkcmF3UmlnaHQ9ZmFsc2V9fWVsc2V7ZHJhd0xlZnQ9ZHJhd1JpZ2h0PWRyYXdUb3A9dHJ1ZTtkcmF3Qm90dG9tPWZhbHNlO2xlZnQ9eCtiYXJMZWZ0O3JpZ2h0PXgrYmFyUmlnaHQ7Ym90dG9tPWI7dG9wPXk7aWYodG9wPGJvdHRvbSl7dG1wPXRvcDt0b3A9Ym90dG9tO2JvdHRvbT10bXA7ZHJhd0JvdHRvbT10cnVlO2RyYXdUb3A9ZmFsc2V9fWlmKHJpZ2h0PGF4aXN4Lm1pbnx8bGVmdD5heGlzeC5tYXh8fHRvcDxheGlzeS5taW58fGJvdHRvbT5heGlzeS5tYXgpcmV0dXJuO2lmKGxlZnQ8YXhpc3gubWluKXtsZWZ0PWF4aXN4Lm1pbjtkcmF3TGVmdD1mYWxzZX1pZihyaWdodD5heGlzeC5tYXgpe3JpZ2h0PWF4aXN4Lm1heDtkcmF3UmlnaHQ9ZmFsc2V9aWYoYm90dG9tPGF4aXN5Lm1pbil7Ym90dG9tPWF4aXN5Lm1pbjtkcmF3Qm90dG9tPWZhbHNlfWlmKHRvcD5heGlzeS5tYXgpe3RvcD1heGlzeS5tYXg7ZHJhd1RvcD1mYWxzZX1sZWZ0PWF4aXN4LnAyYyhsZWZ0KTtib3R0b209YXhpc3kucDJjKGJvdHRvbSk7cmlnaHQ9YXhpc3gucDJjKHJpZ2h0KTt0b3A9YXhpc3kucDJjKHRvcCk7aWYoZmlsbFN0eWxlQ2FsbGJhY2spe2MuZmlsbFN0eWxlPWZpbGxTdHlsZUNhbGxiYWNrKGJvdHRvbSx0b3ApO2MuZmlsbFJlY3QobGVmdCx0b3AscmlnaHQtbGVmdCxib3R0b20tdG9wKX1pZihsaW5lV2lkdGg+MCYmKGRyYXdMZWZ0fHxkcmF3UmlnaHR8fGRyYXdUb3B8fGRyYXdCb3R0b20pKXtjLmJlZ2luUGF0aCgpO2MubW92ZVRvKGxlZnQsYm90dG9tKTtpZihkcmF3TGVmdCljLmxpbmVUbyhsZWZ0LHRvcCk7ZWxzZSBjLm1vdmVUbyhsZWZ0LHRvcCk7aWYoZHJhd1RvcCljLmxpbmVUbyhyaWdodCx0b3ApO2Vsc2UgYy5tb3ZlVG8ocmlnaHQsdG9wKTtpZihkcmF3UmlnaHQpYy5saW5lVG8ocmlnaHQsYm90dG9tKTtlbHNlIGMubW92ZVRvKHJpZ2h0LGJvdHRvbSk7aWYoZHJhd0JvdHRvbSljLmxpbmVUbyhsZWZ0LGJvdHRvbSk7ZWxzZSBjLm1vdmVUbyhsZWZ0LGJvdHRvbSk7Yy5zdHJva2UoKX19ZnVuY3Rpb24gZHJhd1Nlcmllc0JhcnMoc2VyaWVzKXtmdW5jdGlvbiBwbG90QmFycyhkYXRhcG9pbnRzLGJhckxlZnQsYmFyUmlnaHQsZmlsbFN0eWxlQ2FsbGJhY2ssYXhpc3gsYXhpc3kpe3ZhciBwb2ludHM9ZGF0YXBvaW50cy5wb2ludHMscHM9ZGF0YXBvaW50cy5wb2ludHNpemU7Zm9yKHZhciBpPTA7aTxwb2ludHMubGVuZ3RoO2krPXBzKXtpZihwb2ludHNbaV09PW51bGwpY29udGludWU7ZHJhd0Jhcihwb2ludHNbaV0scG9pbnRzW2krMV0scG9pbnRzW2krMl0sYmFyTGVmdCxiYXJSaWdodCxmaWxsU3R5bGVDYWxsYmFjayxheGlzeCxheGlzeSxjdHgsc2VyaWVzLmJhcnMuaG9yaXpvbnRhbCxzZXJpZXMuYmFycy5saW5lV2lkdGgpfX1jdHguc2F2ZSgpO2N0eC50cmFuc2xhdGUocGxvdE9mZnNldC5sZWZ0LHBsb3RPZmZzZXQudG9wKTtjdHgubGluZVdpZHRoPXNlcmllcy5iYXJzLmxpbmVXaWR0aDtjdHguc3Ryb2tlU3R5bGU9c2VyaWVzLmNvbG9yO3ZhciBiYXJMZWZ0O3N3aXRjaChzZXJpZXMuYmFycy5hbGlnbil7Y2FzZVwibGVmdFwiOmJhckxlZnQ9MDticmVhaztjYXNlXCJyaWdodFwiOmJhckxlZnQ9LXNlcmllcy5iYXJzLmJhcldpZHRoO2JyZWFrO2RlZmF1bHQ6YmFyTGVmdD0tc2VyaWVzLmJhcnMuYmFyV2lkdGgvMn12YXIgZmlsbFN0eWxlQ2FsbGJhY2s9c2VyaWVzLmJhcnMuZmlsbD9mdW5jdGlvbihib3R0b20sdG9wKXtyZXR1cm4gZ2V0RmlsbFN0eWxlKHNlcmllcy5iYXJzLHNlcmllcy5jb2xvcixib3R0b20sdG9wKX06bnVsbDtwbG90QmFycyhzZXJpZXMuZGF0YXBvaW50cyxiYXJMZWZ0LGJhckxlZnQrc2VyaWVzLmJhcnMuYmFyV2lkdGgsZmlsbFN0eWxlQ2FsbGJhY2ssc2VyaWVzLnhheGlzLHNlcmllcy55YXhpcyk7Y3R4LnJlc3RvcmUoKX1mdW5jdGlvbiBnZXRGaWxsU3R5bGUoZmlsbG9wdGlvbnMsc2VyaWVzQ29sb3IsYm90dG9tLHRvcCl7dmFyIGZpbGw9ZmlsbG9wdGlvbnMuZmlsbDtpZighZmlsbClyZXR1cm4gbnVsbDtpZihmaWxsb3B0aW9ucy5maWxsQ29sb3IpcmV0dXJuIGdldENvbG9yT3JHcmFkaWVudChmaWxsb3B0aW9ucy5maWxsQ29sb3IsYm90dG9tLHRvcCxzZXJpZXNDb2xvcik7dmFyIGM9JC5jb2xvci5wYXJzZShzZXJpZXNDb2xvcik7Yy5hPXR5cGVvZiBmaWxsPT1cIm51bWJlclwiP2ZpbGw6LjQ7Yy5ub3JtYWxpemUoKTtyZXR1cm4gYy50b1N0cmluZygpfWZ1bmN0aW9uIGluc2VydExlZ2VuZCgpe2lmKG9wdGlvbnMubGVnZW5kLmNvbnRhaW5lciE9bnVsbCl7JChvcHRpb25zLmxlZ2VuZC5jb250YWluZXIpLmh0bWwoXCJcIil9ZWxzZXtwbGFjZWhvbGRlci5maW5kKFwiLmxlZ2VuZFwiKS5yZW1vdmUoKX1pZighb3B0aW9ucy5sZWdlbmQuc2hvdyl7cmV0dXJufXZhciBmcmFnbWVudHM9W10sZW50cmllcz1bXSxyb3dTdGFydGVkPWZhbHNlLGxmPW9wdGlvbnMubGVnZW5kLmxhYmVsRm9ybWF0dGVyLHMsbGFiZWw7Zm9yKHZhciBpPTA7aTxzZXJpZXMubGVuZ3RoOysraSl7cz1zZXJpZXNbaV07aWYocy5sYWJlbCl7bGFiZWw9bGY/bGYocy5sYWJlbCxzKTpzLmxhYmVsO2lmKGxhYmVsKXtlbnRyaWVzLnB1c2goe2xhYmVsOmxhYmVsLGNvbG9yOnMuY29sb3J9KX19fWlmKG9wdGlvbnMubGVnZW5kLnNvcnRlZCl7aWYoJC5pc0Z1bmN0aW9uKG9wdGlvbnMubGVnZW5kLnNvcnRlZCkpe2VudHJpZXMuc29ydChvcHRpb25zLmxlZ2VuZC5zb3J0ZWQpfWVsc2UgaWYob3B0aW9ucy5sZWdlbmQuc29ydGVkPT1cInJldmVyc2VcIil7ZW50cmllcy5yZXZlcnNlKCl9ZWxzZXt2YXIgYXNjZW5kaW5nPW9wdGlvbnMubGVnZW5kLnNvcnRlZCE9XCJkZXNjZW5kaW5nXCI7ZW50cmllcy5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEubGFiZWw9PWIubGFiZWw/MDphLmxhYmVsPGIubGFiZWwhPWFzY2VuZGluZz8xOi0xfSl9fWZvcih2YXIgaT0wO2k8ZW50cmllcy5sZW5ndGg7KytpKXt2YXIgZW50cnk9ZW50cmllc1tpXTtpZihpJW9wdGlvbnMubGVnZW5kLm5vQ29sdW1ucz09MCl7aWYocm93U3RhcnRlZClmcmFnbWVudHMucHVzaChcIjwvdHI+XCIpO2ZyYWdtZW50cy5wdXNoKFwiPHRyPlwiKTtyb3dTdGFydGVkPXRydWV9ZnJhZ21lbnRzLnB1c2goJzx0ZCBjbGFzcz1cImxlZ2VuZENvbG9yQm94XCI+PGRpdiBzdHlsZT1cImJvcmRlcjoxcHggc29saWQgJytvcHRpb25zLmxlZ2VuZC5sYWJlbEJveEJvcmRlckNvbG9yKyc7cGFkZGluZzoxcHhcIj48ZGl2IHN0eWxlPVwid2lkdGg6NHB4O2hlaWdodDowO2JvcmRlcjo1cHggc29saWQgJytlbnRyeS5jb2xvcisnO292ZXJmbG93OmhpZGRlblwiPjwvZGl2PjwvZGl2PjwvdGQ+JysnPHRkIGNsYXNzPVwibGVnZW5kTGFiZWxcIj4nK2VudHJ5LmxhYmVsK1wiPC90ZD5cIil9aWYocm93U3RhcnRlZClmcmFnbWVudHMucHVzaChcIjwvdHI+XCIpO2lmKGZyYWdtZW50cy5sZW5ndGg9PTApcmV0dXJuO3ZhciB0YWJsZT0nPHRhYmxlIHN0eWxlPVwiZm9udC1zaXplOnNtYWxsZXI7Y29sb3I6JytvcHRpb25zLmdyaWQuY29sb3IrJ1wiPicrZnJhZ21lbnRzLmpvaW4oXCJcIikrXCI8L3RhYmxlPlwiO2lmKG9wdGlvbnMubGVnZW5kLmNvbnRhaW5lciE9bnVsbCkkKG9wdGlvbnMubGVnZW5kLmNvbnRhaW5lcikuaHRtbCh0YWJsZSk7ZWxzZXt2YXIgcG9zPVwiXCIscD1vcHRpb25zLmxlZ2VuZC5wb3NpdGlvbixtPW9wdGlvbnMubGVnZW5kLm1hcmdpbjtpZihtWzBdPT1udWxsKW09W20sbV07aWYocC5jaGFyQXQoMCk9PVwiblwiKXBvcys9XCJ0b3A6XCIrKG1bMV0rcGxvdE9mZnNldC50b3ApK1wicHg7XCI7ZWxzZSBpZihwLmNoYXJBdCgwKT09XCJzXCIpcG9zKz1cImJvdHRvbTpcIisobVsxXStwbG90T2Zmc2V0LmJvdHRvbSkrXCJweDtcIjtpZihwLmNoYXJBdCgxKT09XCJlXCIpcG9zKz1cInJpZ2h0OlwiKyhtWzBdK3Bsb3RPZmZzZXQucmlnaHQpK1wicHg7XCI7ZWxzZSBpZihwLmNoYXJBdCgxKT09XCJ3XCIpcG9zKz1cImxlZnQ6XCIrKG1bMF0rcGxvdE9mZnNldC5sZWZ0KStcInB4O1wiO3ZhciBsZWdlbmQ9JCgnPGRpdiBjbGFzcz1cImxlZ2VuZFwiPicrdGFibGUucmVwbGFjZSgnc3R5bGU9XCInLCdzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlOycrcG9zK1wiO1wiKStcIjwvZGl2PlwiKS5hcHBlbmRUbyhwbGFjZWhvbGRlcik7aWYob3B0aW9ucy5sZWdlbmQuYmFja2dyb3VuZE9wYWNpdHkhPTApe3ZhciBjPW9wdGlvbnMubGVnZW5kLmJhY2tncm91bmRDb2xvcjtpZihjPT1udWxsKXtjPW9wdGlvbnMuZ3JpZC5iYWNrZ3JvdW5kQ29sb3I7aWYoYyYmdHlwZW9mIGM9PVwic3RyaW5nXCIpYz0kLmNvbG9yLnBhcnNlKGMpO2Vsc2UgYz0kLmNvbG9yLmV4dHJhY3QobGVnZW5kLFwiYmFja2dyb3VuZC1jb2xvclwiKTtjLmE9MTtjPWMudG9TdHJpbmcoKX12YXIgZGl2PWxlZ2VuZC5jaGlsZHJlbigpOyQoJzxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDonK2Rpdi53aWR0aCgpK1wicHg7aGVpZ2h0OlwiK2Rpdi5oZWlnaHQoKStcInB4O1wiK3BvcytcImJhY2tncm91bmQtY29sb3I6XCIrYysnO1wiPiA8L2Rpdj4nKS5wcmVwZW5kVG8obGVnZW5kKS5jc3MoXCJvcGFjaXR5XCIsb3B0aW9ucy5sZWdlbmQuYmFja2dyb3VuZE9wYWNpdHkpfX19dmFyIGhpZ2hsaWdodHM9W10scmVkcmF3VGltZW91dD1udWxsO2Z1bmN0aW9uIGZpbmROZWFyYnlJdGVtKG1vdXNlWCxtb3VzZVksc2VyaWVzRmlsdGVyKXt2YXIgbWF4RGlzdGFuY2U9b3B0aW9ucy5ncmlkLm1vdXNlQWN0aXZlUmFkaXVzLHNtYWxsZXN0RGlzdGFuY2U9bWF4RGlzdGFuY2UqbWF4RGlzdGFuY2UrMSxpdGVtPW51bGwsZm91bmRQb2ludD1mYWxzZSxpLGoscHM7Zm9yKGk9c2VyaWVzLmxlbmd0aC0xO2k+PTA7LS1pKXtpZighc2VyaWVzRmlsdGVyKHNlcmllc1tpXSkpY29udGludWU7dmFyIHM9c2VyaWVzW2ldLGF4aXN4PXMueGF4aXMsYXhpc3k9cy55YXhpcyxwb2ludHM9cy5kYXRhcG9pbnRzLnBvaW50cyxteD1heGlzeC5jMnAobW91c2VYKSxteT1heGlzeS5jMnAobW91c2VZKSxtYXh4PW1heERpc3RhbmNlL2F4aXN4LnNjYWxlLG1heHk9bWF4RGlzdGFuY2UvYXhpc3kuc2NhbGU7cHM9cy5kYXRhcG9pbnRzLnBvaW50c2l6ZTtpZihheGlzeC5vcHRpb25zLmludmVyc2VUcmFuc2Zvcm0pbWF4eD1OdW1iZXIuTUFYX1ZBTFVFO2lmKGF4aXN5Lm9wdGlvbnMuaW52ZXJzZVRyYW5zZm9ybSltYXh5PU51bWJlci5NQVhfVkFMVUU7aWYocy5saW5lcy5zaG93fHxzLnBvaW50cy5zaG93KXtmb3Ioaj0wO2o8cG9pbnRzLmxlbmd0aDtqKz1wcyl7dmFyIHg9cG9pbnRzW2pdLHk9cG9pbnRzW2orMV07aWYoeD09bnVsbCljb250aW51ZTtpZih4LW14Pm1heHh8fHgtbXg8LW1heHh8fHktbXk+bWF4eXx8eS1teTwtbWF4eSljb250aW51ZTt2YXIgZHg9TWF0aC5hYnMoYXhpc3gucDJjKHgpLW1vdXNlWCksZHk9TWF0aC5hYnMoYXhpc3kucDJjKHkpLW1vdXNlWSksZGlzdD1keCpkeCtkeSpkeTtpZihkaXN0PHNtYWxsZXN0RGlzdGFuY2Upe3NtYWxsZXN0RGlzdGFuY2U9ZGlzdDtpdGVtPVtpLGovcHNdfX19aWYocy5iYXJzLnNob3cmJiFpdGVtKXt2YXIgYmFyTGVmdCxiYXJSaWdodDtzd2l0Y2gocy5iYXJzLmFsaWduKXtjYXNlXCJsZWZ0XCI6YmFyTGVmdD0wO2JyZWFrO2Nhc2VcInJpZ2h0XCI6YmFyTGVmdD0tcy5iYXJzLmJhcldpZHRoO2JyZWFrO2RlZmF1bHQ6YmFyTGVmdD0tcy5iYXJzLmJhcldpZHRoLzJ9YmFyUmlnaHQ9YmFyTGVmdCtzLmJhcnMuYmFyV2lkdGg7Zm9yKGo9MDtqPHBvaW50cy5sZW5ndGg7ais9cHMpe3ZhciB4PXBvaW50c1tqXSx5PXBvaW50c1tqKzFdLGI9cG9pbnRzW2orMl07aWYoeD09bnVsbCljb250aW51ZTtpZihzZXJpZXNbaV0uYmFycy5ob3Jpem9udGFsP214PD1NYXRoLm1heChiLHgpJiZteD49TWF0aC5taW4oYix4KSYmbXk+PXkrYmFyTGVmdCYmbXk8PXkrYmFyUmlnaHQ6bXg+PXgrYmFyTGVmdCYmbXg8PXgrYmFyUmlnaHQmJm15Pj1NYXRoLm1pbihiLHkpJiZteTw9TWF0aC5tYXgoYix5KSlpdGVtPVtpLGovcHNdfX19aWYoaXRlbSl7aT1pdGVtWzBdO2o9aXRlbVsxXTtwcz1zZXJpZXNbaV0uZGF0YXBvaW50cy5wb2ludHNpemU7cmV0dXJue2RhdGFwb2ludDpzZXJpZXNbaV0uZGF0YXBvaW50cy5wb2ludHMuc2xpY2UoaipwcywoaisxKSpwcyksZGF0YUluZGV4Omosc2VyaWVzOnNlcmllc1tpXSxzZXJpZXNJbmRleDppfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBvbk1vdXNlTW92ZShlKXtpZihvcHRpb25zLmdyaWQuaG92ZXJhYmxlKXRyaWdnZXJDbGlja0hvdmVyRXZlbnQoXCJwbG90aG92ZXJcIixlLGZ1bmN0aW9uKHMpe3JldHVybiBzW1wiaG92ZXJhYmxlXCJdIT1mYWxzZX0pfWZ1bmN0aW9uIG9uTW91c2VMZWF2ZShlKXtpZihvcHRpb25zLmdyaWQuaG92ZXJhYmxlKXRyaWdnZXJDbGlja0hvdmVyRXZlbnQoXCJwbG90aG92ZXJcIixlLGZ1bmN0aW9uKHMpe3JldHVybiBmYWxzZX0pfWZ1bmN0aW9uIG9uQ2xpY2soZSl7dHJpZ2dlckNsaWNrSG92ZXJFdmVudChcInBsb3RjbGlja1wiLGUsZnVuY3Rpb24ocyl7cmV0dXJuIHNbXCJjbGlja2FibGVcIl0hPWZhbHNlfSl9ZnVuY3Rpb24gdHJpZ2dlckNsaWNrSG92ZXJFdmVudChldmVudG5hbWUsZXZlbnQsc2VyaWVzRmlsdGVyKXt2YXIgb2Zmc2V0PWV2ZW50SG9sZGVyLm9mZnNldCgpLGNhbnZhc1g9ZXZlbnQucGFnZVgtb2Zmc2V0LmxlZnQtcGxvdE9mZnNldC5sZWZ0LGNhbnZhc1k9ZXZlbnQucGFnZVktb2Zmc2V0LnRvcC1wbG90T2Zmc2V0LnRvcCxwb3M9Y2FudmFzVG9BeGlzQ29vcmRzKHtsZWZ0OmNhbnZhc1gsdG9wOmNhbnZhc1l9KTtwb3MucGFnZVg9ZXZlbnQucGFnZVg7cG9zLnBhZ2VZPWV2ZW50LnBhZ2VZO3ZhciBpdGVtPWZpbmROZWFyYnlJdGVtKGNhbnZhc1gsY2FudmFzWSxzZXJpZXNGaWx0ZXIpO2lmKGl0ZW0pe2l0ZW0ucGFnZVg9cGFyc2VJbnQoaXRlbS5zZXJpZXMueGF4aXMucDJjKGl0ZW0uZGF0YXBvaW50WzBdKStvZmZzZXQubGVmdCtwbG90T2Zmc2V0LmxlZnQsMTApO2l0ZW0ucGFnZVk9cGFyc2VJbnQoaXRlbS5zZXJpZXMueWF4aXMucDJjKGl0ZW0uZGF0YXBvaW50WzFdKStvZmZzZXQudG9wK3Bsb3RPZmZzZXQudG9wLDEwKX1pZihvcHRpb25zLmdyaWQuYXV0b0hpZ2hsaWdodCl7Zm9yKHZhciBpPTA7aTxoaWdobGlnaHRzLmxlbmd0aDsrK2kpe3ZhciBoPWhpZ2hsaWdodHNbaV07aWYoaC5hdXRvPT1ldmVudG5hbWUmJiEoaXRlbSYmaC5zZXJpZXM9PWl0ZW0uc2VyaWVzJiZoLnBvaW50WzBdPT1pdGVtLmRhdGFwb2ludFswXSYmaC5wb2ludFsxXT09aXRlbS5kYXRhcG9pbnRbMV0pKXVuaGlnaGxpZ2h0KGguc2VyaWVzLGgucG9pbnQpfWlmKGl0ZW0paGlnaGxpZ2h0KGl0ZW0uc2VyaWVzLGl0ZW0uZGF0YXBvaW50LGV2ZW50bmFtZSl9cGxhY2Vob2xkZXIudHJpZ2dlcihldmVudG5hbWUsW3BvcyxpdGVtXSl9ZnVuY3Rpb24gdHJpZ2dlclJlZHJhd092ZXJsYXkoKXt2YXIgdD1vcHRpb25zLmludGVyYWN0aW9uLnJlZHJhd092ZXJsYXlJbnRlcnZhbDtpZih0PT0tMSl7ZHJhd092ZXJsYXkoKTtyZXR1cm59aWYoIXJlZHJhd1RpbWVvdXQpcmVkcmF3VGltZW91dD1zZXRUaW1lb3V0KGRyYXdPdmVybGF5LHQpfWZ1bmN0aW9uIGRyYXdPdmVybGF5KCl7cmVkcmF3VGltZW91dD1udWxsO29jdHguc2F2ZSgpO292ZXJsYXkuY2xlYXIoKTtvY3R4LnRyYW5zbGF0ZShwbG90T2Zmc2V0LmxlZnQscGxvdE9mZnNldC50b3ApO3ZhciBpLGhpO2ZvcihpPTA7aTxoaWdobGlnaHRzLmxlbmd0aDsrK2kpe2hpPWhpZ2hsaWdodHNbaV07aWYoaGkuc2VyaWVzLmJhcnMuc2hvdylkcmF3QmFySGlnaGxpZ2h0KGhpLnNlcmllcyxoaS5wb2ludCk7ZWxzZSBkcmF3UG9pbnRIaWdobGlnaHQoaGkuc2VyaWVzLGhpLnBvaW50KX1vY3R4LnJlc3RvcmUoKTtleGVjdXRlSG9va3MoaG9va3MuZHJhd092ZXJsYXksW29jdHhdKX1mdW5jdGlvbiBoaWdobGlnaHQocyxwb2ludCxhdXRvKXtpZih0eXBlb2Ygcz09XCJudW1iZXJcIilzPXNlcmllc1tzXTtpZih0eXBlb2YgcG9pbnQ9PVwibnVtYmVyXCIpe3ZhciBwcz1zLmRhdGFwb2ludHMucG9pbnRzaXplO3BvaW50PXMuZGF0YXBvaW50cy5wb2ludHMuc2xpY2UocHMqcG9pbnQscHMqKHBvaW50KzEpKX12YXIgaT1pbmRleE9mSGlnaGxpZ2h0KHMscG9pbnQpO2lmKGk9PS0xKXtoaWdobGlnaHRzLnB1c2goe3NlcmllczpzLHBvaW50OnBvaW50LGF1dG86YXV0b30pO3RyaWdnZXJSZWRyYXdPdmVybGF5KCl9ZWxzZSBpZighYXV0byloaWdobGlnaHRzW2ldLmF1dG89ZmFsc2V9ZnVuY3Rpb24gdW5oaWdobGlnaHQocyxwb2ludCl7aWYocz09bnVsbCYmcG9pbnQ9PW51bGwpe2hpZ2hsaWdodHM9W107dHJpZ2dlclJlZHJhd092ZXJsYXkoKTtyZXR1cm59aWYodHlwZW9mIHM9PVwibnVtYmVyXCIpcz1zZXJpZXNbc107aWYodHlwZW9mIHBvaW50PT1cIm51bWJlclwiKXt2YXIgcHM9cy5kYXRhcG9pbnRzLnBvaW50c2l6ZTtwb2ludD1zLmRhdGFwb2ludHMucG9pbnRzLnNsaWNlKHBzKnBvaW50LHBzKihwb2ludCsxKSl9dmFyIGk9aW5kZXhPZkhpZ2hsaWdodChzLHBvaW50KTtpZihpIT0tMSl7aGlnaGxpZ2h0cy5zcGxpY2UoaSwxKTt0cmlnZ2VyUmVkcmF3T3ZlcmxheSgpfX1mdW5jdGlvbiBpbmRleE9mSGlnaGxpZ2h0KHMscCl7Zm9yKHZhciBpPTA7aTxoaWdobGlnaHRzLmxlbmd0aDsrK2kpe3ZhciBoPWhpZ2hsaWdodHNbaV07aWYoaC5zZXJpZXM9PXMmJmgucG9pbnRbMF09PXBbMF0mJmgucG9pbnRbMV09PXBbMV0pcmV0dXJuIGl9cmV0dXJuLTF9ZnVuY3Rpb24gZHJhd1BvaW50SGlnaGxpZ2h0KHNlcmllcyxwb2ludCl7dmFyIHg9cG9pbnRbMF0seT1wb2ludFsxXSxheGlzeD1zZXJpZXMueGF4aXMsYXhpc3k9c2VyaWVzLnlheGlzLGhpZ2hsaWdodENvbG9yPXR5cGVvZiBzZXJpZXMuaGlnaGxpZ2h0Q29sb3I9PT1cInN0cmluZ1wiP3Nlcmllcy5oaWdobGlnaHRDb2xvcjokLmNvbG9yLnBhcnNlKHNlcmllcy5jb2xvcikuc2NhbGUoXCJhXCIsLjUpLnRvU3RyaW5nKCk7aWYoeDxheGlzeC5taW58fHg+YXhpc3gubWF4fHx5PGF4aXN5Lm1pbnx8eT5heGlzeS5tYXgpcmV0dXJuO3ZhciBwb2ludFJhZGl1cz1zZXJpZXMucG9pbnRzLnJhZGl1cytzZXJpZXMucG9pbnRzLmxpbmVXaWR0aC8yO29jdHgubGluZVdpZHRoPXBvaW50UmFkaXVzO29jdHguc3Ryb2tlU3R5bGU9aGlnaGxpZ2h0Q29sb3I7dmFyIHJhZGl1cz0xLjUqcG9pbnRSYWRpdXM7eD1heGlzeC5wMmMoeCk7eT1heGlzeS5wMmMoeSk7b2N0eC5iZWdpblBhdGgoKTtpZihzZXJpZXMucG9pbnRzLnN5bWJvbD09XCJjaXJjbGVcIilvY3R4LmFyYyh4LHkscmFkaXVzLDAsMipNYXRoLlBJLGZhbHNlKTtlbHNlIHNlcmllcy5wb2ludHMuc3ltYm9sKG9jdHgseCx5LHJhZGl1cyxmYWxzZSk7b2N0eC5jbG9zZVBhdGgoKTtvY3R4LnN0cm9rZSgpfWZ1bmN0aW9uIGRyYXdCYXJIaWdobGlnaHQoc2VyaWVzLHBvaW50KXt2YXIgaGlnaGxpZ2h0Q29sb3I9dHlwZW9mIHNlcmllcy5oaWdobGlnaHRDb2xvcj09PVwic3RyaW5nXCI/c2VyaWVzLmhpZ2hsaWdodENvbG9yOiQuY29sb3IucGFyc2Uoc2VyaWVzLmNvbG9yKS5zY2FsZShcImFcIiwuNSkudG9TdHJpbmcoKSxmaWxsU3R5bGU9aGlnaGxpZ2h0Q29sb3IsYmFyTGVmdDtzd2l0Y2goc2VyaWVzLmJhcnMuYWxpZ24pe2Nhc2VcImxlZnRcIjpiYXJMZWZ0PTA7YnJlYWs7Y2FzZVwicmlnaHRcIjpiYXJMZWZ0PS1zZXJpZXMuYmFycy5iYXJXaWR0aDticmVhaztkZWZhdWx0OmJhckxlZnQ9LXNlcmllcy5iYXJzLmJhcldpZHRoLzJ9b2N0eC5saW5lV2lkdGg9c2VyaWVzLmJhcnMubGluZVdpZHRoO29jdHguc3Ryb2tlU3R5bGU9aGlnaGxpZ2h0Q29sb3I7ZHJhd0Jhcihwb2ludFswXSxwb2ludFsxXSxwb2ludFsyXXx8MCxiYXJMZWZ0LGJhckxlZnQrc2VyaWVzLmJhcnMuYmFyV2lkdGgsZnVuY3Rpb24oKXtyZXR1cm4gZmlsbFN0eWxlfSxzZXJpZXMueGF4aXMsc2VyaWVzLnlheGlzLG9jdHgsc2VyaWVzLmJhcnMuaG9yaXpvbnRhbCxzZXJpZXMuYmFycy5saW5lV2lkdGgpfWZ1bmN0aW9uIGdldENvbG9yT3JHcmFkaWVudChzcGVjLGJvdHRvbSx0b3AsZGVmYXVsdENvbG9yKXtpZih0eXBlb2Ygc3BlYz09XCJzdHJpbmdcIilyZXR1cm4gc3BlYztlbHNle3ZhciBncmFkaWVudD1jdHguY3JlYXRlTGluZWFyR3JhZGllbnQoMCx0b3AsMCxib3R0b20pO2Zvcih2YXIgaT0wLGw9c3BlYy5jb2xvcnMubGVuZ3RoO2k8bDsrK2kpe3ZhciBjPXNwZWMuY29sb3JzW2ldO2lmKHR5cGVvZiBjIT1cInN0cmluZ1wiKXt2YXIgY289JC5jb2xvci5wYXJzZShkZWZhdWx0Q29sb3IpO2lmKGMuYnJpZ2h0bmVzcyE9bnVsbCljbz1jby5zY2FsZShcInJnYlwiLGMuYnJpZ2h0bmVzcyk7aWYoYy5vcGFjaXR5IT1udWxsKWNvLmEqPWMub3BhY2l0eTtjPWNvLnRvU3RyaW5nKCl9Z3JhZGllbnQuYWRkQ29sb3JTdG9wKGkvKGwtMSksYyl9cmV0dXJuIGdyYWRpZW50fX19JC5wbG90PWZ1bmN0aW9uKHBsYWNlaG9sZGVyLGRhdGEsb3B0aW9ucyl7dmFyIHBsb3Q9bmV3IFBsb3QoJChwbGFjZWhvbGRlciksZGF0YSxvcHRpb25zLCQucGxvdC5wbHVnaW5zKTtyZXR1cm4gcGxvdH07JC5wbG90LnZlcnNpb249XCIwLjguM1wiOyQucGxvdC5wbHVnaW5zPVtdOyQuZm4ucGxvdD1mdW5jdGlvbihkYXRhLG9wdGlvbnMpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXskLnBsb3QodGhpcyxkYXRhLG9wdGlvbnMpfSl9O2Z1bmN0aW9uIGZsb29ySW5CYXNlKG4sYmFzZSl7cmV0dXJuIGJhc2UqTWF0aC5mbG9vcihuL2Jhc2UpfX0pKGpRdWVyeSk7IiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBvd25lckRvY3VtZW50O1xuXG5mdW5jdGlvbiBvd25lckRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0eWxlO1xuXG52YXIgX2NhbWVsaXplU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2NhbWVsaXplU3R5bGVcIikpO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9oeXBoZW5hdGVTdHlsZVwiKSk7XG5cbnZhciBfZ2V0Q29tcHV0ZWRTdHlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldENvbXB1dGVkU3R5bGVcIikpO1xuXG52YXIgX3JlbW92ZVN0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yZW1vdmVTdHlsZVwiKSk7XG5cbnZhciBfcHJvcGVydGllcyA9IHJlcXVpcmUoXCIuLi90cmFuc2l0aW9uL3Byb3BlcnRpZXNcIik7XG5cbnZhciBfaXNUcmFuc2Zvcm0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90cmFuc2l0aW9uL2lzVHJhbnNmb3JtXCIpKTtcblxuZnVuY3Rpb24gc3R5bGUobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHZhciBjc3MgPSAnJztcbiAgdmFyIHRyYW5zZm9ybXMgPSAnJztcbiAgdmFyIHByb3BzID0gcHJvcGVydHk7XG5cbiAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5vZGUuc3R5bGVbKDAsIF9jYW1lbGl6ZVN0eWxlLmRlZmF1bHQpKHByb3BlcnR5KV0gfHwgKDAsIF9nZXRDb21wdXRlZFN0eWxlMi5kZWZhdWx0KShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKCgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkocHJvcGVydHkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHByb3BzID0ge30pW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9wc1trZXldO1xuXG4gICAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgICAgKDAsIF9yZW1vdmVTdHlsZS5kZWZhdWx0KShub2RlLCAoMCwgX2h5cGhlbmF0ZVN0eWxlLmRlZmF1bHQpKGtleSkpO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9pc1RyYW5zZm9ybS5kZWZhdWx0KShrZXkpKSB7XG4gICAgICB0cmFuc2Zvcm1zICs9IGtleSArIFwiKFwiICsgdmFsdWUgKyBcIikgXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzcyArPSAoMCwgX2h5cGhlbmF0ZVN0eWxlLmRlZmF1bHQpKGtleSkgKyBcIjogXCIgKyB2YWx1ZSArIFwiO1wiO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHRyYW5zZm9ybXMpIHtcbiAgICBjc3MgKz0gX3Byb3BlcnRpZXMudHJhbnNmb3JtICsgXCI6IFwiICsgdHJhbnNmb3JtcyArIFwiO1wiO1xuICB9XG5cbiAgbm9kZS5zdHlsZS5jc3NUZXh0ICs9ICc7JyArIGNzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICByZXR1cm4gKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoY29tcG9uZW50T3JFbGVtZW50KSk7XG59O1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCdkb20taGVscGVycy9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXI7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4vLyBNb3N0bHkgdGFrZW4gZnJvbSBSZWFjdFByb3BUeXBlcy5cblxuZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBjb21wb25lbnROYW1lU2FmZSA9IGNvbXBvbmVudE5hbWUgfHwgJzw8YW5vbnltb3VzPj4nO1xuICAgIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdSZXF1aXJlZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lU2FmZSArICdgIHdhcyBub3Qgc3BlY2lmaWVkICcgKyAoJ2luIGAnICsgY29tcG9uZW50TmFtZVNhZmUgKyAnYC4nKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDYgPyBfbGVuIC0gNiA6IDApLCBfa2V5ID0gNjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gNl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRlLmFwcGx5KHVuZGVmaW5lZCwgW3Byb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZVNhZmUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWVTYWZlXS5jb25jYXQoYXJncykpO1xuICB9XG5cbiAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuXG4gIHJldHVybiBjaGFpbmVkQ2hlY2tUeXBlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcicpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZWxlbWVudFR5cGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHByb3BWYWx1ZSk7XG5cbiAgaWYgKF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBSZWFjdEVsZW1lbnQgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGVsZW1lbnQgdHlwZSAoYSBzdHJpbmcgJykgKyAnb3IgYSBSZWFjdENsYXNzKS4nKTtcbiAgfVxuXG4gIGlmIChwcm9wVHlwZSAhPT0gJ2Z1bmN0aW9uJyAmJiBwcm9wVHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBlbGVtZW50IHR5cGUgKGEgc3RyaW5nICcpICsgJ29yIGEgUmVhY3RDbGFzcykuJyk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIuZGVmYXVsdCkoZWxlbWVudFR5cGUpOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9hY3RpdmVFbGVtZW50ID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudCcpO1xuXG52YXIgX2FjdGl2ZUVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWN0aXZlRWxlbWVudCk7XG5cbnZhciBfY29udGFpbnMgPSByZXF1aXJlKCdkb20taGVscGVycy9xdWVyeS9jb250YWlucycpO1xuXG52YXIgX2NvbnRhaW5zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnRhaW5zKTtcblxudmFyIF9pbkRPTSA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3V0aWwvaW5ET00nKTtcblxudmFyIF9pbkRPTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudCA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudCcpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRPckVsZW1lbnQpO1xuXG52YXIgX2RlcHJlY2F0ZWQgPSByZXF1aXJlKCdwcm9wLXR5cGVzLWV4dHJhL2xpYi9kZXByZWNhdGVkJyk7XG5cbnZhciBfZGVwcmVjYXRlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXByZWNhdGVkKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJyk7XG5cbnZhciBfZWxlbWVudFR5cGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWxlbWVudFR5cGUpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX01vZGFsTWFuYWdlciA9IHJlcXVpcmUoJy4vTW9kYWxNYW5hZ2VyJyk7XG5cbnZhciBfTW9kYWxNYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01vZGFsTWFuYWdlcik7XG5cbnZhciBfUG9ydGFsID0gcmVxdWlyZSgnLi9Qb3J0YWwnKTtcblxudmFyIF9Qb3J0YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9ydGFsKTtcblxudmFyIF9SZWZIb2xkZXIgPSByZXF1aXJlKCcuL1JlZkhvbGRlcicpO1xuXG52YXIgX1JlZkhvbGRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWZIb2xkZXIpO1xuXG52YXIgX2FkZEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCcuL3V0aWxzL2FkZEV2ZW50TGlzdGVuZXInKTtcblxudmFyIF9hZGRFdmVudExpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZEV2ZW50TGlzdGVuZXIpO1xuXG52YXIgX2FkZEZvY3VzTGlzdGVuZXIgPSByZXF1aXJlKCcuL3V0aWxzL2FkZEZvY3VzTGlzdGVuZXInKTtcblxudmFyIF9hZGRGb2N1c0xpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZEZvY3VzTGlzdGVuZXIpO1xuXG52YXIgX2dldENvbnRhaW5lciA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0Q29udGFpbmVyJyk7XG5cbnZhciBfZ2V0Q29udGFpbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldENvbnRhaW5lcik7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IHJlcXVpcmUoJy4vdXRpbHMvb3duZXJEb2N1bWVudCcpO1xuXG52YXIgX293bmVyRG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuXG52YXIgbW9kYWxNYW5hZ2VyID0gbmV3IF9Nb2RhbE1hbmFnZXIyLmRlZmF1bHQoKTtcblxuLyoqXG4gKiBMb3ZlIHRoZW0gb3IgaGF0ZSB0aGVtLCBgPE1vZGFsLz5gIHByb3ZpZGVzIGEgc29saWQgZm91bmRhdGlvbiBmb3IgY3JlYXRpbmcgZGlhbG9ncywgbGlnaHRib3hlcywgb3Igd2hhdGV2ZXIgZWxzZS5cbiAqIFRoZSBNb2RhbCBjb21wb25lbnQgcmVuZGVycyBpdHMgYGNoaWxkcmVuYCBub2RlIGluIGZyb250IG9mIGEgYmFja2Ryb3AgY29tcG9uZW50LlxuICpcbiAqIFRoZSBNb2RhbCBvZmZlcnMgYSBmZXcgaGVscGZ1bCBmZWF0dXJlcyBvdmVyIHVzaW5nIGp1c3QgYSBgPFBvcnRhbC8+YCBjb21wb25lbnQgYW5kIHNvbWUgc3R5bGVzOlxuICpcbiAqIC0gTWFuYWdlcyBkaWFsb2cgc3RhY2tpbmcgd2hlbiBvbmUtYXQtYS10aW1lIGp1c3QgaXNuJ3QgZW5vdWdoLlxuICogLSBDcmVhdGVzIGEgYmFja2Ryb3AsIGZvciBkaXNhYmxpbmcgaW50ZXJhY3Rpb24gYmVsb3cgdGhlIG1vZGFsLlxuICogLSBJdCBwcm9wZXJseSBtYW5hZ2VzIGZvY3VzOyBtb3ZpbmcgdG8gdGhlIG1vZGFsIGNvbnRlbnQsIGFuZCBrZWVwaW5nIGl0IHRoZXJlIHVudGlsIHRoZSBtb2RhbCBpcyBjbG9zZWQuXG4gKiAtIEl0IGRpc2FibGVzIHNjcm9sbGluZyBvZiB0aGUgcGFnZSBjb250ZW50IHdoaWxlIG9wZW4uXG4gKiAtIEFkZHMgdGhlIGFwcHJvcHJpYXRlIEFSSUEgcm9sZXMgYXJlIGF1dG9tYXRpY2FsbHkuXG4gKiAtIEVhc2lseSBwbHVnZ2FibGUgYW5pbWF0aW9ucyB2aWEgYSBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50LlxuICpcbiAqIE5vdGUgdGhhdCwgaW4gdGhlIHNhbWUgd2F5IHRoZSBiYWNrZHJvcCBlbGVtZW50IHByZXZlbnRzIHVzZXJzIGZyb20gY2xpY2tpbmcgb3IgaW50ZXJhY3RpbmdcbiAqIHdpdGggdGhlIHBhZ2UgY29udGVudCB1bmRlcm5lYXRoIHRoZSBNb2RhbCwgU2NyZWVuIHJlYWRlcnMgYWxzbyBuZWVkIHRvIGJlIHNpZ25hbGVkIHRvIG5vdCB0b1xuICogaW50ZXJhY3Qgd2l0aCBwYWdlIGNvbnRlbnQgd2hpbGUgdGhlIE1vZGFsIGlzIG9wZW4uIFRvIGRvIHRoaXMsIHdlIHVzZSBhIGNvbW1vbiB0ZWNobmlxdWUgb2YgYXBwbHlpbmdcbiAqIHRoZSBgYXJpYS1oaWRkZW49J3RydWUnYCBhdHRyaWJ1dGUgdG8gdGhlIG5vbi1Nb2RhbCBlbGVtZW50cyBpbiB0aGUgTW9kYWwgYGNvbnRhaW5lcmAuIFRoaXMgbWVhbnMgdGhhdCBmb3JcbiAqIGEgTW9kYWwgdG8gYmUgdHJ1bHkgbW9kYWwsIGl0IHNob3VsZCBoYXZlIGEgYGNvbnRhaW5lcmAgdGhhdCBpcyBfb3V0c2lkZV8geW91ciBhcHAnc1xuICogUmVhY3QgaGllcmFyY2h5IChzdWNoIGFzIHRoZSBkZWZhdWx0OiBkb2N1bWVudC5ib2R5KS5cbiAqL1xuXG52YXIgTW9kYWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTW9kYWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm9taXRQcm9wcyA9IGZ1bmN0aW9uIG9taXRQcm9wcyhwcm9wcywgcHJvcFR5cGVzKSB7XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgICB2YXIgbmV3UHJvcHMgPSB7fTtcbiAgICBrZXlzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcFR5cGVzLCBwcm9wKSkge1xuICAgICAgICBuZXdQcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld1Byb3BzO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNob3cgPSBfcHJvcHMuc2hvdyxcbiAgICAgICAgY29udGFpbmVyID0gX3Byb3BzLmNvbnRhaW5lcixcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIFRyYW5zaXRpb24gPSBfcHJvcHMudHJhbnNpdGlvbixcbiAgICAgICAgYmFja2Ryb3AgPSBfcHJvcHMuYmFja2Ryb3AsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICBvbkV4aXQgPSBfcHJvcHMub25FeGl0LFxuICAgICAgICBvbkV4aXRpbmcgPSBfcHJvcHMub25FeGl0aW5nLFxuICAgICAgICBvbkVudGVyID0gX3Byb3BzLm9uRW50ZXIsXG4gICAgICAgIG9uRW50ZXJpbmcgPSBfcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgb25FbnRlcmVkID0gX3Byb3BzLm9uRW50ZXJlZDtcblxuXG4gICAgdmFyIGRpYWxvZyA9IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICB2YXIgZmlsdGVyZWRQcm9wcyA9IHRoaXMub21pdFByb3BzKHRoaXMucHJvcHMsIE1vZGFsLnByb3BUeXBlcyk7XG5cbiAgICB2YXIgbW91bnRNb2RhbCA9IHNob3cgfHwgVHJhbnNpdGlvbiAmJiAhdGhpcy5zdGF0ZS5leGl0ZWQ7XG4gICAgaWYgKCFtb3VudE1vZGFsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX2RpYWxvZyRwcm9wcyA9IGRpYWxvZy5wcm9wcyxcbiAgICAgICAgcm9sZSA9IF9kaWFsb2ckcHJvcHMucm9sZSxcbiAgICAgICAgdGFiSW5kZXggPSBfZGlhbG9nJHByb3BzLnRhYkluZGV4O1xuXG5cbiAgICBpZiAocm9sZSA9PT0gdW5kZWZpbmVkIHx8IHRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRpYWxvZyA9ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShkaWFsb2csIHtcbiAgICAgICAgcm9sZTogcm9sZSA9PT0gdW5kZWZpbmVkID8gJ2RvY3VtZW50JyA6IHJvbGUsXG4gICAgICAgIHRhYkluZGV4OiB0YWJJbmRleCA9PSBudWxsID8gJy0xJyA6IHRhYkluZGV4XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoVHJhbnNpdGlvbikge1xuICAgICAgZGlhbG9nID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRyYW5zaXRpb24sXG4gICAgICAgIHtcbiAgICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZSxcbiAgICAgICAgICAnaW4nOiBzaG93LFxuICAgICAgICAgIG9uRXhpdDogb25FeGl0LFxuICAgICAgICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgICAgICAgIG9uRXhpdGVkOiB0aGlzLmhhbmRsZUhpZGRlbixcbiAgICAgICAgICBvbkVudGVyOiBvbkVudGVyLFxuICAgICAgICAgIG9uRW50ZXJpbmc6IG9uRW50ZXJpbmcsXG4gICAgICAgICAgb25FbnRlcmVkOiBvbkVudGVyZWRcbiAgICAgICAgfSxcbiAgICAgICAgZGlhbG9nXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIF9Qb3J0YWwyLmRlZmF1bHQsXG4gICAgICB7XG4gICAgICAgIHJlZjogdGhpcy5zZXRNb3VudE5vZGUsXG4gICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICBvblJlbmRlcmVkOiB0aGlzLm9uUG9ydGFsUmVuZGVyZWRcbiAgICAgIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICByZWY6IHRoaXMuc2V0TW9kYWxOb2RlUmVmLFxuICAgICAgICAgIHJvbGU6IHJvbGUgfHwgJ2RpYWxvZydcbiAgICAgICAgfSwgZmlsdGVyZWRQcm9wcywge1xuICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgICB9KSxcbiAgICAgICAgYmFja2Ryb3AgJiYgdGhpcy5yZW5kZXJCYWNrZHJvcCgpLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfUmVmSG9sZGVyMi5kZWZhdWx0LFxuICAgICAgICAgIHsgcmVmOiB0aGlzLnNldERpYWxvZ1JlZiB9LFxuICAgICAgICAgIGRpYWxvZ1xuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXhpdGVkOiBmYWxzZSB9KTtcbiAgICB9IGVsc2UgaWYgKCFuZXh0UHJvcHMudHJhbnNpdGlvbikge1xuICAgICAgLy8gT3RoZXJ3aXNlIGxldCBoYW5kbGVIaWRkZW4gdGFrZSBjYXJlIG9mIG1hcmtpbmcgZXhpdGVkLlxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV4aXRlZDogdHJ1ZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcykge1xuICAgIGlmICghdGhpcy5wcm9wcy5zaG93ICYmIG5leHRQcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLmNoZWNrRm9yRm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLm9uU2hvdygpO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciB0cmFuc2l0aW9uID0gdGhpcy5wcm9wcy50cmFuc2l0aW9uO1xuXG5cbiAgICBpZiAocHJldlByb3BzLnNob3cgJiYgIXRoaXMucHJvcHMuc2hvdyAmJiAhdHJhbnNpdGlvbikge1xuICAgICAgLy8gT3RoZXJ3aXNlIGhhbmRsZUhpZGRlbiB3aWxsIGNhbGwgdGhpcy5cbiAgICAgIHRoaXMub25IaWRlKCk7XG4gICAgfSBlbHNlIGlmICghcHJldlByb3BzLnNob3cgJiYgdGhpcy5wcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLm9uU2hvdygpO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNob3cgPSBfcHJvcHMyLnNob3csXG4gICAgICAgIHRyYW5zaXRpb24gPSBfcHJvcHMyLnRyYW5zaXRpb247XG5cblxuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHNob3cgfHwgdHJhbnNpdGlvbiAmJiAhdGhpcy5zdGF0ZS5leGl0ZWQpIHtcbiAgICAgIHRoaXMub25IaWRlKCk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5hdXRvRm9jdXMgPSBmdW5jdGlvbiBhdXRvRm9jdXMoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkaWFsb2dFbGVtZW50ID0gdGhpcy5nZXREaWFsb2dFbGVtZW50KCk7XG4gICAgdmFyIGN1cnJlbnRBY3RpdmVFbGVtZW50ID0gKDAsIF9hY3RpdmVFbGVtZW50Mi5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKHRoaXMpKTtcblxuICAgIGlmIChkaWFsb2dFbGVtZW50ICYmICEoMCwgX2NvbnRhaW5zMi5kZWZhdWx0KShkaWFsb2dFbGVtZW50LCBjdXJyZW50QWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIHRoaXMubGFzdEZvY3VzID0gY3VycmVudEFjdGl2ZUVsZW1lbnQ7XG5cbiAgICAgIGlmICghZGlhbG9nRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3RhYkluZGV4JykpIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ1RoZSBtb2RhbCBjb250ZW50IG5vZGUgZG9lcyBub3QgYWNjZXB0IGZvY3VzLiBGb3IgdGhlIGJlbmVmaXQgb2YgJyArICdhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCB0aGUgdGFiSW5kZXggb2YgdGhlIG5vZGUgaXMgYmVpbmcgc2V0ICcgKyAndG8gXCItMVwiLicpO1xuXG4gICAgICAgIGRpYWxvZ0VsZW1lbnQuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKTtcbiAgICAgIH1cblxuICAgICAgZGlhbG9nRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUucmVzdG9yZUxhc3RGb2N1cyA9IGZ1bmN0aW9uIHJlc3RvcmVMYXN0Rm9jdXMoKSB7XG4gICAgLy8gU3VwcG9ydDogPD1JRTExIGRvZXNuJ3Qgc3VwcG9ydCBgZm9jdXMoKWAgb24gc3ZnIGVsZW1lbnRzIChSQjogIzkxNylcbiAgICBpZiAodGhpcy5sYXN0Rm9jdXMgJiYgdGhpcy5sYXN0Rm9jdXMuZm9jdXMpIHtcbiAgICAgIHRoaXMubGFzdEZvY3VzLmZvY3VzKCk7XG4gICAgICB0aGlzLmxhc3RGb2N1cyA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5nZXREaWFsb2dFbGVtZW50ID0gZnVuY3Rpb24gZ2V0RGlhbG9nRWxlbWVudCgpIHtcbiAgICByZXR1cm4gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMuZGlhbG9nKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuaXNUb3BNb2RhbCA9IGZ1bmN0aW9uIGlzVG9wTW9kYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMubWFuYWdlci5pc1RvcE1vZGFsKHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBfUG9ydGFsMi5kZWZhdWx0LnByb3BUeXBlcywge1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZpc2liaWxpdHkgb2YgdGhlIE1vZGFsXG4gICAqL1xuICBzaG93OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgTm9kZSwgQ29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLiBUaGUgTW9kYWwgaXMgYXBwZW5kZWQgdG8gaXQncyBjb250YWluZXIgZWxlbWVudC5cbiAgICpcbiAgICogRm9yIHRoZSBzYWtlIG9mIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIHRoZSBjb250YWluZXIgc2hvdWxkIHVzdWFsbHkgYmUgdGhlIGRvY3VtZW50IGJvZHksIHNvIHRoYXQgdGhlIHJlc3Qgb2YgdGhlXG4gICAqIHBhZ2UgY29udGVudCBjYW4gYmUgcGxhY2VkIGJlaGluZCBhIHZpcnR1YWwgYmFja2Ryb3AgYXMgd2VsbCBhcyBhIHZpc3VhbCBvbmUuXG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNb2RhbCBpcyBvcGVuaW5nLlxuICAgKi9cbiAgb25TaG93OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBlaXRoZXIgdGhlIGJhY2tkcm9wIGlzIGNsaWNrZWQsIG9yIHRoZSBlc2NhcGUga2V5IGlzIHByZXNzZWQuXG4gICAqXG4gICAqIFRoZSBgb25IaWRlYCBjYWxsYmFjayBvbmx5IHNpZ25hbHMgaW50ZW50IGZyb20gdGhlIE1vZGFsLFxuICAgKiB5b3UgbXVzdCBhY3R1YWxseSBzZXQgdGhlIGBzaG93YCBwcm9wIHRvIGBmYWxzZWAgZm9yIHRoZSBNb2RhbCB0byBjbG9zZS5cbiAgICovXG4gIG9uSGlkZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJbmNsdWRlIGEgYmFja2Ryb3AgY29tcG9uZW50LlxuICAgKi9cbiAgYmFja2Ryb3A6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsIF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydzdGF0aWMnXSldKSxcblxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBiYWNrZHJvcCBjb21wb25lbnQuIFVzZWZ1bCBmb3IgY3VzdG9tXG4gICAqIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICpcbiAgICogYGBganNcbiAgICogIHJlbmRlckJhY2tkcm9wPXtwcm9wcyA9PiA8TXlCYWNrZHJvcCB7Li4ucHJvcHN9IC8+fVxuICAgKiBgYGBcbiAgICovXG4gIHJlbmRlckJhY2tkcm9wOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSwgaWYgc3BlY2lmaWVkIGluIGBrZXlib2FyZGAsIGlzIHByZXNzZWQuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogU3VwcG9ydCBmb3IgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYG9uRXNjYXBlS2V5RG93bmAgaW5zdGVhZFxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGVzY2FwZSBrZXksIGlmIHNwZWNpZmllZCBpbiBga2V5Ym9hcmRgLCBpcyBwcmVzc2VkLlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgb25Fc2NhcGVLZXlVcDogKDAsIF9kZXByZWNhdGVkMi5kZWZhdWx0KShfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsICdQbGVhc2UgdXNlIG9uRXNjYXBlS2V5RG93biBpbnN0ZWFkIGZvciBjb25zaXN0ZW5jeScpLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGJhY2tkcm9wLCBpZiBzcGVjaWZpZWQsIGlzIGNsaWNrZWQuXG4gICAqL1xuICBvbkJhY2tkcm9wQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQSBzdHlsZSBvYmplY3QgZm9yIHRoZSBiYWNrZHJvcCBjb21wb25lbnQuXG4gICAqL1xuICBiYWNrZHJvcFN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQSBjc3MgY2xhc3Mgb3IgY2xhc3NlcyBmb3IgdGhlIGJhY2tkcm9wIGNvbXBvbmVudC5cbiAgICovXG4gIGJhY2tkcm9wQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQSBjc3MgY2xhc3Mgb3Igc2V0IG9mIGNsYXNzZXMgYXBwbGllZCB0byB0aGUgbW9kYWwgY29udGFpbmVyIHdoZW4gdGhlIG1vZGFsIGlzIG9wZW4sXG4gICAqIGFuZCByZW1vdmVkIHdoZW4gaXQgaXMgY2xvc2VkLlxuICAgKi9cbiAgY29udGFpbmVyQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQ2xvc2UgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkXG4gICAqL1xuICBrZXlib2FyZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwQDIuMC4wYCBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50IHVzZWRcbiAgICogdG8gY29udHJvbCBhbmltYXRpb25zIGZvciB0aGUgZGlhbG9nIGNvbXBvbmVudC5cbiAgICovXG4gIHRyYW5zaXRpb246IF9lbGVtZW50VHlwZTIuZGVmYXVsdCxcblxuICAvKipcbiAgICogQSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cEAyLjAuMGAgYDxUcmFuc2l0aW9uLz5gIGNvbXBvbmVudCB1c2VkXG4gICAqIHRvIGNvbnRyb2wgYW5pbWF0aW9ucyBmb3IgdGhlIGJhY2tkcm9wIGNvbXBvbmVudHMuXG4gICAqL1xuICBiYWNrZHJvcFRyYW5zaXRpb246IF9lbGVtZW50VHlwZTIuZGVmYXVsdCxcblxuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAgVGhlIG1vZGFsIHdpbGwgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLiBUaGlzIGFsc29cbiAgICogd29ya3MgY29ycmVjdGx5IHdpdGggYW55IE1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGF1dG9Gb2N1c2AgcHJvcC5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgZmFsc2VgIGFzIGl0IG1ha2VzIHRoZSBNb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGF1dG9Gb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgTW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgZmFsc2VgIGFzIGl0IG1ha2VzIHRoZSBNb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGVuZm9yY2VGb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuXG4gICAqL1xuICByZXN0b3JlRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBNb2RhbCB0cmFuc2l0aW9ucyBpblxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgTW9kYWwgYmVnaW5zIHRvIHRyYW5zaXRpb24gaW5cbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE1vZGFsIGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCByaWdodCBiZWZvcmUgdGhlIE1vZGFsIHRyYW5zaXRpb25zIG91dFxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBNb2RhbCBiZWdpbnMgdG8gdHJhbnNpdGlvbiBvdXRcbiAgICovXG4gIG9uRXhpdGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgTW9kYWwgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgTW9kYWxNYW5hZ2VyIGluc3RhbmNlIHVzZWQgdG8gdHJhY2sgYW5kIG1hbmFnZSB0aGUgc3RhdGUgb2Ygb3BlblxuICAgKiBNb2RhbHMuIFVzZWZ1bCB3aGVuIGN1c3RvbWl6aW5nIGhvdyBtb2RhbHMgaW50ZXJhY3Qgd2l0aGluIGEgY29udGFpbmVyXG4gICAqL1xuICBtYW5hZ2VyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59KTtcbk1vZGFsLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2hvdzogZmFsc2UsXG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgYXV0b0ZvY3VzOiB0cnVlLFxuICBlbmZvcmNlRm9jdXM6IHRydWUsXG4gIHJlc3RvcmVGb2N1czogdHJ1ZSxcbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7fSxcbiAgbWFuYWdlcjogbW9kYWxNYW5hZ2VyLFxuICByZW5kZXJCYWNrZHJvcDogZnVuY3Rpb24gcmVuZGVyQmFja2Ryb3AocHJvcHMpIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHByb3BzKTtcbiAgfVxufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICB0aGlzLnN0YXRlID0geyBleGl0ZWQ6ICF0aGlzLnByb3BzLnNob3cgfTtcblxuICB0aGlzLnJlbmRlckJhY2tkcm9wID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcHJvcHMzID0gX3RoaXMyLnByb3BzLFxuICAgICAgICBiYWNrZHJvcFN0eWxlID0gX3Byb3BzMy5iYWNrZHJvcFN0eWxlLFxuICAgICAgICBiYWNrZHJvcENsYXNzTmFtZSA9IF9wcm9wczMuYmFja2Ryb3BDbGFzc05hbWUsXG4gICAgICAgIHJlbmRlckJhY2tkcm9wID0gX3Byb3BzMy5yZW5kZXJCYWNrZHJvcCxcbiAgICAgICAgVHJhbnNpdGlvbiA9IF9wcm9wczMuYmFja2Ryb3BUcmFuc2l0aW9uO1xuXG5cbiAgICB2YXIgYmFja2Ryb3BSZWYgPSBmdW5jdGlvbiBiYWNrZHJvcFJlZihyZWYpIHtcbiAgICAgIHJldHVybiBfdGhpczIuYmFja2Ryb3AgPSByZWY7XG4gICAgfTtcblxuICAgIHZhciBiYWNrZHJvcCA9IHJlbmRlckJhY2tkcm9wKHtcbiAgICAgIHJlZjogYmFja2Ryb3BSZWYsXG4gICAgICBzdHlsZTogYmFja2Ryb3BTdHlsZSxcbiAgICAgIGNsYXNzTmFtZTogYmFja2Ryb3BDbGFzc05hbWUsXG4gICAgICBvbkNsaWNrOiBfdGhpczIuaGFuZGxlQmFja2Ryb3BDbGlja1xuICAgIH0pO1xuXG4gICAgaWYgKFRyYW5zaXRpb24pIHtcbiAgICAgIGJhY2tkcm9wID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRyYW5zaXRpb24sXG4gICAgICAgIHtcbiAgICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgICAgJ2luJzogX3RoaXMyLnByb3BzLnNob3dcbiAgICAgICAgfSxcbiAgICAgICAgYmFja2Ryb3BcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhY2tkcm9wO1xuICB9O1xuXG4gIHRoaXMub25Qb3J0YWxSZW5kZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpczIuYXV0b0ZvY3VzKCk7XG5cbiAgICBpZiAoX3RoaXMyLnByb3BzLm9uU2hvdykge1xuICAgICAgX3RoaXMyLnByb3BzLm9uU2hvdygpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uU2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfdGhpczIpO1xuICAgIHZhciBjb250YWluZXIgPSAoMCwgX2dldENvbnRhaW5lcjIuZGVmYXVsdCkoX3RoaXMyLnByb3BzLmNvbnRhaW5lciwgZG9jLmJvZHkpO1xuXG4gICAgX3RoaXMyLnByb3BzLm1hbmFnZXIuYWRkKF90aGlzMiwgY29udGFpbmVyLCBfdGhpczIucHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lKTtcblxuICAgIF90aGlzMi5fb25Eb2N1bWVudEtleWRvd25MaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCAna2V5ZG93bicsIF90aGlzMi5oYW5kbGVEb2N1bWVudEtleURvd24pO1xuXG4gICAgX3RoaXMyLl9vbkRvY3VtZW50S2V5dXBMaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCAna2V5dXAnLCBfdGhpczIuaGFuZGxlRG9jdW1lbnRLZXlVcCk7XG5cbiAgICBfdGhpczIuX29uRm9jdXNpbkxpc3RlbmVyID0gKDAsIF9hZGRGb2N1c0xpc3RlbmVyMi5kZWZhdWx0KShfdGhpczIuZW5mb3JjZUZvY3VzKTtcbiAgfTtcblxuICB0aGlzLm9uSGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpczIucHJvcHMubWFuYWdlci5yZW1vdmUoX3RoaXMyKTtcblxuICAgIF90aGlzMi5fb25Eb2N1bWVudEtleWRvd25MaXN0ZW5lci5yZW1vdmUoKTtcblxuICAgIF90aGlzMi5fb25Eb2N1bWVudEtleXVwTGlzdGVuZXIucmVtb3ZlKCk7XG5cbiAgICBfdGhpczIuX29uRm9jdXNpbkxpc3RlbmVyLnJlbW92ZSgpO1xuXG4gICAgaWYgKF90aGlzMi5wcm9wcy5yZXN0b3JlRm9jdXMpIHtcbiAgICAgIF90aGlzMi5yZXN0b3JlTGFzdEZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuc2V0TW91bnROb2RlID0gZnVuY3Rpb24gKHJlZikge1xuICAgIF90aGlzMi5tb3VudE5vZGUgPSByZWYgPyByZWYuZ2V0TW91bnROb2RlKCkgOiByZWY7XG4gIH07XG5cbiAgdGhpcy5zZXRNb2RhbE5vZGVSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgX3RoaXMyLm1vZGFsTm9kZSA9IHJlZjtcbiAgfTtcblxuICB0aGlzLnNldERpYWxvZ1JlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICBfdGhpczIuZGlhbG9nID0gcmVmO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlSGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzMi5zZXRTdGF0ZSh7IGV4aXRlZDogdHJ1ZSB9KTtcbiAgICBfdGhpczIub25IaWRlKCk7XG5cbiAgICBpZiAoX3RoaXMyLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICB2YXIgX3Byb3BzNDtcblxuICAgICAgKF9wcm9wczQgPSBfdGhpczIucHJvcHMpLm9uRXhpdGVkLmFwcGx5KF9wcm9wczQsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaGFuZGxlQmFja2Ryb3BDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMyLnByb3BzLm9uQmFja2Ryb3BDbGljaykge1xuICAgICAgX3RoaXMyLnByb3BzLm9uQmFja2Ryb3BDbGljayhlKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMyLnByb3BzLmJhY2tkcm9wID09PSB0cnVlKSB7XG4gICAgICBfdGhpczIucHJvcHMub25IaWRlKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaGFuZGxlRG9jdW1lbnRLZXlEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoX3RoaXMyLnByb3BzLmtleWJvYXJkICYmIGUua2V5Q29kZSA9PT0gMjcgJiYgX3RoaXMyLmlzVG9wTW9kYWwoKSkge1xuICAgICAgaWYgKF90aGlzMi5wcm9wcy5vbkVzY2FwZUtleURvd24pIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRXNjYXBlS2V5RG93bihlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMyLnByb3BzLm9uSGlkZSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmhhbmRsZURvY3VtZW50S2V5VXAgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChfdGhpczIucHJvcHMua2V5Ym9hcmQgJiYgZS5rZXlDb2RlID09PSAyNyAmJiBfdGhpczIuaXNUb3BNb2RhbCgpKSB7XG4gICAgICBpZiAoX3RoaXMyLnByb3BzLm9uRXNjYXBlS2V5VXApIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRXNjYXBlS2V5VXAoZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuY2hlY2tGb3JGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoX2luRE9NMi5kZWZhdWx0KSB7XG4gICAgICBfdGhpczIubGFzdEZvY3VzID0gKDAsIF9hY3RpdmVFbGVtZW50Mi5kZWZhdWx0KSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIV90aGlzMi5wcm9wcy5lbmZvcmNlRm9jdXMgfHwgIV90aGlzMi5faXNNb3VudGVkIHx8ICFfdGhpczIuaXNUb3BNb2RhbCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRpYWxvZ0VsZW1lbnQgPSBfdGhpczIuZ2V0RGlhbG9nRWxlbWVudCgpO1xuICAgIHZhciBjdXJyZW50QWN0aXZlRWxlbWVudCA9ICgwLCBfYWN0aXZlRWxlbWVudDIuZGVmYXVsdCkoKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfdGhpczIpKTtcblxuICAgIGlmIChkaWFsb2dFbGVtZW50ICYmICEoMCwgX2NvbnRhaW5zMi5kZWZhdWx0KShkaWFsb2dFbGVtZW50LCBjdXJyZW50QWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIGRpYWxvZ0VsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG4gIH07XG59O1xuXG5Nb2RhbC5NYW5hZ2VyID0gX01vZGFsTWFuYWdlcjIuZGVmYXVsdDtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTW9kYWw7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKiBKYXZhc2NyaXB0IHBsb3R0aW5nIGxpYnJhcnkgZm9yIGpRdWVyeSwgdmVyc2lvbiAwLjguMy5cclxuXHJcbkNvcHlyaWdodCAoYykgMjAwNy0yMDE0IElPTEEgYW5kIE9sZSBMYXVyc2VuLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcblxyXG4qL1xyXG4oZnVuY3Rpb24oJCl7dmFyIG9wdGlvbnM9e3hheGlzOnt0aW1lem9uZTpudWxsLHRpbWVmb3JtYXQ6bnVsbCx0d2VsdmVIb3VyQ2xvY2s6ZmFsc2UsbW9udGhOYW1lczpudWxsfX07ZnVuY3Rpb24gZmxvb3JJbkJhc2UobixiYXNlKXtyZXR1cm4gYmFzZSpNYXRoLmZsb29yKG4vYmFzZSl9ZnVuY3Rpb24gZm9ybWF0RGF0ZShkLGZtdCxtb250aE5hbWVzLGRheU5hbWVzKXtpZih0eXBlb2YgZC5zdHJmdGltZT09XCJmdW5jdGlvblwiKXtyZXR1cm4gZC5zdHJmdGltZShmbXQpfXZhciBsZWZ0UGFkPWZ1bmN0aW9uKG4scGFkKXtuPVwiXCIrbjtwYWQ9XCJcIisocGFkPT1udWxsP1wiMFwiOnBhZCk7cmV0dXJuIG4ubGVuZ3RoPT0xP3BhZCtuOm59O3ZhciByPVtdO3ZhciBlc2NhcGU9ZmFsc2U7dmFyIGhvdXJzPWQuZ2V0SG91cnMoKTt2YXIgaXNBTT1ob3VyczwxMjtpZihtb250aE5hbWVzPT1udWxsKXttb250aE5hbWVzPVtcIkphblwiLFwiRmViXCIsXCJNYXJcIixcIkFwclwiLFwiTWF5XCIsXCJKdW5cIixcIkp1bFwiLFwiQXVnXCIsXCJTZXBcIixcIk9jdFwiLFwiTm92XCIsXCJEZWNcIl19aWYoZGF5TmFtZXM9PW51bGwpe2RheU5hbWVzPVtcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXX12YXIgaG91cnMxMjtpZihob3Vycz4xMil7aG91cnMxMj1ob3Vycy0xMn1lbHNlIGlmKGhvdXJzPT0wKXtob3VyczEyPTEyfWVsc2V7aG91cnMxMj1ob3Vyc31mb3IodmFyIGk9MDtpPGZtdC5sZW5ndGg7KytpKXt2YXIgYz1mbXQuY2hhckF0KGkpO2lmKGVzY2FwZSl7c3dpdGNoKGMpe2Nhc2VcImFcIjpjPVwiXCIrZGF5TmFtZXNbZC5nZXREYXkoKV07YnJlYWs7Y2FzZVwiYlwiOmM9XCJcIittb250aE5hbWVzW2QuZ2V0TW9udGgoKV07YnJlYWs7Y2FzZVwiZFwiOmM9bGVmdFBhZChkLmdldERhdGUoKSk7YnJlYWs7Y2FzZVwiZVwiOmM9bGVmdFBhZChkLmdldERhdGUoKSxcIiBcIik7YnJlYWs7Y2FzZVwiaFwiOmNhc2VcIkhcIjpjPWxlZnRQYWQoaG91cnMpO2JyZWFrO2Nhc2VcIklcIjpjPWxlZnRQYWQoaG91cnMxMik7YnJlYWs7Y2FzZVwibFwiOmM9bGVmdFBhZChob3VyczEyLFwiIFwiKTticmVhaztjYXNlXCJtXCI6Yz1sZWZ0UGFkKGQuZ2V0TW9udGgoKSsxKTticmVhaztjYXNlXCJNXCI6Yz1sZWZ0UGFkKGQuZ2V0TWludXRlcygpKTticmVhaztjYXNlXCJxXCI6Yz1cIlwiKyhNYXRoLmZsb29yKGQuZ2V0TW9udGgoKS8zKSsxKTticmVhaztjYXNlXCJTXCI6Yz1sZWZ0UGFkKGQuZ2V0U2Vjb25kcygpKTticmVhaztjYXNlXCJ5XCI6Yz1sZWZ0UGFkKGQuZ2V0RnVsbFllYXIoKSUxMDApO2JyZWFrO2Nhc2VcIllcIjpjPVwiXCIrZC5nZXRGdWxsWWVhcigpO2JyZWFrO2Nhc2VcInBcIjpjPWlzQU0/XCJcIitcImFtXCI6XCJcIitcInBtXCI7YnJlYWs7Y2FzZVwiUFwiOmM9aXNBTT9cIlwiK1wiQU1cIjpcIlwiK1wiUE1cIjticmVhaztjYXNlXCJ3XCI6Yz1cIlwiK2QuZ2V0RGF5KCk7YnJlYWt9ci5wdXNoKGMpO2VzY2FwZT1mYWxzZX1lbHNle2lmKGM9PVwiJVwiKXtlc2NhcGU9dHJ1ZX1lbHNle3IucHVzaChjKX19fXJldHVybiByLmpvaW4oXCJcIil9ZnVuY3Rpb24gbWFrZVV0Y1dyYXBwZXIoZCl7ZnVuY3Rpb24gYWRkUHJveHlNZXRob2Qoc291cmNlT2JqLHNvdXJjZU1ldGhvZCx0YXJnZXRPYmosdGFyZ2V0TWV0aG9kKXtzb3VyY2VPYmpbc291cmNlTWV0aG9kXT1mdW5jdGlvbigpe3JldHVybiB0YXJnZXRPYmpbdGFyZ2V0TWV0aG9kXS5hcHBseSh0YXJnZXRPYmosYXJndW1lbnRzKX19dmFyIHV0Yz17ZGF0ZTpkfTtpZihkLnN0cmZ0aW1lIT11bmRlZmluZWQpe2FkZFByb3h5TWV0aG9kKHV0YyxcInN0cmZ0aW1lXCIsZCxcInN0cmZ0aW1lXCIpfWFkZFByb3h5TWV0aG9kKHV0YyxcImdldFRpbWVcIixkLFwiZ2V0VGltZVwiKTthZGRQcm94eU1ldGhvZCh1dGMsXCJzZXRUaW1lXCIsZCxcInNldFRpbWVcIik7dmFyIHByb3BzPVtcIkRhdGVcIixcIkRheVwiLFwiRnVsbFllYXJcIixcIkhvdXJzXCIsXCJNaWxsaXNlY29uZHNcIixcIk1pbnV0ZXNcIixcIk1vbnRoXCIsXCJTZWNvbmRzXCJdO2Zvcih2YXIgcD0wO3A8cHJvcHMubGVuZ3RoO3ArKyl7YWRkUHJveHlNZXRob2QodXRjLFwiZ2V0XCIrcHJvcHNbcF0sZCxcImdldFVUQ1wiK3Byb3BzW3BdKTthZGRQcm94eU1ldGhvZCh1dGMsXCJzZXRcIitwcm9wc1twXSxkLFwic2V0VVRDXCIrcHJvcHNbcF0pfXJldHVybiB1dGN9ZnVuY3Rpb24gZGF0ZUdlbmVyYXRvcih0cyxvcHRzKXtpZihvcHRzLnRpbWV6b25lPT1cImJyb3dzZXJcIil7cmV0dXJuIG5ldyBEYXRlKHRzKX1lbHNlIGlmKCFvcHRzLnRpbWV6b25lfHxvcHRzLnRpbWV6b25lPT1cInV0Y1wiKXtyZXR1cm4gbWFrZVV0Y1dyYXBwZXIobmV3IERhdGUodHMpKX1lbHNlIGlmKHR5cGVvZiB0aW1lem9uZUpTIT1cInVuZGVmaW5lZFwiJiZ0eXBlb2YgdGltZXpvbmVKUy5EYXRlIT1cInVuZGVmaW5lZFwiKXt2YXIgZD1uZXcgdGltZXpvbmVKUy5EYXRlO2Quc2V0VGltZXpvbmUob3B0cy50aW1lem9uZSk7ZC5zZXRUaW1lKHRzKTtyZXR1cm4gZH1lbHNle3JldHVybiBtYWtlVXRjV3JhcHBlcihuZXcgRGF0ZSh0cykpfX12YXIgdGltZVVuaXRTaXplPXtzZWNvbmQ6MWUzLG1pbnV0ZTo2MCoxZTMsaG91cjo2MCo2MCoxZTMsZGF5OjI0KjYwKjYwKjFlMyxtb250aDozMCoyNCo2MCo2MCoxZTMscXVhcnRlcjozKjMwKjI0KjYwKjYwKjFlMyx5ZWFyOjM2NS4yNDI1KjI0KjYwKjYwKjFlM307dmFyIGJhc2VTcGVjPVtbMSxcInNlY29uZFwiXSxbMixcInNlY29uZFwiXSxbNSxcInNlY29uZFwiXSxbMTAsXCJzZWNvbmRcIl0sWzMwLFwic2Vjb25kXCJdLFsxLFwibWludXRlXCJdLFsyLFwibWludXRlXCJdLFs1LFwibWludXRlXCJdLFsxMCxcIm1pbnV0ZVwiXSxbMzAsXCJtaW51dGVcIl0sWzEsXCJob3VyXCJdLFsyLFwiaG91clwiXSxbNCxcImhvdXJcIl0sWzgsXCJob3VyXCJdLFsxMixcImhvdXJcIl0sWzEsXCJkYXlcIl0sWzIsXCJkYXlcIl0sWzMsXCJkYXlcIl0sWy4yNSxcIm1vbnRoXCJdLFsuNSxcIm1vbnRoXCJdLFsxLFwibW9udGhcIl0sWzIsXCJtb250aFwiXV07dmFyIHNwZWNNb250aHM9YmFzZVNwZWMuY29uY2F0KFtbMyxcIm1vbnRoXCJdLFs2LFwibW9udGhcIl0sWzEsXCJ5ZWFyXCJdXSk7dmFyIHNwZWNRdWFydGVycz1iYXNlU3BlYy5jb25jYXQoW1sxLFwicXVhcnRlclwiXSxbMixcInF1YXJ0ZXJcIl0sWzEsXCJ5ZWFyXCJdXSk7ZnVuY3Rpb24gaW5pdChwbG90KXtwbG90Lmhvb2tzLnByb2Nlc3NPcHRpb25zLnB1c2goZnVuY3Rpb24ocGxvdCxvcHRpb25zKXskLmVhY2gocGxvdC5nZXRBeGVzKCksZnVuY3Rpb24oYXhpc05hbWUsYXhpcyl7dmFyIG9wdHM9YXhpcy5vcHRpb25zO2lmKG9wdHMubW9kZT09XCJ0aW1lXCIpe2F4aXMudGlja0dlbmVyYXRvcj1mdW5jdGlvbihheGlzKXt2YXIgdGlja3M9W107dmFyIGQ9ZGF0ZUdlbmVyYXRvcihheGlzLm1pbixvcHRzKTt2YXIgbWluU2l6ZT0wO3ZhciBzcGVjPW9wdHMudGlja1NpemUmJm9wdHMudGlja1NpemVbMV09PT1cInF1YXJ0ZXJcInx8b3B0cy5taW5UaWNrU2l6ZSYmb3B0cy5taW5UaWNrU2l6ZVsxXT09PVwicXVhcnRlclwiP3NwZWNRdWFydGVyczpzcGVjTW9udGhzO2lmKG9wdHMubWluVGlja1NpemUhPW51bGwpe2lmKHR5cGVvZiBvcHRzLnRpY2tTaXplPT1cIm51bWJlclwiKXttaW5TaXplPW9wdHMudGlja1NpemV9ZWxzZXttaW5TaXplPW9wdHMubWluVGlja1NpemVbMF0qdGltZVVuaXRTaXplW29wdHMubWluVGlja1NpemVbMV1dfX1mb3IodmFyIGk9MDtpPHNwZWMubGVuZ3RoLTE7KytpKXtpZihheGlzLmRlbHRhPChzcGVjW2ldWzBdKnRpbWVVbml0U2l6ZVtzcGVjW2ldWzFdXStzcGVjW2krMV1bMF0qdGltZVVuaXRTaXplW3NwZWNbaSsxXVsxXV0pLzImJnNwZWNbaV1bMF0qdGltZVVuaXRTaXplW3NwZWNbaV1bMV1dPj1taW5TaXplKXticmVha319dmFyIHNpemU9c3BlY1tpXVswXTt2YXIgdW5pdD1zcGVjW2ldWzFdO2lmKHVuaXQ9PVwieWVhclwiKXtpZihvcHRzLm1pblRpY2tTaXplIT1udWxsJiZvcHRzLm1pblRpY2tTaXplWzFdPT1cInllYXJcIil7c2l6ZT1NYXRoLmZsb29yKG9wdHMubWluVGlja1NpemVbMF0pfWVsc2V7dmFyIG1hZ249TWF0aC5wb3coMTAsTWF0aC5mbG9vcihNYXRoLmxvZyhheGlzLmRlbHRhL3RpbWVVbml0U2l6ZS55ZWFyKS9NYXRoLkxOMTApKTt2YXIgbm9ybT1heGlzLmRlbHRhL3RpbWVVbml0U2l6ZS55ZWFyL21hZ247aWYobm9ybTwxLjUpe3NpemU9MX1lbHNlIGlmKG5vcm08Myl7c2l6ZT0yfWVsc2UgaWYobm9ybTw3LjUpe3NpemU9NX1lbHNle3NpemU9MTB9c2l6ZSo9bWFnbn1pZihzaXplPDEpe3NpemU9MX19YXhpcy50aWNrU2l6ZT1vcHRzLnRpY2tTaXplfHxbc2l6ZSx1bml0XTt2YXIgdGlja1NpemU9YXhpcy50aWNrU2l6ZVswXTt1bml0PWF4aXMudGlja1NpemVbMV07dmFyIHN0ZXA9dGlja1NpemUqdGltZVVuaXRTaXplW3VuaXRdO2lmKHVuaXQ9PVwic2Vjb25kXCIpe2Quc2V0U2Vjb25kcyhmbG9vckluQmFzZShkLmdldFNlY29uZHMoKSx0aWNrU2l6ZSkpfWVsc2UgaWYodW5pdD09XCJtaW51dGVcIil7ZC5zZXRNaW51dGVzKGZsb29ySW5CYXNlKGQuZ2V0TWludXRlcygpLHRpY2tTaXplKSl9ZWxzZSBpZih1bml0PT1cImhvdXJcIil7ZC5zZXRIb3VycyhmbG9vckluQmFzZShkLmdldEhvdXJzKCksdGlja1NpemUpKX1lbHNlIGlmKHVuaXQ9PVwibW9udGhcIil7ZC5zZXRNb250aChmbG9vckluQmFzZShkLmdldE1vbnRoKCksdGlja1NpemUpKX1lbHNlIGlmKHVuaXQ9PVwicXVhcnRlclwiKXtkLnNldE1vbnRoKDMqZmxvb3JJbkJhc2UoZC5nZXRNb250aCgpLzMsdGlja1NpemUpKX1lbHNlIGlmKHVuaXQ9PVwieWVhclwiKXtkLnNldEZ1bGxZZWFyKGZsb29ySW5CYXNlKGQuZ2V0RnVsbFllYXIoKSx0aWNrU2l6ZSkpfWQuc2V0TWlsbGlzZWNvbmRzKDApO2lmKHN0ZXA+PXRpbWVVbml0U2l6ZS5taW51dGUpe2Quc2V0U2Vjb25kcygwKX1pZihzdGVwPj10aW1lVW5pdFNpemUuaG91cil7ZC5zZXRNaW51dGVzKDApfWlmKHN0ZXA+PXRpbWVVbml0U2l6ZS5kYXkpe2Quc2V0SG91cnMoMCl9aWYoc3RlcD49dGltZVVuaXRTaXplLmRheSo0KXtkLnNldERhdGUoMSl9aWYoc3RlcD49dGltZVVuaXRTaXplLm1vbnRoKjIpe2Quc2V0TW9udGgoZmxvb3JJbkJhc2UoZC5nZXRNb250aCgpLDMpKX1pZihzdGVwPj10aW1lVW5pdFNpemUucXVhcnRlcioyKXtkLnNldE1vbnRoKGZsb29ySW5CYXNlKGQuZ2V0TW9udGgoKSw2KSl9aWYoc3RlcD49dGltZVVuaXRTaXplLnllYXIpe2Quc2V0TW9udGgoMCl9dmFyIGNhcnJ5PTA7dmFyIHY9TnVtYmVyLk5hTjt2YXIgcHJldjtkb3twcmV2PXY7dj1kLmdldFRpbWUoKTt0aWNrcy5wdXNoKHYpO2lmKHVuaXQ9PVwibW9udGhcInx8dW5pdD09XCJxdWFydGVyXCIpe2lmKHRpY2tTaXplPDEpe2Quc2V0RGF0ZSgxKTt2YXIgc3RhcnQ9ZC5nZXRUaW1lKCk7ZC5zZXRNb250aChkLmdldE1vbnRoKCkrKHVuaXQ9PVwicXVhcnRlclwiPzM6MSkpO3ZhciBlbmQ9ZC5nZXRUaW1lKCk7ZC5zZXRUaW1lKHYrY2FycnkqdGltZVVuaXRTaXplLmhvdXIrKGVuZC1zdGFydCkqdGlja1NpemUpO2NhcnJ5PWQuZ2V0SG91cnMoKTtkLnNldEhvdXJzKDApfWVsc2V7ZC5zZXRNb250aChkLmdldE1vbnRoKCkrdGlja1NpemUqKHVuaXQ9PVwicXVhcnRlclwiPzM6MSkpfX1lbHNlIGlmKHVuaXQ9PVwieWVhclwiKXtkLnNldEZ1bGxZZWFyKGQuZ2V0RnVsbFllYXIoKSt0aWNrU2l6ZSl9ZWxzZXtkLnNldFRpbWUoditzdGVwKX19d2hpbGUodjxheGlzLm1heCYmdiE9cHJldik7cmV0dXJuIHRpY2tzfTtheGlzLnRpY2tGb3JtYXR0ZXI9ZnVuY3Rpb24odixheGlzKXt2YXIgZD1kYXRlR2VuZXJhdG9yKHYsYXhpcy5vcHRpb25zKTtpZihvcHRzLnRpbWVmb3JtYXQhPW51bGwpe3JldHVybiBmb3JtYXREYXRlKGQsb3B0cy50aW1lZm9ybWF0LG9wdHMubW9udGhOYW1lcyxvcHRzLmRheU5hbWVzKX12YXIgdXNlUXVhcnRlcnM9YXhpcy5vcHRpb25zLnRpY2tTaXplJiZheGlzLm9wdGlvbnMudGlja1NpemVbMV09PVwicXVhcnRlclwifHxheGlzLm9wdGlvbnMubWluVGlja1NpemUmJmF4aXMub3B0aW9ucy5taW5UaWNrU2l6ZVsxXT09XCJxdWFydGVyXCI7dmFyIHQ9YXhpcy50aWNrU2l6ZVswXSp0aW1lVW5pdFNpemVbYXhpcy50aWNrU2l6ZVsxXV07dmFyIHNwYW49YXhpcy5tYXgtYXhpcy5taW47dmFyIHN1ZmZpeD1vcHRzLnR3ZWx2ZUhvdXJDbG9jaz9cIiAlcFwiOlwiXCI7dmFyIGhvdXJDb2RlPW9wdHMudHdlbHZlSG91ckNsb2NrP1wiJUlcIjpcIiVIXCI7dmFyIGZtdDtpZih0PHRpbWVVbml0U2l6ZS5taW51dGUpe2ZtdD1ob3VyQ29kZStcIjolTTolU1wiK3N1ZmZpeH1lbHNlIGlmKHQ8dGltZVVuaXRTaXplLmRheSl7aWYoc3BhbjwyKnRpbWVVbml0U2l6ZS5kYXkpe2ZtdD1ob3VyQ29kZStcIjolTVwiK3N1ZmZpeH1lbHNle2ZtdD1cIiViICVkIFwiK2hvdXJDb2RlK1wiOiVNXCIrc3VmZml4fX1lbHNlIGlmKHQ8dGltZVVuaXRTaXplLm1vbnRoKXtmbXQ9XCIlYiAlZFwifWVsc2UgaWYodXNlUXVhcnRlcnMmJnQ8dGltZVVuaXRTaXplLnF1YXJ0ZXJ8fCF1c2VRdWFydGVycyYmdDx0aW1lVW5pdFNpemUueWVhcil7aWYoc3Bhbjx0aW1lVW5pdFNpemUueWVhcil7Zm10PVwiJWJcIn1lbHNle2ZtdD1cIiViICVZXCJ9fWVsc2UgaWYodXNlUXVhcnRlcnMmJnQ8dGltZVVuaXRTaXplLnllYXIpe2lmKHNwYW48dGltZVVuaXRTaXplLnllYXIpe2ZtdD1cIlElcVwifWVsc2V7Zm10PVwiUSVxICVZXCJ9fWVsc2V7Zm10PVwiJVlcIn12YXIgcnQ9Zm9ybWF0RGF0ZShkLGZtdCxvcHRzLm1vbnRoTmFtZXMsb3B0cy5kYXlOYW1lcyk7cmV0dXJuIHJ0fX19KX0pfSQucGxvdC5wbHVnaW5zLnB1c2goe2luaXQ6aW5pdCxvcHRpb25zOm9wdGlvbnMsbmFtZTpcInRpbWVcIix2ZXJzaW9uOlwiMS4wXCJ9KTskLnBsb3QuZm9ybWF0RGF0ZT1mb3JtYXREYXRlOyQucGxvdC5kYXRlR2VuZXJhdG9yPWRhdGVHZW5lcmF0b3J9KShqUXVlcnkpOyIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBUYWJsZS50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAxOCwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMDgvMDIvMjAxOCAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgJy4vLi4vLi4vQ29udGVudC9CaWdUYWJsZS5jc3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmlnVGFibGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LCBhbnk+IHtcclxuXHJcbiAgICBwcm9wczogeyBjb2xzOiBBcnJheTxhbnk+LCBkYXRhOiBBcnJheTxhbnk+LCBvbkNsaWNrOiBGdW5jdGlvbiwgc29ydEZpZWxkOiBzdHJpbmcsIGFzY2VuZGluZzogYm9vbGVhbiwgb25Tb3J0OiBGdW5jdGlvbiwgdGFibGVDbGFzcz86IHN0cmluZywgdGhlYWRTdHlsZT86IG9iamVjdCwgdGJvZHlTdHlsZT86IG9iamVjdCB9O1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICB2YXIgcm93Q29tcG9uZW50cyA9IHRoaXMuZ2VuZXJhdGVSb3dzKHRoaXMucHJvcHMuZGF0YSk7XHJcbiAgICAgICAgdmFyIGhlYWRlckNvbXBvbmVudHMgPSB0aGlzLmdlbmVyYXRlSGVhZGVycygpO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXsnZGl2VGFibGUgJyArICh0aGlzLnByb3BzLnRhYmxlQ2xhc3MgIT0gdW5kZWZpbmVkID8gdGhpcy5wcm9wcy50YWJsZUNsYXNzIDogJycpfSA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17J2RpdlRhYmxlSGVhZGluZyd9IHN0eWxlPXt0aGlzLnByb3BzLnRoZWFkU3R5bGV9PntoZWFkZXJDb21wb25lbnRzfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9eydkaXZUYWJsZUJvZHknfSBzdHlsZT17dGhpcy5wcm9wcy50Ym9keVN0eWxlfT57cm93Q29tcG9uZW50c308L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZUhlYWRlcnMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY29scyA9PSBudWxsIHx8IHRoaXMucHJvcHMuY29scy5sZW5ndGggPT0gMCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIHZhciBjZWxscyA9IHRoaXMucHJvcHMuY29scy5tYXAoY29sRGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IGNvbERhdGEuaGVhZGVyU3R5bGU7XHJcbiAgICAgICAgICAgIGlmKHN0eWxlLmN1cnNvciA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICBzdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J2RpdlRhYmxlSGVhZCcga2V5PXtjb2xEYXRhLmtleX0gc3R5bGU9e3N0eWxlfSBvbkNsaWNrPXt0aGlzLmhhbmRsZVNvcnQuYmluZCh0aGlzLCB7Y29sOiBjb2xEYXRhLmtleSwgYXNjZW5kaW5nOiB0aGlzLnByb3BzLmFzY2VuZGluZ30pfT57Y29sRGF0YS5sYWJlbH17KHRoaXMucHJvcHMuc29ydEZpZWxkID09IGNvbERhdGEua2V5ID8gPHNwYW4gY2xhc3NOYW1lPXtcImdseXBoaWNvbiBcIiArICh0aGlzLnByb3BzLmFzY2VuZGluZyA/IFwiZ2x5cGhpY29uLXRyaWFuZ2xlLXRvcFwiIDogXCJnbHlwaGljb24tdHJpYW5nbGUtYm90dG9tXCIpfT48L3NwYW4+OiBudWxsKX08L2Rpdj5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdkaXZUYWJsZVJvdyc+e2NlbGxzfTwvZGl2PjtcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZVJvd3MoZGF0YSkge1xyXG4gICAgICAgIGlmIChkYXRhID09IG51bGwgfHwgZGF0YS5sZW5ndGggPT0gMCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIHJldHVybiBkYXRhLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgdmFyIGNlbGxzID0gdGhpcy5wcm9wcy5jb2xzLm1hcChjb2xEYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IF8uY2xvbmUoY29sRGF0YS5yb3dTdHlsZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nZGl2VGFibGVDZWxsJ1xyXG4gICAgICAgICAgICAgICAgICAgIGtleT17aW5kZXgudG9TdHJpbmcoKSArIGl0ZW1bY29sRGF0YS5rZXldICsgY29sRGF0YS5rZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzLCB7IGNvbDogY29sRGF0YS5rZXksIHJvdzogaXRlbSwgZGF0YTogaXRlbVtjb2xEYXRhLmtleV0gfSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge2NvbERhdGEuY29udGVudCAhPSB1bmRlZmluZWQgPyBjb2xEYXRhLmNvbnRlbnQodGhpcy5yb3VuZChpdGVtW2NvbERhdGEua2V5XSksIHN0eWxlKSA6IHRoaXMucm91bmQoaXRlbVtjb2xEYXRhLmtleV0pfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0eWxlID0geyBjdXJzb3I6ICdwb2ludGVyJyB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdkaXZUYWJsZVJvdycgc3R5bGU9e3N0eWxlfSBrZXk9e2luZGV4LnRvU3RyaW5nKCl9PntjZWxsc308L2Rpdj47XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcm91bmQodmFsdWUpIHtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgfHwgaXNOYU4oTnVtYmVyLnBhcnNlRmxvYXQodmFsdWUpKSlcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID4gMTAwKVxyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPiAxKVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9GaXhlZCgxKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1ByZWNpc2lvbigyKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDbGljayhkYXRhLCBldmVudCkge1xyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGljayhkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVTb3J0KGRhdGEsIGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5vblNvcnQoZGF0YSk7XHJcbiAgICB9XHJcbn07IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQmlnVGFibGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0JpZ1RhYmxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQmlnVGFibGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZGl2VGFibGUge1xcclxcbiAgICBkaXNwbGF5OiB0YWJsZTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbi5kaXZUYWJsZVJvdyB7XFxyXFxuICAgIGRpc3BsYXk6IHRhYmxlLXJvdztcXHJcXG59XFxyXFxuXFxyXFxuLmRpdlRhYmxlUm93Om50aC1jaGlsZChldmVuKSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JleVxcclxcbn1cXHJcXG5cXHJcXG4uZGl2VGFibGVIZWFkaW5nIHtcXHJcXG4gICAgZGlzcGxheTogdGFibGUtaGVhZGVyLWdyb3VwO1xcclxcbn1cXHJcXG5cXHJcXG4uZGl2VGFibGVDZWxsLCAuZGl2VGFibGVIZWFkIHtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzk5OTk5OTtcXHJcXG4gICAgZGlzcGxheTogdGFibGUtY2VsbDtcXHJcXG4gICAgcGFkZGluZzogM3B4IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5kaXZUYWJsZUhlYWRpbmcge1xcclxcbiAgICBkaXNwbGF5OiB0YWJsZS1oZWFkZXItZ3JvdXA7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbn1cXHJcXG5cXHJcXG4uZGl2VGFibGVGb290IHtcXHJcXG4gICAgZGlzcGxheTogdGFibGUtZm9vdGVyLWdyb3VwO1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XFxyXFxuXFxyXFxuLmRpdlRhYmxlQm9keSB7XFxyXFxuICAgIGRpc3BsYXk6IHRhYmxlLXJvdy1ncm91cDtcXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9lbnRyaWVzXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIgPSByZXF1aXJlKCcuL3V0aWxzL2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyJyk7XG5cbnZhciBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocHJvcFZhbHVlKTtcblxuICBpZiAoX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIFJlYWN0RWxlbWVudCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBSZWFjdENvbXBvbmVudCBvciBhICcpICsgJ0RPTUVsZW1lbnQuIFlvdSBjYW4gdXN1YWxseSBvYnRhaW4gYSBSZWFjdENvbXBvbmVudCBvciBET01FbGVtZW50ICcgKyAnZnJvbSBhIFJlYWN0RWxlbWVudCBieSBhdHRhY2hpbmcgYSByZWYgdG8gaXQuJyk7XG4gIH1cblxuICBpZiAoKHByb3BUeXBlICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgcHJvcFZhbHVlLnJlbmRlciAhPT0gJ2Z1bmN0aW9uJykgJiYgcHJvcFZhbHVlLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBwcm9wVmFsdWUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBSZWFjdENvbXBvbmVudCBvciBhICcpICsgJ0RPTUVsZW1lbnQuJyk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIuZGVmYXVsdCkodmFsaWRhdGUpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRXaW5kb3c7XG5cbmZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIHJldHVybiBub2RlID09PSBub2RlLndpbmRvdyA/IG5vZGUgOiBub2RlLm5vZGVUeXBlID09PSA5ID8gbm9kZS5kZWZhdWx0VmlldyB8fCBub2RlLnBhcmVudFdpbmRvdyA6IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldENvbnRhaW5lcjtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lciwgZGVmYXVsdENvbnRhaW5lcikge1xuICBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG4gIHJldHVybiBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoY29udGFpbmVyKSB8fCBkZWZhdWx0Q29udGFpbmVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXRlcmF0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIik7XG5cbnZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXG52YXIgX3N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxudmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2Nyb2xsYmFyU2l6ZTtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaW5ET01cIikpO1xuXG52YXIgc2l6ZTtcblxuZnVuY3Rpb24gc2Nyb2xsYmFyU2l6ZShyZWNhbGMpIHtcbiAgaWYgKCFzaXplICYmIHNpemUgIT09IDAgfHwgcmVjYWxjKSB7XG4gICAgaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS5oZWlnaHQgPSAnNTBweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgIHNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNpemU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmFuaW1hdGlvbkVuZCA9IGV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBleHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBleHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSBleHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IGV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSBleHBvcnRzLnRyYW5zZm9ybSA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgdHJhbnNmb3JtID0gJ3RyYW5zZm9ybSc7XG5leHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbnZhciBwcmVmaXgsIHRyYW5zaXRpb25FbmQsIGFuaW1hdGlvbkVuZDtcbmV4cG9ydHMuYW5pbWF0aW9uRW5kID0gYW5pbWF0aW9uRW5kO1xuZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZDtcbnZhciB0cmFuc2l0aW9uUHJvcGVydHksIHRyYW5zaXRpb25EdXJhdGlvbiwgdHJhbnNpdGlvblRpbWluZywgdHJhbnNpdGlvbkRlbGF5O1xuZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXk7XG5leHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSB0cmFuc2l0aW9uVGltaW5nO1xuZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG5leHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IHRyYW5zaXRpb25Qcm9wZXJ0eTtcbnZhciBhbmltYXRpb25OYW1lLCBhbmltYXRpb25EdXJhdGlvbiwgYW5pbWF0aW9uVGltaW5nLCBhbmltYXRpb25EZWxheTtcbmV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBhbmltYXRpb25EZWxheTtcbmV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nO1xuZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uO1xuZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZTtcblxuaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gIHZhciBfZ2V0VHJhbnNpdGlvblByb3BlcnQgPSBnZXRUcmFuc2l0aW9uUHJvcGVydGllcygpO1xuXG4gIHByZWZpeCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC5wcmVmaXg7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmQgPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQudHJhbnNpdGlvbkVuZDtcbiAgZXhwb3J0cy5hbmltYXRpb25FbmQgPSBhbmltYXRpb25FbmQgPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQuYW5pbWF0aW9uRW5kO1xuICBleHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybSA9IHByZWZpeCArIFwiLVwiICsgdHJhbnNmb3JtO1xuICBleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IHRyYW5zaXRpb25Qcm9wZXJ0eSA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tcHJvcGVydHlcIjtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24gPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLWR1cmF0aW9uXCI7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5ID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi1kZWxheVwiO1xuICBleHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSB0cmFuc2l0aW9uVGltaW5nID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cIjtcbiAgZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZSA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi1uYW1lXCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBhbmltYXRpb25EdXJhdGlvbiA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi1kdXJhdGlvblwiO1xuICBleHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGFuaW1hdGlvblRpbWluZyA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi1kZWxheVwiO1xuICBleHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gYW5pbWF0aW9uRGVsYXkgPSBwcmVmaXggKyBcIi1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uXCI7XG59XG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gIGVuZDogdHJhbnNpdGlvbkVuZCxcbiAgcHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wZXJ0eSxcbiAgdGltaW5nOiB0cmFuc2l0aW9uVGltaW5nLFxuICBkZWxheTogdHJhbnNpdGlvbkRlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzKCkge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgdmFyIHZlbmRvck1hcCA9IHtcbiAgICBPOiBmdW5jdGlvbiBPKGUpIHtcbiAgICAgIHJldHVybiBcIm9cIiArIGUudG9Mb3dlckNhc2UoKTtcbiAgICB9LFxuICAgIE1vejogZnVuY3Rpb24gTW96KGUpIHtcbiAgICAgIHJldHVybiBlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSxcbiAgICBXZWJraXQ6IGZ1bmN0aW9uIFdlYmtpdChlKSB7XG4gICAgICByZXR1cm4gXCJ3ZWJraXRcIiArIGU7XG4gICAgfSxcbiAgICBtczogZnVuY3Rpb24gbXMoZSkge1xuICAgICAgcmV0dXJuIFwiTVNcIiArIGU7XG4gICAgfVxuICB9O1xuICB2YXIgdmVuZG9ycyA9IE9iamVjdC5rZXlzKHZlbmRvck1hcCk7XG4gIHZhciB0cmFuc2l0aW9uRW5kLCBhbmltYXRpb25FbmQ7XG4gIHZhciBwcmVmaXggPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmVuZG9yID0gdmVuZG9yc1tpXTtcblxuICAgIGlmICh2ZW5kb3IgKyBcIlRyYW5zaXRpb25Qcm9wZXJ0eVwiIGluIHN0eWxlKSB7XG4gICAgICBwcmVmaXggPSBcIi1cIiArIHZlbmRvci50b0xvd2VyQ2FzZSgpO1xuICAgICAgdHJhbnNpdGlvbkVuZCA9IHZlbmRvck1hcFt2ZW5kb3JdKCdUcmFuc2l0aW9uRW5kJyk7XG4gICAgICBhbmltYXRpb25FbmQgPSB2ZW5kb3JNYXBbdmVuZG9yXSgnQW5pbWF0aW9uRW5kJyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIXRyYW5zaXRpb25FbmQgJiYgJ3RyYW5zaXRpb25Qcm9wZXJ0eScgaW4gc3R5bGUpIHRyYW5zaXRpb25FbmQgPSAndHJhbnNpdGlvbmVuZCc7XG4gIGlmICghYW5pbWF0aW9uRW5kICYmICdhbmltYXRpb25OYW1lJyBpbiBzdHlsZSkgYW5pbWF0aW9uRW5kID0gJ2FuaW1hdGlvbmVuZCc7XG4gIHN0eWxlID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBhbmltYXRpb25FbmQ6IGFuaW1hdGlvbkVuZCxcbiAgICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kLFxuICAgIHByZWZpeDogcHJlZml4XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBvbiA9IGZ1bmN0aW9uIG9uKCkge307XG5cbmlmIChfaW5ET00uZGVmYXVsdCkge1xuICBvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgICAgIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlIHx8IGZhbHNlKTtcbiAgICB9O2Vsc2UgaWYgKGRvY3VtZW50LmF0dGFjaEV2ZW50KSByZXR1cm4gZnVuY3Rpb24gKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgcmV0dXJuIG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICBlLnRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0ID0gbm9kZTtcbiAgICAgICAgaGFuZGxlci5jYWxsKG5vZGUsIGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSgpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2luRE9NXCIpKTtcblxudmFyIG9mZiA9IGZ1bmN0aW9uIG9mZigpIHt9O1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgb2ZmID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSByZXR1cm4gZnVuY3Rpb24gKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSkge1xuICAgICAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUgfHwgZmFsc2UpO1xuICAgIH07ZWxzZSBpZiAoZG9jdW1lbnQuYXR0YWNoRXZlbnQpIHJldHVybiBmdW5jdGlvbiAobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICByZXR1cm4gbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9O1xuICB9KCk7XG59XG5cbnZhciBfZGVmYXVsdCA9IG9mZjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnblwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFjdGl2ZUVsZW1lbnQ7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb3duZXJEb2N1bWVudFwiKSk7XG5cbmZ1bmN0aW9uIGFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gIGlmIChkb2MgPT09IHZvaWQgMCkge1xuICAgIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KSgpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvKiBpZSB0aHJvd3MgaWYgbm8gYWN0aXZlIGVsZW1lbnQgKi9cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9jb250YWlucyA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3F1ZXJ5L2NvbnRhaW5zJyk7XG5cbnZhciBfY29udGFpbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udGFpbnMpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX2FkZEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCcuL3V0aWxzL2FkZEV2ZW50TGlzdGVuZXInKTtcblxudmFyIF9hZGRFdmVudExpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZEV2ZW50TGlzdGVuZXIpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCcuL3V0aWxzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBlc2NhcGVLZXlDb2RlID0gMjc7XG5cbmZ1bmN0aW9uIGlzTGVmdENsaWNrRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LmJ1dHRvbiA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxuLyoqXG4gKiBUaGUgYDxSb290Q2xvc2VXcmFwcGVyLz5gIGNvbXBvbmVudCByZWdpc3RlcnMgeW91ciBjYWxsYmFjayBvbiB0aGUgZG9jdW1lbnRcbiAqIHdoZW4gcmVuZGVyZWQuIFBvd2VycyB0aGUgYDxPdmVybGF5Lz5gIGNvbXBvbmVudC4gVGhpcyBpcyB1c2VkIGFjaGlldmUgbW9kYWxcbiAqIHN0eWxlIGJlaGF2aW9yIHdoZXJlIHlvdXIgY2FsbGJhY2sgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgdHJpZXMgdG9cbiAqIGludGVyYWN0IHdpdGggdGhlIHJlc3Qgb2YgdGhlIGRvY3VtZW50IG9yIGhpdHMgdGhlIGBlc2NgIGtleS5cbiAqL1xuXG52YXIgUm9vdENsb3NlV3JhcHBlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb290Q2xvc2VXcmFwcGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb290Q2xvc2VXcmFwcGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvb3RDbG9zZVdyYXBwZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBldmVudCA9IF90aGlzLnByb3BzLmV2ZW50O1xuXG4gICAgICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfdGhpcyk7XG5cbiAgICAgIC8vIFVzZSBjYXB0dXJlIGZvciB0aGlzIGxpc3RlbmVyIHNvIGl0IGZpcmVzIGJlZm9yZSBSZWFjdCdzIGxpc3RlbmVyLCB0b1xuICAgICAgLy8gYXZvaWQgZmFsc2UgcG9zaXRpdmVzIGluIHRoZSBjb250YWlucygpIGNoZWNrIGJlbG93IGlmIHRoZSB0YXJnZXQgRE9NXG4gICAgICAvLyBlbGVtZW50IGlzIHJlbW92ZWQgaW4gdGhlIFJlYWN0IG1vdXNlIGNhbGxiYWNrLlxuICAgICAgX3RoaXMuZG9jdW1lbnRNb3VzZUNhcHR1cmVMaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCBldmVudCwgX3RoaXMuaGFuZGxlTW91c2VDYXB0dXJlLCB0cnVlKTtcblxuICAgICAgX3RoaXMuZG9jdW1lbnRNb3VzZUxpc3RlbmVyID0gKDAsIF9hZGRFdmVudExpc3RlbmVyMi5kZWZhdWx0KShkb2MsIGV2ZW50LCBfdGhpcy5oYW5kbGVNb3VzZSk7XG5cbiAgICAgIF90aGlzLmRvY3VtZW50S2V5dXBMaXN0ZW5lciA9ICgwLCBfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkoZG9jLCAna2V5dXAnLCBfdGhpcy5oYW5kbGVLZXlVcCk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmRvY3VtZW50TW91c2VDYXB0dXJlTGlzdGVuZXIpIHtcbiAgICAgICAgX3RoaXMuZG9jdW1lbnRNb3VzZUNhcHR1cmVMaXN0ZW5lci5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmRvY3VtZW50TW91c2VMaXN0ZW5lcikge1xuICAgICAgICBfdGhpcy5kb2N1bWVudE1vdXNlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5kb2N1bWVudEtleXVwTGlzdGVuZXIpIHtcbiAgICAgICAgX3RoaXMuZG9jdW1lbnRLZXl1cExpc3RlbmVyLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZUNhcHR1cmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMucHJldmVudE1vdXNlUm9vdENsb3NlID0gaXNNb2RpZmllZEV2ZW50KGUpIHx8ICFpc0xlZnRDbGlja0V2ZW50KGUpIHx8ICgwLCBfY29udGFpbnMyLmRlZmF1bHQpKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcyksIGUudGFyZ2V0KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFfdGhpcy5wcmV2ZW50TW91c2VSb290Q2xvc2UgJiYgX3RoaXMucHJvcHMub25Sb290Q2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Sb290Q2xvc2UoZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUtleVVwID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IGVzY2FwZUtleUNvZGUgJiYgX3RoaXMucHJvcHMub25Sb290Q2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Sb290Q2xvc2UoZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnByZXZlbnRNb3VzZVJvb3RDbG9zZSA9IGZhbHNlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICB9O1xuXG4gIFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgcHJldlByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmRpc2FibGVkICYmICFwcmV2UHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgUm9vdENsb3NlV3JhcHBlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgUm9vdENsb3NlV3JhcHBlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9O1xuXG4gIHJldHVybiBSb290Q2xvc2VXcmFwcGVyO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUm9vdENsb3NlV3JhcHBlci5kaXNwbGF5TmFtZSA9ICdSb290Q2xvc2VXcmFwcGVyJztcblxuUm9vdENsb3NlV3JhcHBlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciBjbGljayBvciBtb3VzZWRvd24uIEFsc28gdHJpZ2dlcnMgd2hlbiB1c2VyIGhpdHMgYGVzY2AuXG4gICAqL1xuICBvblJvb3RDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2hpbGRyZW4gdG8gcmVuZGVyLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHRoZSBSb290Q2xvc2VXcmFwcGVyLCBwcmV2ZW50aW5nIGl0IGZyb20gdHJpZ2dlcmluZyBgb25Sb290Q2xvc2VgLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIENob29zZSB3aGljaCBkb2N1bWVudCBtb3VzZSBldmVudCB0byBiaW5kIHRvLlxuICAgKi9cbiAgZXZlbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydjbGljaycsICdtb3VzZWRvd24nXSlcbn07XG5cblJvb3RDbG9zZVdyYXBwZXIuZGVmYXVsdFByb3BzID0ge1xuICBldmVudDogJ2NsaWNrJ1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUm9vdENsb3NlV3JhcHBlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzT3ZlcmZsb3dpbmc7XG5cbnZhciBfaXNXaW5kb3cgPSByZXF1aXJlKCdkb20taGVscGVycy9xdWVyeS9pc1dpbmRvdycpO1xuXG52YXIgX2lzV2luZG93MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzV2luZG93KTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudCcpO1xuXG52YXIgX293bmVyRG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzQm9keShub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYm9keSc7XG59XG5cbmZ1bmN0aW9uIGJvZHlJc092ZXJmbG93aW5nKG5vZGUpIHtcbiAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkobm9kZSk7XG4gIHZhciB3aW4gPSAoMCwgX2lzV2luZG93Mi5kZWZhdWx0KShkb2MpO1xuICB2YXIgZnVsbFdpZHRoID0gd2luLmlubmVyV2lkdGg7XG5cbiAgLy8gU3VwcG9ydDogaWU4LCBubyBpbm5lcldpZHRoXG4gIGlmICghZnVsbFdpZHRoKSB7XG4gICAgdmFyIGRvY3VtZW50RWxlbWVudFJlY3QgPSBkb2MuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGZ1bGxXaWR0aCA9IGRvY3VtZW50RWxlbWVudFJlY3QucmlnaHQgLSBNYXRoLmFicyhkb2N1bWVudEVsZW1lbnRSZWN0LmxlZnQpO1xuICB9XG5cbiAgcmV0dXJuIGRvYy5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpZHRoO1xufVxuXG5mdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICB2YXIgd2luID0gKDAsIF9pc1dpbmRvdzIuZGVmYXVsdCkoY29udGFpbmVyKTtcblxuICByZXR1cm4gd2luIHx8IGlzQm9keShjb250YWluZXIpID8gYm9keUlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSA6IGNvbnRhaW5lci5zY3JvbGxIZWlnaHQgPiBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vblwiKSk7XG5cbmV4cG9ydHMub24gPSBfb24uZGVmYXVsdDtcblxudmFyIF9vZmYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29mZlwiKSk7XG5cbmV4cG9ydHMub2ZmID0gX29mZi5kZWZhdWx0O1xuXG52YXIgX2ZpbHRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZmlsdGVyXCIpKTtcblxuZXhwb3J0cy5maWx0ZXIgPSBfZmlsdGVyLmRlZmF1bHQ7XG5cbnZhciBfbGlzdGVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saXN0ZW5cIikpO1xuXG5leHBvcnRzLmxpc3RlbiA9IF9saXN0ZW4uZGVmYXVsdDtcbnZhciBfZGVmYXVsdCA9IHtcbiAgb246IF9vbi5kZWZhdWx0LFxuICBvZmY6IF9vZmYuZGVmYXVsdCxcbiAgZmlsdGVyOiBfZmlsdGVyLmRlZmF1bHQsXG4gIGxpc3RlbjogX2xpc3Rlbi5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJyk7XG5cbnZhciBfZWxlbWVudFR5cGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWxlbWVudFR5cGUpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfUG9ydGFsID0gcmVxdWlyZSgnLi9Qb3J0YWwnKTtcblxudmFyIF9Qb3J0YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9ydGFsKTtcblxudmFyIF9Qb3NpdGlvbiA9IHJlcXVpcmUoJy4vUG9zaXRpb24nKTtcblxudmFyIF9Qb3NpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qb3NpdGlvbik7XG5cbnZhciBfUm9vdENsb3NlV3JhcHBlciA9IHJlcXVpcmUoJy4vUm9vdENsb3NlV3JhcHBlcicpO1xuXG52YXIgX1Jvb3RDbG9zZVdyYXBwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm9vdENsb3NlV3JhcHBlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIEJ1aWx0IG9uIHRvcCBvZiBgPFBvc2l0aW9uLz5gIGFuZCBgPFBvcnRhbC8+YCwgdGhlIG92ZXJsYXkgY29tcG9uZW50IGlzIGdyZWF0IGZvciBjdXN0b20gdG9vbHRpcCBvdmVybGF5cy5cbiAqL1xudmFyIE92ZXJsYXkgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoT3ZlcmxheSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3ZlcmxheShwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdmVybGF5KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuaGFuZGxlSGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBleGl0ZWQ6IHRydWUgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHM7XG5cbiAgICAgICAgKF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMpLm9uRXhpdGVkLmFwcGx5KF90aGlzJHByb3BzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHsgZXhpdGVkOiAhcHJvcHMuc2hvdyB9O1xuICAgIF90aGlzLm9uSGlkZGVuTGlzdGVuZXIgPSBfdGhpcy5oYW5kbGVIaWRkZW4uYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgT3ZlcmxheS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXhpdGVkOiBmYWxzZSB9KTtcbiAgICB9IGVsc2UgaWYgKCFuZXh0UHJvcHMudHJhbnNpdGlvbikge1xuICAgICAgLy8gT3RoZXJ3aXNlIGxldCBoYW5kbGVIaWRkZW4gdGFrZSBjYXJlIG9mIG1hcmtpbmcgZXhpdGVkLlxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV4aXRlZDogdHJ1ZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgT3ZlcmxheS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjb250YWluZXIgPSBfcHJvcHMuY29udGFpbmVyLFxuICAgICAgICBjb250YWluZXJQYWRkaW5nID0gX3Byb3BzLmNvbnRhaW5lclBhZGRpbmcsXG4gICAgICAgIHRhcmdldCA9IF9wcm9wcy50YXJnZXQsXG4gICAgICAgIHBsYWNlbWVudCA9IF9wcm9wcy5wbGFjZW1lbnQsXG4gICAgICAgIHNob3VsZFVwZGF0ZVBvc2l0aW9uID0gX3Byb3BzLnNob3VsZFVwZGF0ZVBvc2l0aW9uLFxuICAgICAgICByb290Q2xvc2UgPSBfcHJvcHMucm9vdENsb3NlLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgVHJhbnNpdGlvbiA9IF9wcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29udGFpbmVyJywgJ2NvbnRhaW5lclBhZGRpbmcnLCAndGFyZ2V0JywgJ3BsYWNlbWVudCcsICdzaG91bGRVcGRhdGVQb3NpdGlvbicsICdyb290Q2xvc2UnLCAnY2hpbGRyZW4nLCAndHJhbnNpdGlvbiddKTtcblxuICAgIC8vIERvbid0IHVuLXJlbmRlciB0aGUgb3ZlcmxheSB3aGlsZSBpdCdzIHRyYW5zaXRpb25pbmcgb3V0LlxuXG5cbiAgICB2YXIgbW91bnRPdmVybGF5ID0gcHJvcHMuc2hvdyB8fCBUcmFuc2l0aW9uICYmICF0aGlzLnN0YXRlLmV4aXRlZDtcbiAgICBpZiAoIW1vdW50T3ZlcmxheSkge1xuICAgICAgLy8gRG9uJ3QgYm90aGVyIHNob3dpbmcgYW55dGhpbmcgaWYgd2UgZG9uJ3QgaGF2ZSB0by5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuO1xuXG4gICAgLy8gUG9zaXRpb24gaXMgYmUgaW5uZXItbW9zdCBiZWNhdXNlIGl0IGFkZHMgaW5saW5lIHN0eWxlcyBpbnRvIHRoZSBjaGlsZCxcbiAgICAvLyB3aGljaCB0aGUgb3RoZXIgd3JhcHBlcnMgZG9uJ3QgZm9yd2FyZCBjb3JyZWN0bHkuXG4gICAgY2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIF9Qb3NpdGlvbjIuZGVmYXVsdCxcbiAgICAgIHsgY29udGFpbmVyOiBjb250YWluZXIsIGNvbnRhaW5lclBhZGRpbmc6IGNvbnRhaW5lclBhZGRpbmcsIHRhcmdldDogdGFyZ2V0LCBwbGFjZW1lbnQ6IHBsYWNlbWVudCwgc2hvdWxkVXBkYXRlUG9zaXRpb246IHNob3VsZFVwZGF0ZVBvc2l0aW9uIH0sXG4gICAgICBjaGlsZFxuICAgICk7XG5cbiAgICBpZiAoVHJhbnNpdGlvbikge1xuICAgICAgdmFyIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgICAgICBvbkV4aXRpbmcgPSBwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICAgICAgb25FbnRlcmluZyA9IHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgICAgb25FbnRlcmVkID0gcHJvcHMub25FbnRlcmVkO1xuXG4gICAgICAvLyBUaGlzIGFuaW1hdGVzIHRoZSBjaGlsZCBub2RlIGJ5IGluamVjdGluZyBwcm9wcywgc28gaXQgbXVzdCBwcmVjZWRlXG4gICAgICAvLyBhbnl0aGluZyB0aGF0IGFkZHMgYSB3cmFwcGluZyBkaXYuXG5cbiAgICAgIGNoaWxkID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRyYW5zaXRpb24sXG4gICAgICAgIHtcbiAgICAgICAgICAnaW4nOiBwcm9wcy5zaG93LFxuICAgICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgICAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICAgICAgICBvbkV4aXRlZDogdGhpcy5vbkhpZGRlbkxpc3RlbmVyLFxuICAgICAgICAgIG9uRW50ZXI6IG9uRW50ZXIsXG4gICAgICAgICAgb25FbnRlcmluZzogb25FbnRlcmluZyxcbiAgICAgICAgICBvbkVudGVyZWQ6IG9uRW50ZXJlZFxuICAgICAgICB9LFxuICAgICAgICBjaGlsZFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGdvZXMgYWZ0ZXIgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgYWRkcyBhIHdyYXBwaW5nIGRpdi5cbiAgICBpZiAocm9vdENsb3NlKSB7XG4gICAgICBjaGlsZCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfUm9vdENsb3NlV3JhcHBlcjIuZGVmYXVsdCxcbiAgICAgICAgeyBvblJvb3RDbG9zZTogcHJvcHMub25IaWRlIH0sXG4gICAgICAgIGNoaWxkXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIF9Qb3J0YWwyLmRlZmF1bHQsXG4gICAgICB7IGNvbnRhaW5lcjogY29udGFpbmVyIH0sXG4gICAgICBjaGlsZFxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIE92ZXJsYXk7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5PdmVybGF5LnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBfUG9ydGFsMi5kZWZhdWx0LnByb3BUeXBlcywgX1Bvc2l0aW9uMi5kZWZhdWx0LnByb3BUeXBlcywge1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZpc2liaWxpdHkgb2YgdGhlIE92ZXJsYXlcbiAgICovXG4gIHNob3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogU3BlY2lmeSB3aGV0aGVyIHRoZSBvdmVybGF5IHNob3VsZCB0cmlnZ2VyIGBvbkhpZGVgIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG91dHNpZGUgdGhlIG92ZXJsYXlcbiAgICovXG4gIHJvb3RDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIENhbGxiYWNrIGZpcmVkIGJ5IHRoZSBPdmVybGF5IHdoZW4gaXQgd2lzaGVzIHRvIGJlIGhpZGRlbi5cbiAgICpcbiAgICogX19yZXF1aXJlZF9fIHdoZW4gYHJvb3RDbG9zZWAgaXMgYHRydWVgLlxuICAgKlxuICAgKiBAdHlwZSBmdW5jXG4gICAqL1xuICBvbkhpZGU6IGZ1bmN0aW9uIG9uSGlkZShwcm9wcykge1xuICAgIHZhciBwcm9wVHlwZSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYztcbiAgICBpZiAocHJvcHMucm9vdENsb3NlKSB7XG4gICAgICBwcm9wVHlwZSA9IHByb3BUeXBlLmlzUmVxdWlyZWQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcFR5cGUuYXBwbHkodW5kZWZpbmVkLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cEAyLjAuMGAgYDxUcmFuc2l0aW9uLz5gIGNvbXBvbmVudFxuICAgKiB1c2VkIHRvIGFuaW1hdGUgdGhlIG92ZXJsYXkgYXMgaXQgY2hhbmdlcyB2aXNpYmlsaXR5LlxuICAgKi9cbiAgdHJhbnNpdGlvbjogX2VsZW1lbnRUeXBlMi5kZWZhdWx0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE92ZXJsYXkgdHJhbnNpdGlvbnMgaW5cbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE92ZXJsYXkgYmVnaW5zIHRvIHRyYW5zaXRpb24gaW5cbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE92ZXJsYXkgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBpblxuICAgKi9cbiAgb25FbnRlcmVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgT3ZlcmxheSB0cmFuc2l0aW9ucyBvdXRcbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgT3ZlcmxheSBiZWdpbnMgdG8gdHJhbnNpdGlvbiBvdXRcbiAgICovXG4gIG9uRXhpdGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgT3ZlcmxheSBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIG91dFxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE92ZXJsYXk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsaXplU3R5bGVOYW1lO1xuXG52YXIgX2NhbWVsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jYW1lbGl6ZVwiKSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9jYW1lbGl6ZVN0eWxlTmFtZS5qc1xuICovXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiAoMCwgX2NhbWVsaXplLmRlZmF1bHQpKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChub2RlLCBldmVudCwgaGFuZGxlciwgY2FwdHVyZSkge1xuICAoMCwgX29uMi5kZWZhdWx0KShub2RlLCBldmVudCwgaGFuZGxlciwgY2FwdHVyZSk7XG5cbiAgcmV0dXJuIHtcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICgwLCBfb2ZmMi5kZWZhdWx0KShub2RlLCBldmVudCwgaGFuZGxlciwgY2FwdHVyZSk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIF9vbiA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL2V2ZW50cy9vbicpO1xuXG52YXIgX29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29uKTtcblxudmFyIF9vZmYgPSByZXF1aXJlKCdkb20taGVscGVycy9ldmVudHMvb2ZmJyk7XG5cbnZhciBfb2ZmMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29mZik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaGFzQ2xhc3M7XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHJldHVybiAhIWNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO2Vsc2UgcmV0dXJuIChcIiBcIiArIChlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8IGVsZW1lbnQuY2xhc3NOYW1lKSArIFwiIFwiKS5pbmRleE9mKFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIpICE9PSAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudCA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudCcpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRPckVsZW1lbnQpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfZ2V0Q29udGFpbmVyID0gcmVxdWlyZSgnLi91dGlscy9nZXRDb250YWluZXInKTtcblxudmFyIF9nZXRDb250YWluZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q29udGFpbmVyKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnLi91dGlscy9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxudmFyIF9MZWdhY3lQb3J0YWwgPSByZXF1aXJlKCcuL0xlZ2FjeVBvcnRhbCcpO1xuXG52YXIgX0xlZ2FjeVBvcnRhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MZWdhY3lQb3J0YWwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIGA8UG9ydGFsLz5gIGNvbXBvbmVudCByZW5kZXJzIGl0cyBjaGlsZHJlbiBpbnRvIGEgbmV3IFwic3VidHJlZVwiIG91dHNpZGUgb2YgY3VycmVudCBjb21wb25lbnQgaGllcmFyY2h5LlxuICogWW91IGNhbiB0aGluayBvZiBpdCBhcyBhIGRlY2xhcmF0aXZlIGBhcHBlbmRDaGlsZCgpYCwgb3IgalF1ZXJ5J3MgYCQuZm4uYXBwZW5kVG8oKWAuXG4gKiBUaGUgY2hpbGRyZW4gb2YgYDxQb3J0YWwvPmAgY29tcG9uZW50IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGBjb250YWluZXJgIHNwZWNpZmllZC5cbiAqL1xudmFyIFBvcnRhbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcnRhbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc2V0Q29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBfdGhpcy5wcm9wcztcblxuICAgICAgX3RoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUgPSAoMCwgX2dldENvbnRhaW5lcjIuZGVmYXVsdCkocHJvcHMuY29udGFpbmVyLCAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKF90aGlzKS5ib2R5KTtcbiAgICB9LCBfdGhpcy5nZXRNb3VudE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuX3BvcnRhbENvbnRhaW5lck5vZGU7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBQb3J0YWwucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5zZXRDb250YWluZXIoKTtcbiAgICB0aGlzLmZvcmNlVXBkYXRlKHRoaXMucHJvcHMub25SZW5kZXJlZCk7XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLmNvbnRhaW5lciAhPT0gdGhpcy5wcm9wcy5jb250YWluZXIpIHtcbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyKG5leHRQcm9wcyk7XG4gICAgfVxuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLl9wb3J0YWxDb250YWluZXJOb2RlID0gbnVsbDtcbiAgfTtcblxuICBQb3J0YWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiB0aGlzLl9wb3J0YWxDb250YWluZXJOb2RlID8gX3JlYWN0RG9tMi5kZWZhdWx0LmNyZWF0ZVBvcnRhbCh0aGlzLnByb3BzLmNoaWxkcmVuLCB0aGlzLl9wb3J0YWxDb250YWluZXJOb2RlKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFBvcnRhbDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblBvcnRhbC5kaXNwbGF5TmFtZSA9ICdQb3J0YWwnO1xuUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgTm9kZSwgQ29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBQb3J0YWwgY2hpbGRyZW5cbiAgICogYXBwZW5kZWQgdG8gaXQuXG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcblxuICBvblJlbmRlcmVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfcmVhY3REb20yLmRlZmF1bHQuY3JlYXRlUG9ydGFsID8gUG9ydGFsIDogX0xlZ2FjeVBvcnRhbDIuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9mZnNldDtcblxudmFyIF9jb250YWlucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29udGFpbnNcIikpO1xuXG52YXIgX2lzV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1dpbmRvd1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL293bmVyRG9jdW1lbnRcIikpO1xuXG5mdW5jdGlvbiBvZmZzZXQobm9kZSkge1xuICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKG5vZGUpLFxuICAgICAgd2luID0gKDAsIF9pc1dpbmRvdy5kZWZhdWx0KShkb2MpLFxuICAgICAgZG9jRWxlbSA9IGRvYyAmJiBkb2MuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgYm94ID0ge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIGhlaWdodDogMCxcbiAgICB3aWR0aDogMFxuICB9O1xuICBpZiAoIWRvYykgcmV0dXJuOyAvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcblxuICBpZiAoISgwLCBfY29udGFpbnMuZGVmYXVsdCkoZG9jRWxlbSwgbm9kZSkpIHJldHVybiBib3g7XG4gIGlmIChub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gdW5kZWZpbmVkKSBib3ggPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyBJRTggZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGRvZXNuJ3Qgc3VwcG9ydCB3aWR0aCAmIGhlaWdodFxuXG4gIGJveCA9IHtcbiAgICB0b3A6IGJveC50b3AgKyAod2luLnBhZ2VZT2Zmc2V0IHx8IGRvY0VsZW0uc2Nyb2xsVG9wKSAtIChkb2NFbGVtLmNsaWVudFRvcCB8fCAwKSxcbiAgICBsZWZ0OiBib3gubGVmdCArICh3aW4ucGFnZVhPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxMZWZ0KSAtIChkb2NFbGVtLmNsaWVudExlZnQgfHwgMCksXG4gICAgd2lkdGg6IChib3gud2lkdGggPT0gbnVsbCA/IG5vZGUub2Zmc2V0V2lkdGggOiBib3gud2lkdGgpIHx8IDAsXG4gICAgaGVpZ2h0OiAoYm94LmhlaWdodCA9PSBudWxsID8gbm9kZS5vZmZzZXRIZWlnaHQgOiBib3guaGVpZ2h0KSB8fCAwXG4gIH07XG4gIHJldHVybiBib3g7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2Nyb2xsVG9wO1xuXG52YXIgX2lzV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1dpbmRvd1wiKSk7XG5cbmZ1bmN0aW9uIHNjcm9sbFRvcChub2RlLCB2YWwpIHtcbiAgdmFyIHdpbiA9ICgwLCBfaXNXaW5kb3cuZGVmYXVsdCkobm9kZSk7XG4gIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHdpbiA/ICdwYWdlWU9mZnNldCcgaW4gd2luID8gd2luLnBhZ2VZT2Zmc2V0IDogd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgOiBub2RlLnNjcm9sbFRvcDtcbiAgaWYgKHdpbikgd2luLnNjcm9sbFRvKCdwYWdlWE9mZnNldCcgaW4gd2luID8gd2luLnBhZ2VYT2Zmc2V0IDogd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LCB2YWwpO2Vsc2Ugbm9kZS5zY3JvbGxUb3AgPSB2YWw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiZXhwb3J0IHZhciBTaXplID0ge1xuICBMQVJHRTogJ2xhcmdlJyxcbiAgU01BTEw6ICdzbWFsbCcsXG4gIFhTTUFMTDogJ3hzbWFsbCdcbn07XG5cbmV4cG9ydCB2YXIgU0laRV9NQVAgPSB7XG4gIGxhcmdlOiAnbGcnLFxuICBtZWRpdW06ICdtZCcsXG4gIHNtYWxsOiAnc20nLFxuICB4c21hbGw6ICd4cycsXG4gIGxnOiAnbGcnLFxuICBtZDogJ21kJyxcbiAgc206ICdzbScsXG4gIHhzOiAneHMnXG59O1xuXG5leHBvcnQgdmFyIERFVklDRV9TSVpFUyA9IFsnbGcnLCAnbWQnLCAnc20nLCAneHMnXTtcblxuZXhwb3J0IHZhciBTdGF0ZSA9IHtcbiAgU1VDQ0VTUzogJ3N1Y2Nlc3MnLFxuICBXQVJOSU5HOiAnd2FybmluZycsXG4gIERBTkdFUjogJ2RhbmdlcicsXG4gIElORk86ICdpbmZvJ1xufTtcblxuZXhwb3J0IHZhciBTdHlsZSA9IHtcbiAgREVGQVVMVDogJ2RlZmF1bHQnLFxuICBQUklNQVJZOiAncHJpbWFyeScsXG4gIExJTks6ICdsaW5rJyxcbiAgSU5WRVJTRTogJ2ludmVyc2UnXG59OyIsImltcG9ydCBfT2JqZWN0JGVudHJpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9lbnRyaWVzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG4vLyBUT0RPOiBUaGUgcHVibGljbHkgZXhwb3NlZCBwYXJ0cyBvZiB0aGlzIHNob3VsZCBiZSBpbiBsaWIvQm9vdHN0cmFwVXRpbHMuXG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IFNJWkVfTUFQIH0gZnJvbSAnLi9TdHlsZUNvbmZpZyc7XG5cbmZ1bmN0aW9uIGN1cnJ5KGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGxhc3QgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgaWYgKHR5cGVvZiBsYXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3MuY29uY2F0KFtDb21wb25lbnRdKSk7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeChwcm9wcywgdmFyaWFudCkge1xuICB2YXIgYnNDbGFzcyA9IChwcm9wcy5ic0NsYXNzIHx8ICcnKS50cmltKCk7XG4gICEoYnNDbGFzcyAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdBIGBic0NsYXNzYCBwcm9wIGlzIHJlcXVpcmVkIGZvciB0aGlzIGNvbXBvbmVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGJzQ2xhc3MgKyAodmFyaWFudCA/ICctJyArIHZhcmlhbnQgOiAnJyk7XG59XG5cbmV4cG9ydCB2YXIgYnNDbGFzcyA9IGN1cnJ5KGZ1bmN0aW9uIChkZWZhdWx0Q2xhc3MsIENvbXBvbmVudCkge1xuICB2YXIgcHJvcFR5cGVzID0gQ29tcG9uZW50LnByb3BUeXBlcyB8fCAoQ29tcG9uZW50LnByb3BUeXBlcyA9IHt9KTtcbiAgdmFyIGRlZmF1bHRQcm9wcyA9IENvbXBvbmVudC5kZWZhdWx0UHJvcHMgfHwgKENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSB7fSk7XG5cbiAgcHJvcFR5cGVzLmJzQ2xhc3MgPSBQcm9wVHlwZXMuc3RyaW5nO1xuICBkZWZhdWx0UHJvcHMuYnNDbGFzcyA9IGRlZmF1bHRDbGFzcztcblxuICByZXR1cm4gQ29tcG9uZW50O1xufSk7XG5cbmV4cG9ydCB2YXIgYnNTdHlsZXMgPSBjdXJyeShmdW5jdGlvbiAoc3R5bGVzLCBkZWZhdWx0U3R5bGUsIENvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIGRlZmF1bHRTdHlsZSAhPT0gJ3N0cmluZycpIHtcbiAgICBDb21wb25lbnQgPSBkZWZhdWx0U3R5bGU7XG4gICAgZGVmYXVsdFN0eWxlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIGV4aXN0aW5nID0gQ29tcG9uZW50LlNUWUxFUyB8fCBbXTtcbiAgdmFyIHByb3BUeXBlcyA9IENvbXBvbmVudC5wcm9wVHlwZXMgfHwge307XG5cbiAgc3R5bGVzLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgaWYgKGV4aXN0aW5nLmluZGV4T2Yoc3R5bGUpID09PSAtMSkge1xuICAgICAgZXhpc3RpbmcucHVzaChzdHlsZSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgcHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2YoZXhpc3RpbmcpO1xuXG4gIC8vIGV4cG9zZSB0aGUgdmFsdWVzIG9uIHRoZSBwcm9wVHlwZSBmdW5jdGlvbiBmb3IgZG9jdW1lbnRhdGlvblxuICBDb21wb25lbnQuU1RZTEVTID0gZXhpc3Rpbmc7XG4gIHByb3BUeXBlLl92YWx1ZXMgPSBleGlzdGluZztcblxuICBDb21wb25lbnQucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIHByb3BUeXBlcywge1xuICAgIGJzU3R5bGU6IHByb3BUeXBlXG4gIH0pO1xuXG4gIGlmIChkZWZhdWx0U3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBkZWZhdWx0UHJvcHMgPSBDb21wb25lbnQuZGVmYXVsdFByb3BzIHx8IChDb21wb25lbnQuZGVmYXVsdFByb3BzID0ge30pO1xuICAgIGRlZmF1bHRQcm9wcy5ic1N0eWxlID0gZGVmYXVsdFN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn0pO1xuXG5leHBvcnQgdmFyIGJzU2l6ZXMgPSBjdXJyeShmdW5jdGlvbiAoc2l6ZXMsIGRlZmF1bHRTaXplLCBDb21wb25lbnQpIHtcbiAgaWYgKHR5cGVvZiBkZWZhdWx0U2l6ZSAhPT0gJ3N0cmluZycpIHtcbiAgICBDb21wb25lbnQgPSBkZWZhdWx0U2l6ZTtcbiAgICBkZWZhdWx0U2l6ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHZhciBleGlzdGluZyA9IENvbXBvbmVudC5TSVpFUyB8fCBbXTtcbiAgdmFyIHByb3BUeXBlcyA9IENvbXBvbmVudC5wcm9wVHlwZXMgfHwge307XG5cbiAgc2l6ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2l6ZSkge1xuICAgIGlmIChleGlzdGluZy5pbmRleE9mKHNpemUpID09PSAtMSkge1xuICAgICAgZXhpc3RpbmcucHVzaChzaXplKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgZXhpc3RpbmcuZm9yRWFjaChmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHZhciBtYXBwZWRTaXplID0gU0laRV9NQVBbc2l6ZV07XG4gICAgaWYgKG1hcHBlZFNpemUgJiYgbWFwcGVkU2l6ZSAhPT0gc2l6ZSkge1xuICAgICAgdmFsdWVzLnB1c2gobWFwcGVkU2l6ZSk7XG4gICAgfVxuXG4gICAgdmFsdWVzLnB1c2goc2l6ZSk7XG4gIH0pO1xuXG4gIHZhciBwcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZih2YWx1ZXMpO1xuICBwcm9wVHlwZS5fdmFsdWVzID0gdmFsdWVzO1xuXG4gIC8vIGV4cG9zZSB0aGUgdmFsdWVzIG9uIHRoZSBwcm9wVHlwZSBmdW5jdGlvbiBmb3IgZG9jdW1lbnRhdGlvblxuICBDb21wb25lbnQuU0laRVMgPSBleGlzdGluZztcblxuICBDb21wb25lbnQucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIHByb3BUeXBlcywge1xuICAgIGJzU2l6ZTogcHJvcFR5cGVcbiAgfSk7XG5cbiAgaWYgKGRlZmF1bHRTaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoIUNvbXBvbmVudC5kZWZhdWx0UHJvcHMpIHtcbiAgICAgIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSB7fTtcbiAgICB9XG4gICAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5ic1NpemUgPSBkZWZhdWx0U2l6ZTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsYXNzU2V0KHByb3BzKSB7XG4gIHZhciBfY2xhc3NlcztcblxuICB2YXIgY2xhc3NlcyA9IChfY2xhc3NlcyA9IHt9LCBfY2xhc3Nlc1twcmVmaXgocHJvcHMpXSA9IHRydWUsIF9jbGFzc2VzKTtcblxuICBpZiAocHJvcHMuYnNTaXplKSB7XG4gICAgdmFyIGJzU2l6ZSA9IFNJWkVfTUFQW3Byb3BzLmJzU2l6ZV0gfHwgcHJvcHMuYnNTaXplO1xuICAgIGNsYXNzZXNbcHJlZml4KHByb3BzLCBic1NpemUpXSA9IHRydWU7XG4gIH1cblxuICBpZiAocHJvcHMuYnNTdHlsZSkge1xuICAgIGNsYXNzZXNbcHJlZml4KHByb3BzLCBwcm9wcy5ic1N0eWxlKV0gPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzZXM7XG59XG5cbmZ1bmN0aW9uIGdldEJzUHJvcHMocHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICBic0NsYXNzOiBwcm9wcy5ic0NsYXNzLFxuICAgIGJzU2l6ZTogcHJvcHMuYnNTaXplLFxuICAgIGJzU3R5bGU6IHByb3BzLmJzU3R5bGUsXG4gICAgYnNSb2xlOiBwcm9wcy5ic1JvbGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNCc1Byb3AocHJvcE5hbWUpIHtcbiAgcmV0dXJuIHByb3BOYW1lID09PSAnYnNDbGFzcycgfHwgcHJvcE5hbWUgPT09ICdic1NpemUnIHx8IHByb3BOYW1lID09PSAnYnNTdHlsZScgfHwgcHJvcE5hbWUgPT09ICdic1JvbGUnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRCc1Byb3BzKHByb3BzKSB7XG4gIHZhciBlbGVtZW50UHJvcHMgPSB7fTtcbiAgX09iamVjdCRlbnRyaWVzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHByb3BOYW1lID0gX3JlZlswXSxcbiAgICAgICAgcHJvcFZhbHVlID0gX3JlZlsxXTtcblxuICAgIGlmICghaXNCc1Byb3AocHJvcE5hbWUpKSB7XG4gICAgICBlbGVtZW50UHJvcHNbcHJvcE5hbWVdID0gcHJvcFZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIFtnZXRCc1Byb3BzKHByb3BzKSwgZWxlbWVudFByb3BzXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0QnNQcm9wc0FuZE9taXQocHJvcHMsIG9taXR0ZWRQcm9wTmFtZXMpIHtcbiAgdmFyIGlzT21pdHRlZFByb3AgPSB7fTtcbiAgb21pdHRlZFByb3BOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgIGlzT21pdHRlZFByb3BbcHJvcE5hbWVdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgdmFyIGVsZW1lbnRQcm9wcyA9IHt9O1xuICBfT2JqZWN0JGVudHJpZXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHByb3BOYW1lID0gX3JlZjJbMF0sXG4gICAgICAgIHByb3BWYWx1ZSA9IF9yZWYyWzFdO1xuXG4gICAgaWYgKCFpc0JzUHJvcChwcm9wTmFtZSkgJiYgIWlzT21pdHRlZFByb3BbcHJvcE5hbWVdKSB7XG4gICAgICBlbGVtZW50UHJvcHNbcHJvcE5hbWVdID0gcHJvcFZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIFtnZXRCc1Byb3BzKHByb3BzKSwgZWxlbWVudFByb3BzXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBzdHlsZSB2YXJpYW50IHRvIGEgQ29tcG9uZW50LiBNdXRhdGVzIHRoZSBwcm9wVHlwZXMgb2YgdGhlIGNvbXBvbmVudFxuICogaW4gb3JkZXIgdG8gdmFsaWRhdGUgdGhlIG5ldyB2YXJpYW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkU3R5bGUoQ29tcG9uZW50KSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgc3R5bGVWYXJpYW50ID0gQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIHN0eWxlVmFyaWFudFtfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIGJzU3R5bGVzKHN0eWxlVmFyaWFudCwgQ29tcG9uZW50KTtcbn1cblxuZXhwb3J0IHZhciBfY3VycnkgPSBjdXJyeTsiLCIvLyBUT0RPOiBUaGlzIG1vZHVsZSBzaG91bGQgYmUgRWxlbWVudENoaWxkcmVuLCBhbmQgc2hvdWxkIHVzZSBuYW1lZCBleHBvcnRzLlxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLFxuICogYnV0IG9ubHkgbWFwcyBvdmVyIGNoaWxkcmVuIHRoYXQgYXJlIFwidmFsaWQgY29tcG9uZW50c1wiLlxuICpcbiAqIFRoZSBtYXBGdW5jdGlvbiBwcm92aWRlZCBpbmRleCB3aWxsIGJlIG5vcm1hbGlzZWQgdG8gdGhlIGNvbXBvbmVudHMgbWFwcGVkLFxuICogc28gYW4gaW52YWxpZCBjb21wb25lbnQgd291bGQgbm90IGluY3JlYXNlIHRoZSBpbmRleC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZnVuYy5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBmdW5jLlxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gbWFwKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG5cbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBpbmRleCsrKTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSBcInZhbGlkIGNvbXBvbmVudHNcIi5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgZm9yRWFjaEZ1bmMoY2hpbGQsIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZCB3aXRoIHRoZSBpbmRleCByZWZsZWN0aW5nIHRoZSBwb3NpdGlvbiByZWxhdGl2ZSB0byBcInZhbGlkIGNvbXBvbmVudHNcIi5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZnVuYy5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBjb250ZXh0LlxuICovXG5mdW5jdGlvbiBmb3JFYWNoKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGluZGV4KyspO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIFwidmFsaWQgY29tcG9uZW50c1wiIGluIHRoZSBDaGlsZHJlbiBjb250YWluZXIuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBjb3VudChjaGlsZHJlbikge1xuICB2YXIgcmVzdWx0ID0gMDtcblxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICsrcmVzdWx0O1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZpbmRzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCxcbiAqIGJ1dCBvbmx5IGl0ZXJhdGVzIG92ZXIgY2hpbGRyZW4gdGhhdCBhcmUgXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKlxuICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQgd2l0aCB0aGUgaW5kZXggcmVmbGVjdGluZyB0aGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMuXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgQ29udGV4dCBmb3IgZnVuYy5cbiAqIEByZXR1cm5zIHthcnJheX0gb2YgY2hpbGRyZW4gdGhhdCBtZWV0IHRoZSBmdW5jIHJldHVybiBzdGF0ZW1lbnRcbiAqL1xuZnVuY3Rpb24gZmlsdGVyKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGluZGV4KyspKSB7XG4gICAgICByZXN1bHQucHVzaChjaGlsZCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmaW5kKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSB2b2lkIDA7XG5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGluZGV4KyspKSB7XG4gICAgICByZXN1bHQgPSBjaGlsZDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5KGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGluZGV4KyspKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHNvbWUoY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBpbmRleCsrKSkge1xuICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1hcDogbWFwLFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBjb3VudDogY291bnQsXG4gIGZpbmQ6IGZpbmQsXG4gIGZpbHRlcjogZmlsdGVyLFxuICBldmVyeTogZXZlcnksXG4gIHNvbWU6IHNvbWUsXG4gIHRvQXJyYXk6IHRvQXJyYXlcbn07IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcic7XG5cbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG5cbnZhciBpZFByb3BUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVkSWQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5nZW5lcmF0ZUNoaWxkSWQpIHtcbiAgICAgIGVycm9yID0gaWRQcm9wVHlwZS5hcHBseSh1bmRlZmluZWQsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcblxuICAgICAgaWYgKCFlcnJvciAmJiAhcHJvcHMuaWQpIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ0luIG9yZGVyIHRvIHByb3Blcmx5IGluaXRpYWxpemUgdGhlICcgKyBuYW1lICsgJyBpbiBhIHdheSB0aGF0IGlzIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcyAnICsgKCcoc3VjaCBhcyBzY3JlZW4gcmVhZGVycykgYW4gYGlkYCBvciBhIGBnZW5lcmF0ZUNoaWxkSWRgIHByb3AgdG8gJyArIG5hbWUgKyAnIGlzIHJlcXVpcmVkJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3I7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlZFJvbGVzKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJvbGVzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICByb2xlc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudCkge1xuICAgIHZhciBtaXNzaW5nID0gdm9pZCAwO1xuXG4gICAgcm9sZXMuZXZlcnkoZnVuY3Rpb24gKHJvbGUpIHtcbiAgICAgIGlmICghVmFsaWRDb21wb25lbnRDaGlsZHJlbi5zb21lKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkLnByb3BzLmJzUm9sZSA9PT0gcm9sZTtcbiAgICAgIH0pKSB7XG4gICAgICAgIG1pc3NpbmcgPSByb2xlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuXG4gICAgaWYgKG1pc3NpbmcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJyhjaGlsZHJlbikgJyArIGNvbXBvbmVudCArICcgLSBNaXNzaW5nIGEgcmVxdWlyZWQgY2hpbGQgd2l0aCBic1JvbGU6ICcgKyAobWlzc2luZyArICcuICcgKyBjb21wb25lbnQgKyAnIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgY2hpbGQgb2YgZWFjaCBvZiAnKSArICgndGhlIGZvbGxvd2luZyBic1JvbGVzOiAnICsgcm9sZXMuam9pbignLCAnKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4Y2x1c2l2ZVJvbGVzKCkge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHJvbGVzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICByb2xlc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudCkge1xuICAgIHZhciBkdXBsaWNhdGUgPSB2b2lkIDA7XG5cbiAgICByb2xlcy5ldmVyeShmdW5jdGlvbiAocm9sZSkge1xuICAgICAgdmFyIGNoaWxkcmVuV2l0aFJvbGUgPSBWYWxpZENvbXBvbmVudENoaWxkcmVuLmZpbHRlcihwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBjaGlsZC5wcm9wcy5ic1JvbGUgPT09IHJvbGU7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGNoaWxkcmVuV2l0aFJvbGUubGVuZ3RoID4gMSkge1xuICAgICAgICBkdXBsaWNhdGUgPSByb2xlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuXG4gICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignKGNoaWxkcmVuKSAnICsgY29tcG9uZW50ICsgJyAtIER1cGxpY2F0ZSBjaGlsZHJlbiBkZXRlY3RlZCBvZiBic1JvbGU6ICcgKyAoZHVwbGljYXRlICsgJy4gT25seSBvbmUgY2hpbGQgZWFjaCBhbGxvd2VkIHdpdGggdGhlIGZvbGxvd2luZyAnKSArICgnYnNSb2xlczogJyArIHJvbGVzLmpvaW4oJywgJykpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVuY29udHJvbGxhYmxlIGZyb20gJ3VuY29udHJvbGxhYmxlJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wc0FuZE9taXQgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG5pbXBvcnQgeyBnZW5lcmF0ZWRJZCB9IGZyb20gJy4vdXRpbHMvUHJvcFR5cGVzJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgYWNjb3JkaW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFdoZW4gYGFjY29yZGlvbmAgaXMgZW5hYmxlZCwgYGFjdGl2ZUtleWAgY29udHJvbHMgdGhlIHdoaWNoIGNoaWxkIGBQYW5lbGAgaXMgZXhwYW5kZWQuIGBhY3RpdmVLZXlgIHNob3VsZFxuICAgKiBtYXRjaCBhIGNoaWxkIFBhbmVsIGBldmVudEtleWAgcHJvcCBleGFjdGx5LlxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIG9uU2VsZWN0XG4gICAqL1xuICBhY3RpdmVLZXk6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBhIGNoaWxkIFBhbmVsIGNvbGxhcHNlIHN0YXRlIGNoYW5nZXMuIEl0J3MgY2FsbGVkIHdpdGggdGhlIG5leHQgZXhwYW5kZWQgYGFjdGl2ZUtleWBcbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBhY3RpdmVLZXlcbiAgICovXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQW4gSFRNTCByb2xlIGF0dHJpYnV0ZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0aGF0IHRha2VzIGFuIGV2ZW50S2V5IGFuZCB0eXBlIGFuZCByZXR1cm5zIGFcbiAgICogdW5pcXVlIGlkIGZvciBlYWNoIFBhbmVsIGhlYWRpbmcgYW5kIFBhbmVsIENvbGxhcHNlLiBUaGUgZnVuY3Rpb24gX211c3RfIGJlIGEgcHVyZSBmdW5jdGlvbixcbiAgICogbWVhbmluZyBpdCBzaG91bGQgYWx3YXlzIHJldHVybiB0aGUgX3NhbWVfIGlkIGZvciB0aGUgc2FtZSBzZXQgb2YgaW5wdXRzLiBUaGUgZGVmYXVsdFxuICAgKiB2YWx1ZSByZXF1aXJlcyB0aGF0IGFuIGBpZGAgdG8gYmUgc2V0IGZvciB0aGUgUGFuZWxHcm91cC5cbiAgICpcbiAgICogVGhlIGB0eXBlYCBhcmd1bWVudCB3aWxsIGVpdGhlciBiZSBgXCJib2R5XCJgIG9yIGBcImhlYWRpbmdcImAuXG4gICAqXG4gICAqIEBkZWZhdWx0VmFsdWUgKGV2ZW50S2V5LCB0eXBlKSA9PiBgJHt0aGlzLnByb3BzLmlkfS0ke3R5cGV9LSR7a2V5fWBcbiAgICovXG4gIGdlbmVyYXRlQ2hpbGRJZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEhUTUwgaWQgYXR0cmlidXRlLCByZXF1aXJlZCBpZiBubyBgZ2VuZXJhdGVDaGlsZElkYCBwcm9wXG4gICAqIGlzIHNwZWNpZmllZC5cbiAgICovXG4gIGlkOiBnZW5lcmF0ZWRJZCgnUGFuZWxHcm91cCcpXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhY2NvcmRpb246IGZhbHNlXG59O1xuXG52YXIgY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICRic19wYW5lbEdyb3VwOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGdldElkOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoZWFkZXJSb2xlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHBhbmVsUm9sZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVLZXk6IFByb3BUeXBlcy5hbnksXG4gICAgb25Ub2dnbGU6IFByb3BUeXBlcy5mdW5jXG4gIH0pXG59O1xuXG52YXIgUGFuZWxHcm91cCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQYW5lbEdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYW5lbEdyb3VwKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFuZWxHcm91cCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlU2VsZWN0ID0gZnVuY3Rpb24gKGtleSwgZXhwYW5kZWQsIGUpIHtcbiAgICAgIGlmIChleHBhbmRlZCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblNlbGVjdChrZXksIGUpO1xuICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcm9wcy5hY3RpdmVLZXkgPT09IGtleSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblNlbGVjdChudWxsLCBlKTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFBhbmVsR3JvdXAucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWN0aXZlS2V5ID0gX3Byb3BzLmFjdGl2ZUtleSxcbiAgICAgICAgYWNjb3JkaW9uID0gX3Byb3BzLmFjY29yZGlvbixcbiAgICAgICAgZ2VuZXJhdGVDaGlsZElkID0gX3Byb3BzLmdlbmVyYXRlQ2hpbGRJZCxcbiAgICAgICAgaWQgPSBfcHJvcHMuaWQ7XG5cbiAgICB2YXIgZ2V0SWQgPSBudWxsO1xuXG4gICAgaWYgKGFjY29yZGlvbikge1xuICAgICAgZ2V0SWQgPSBnZW5lcmF0ZUNoaWxkSWQgfHwgZnVuY3Rpb24gKGtleSwgdHlwZSkge1xuICAgICAgICByZXR1cm4gaWQgPyBpZCArICctJyArIHR5cGUgKyAnLScgKyBrZXkgOiBudWxsO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgJGJzX3BhbmVsR3JvdXA6IF9leHRlbmRzKHtcbiAgICAgICAgZ2V0SWQ6IGdldElkLFxuICAgICAgICBoZWFkZXJSb2xlOiAndGFiJyxcbiAgICAgICAgcGFuZWxSb2xlOiAndGFicGFuZWwnXG4gICAgICB9LCBhY2NvcmRpb24gJiYge1xuICAgICAgICBhY3RpdmVLZXk6IGFjdGl2ZUtleSxcbiAgICAgICAgb25Ub2dnbGU6IHRoaXMuaGFuZGxlU2VsZWN0XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUGFuZWxHcm91cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWNjb3JkaW9uID0gX3Byb3BzMi5hY2NvcmRpb24sXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsnYWNjb3JkaW9uJywgJ2NsYXNzTmFtZScsICdjaGlsZHJlbiddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQocHJvcHMsIFsnb25TZWxlY3QnLCAnYWN0aXZlS2V5J10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgaWYgKGFjY29yZGlvbikge1xuICAgICAgZWxlbWVudFByb3BzLnJvbGUgPSBlbGVtZW50UHJvcHMucm9sZSB8fCAndGFibGlzdCc7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pLFxuICAgICAgVmFsaWRDb21wb25lbnRDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgYnNTdHlsZTogY2hpbGQucHJvcHMuYnNTdHlsZSB8fCBic1Byb3BzLmJzU3R5bGVcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFBhbmVsR3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblBhbmVsR3JvdXAucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUGFuZWxHcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5QYW5lbEdyb3VwLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IHVuY29udHJvbGxhYmxlKGJzQ2xhc3MoJ3BhbmVsLWdyb3VwJywgUGFuZWxHcm91cCksIHtcbiAgYWN0aXZlS2V5OiAnb25TZWxlY3QnXG59KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBQYW5lbEdyb3VwIGZyb20gJy4vUGFuZWxHcm91cCc7XG5cbnZhciBBY2NvcmRpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQWNjb3JkaW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBY2NvcmRpb24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjY29yZGlvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIEFjY29yZGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgUGFuZWxHcm91cCxcbiAgICAgIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7IGFjY29yZGlvbjogdHJ1ZSB9KSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBBY2NvcmRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IEFjY29yZGlvbjsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBsYWJlbDogJ0Nsb3NlJ1xufTtcblxudmFyIENsb3NlQnV0dG9uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENsb3NlQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDbG9zZUJ1dHRvbigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2xvc2VCdXR0b24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBDbG9zZUJ1dHRvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBsYWJlbCA9IF9wcm9wcy5sYWJlbCxcbiAgICAgICAgb25DbGljayA9IF9wcm9wcy5vbkNsaWNrO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnYnV0dG9uJyxcbiAgICAgIHsgdHlwZTogJ2J1dHRvbicsIGNsYXNzTmFtZTogJ2Nsb3NlJywgb25DbGljazogb25DbGljayB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7ICdhcmlhLWhpZGRlbic6ICd0cnVlJyB9LFxuICAgICAgICAnXFx4RDcnXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ3NyLW9ubHknIH0sXG4gICAgICAgIGxhYmVsXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gQ2xvc2VCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNsb3NlQnV0dG9uLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNsb3NlQnV0dG9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgQ2xvc2VCdXR0b247IiwiaW1wb3J0IF9PYmplY3QkdmFsdWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvdmFsdWVzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYnNDbGFzcywgYnNTdHlsZXMsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcbmltcG9ydCBDbG9zZUJ1dHRvbiBmcm9tICcuL0Nsb3NlQnV0dG9uJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2xvc2VMYWJlbDogUHJvcFR5cGVzLnN0cmluZ1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY2xvc2VMYWJlbDogJ0Nsb3NlIGFsZXJ0J1xufTtcblxudmFyIEFsZXJ0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEFsZXJ0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBbGVydCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWxlcnQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBBbGVydC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25EaXNtaXNzID0gX3Byb3BzLm9uRGlzbWlzcyxcbiAgICAgICAgY2xvc2VMYWJlbCA9IF9wcm9wcy5jbG9zZUxhYmVsLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ29uRGlzbWlzcycsICdjbG9zZUxhYmVsJywgJ2NsYXNzTmFtZScsICdjaGlsZHJlbiddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgZGlzbWlzc2FibGUgPSAhIW9uRGlzbWlzcztcbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdkaXNtaXNzYWJsZScpXSA9IGRpc21pc3NhYmxlLCBfZXh0ZW5kczIpKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICAgIHJvbGU6ICdhbGVydCcsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgICB9KSxcbiAgICAgIGRpc21pc3NhYmxlICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvc2VCdXR0b24sIHsgb25DbGljazogb25EaXNtaXNzLCBsYWJlbDogY2xvc2VMYWJlbCB9KSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gQWxlcnQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkFsZXJ0LnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkFsZXJ0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNTdHlsZXMoX09iamVjdCR2YWx1ZXMoU3RhdGUpLCBTdGF0ZS5JTkZPLCBic0NsYXNzKCdhbGVydCcsIEFsZXJ0KSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbi8vIFRPRE86IGBwdWxsUmlnaHRgIGRvZXNuJ3QgYmVsb25nIGhlcmUuIFRoZXJlJ3Mgbm8gc3BlY2lhbCBoYW5kbGluZyBoZXJlLlxuXG52YXIgcHJvcFR5cGVzID0ge1xuICBwdWxsUmlnaHQ6IFByb3BUeXBlcy5ib29sXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwdWxsUmlnaHQ6IGZhbHNlXG59O1xuXG52YXIgQmFkZ2UgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQmFkZ2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJhZGdlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYWRnZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIEJhZGdlLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gaGFzQ29udGVudChjaGlsZHJlbikge1xuICAgIHZhciByZXN1bHQgPSBmYWxzZTtcblxuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZCB8fCBjaGlsZCA9PT0gMCkge1xuICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBCYWRnZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwdWxsUmlnaHQgPSBfcHJvcHMucHVsbFJpZ2h0LFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3B1bGxSaWdodCcsICdjbGFzc05hbWUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIHtcbiAgICAgICdwdWxsLXJpZ2h0JzogcHVsbFJpZ2h0LFxuXG4gICAgICAvLyBIYWNrIGZvciBjb2xsYXBzaW5nIG9uIElFOC5cbiAgICAgIGhpZGRlbjogIXRoaXMuaGFzQ29udGVudChjaGlsZHJlbilcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSB9KSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gQmFkZ2U7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJhZGdlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkJhZGdlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnYmFkZ2UnLCBCYWRnZSk7IiwiLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLmZpbHRlcihmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmICE9IG51bGw7XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBmKSB7XG4gICAgaWYgKHR5cGVvZiBmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQXJndW1lbnQgVHlwZSwgbXVzdCBvbmx5IHByb3ZpZGUgZnVuY3Rpb25zLCB1bmRlZmluZWQsIG9yIG51bGwuJyk7XG4gICAgfVxuXG4gICAgaWYgKGFjYyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGY7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgZi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuXG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIHRoaXMgaXMgc29ydCBvZiBzaWxseSBidXQgbmVlZGVkIGZvciBCdXR0b25cbiAgICovXG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdhJ1xufTtcblxuZnVuY3Rpb24gaXNUcml2aWFsSHJlZihocmVmKSB7XG4gIHJldHVybiAhaHJlZiB8fCBocmVmLnRyaW0oKSA9PT0gJyMnO1xufVxuXG4vKipcbiAqIFRoZXJlIGFyZSBzaXR1YXRpb25zIGR1ZSB0byBicm93c2VyIHF1aXJrcyBvciBCb290c3RyYXAgQ1NTIHdoZXJlXG4gKiBhbiBhbmNob3IgdGFnIGlzIG5lZWRlZCwgd2hlbiBzZW1hbnRpY2FsbHkgYSBidXR0b24gdGFnIGlzIHRoZVxuICogYmV0dGVyIGNob2ljZS4gU2FmZUFuY2hvciBlbnN1cmVzIHRoYXQgd2hlbiBhbiBhbmNob3IgaXMgdXNlZCBsaWtlIGFcbiAqIGJ1dHRvbiBpdHMgYWNjZXNzaWJsZS4gSXQgYWxzbyBlbXVsYXRlcyBpbnB1dCBgZGlzYWJsZWRgIGJlaGF2aW9yIGZvclxuICogbGlua3MsIHdoaWNoIGlzIHVzdWFsbHkgZGVzaXJhYmxlIGZvciBCdXR0b25zLCBOYXZJdGVtcywgTWVudUl0ZW1zLCBldGMuXG4gKi9cblxudmFyIFNhZmVBbmNob3IgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2FmZUFuY2hvciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2FmZUFuY2hvcihwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTYWZlQW5jaG9yKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuaGFuZGxlQ2xpY2sgPSBfdGhpcy5oYW5kbGVDbGljay5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5oYW5kbGVLZXlEb3duID0gX3RoaXMuaGFuZGxlS2V5RG93bi5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBTYWZlQW5jaG9yLnByb3RvdHlwZS5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICBocmVmID0gX3Byb3BzLmhyZWYsXG4gICAgICAgIG9uQ2xpY2sgPSBfcHJvcHMub25DbGljaztcblxuXG4gICAgaWYgKGRpc2FibGVkIHx8IGlzVHJpdmlhbEhyZWYoaHJlZikpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIFNhZmVBbmNob3IucHJvdG90eXBlLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5oYW5kbGVDbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIFNhZmVBbmNob3IucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wczIuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGRpc2FibGVkID0gX3Byb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgb25LZXlEb3duID0gX3Byb3BzMi5vbktleURvd24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsnY29tcG9uZW50Q2xhc3MnLCAnZGlzYWJsZWQnLCAnb25LZXlEb3duJ10pO1xuXG4gICAgaWYgKGlzVHJpdmlhbEhyZWYocHJvcHMuaHJlZikpIHtcbiAgICAgIHByb3BzLnJvbGUgPSBwcm9wcy5yb2xlIHx8ICdidXR0b24nO1xuICAgICAgLy8gd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgYSBocmVmIGF0dHJpYnV0ZSBvbiB0aGUgbm9kZVxuICAgICAgLy8gb3RoZXJ3aXNlLCB0aGUgY3Vyc29yIGluY29ycmVjdGx5IHN0eWxlZCAoZXhjZXB0IHdpdGggcm9sZT0nYnV0dG9uJylcbiAgICAgIHByb3BzLmhyZWYgPSBwcm9wcy5ocmVmIHx8ICcjJztcbiAgICB9XG5cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHByb3BzLnRhYkluZGV4ID0gLTE7XG4gICAgICBwcm9wcy5zdHlsZSA9IF9leHRlbmRzKHsgcG9pbnRlckV2ZW50czogJ25vbmUnIH0sIHByb3BzLnN0eWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgIG9uS2V5RG93bjogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlS2V5RG93biwgb25LZXlEb3duKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU2FmZUFuY2hvcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU2FmZUFuY2hvci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5TYWZlQW5jaG9yLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgU2FmZUFuY2hvcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgcmVuZGVycyBgc3BhbmAgaW5zdGVhZCBvZiBgYWBcbiAgICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBgaHJlZmAgYXR0cmlidXRlIGZvciB0aGUgaW5uZXIgYGFgIGVsZW1lbnRcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBgdGl0bGVgIGF0dHJpYnV0ZSBmb3IgdGhlIGlubmVyIGBhYCBlbGVtZW50XG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBgdGFyZ2V0YCBhdHRyaWJ1dGUgZm9yIHRoZSBpbm5lciBgYWAgZWxlbWVudFxuICAgKi9cbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlXG59O1xuXG52YXIgQnJlYWRjcnVtYkl0ZW0gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnJlYWRjcnVtYkl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyZWFkY3J1bWJJdGVtKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcmVhZGNydW1iSXRlbSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIEJyZWFkY3J1bWJJdGVtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGl2ZSA9IF9wcm9wcy5hY3RpdmUsXG4gICAgICAgIGhyZWYgPSBfcHJvcHMuaHJlZixcbiAgICAgICAgdGl0bGUgPSBfcHJvcHMudGl0bGUsXG4gICAgICAgIHRhcmdldCA9IF9wcm9wcy50YXJnZXQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydhY3RpdmUnLCAnaHJlZicsICd0aXRsZScsICd0YXJnZXQnLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgLy8gRG9uJ3QgdHJ5IHRvIHJlbmRlciB0aGVzZSBwcm9wcyBvbiBub24tYWN0aXZlIDxzcGFuPi5cblxuXG4gICAgdmFyIGxpbmtQcm9wcyA9IHsgaHJlZjogaHJlZiwgdGl0bGU6IHRpdGxlLCB0YXJnZXQ6IHRhcmdldCB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnbGknLFxuICAgICAgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCB7IGFjdGl2ZTogYWN0aXZlIH0pIH0sXG4gICAgICBhY3RpdmUgPyBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgcHJvcHMpIDogUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIGxpbmtQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gQnJlYWRjcnVtYkl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyZWFkY3J1bWJJdGVtLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkJyZWFkY3J1bWJJdGVtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgQnJlYWRjcnVtYkl0ZW07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBCcmVhZGNydW1iSXRlbSBmcm9tICcuL0JyZWFkY3J1bWJJdGVtJztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIEJyZWFkY3J1bWIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnJlYWRjcnVtYiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJlYWRjcnVtYigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJlYWRjcnVtYik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIEJyZWFkY3J1bWIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ29sJywgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgcm9sZTogJ25hdmlnYXRpb24nLFxuICAgICAgJ2FyaWEtbGFiZWwnOiAnYnJlYWRjcnVtYnMnLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyZWFkY3J1bWI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyZWFkY3J1bWIuSXRlbSA9IEJyZWFkY3J1bWJJdGVtO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdicmVhZGNydW1iJywgQnJlYWRjcnVtYik7IiwiaW1wb3J0IF9PYmplY3QkdmFsdWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvdmFsdWVzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGJzU2l6ZXMsIGJzU3R5bGVzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCB7IFNpemUsIFN0YXRlLCBTdHlsZSB9IGZyb20gJy4vdXRpbHMvU3R5bGVDb25maWcnO1xuXG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGJsb2NrOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZSxcbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIERlZmluZXMgSFRNTCBidXR0b24gdHlwZSBhdHRyaWJ1dGVcbiAgICogQGRlZmF1bHRWYWx1ZSAnYnV0dG9uJ1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnYnV0dG9uJywgJ3Jlc2V0JywgJ3N1Ym1pdCddKVxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlOiBmYWxzZSxcbiAgYmxvY2s6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5cbnZhciBCdXR0b24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCdXR0b24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1dHRvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIEJ1dHRvbi5wcm90b3R5cGUucmVuZGVyQW5jaG9yID0gZnVuY3Rpb24gcmVuZGVyQW5jaG9yKGVsZW1lbnRQcm9wcywgY2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2FmZUFuY2hvciwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgZWxlbWVudFByb3BzLmRpc2FibGVkICYmICdkaXNhYmxlZCcpXG4gICAgfSkpO1xuICB9O1xuXG4gIEJ1dHRvbi5wcm90b3R5cGUucmVuZGVyQnV0dG9uID0gZnVuY3Rpb24gcmVuZGVyQnV0dG9uKF9yZWYsIGNsYXNzTmFtZSkge1xuICAgIHZhciBjb21wb25lbnRDbGFzcyA9IF9yZWYuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ2NvbXBvbmVudENsYXNzJ10pO1xuXG4gICAgdmFyIENvbXBvbmVudCA9IGNvbXBvbmVudENsYXNzIHx8ICdidXR0b24nO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICB0eXBlOiBlbGVtZW50UHJvcHMudHlwZSB8fCAnYnV0dG9uJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgfSkpO1xuICB9O1xuXG4gIEJ1dHRvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWN0aXZlID0gX3Byb3BzLmFjdGl2ZSxcbiAgICAgICAgYmxvY2sgPSBfcHJvcHMuYmxvY2ssXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydhY3RpdmUnLCAnYmxvY2snLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge1xuICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICB9LCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdibG9jaycpXSA9IGJsb2NrLCBfZXh0ZW5kczIpKTtcbiAgICB2YXIgZnVsbENsYXNzTmFtZSA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKTtcblxuICAgIGlmIChlbGVtZW50UHJvcHMuaHJlZikge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQW5jaG9yKGVsZW1lbnRQcm9wcywgZnVsbENsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyQnV0dG9uKGVsZW1lbnRQcm9wcywgZnVsbENsYXNzTmFtZSk7XG4gIH07XG5cbiAgcmV0dXJuIEJ1dHRvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQnV0dG9uLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2J0bicsIGJzU2l6ZXMoW1NpemUuTEFSR0UsIFNpemUuU01BTEwsIFNpemUuWFNNQUxMXSwgYnNTdHlsZXMoW10uY29uY2F0KF9PYmplY3QkdmFsdWVzKFN0YXRlKSwgW1N0eWxlLkRFRkFVTFQsIFN0eWxlLlBSSU1BUlksIFN0eWxlLkxJTktdKSwgU3R5bGUuREVGQVVMVCwgQnV0dG9uKSkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBhbGwgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvYWxsJztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgdmVydGljYWw6IFByb3BUeXBlcy5ib29sLFxuICBqdXN0aWZpZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNwbGF5IGJsb2NrIGJ1dHRvbnM7IG9ubHkgdXNlZnVsIHdoZW4gdXNlZCB3aXRoIHRoZSBcInZlcnRpY2FsXCIgcHJvcC5cbiAgICogQHR5cGUge2Jvb2x9XG4gICAqL1xuICBibG9jazogYWxsKFByb3BUeXBlcy5ib29sLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBibG9jayA9IF9yZWYuYmxvY2ssXG4gICAgICAgIHZlcnRpY2FsID0gX3JlZi52ZXJ0aWNhbDtcbiAgICByZXR1cm4gYmxvY2sgJiYgIXZlcnRpY2FsID8gbmV3IEVycm9yKCdgYmxvY2tgIHJlcXVpcmVzIGB2ZXJ0aWNhbGAgdG8gYmUgc2V0IHRvIGhhdmUgYW55IGVmZmVjdCcpIDogbnVsbDtcbiAgfSlcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGJsb2NrOiBmYWxzZSxcbiAganVzdGlmaWVkOiBmYWxzZSxcbiAgdmVydGljYWw6IGZhbHNlXG59O1xuXG52YXIgQnV0dG9uR3JvdXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnV0dG9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJ1dHRvbkdyb3VwKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b25Hcm91cCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIEJ1dHRvbkdyb3VwLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBibG9jayA9IF9wcm9wcy5ibG9jayxcbiAgICAgICAganVzdGlmaWVkID0gX3Byb3BzLmp1c3RpZmllZCxcbiAgICAgICAgdmVydGljYWwgPSBfcHJvcHMudmVydGljYWwsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydibG9jaycsICdqdXN0aWZpZWQnLCAndmVydGljYWwnLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcyldID0gIXZlcnRpY2FsLCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICd2ZXJ0aWNhbCcpXSA9IHZlcnRpY2FsLCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdqdXN0aWZpZWQnKV0gPSBqdXN0aWZpZWQsIF9leHRlbmRzMltwcmVmaXgoQnV0dG9uLmRlZmF1bHRQcm9wcywgJ2Jsb2NrJyldID0gYmxvY2ssIF9leHRlbmRzMikpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSkpO1xuICB9O1xuXG4gIHJldHVybiBCdXR0b25Hcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQnV0dG9uR3JvdXAucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQnV0dG9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdidG4tZ3JvdXAnLCBCdXR0b25Hcm91cCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIEJ1dHRvblRvb2xiYXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnV0dG9uVG9vbGJhciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uVG9vbGJhcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uVG9vbGJhcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIEJ1dHRvblRvb2xiYXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJvbGU6ICd0b29sYmFyJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBCdXR0b25Ub29sYmFyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdidG4tdG9vbGJhcicsIEJ1dHRvblRvb2xiYXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2J1xufTtcblxudmFyIENhcm91c2VsQ2FwdGlvbiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDYXJvdXNlbENhcHRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENhcm91c2VsQ2FwdGlvbigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2Fyb3VzZWxDYXB0aW9uKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgQ2Fyb3VzZWxDYXB0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NvbXBvbmVudENsYXNzJywgJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ2Fyb3VzZWxDYXB0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DYXJvdXNlbENhcHRpb24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ2Fyb3VzZWxDYXB0aW9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnY2Fyb3VzZWwtY2FwdGlvbicsIENhcm91c2VsQ2FwdGlvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgdHJhbnNpdGlvbiBmcm9tICdkb20taGVscGVycy90cmFuc2l0aW9uJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydwcmV2JywgJ25leHQnXSksXG4gIG9uQW5pbWF0ZU91dEVuZDogUHJvcFR5cGVzLmZ1bmMsXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGFuaW1hdGVJbjogUHJvcFR5cGVzLmJvb2wsXG4gIGFuaW1hdGVPdXQ6IFByb3BUeXBlcy5ib29sLFxuICBpbmRleDogUHJvcFR5cGVzLm51bWJlclxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlOiBmYWxzZSxcbiAgYW5pbWF0ZUluOiBmYWxzZSxcbiAgYW5pbWF0ZU91dDogZmFsc2Vcbn07XG5cbnZhciBDYXJvdXNlbEl0ZW0gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2Fyb3VzZWxJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDYXJvdXNlbEl0ZW0ocHJvcHMsIGNvbnRleHQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2Fyb3VzZWxJdGVtKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuaGFuZGxlQW5pbWF0ZU91dEVuZCA9IF90aGlzLmhhbmRsZUFuaW1hdGVPdXRFbmQuYmluZChfdGhpcyk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRpcmVjdGlvbjogbnVsbFxuICAgIH07XG5cbiAgICBfdGhpcy5pc1VubW91bnRlZCA9IGZhbHNlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIENhcm91c2VsSXRlbS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYWN0aXZlICE9PSBuZXh0UHJvcHMuYWN0aXZlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZGlyZWN0aW9uOiBudWxsIH0pO1xuICAgIH1cbiAgfTtcblxuICBDYXJvdXNlbEl0ZW0ucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0aGlzLnByb3BzLmFjdGl2ZTtcblxuICAgIHZhciBwcmV2QWN0aXZlID0gcHJldlByb3BzLmFjdGl2ZTtcblxuICAgIGlmICghYWN0aXZlICYmIHByZXZBY3RpdmUpIHtcbiAgICAgIHRyYW5zaXRpb24uZW5kKFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpLCB0aGlzLmhhbmRsZUFuaW1hdGVPdXRFbmQpO1xuICAgIH1cblxuICAgIGlmIChhY3RpdmUgIT09IHByZXZBY3RpdmUpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLnN0YXJ0QW5pbWF0aW9uKCk7XG4gICAgICB9LCAyMCk7XG4gICAgfVxuICB9O1xuXG4gIENhcm91c2VsSXRlbS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmlzVW5tb3VudGVkID0gdHJ1ZTtcbiAgfTtcblxuICBDYXJvdXNlbEl0ZW0ucHJvdG90eXBlLmhhbmRsZUFuaW1hdGVPdXRFbmQgPSBmdW5jdGlvbiBoYW5kbGVBbmltYXRlT3V0RW5kKCkge1xuICAgIGlmICh0aGlzLmlzVW5tb3VudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMub25BbmltYXRlT3V0RW5kKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQW5pbWF0ZU91dEVuZCh0aGlzLnByb3BzLmluZGV4KTtcbiAgICB9XG4gIH07XG5cbiAgQ2Fyb3VzZWxJdGVtLnByb3RvdHlwZS5zdGFydEFuaW1hdGlvbiA9IGZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKCkge1xuICAgIGlmICh0aGlzLmlzVW5tb3VudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkaXJlY3Rpb246IHRoaXMucHJvcHMuZGlyZWN0aW9uID09PSAncHJldicgPyAncmlnaHQnIDogJ2xlZnQnXG4gICAgfSk7XG4gIH07XG5cbiAgQ2Fyb3VzZWxJdGVtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpcmVjdGlvbiA9IF9wcm9wcy5kaXJlY3Rpb24sXG4gICAgICAgIGFjdGl2ZSA9IF9wcm9wcy5hY3RpdmUsXG4gICAgICAgIGFuaW1hdGVJbiA9IF9wcm9wcy5hbmltYXRlSW4sXG4gICAgICAgIGFuaW1hdGVPdXQgPSBfcHJvcHMuYW5pbWF0ZU91dCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2RpcmVjdGlvbicsICdhY3RpdmUnLCAnYW5pbWF0ZUluJywgJ2FuaW1hdGVPdXQnLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgZGVsZXRlIHByb3BzLm9uQW5pbWF0ZU91dEVuZDtcbiAgICBkZWxldGUgcHJvcHMuaW5kZXg7XG5cbiAgICB2YXIgY2xhc3NlcyA9IHtcbiAgICAgIGl0ZW06IHRydWUsXG4gICAgICBhY3RpdmU6IGFjdGl2ZSAmJiAhYW5pbWF0ZUluIHx8IGFuaW1hdGVPdXRcbiAgICB9O1xuICAgIGlmIChkaXJlY3Rpb24gJiYgYWN0aXZlICYmIGFuaW1hdGVJbikge1xuICAgICAgY2xhc3Nlc1tkaXJlY3Rpb25dID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuZGlyZWN0aW9uICYmIChhbmltYXRlSW4gfHwgYW5pbWF0ZU91dCkpIHtcbiAgICAgIGNsYXNzZXNbdGhpcy5zdGF0ZS5kaXJlY3Rpb25dID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgX2V4dGVuZHMoe30sIHByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ2Fyb3VzZWxJdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DYXJvdXNlbEl0ZW0ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ2Fyb3VzZWxJdGVtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgQ2Fyb3VzZWxJdGVtOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBbiBpY29uIG5hbWUgd2l0aG91dCBcImdseXBoaWNvbi1cIiBwcmVmaXguIFNlZSBlLmcuIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2NvbXBvbmVudHMvI2dseXBoaWNvbnNcbiAgICovXG4gIGdseXBoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbn07XG5cbnZhciBHbHlwaGljb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoR2x5cGhpY29uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBHbHlwaGljb24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdseXBoaWNvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIEdseXBoaWNvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZ2x5cGggPSBfcHJvcHMuZ2x5cGgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydnbHlwaCcsICdjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzLCBnbHlwaCldID0gdHJ1ZSwgX2V4dGVuZHMyKSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSkpO1xuICB9O1xuXG4gIHJldHVybiBHbHlwaGljb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkdseXBoaWNvbi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2dseXBoaWNvbicsIEdseXBoaWNvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgQ2Fyb3VzZWxDYXB0aW9uIGZyb20gJy4vQ2Fyb3VzZWxDYXB0aW9uJztcbmltcG9ydCBDYXJvdXNlbEl0ZW0gZnJvbSAnLi9DYXJvdXNlbEl0ZW0nO1xuaW1wb3J0IEdseXBoaWNvbiBmcm9tICcuL0dseXBoaWNvbic7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzQW5kT21pdCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4gZnJvbSAnLi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuJztcblxuLy8gVE9ETzogYHNsaWRlYCBzaG91bGQgYmUgYGFuaW1hdGVgLlxuXG4vLyBUT0RPOiBVc2UgdW5jb250cm9sbGFibGUuXG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIHNsaWRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgaW5kaWNhdG9yczogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgYW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgYmV0d2VlbiBhdXRvbWF0aWNhbGx5IGN5Y2xpbmcgYW4gaXRlbS5cbiAgICogSWYgYG51bGxgLCBjYXJvdXNlbCB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IGN5Y2xlLlxuICAgKi9cbiAgaW50ZXJ2YWw6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNvbnRyb2xzOiBQcm9wVHlwZXMuYm9vbCxcbiAgcGF1c2VPbkhvdmVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgd3JhcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBhY3RpdmUgaXRlbSBjaGFuZ2VzLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAoZXZlbnRLZXk6IGFueSwgP2V2ZW50OiBPYmplY3QpID0+IGFueVxuICAgKiBgYGBcbiAgICpcbiAgICogSWYgdGhpcyBjYWxsYmFjayB0YWtlcyB0d28gb3IgbW9yZSBhcmd1bWVudHMsIHRoZSBzZWNvbmQgYXJndW1lbnQgd2lsbFxuICAgKiBiZSBhIHBlcnNpc3RlZCBldmVudCBvYmplY3Qgd2l0aCBgZGlyZWN0aW9uYCBzZXQgdG8gdGhlIGRpcmVjdGlvbiBvZiB0aGVcbiAgICogdHJhbnNpdGlvbi5cbiAgICovXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TbGlkZUVuZDogUHJvcFR5cGVzLmZ1bmMsXG4gIGFjdGl2ZUluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBkZWZhdWx0QWN0aXZlSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsncHJldicsICduZXh0J10pLFxuICBwcmV2SWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBMYWJlbCBzaG93biB0byBzY3JlZW4gcmVhZGVycyBvbmx5LCBjYW4gYmUgdXNlZCB0byBzaG93IHRoZSBwcmV2aW91cyBlbGVtZW50XG4gICAqIGluIHRoZSBjYXJvdXNlbC5cbiAgICogU2V0IHRvIG51bGwgdG8gZGVhY3RpdmF0ZS5cbiAgICovXG4gIHByZXZMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbmV4dEljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogTGFiZWwgc2hvd24gdG8gc2NyZWVuIHJlYWRlcnMgb25seSwgY2FuIGJlIHVzZWQgdG8gc2hvdyB0aGUgbmV4dCBlbGVtZW50XG4gICAqIGluIHRoZSBjYXJvdXNlbC5cbiAgICogU2V0IHRvIG51bGwgdG8gZGVhY3RpdmF0ZS5cbiAgICovXG4gIG5leHRMYWJlbDogUHJvcFR5cGVzLnN0cmluZ1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgc2xpZGU6IHRydWUsXG4gIGludGVydmFsOiA1MDAwLFxuICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gIHdyYXA6IHRydWUsXG4gIGluZGljYXRvcnM6IHRydWUsXG4gIGNvbnRyb2xzOiB0cnVlLFxuICBwcmV2SWNvbjogUmVhY3QuY3JlYXRlRWxlbWVudChHbHlwaGljb24sIHsgZ2x5cGg6ICdjaGV2cm9uLWxlZnQnIH0pLFxuICBwcmV2TGFiZWw6ICdQcmV2aW91cycsXG4gIG5leHRJY29uOiBSZWFjdC5jcmVhdGVFbGVtZW50KEdseXBoaWNvbiwgeyBnbHlwaDogJ2NoZXZyb24tcmlnaHQnIH0pLFxuICBuZXh0TGFiZWw6ICdOZXh0J1xufTtcblxudmFyIENhcm91c2VsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENhcm91c2VsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDYXJvdXNlbChwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYXJvdXNlbCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlT3ZlciA9IF90aGlzLmhhbmRsZU1vdXNlT3Zlci5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5oYW5kbGVNb3VzZU91dCA9IF90aGlzLmhhbmRsZU1vdXNlT3V0LmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZVByZXYgPSBfdGhpcy5oYW5kbGVQcmV2LmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZU5leHQgPSBfdGhpcy5oYW5kbGVOZXh0LmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZUl0ZW1BbmltYXRlT3V0RW5kID0gX3RoaXMuaGFuZGxlSXRlbUFuaW1hdGVPdXRFbmQuYmluZChfdGhpcyk7XG5cbiAgICB2YXIgZGVmYXVsdEFjdGl2ZUluZGV4ID0gcHJvcHMuZGVmYXVsdEFjdGl2ZUluZGV4O1xuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFjdGl2ZUluZGV4OiBkZWZhdWx0QWN0aXZlSW5kZXggIT0gbnVsbCA/IGRlZmF1bHRBY3RpdmVJbmRleCA6IDAsXG4gICAgICBwcmV2aW91c0FjdGl2ZUluZGV4OiBudWxsLFxuICAgICAgZGlyZWN0aW9uOiBudWxsXG4gICAgfTtcblxuICAgIF90aGlzLmlzVW5tb3VudGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy53YWl0Rm9yTmV4dCgpO1xuICB9O1xuXG4gIENhcm91c2VsLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEFjdGl2ZUluZGV4KCk7XG5cbiAgICBpZiAobmV4dFByb3BzLmFjdGl2ZUluZGV4ICE9IG51bGwgJiYgbmV4dFByb3BzLmFjdGl2ZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwcmV2aW91c0FjdGl2ZUluZGV4OiBhY3RpdmVJbmRleCxcbiAgICAgICAgZGlyZWN0aW9uOiBuZXh0UHJvcHMuZGlyZWN0aW9uICE9IG51bGwgPyBuZXh0UHJvcHMuZGlyZWN0aW9uIDogdGhpcy5nZXREaXJlY3Rpb24oYWN0aXZlSW5kZXgsIG5leHRQcm9wcy5hY3RpdmVJbmRleClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChuZXh0UHJvcHMuYWN0aXZlSW5kZXggPT0gbnVsbCAmJiB0aGlzLnN0YXRlLmFjdGl2ZUluZGV4ID49IG5leHRQcm9wcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgICAgcHJldmlvdXNBY3RpdmVJbmRleDogbnVsbCxcbiAgICAgICAgZGlyZWN0aW9uOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgdGhpcy5pc1VubW91bnRlZCA9IHRydWU7XG4gIH07XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmdldEFjdGl2ZUluZGV4ID0gZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZXgoKSB7XG4gICAgdmFyIGFjdGl2ZUluZGV4UHJvcCA9IHRoaXMucHJvcHMuYWN0aXZlSW5kZXg7XG4gICAgcmV0dXJuIGFjdGl2ZUluZGV4UHJvcCAhPSBudWxsID8gYWN0aXZlSW5kZXhQcm9wIDogdGhpcy5zdGF0ZS5hY3RpdmVJbmRleDtcbiAgfTtcblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0RGlyZWN0aW9uID0gZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKHByZXZJbmRleCwgaW5kZXgpIHtcbiAgICBpZiAocHJldkluZGV4ID09PSBpbmRleCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZJbmRleCA+IGluZGV4ID8gJ3ByZXYnIDogJ25leHQnO1xuICB9O1xuXG4gIENhcm91c2VsLnByb3RvdHlwZS5oYW5kbGVJdGVtQW5pbWF0ZU91dEVuZCA9IGZ1bmN0aW9uIGhhbmRsZUl0ZW1BbmltYXRlT3V0RW5kKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBwcmV2aW91c0FjdGl2ZUluZGV4OiBudWxsLFxuICAgICAgZGlyZWN0aW9uOiBudWxsXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLndhaXRGb3JOZXh0KCk7XG5cbiAgICAgIGlmIChfdGhpczIucHJvcHMub25TbGlkZUVuZCkge1xuICAgICAgICBfdGhpczIucHJvcHMub25TbGlkZUVuZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIENhcm91c2VsLnByb3RvdHlwZS5oYW5kbGVNb3VzZU91dCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlT3V0KCkge1xuICAgIGlmICh0aGlzLmlzUGF1c2VkKSB7XG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9XG4gIH07XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmhhbmRsZU1vdXNlT3ZlciA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlT3ZlcigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5wYXVzZU9uSG92ZXIpIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gIH07XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmhhbmRsZU5leHQgPSBmdW5jdGlvbiBoYW5kbGVOZXh0KGUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdldEFjdGl2ZUluZGV4KCkgKyAxO1xuICAgIHZhciBjb3VudCA9IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICBpZiAoaW5kZXggPiBjb3VudCAtIDEpIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy53cmFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gMDtcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdChpbmRleCwgZSwgJ25leHQnKTtcbiAgfTtcblxuICBDYXJvdXNlbC5wcm90b3R5cGUuaGFuZGxlUHJldiA9IGZ1bmN0aW9uIGhhbmRsZVByZXYoZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0QWN0aXZlSW5kZXgoKSAtIDE7XG5cbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMud3JhcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpbmRleCA9IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikgLSAxO1xuICAgIH1cblxuICAgIHRoaXMuc2VsZWN0KGluZGV4LCBlLCAncHJldicpO1xuICB9O1xuXG4gIC8vIFRoaXMgbWlnaHQgYmUgYSBwdWJsaWMgQVBJLlxuXG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gIH07XG5cbiAgLy8gVGhpcyBtaWdodCBiZSBhIHB1YmxpYyBBUEkuXG5cblxuICBDYXJvdXNlbC5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMud2FpdEZvck5leHQoKTtcbiAgfTtcblxuICBDYXJvdXNlbC5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gc2VsZWN0KGluZGV4LCBlLCBkaXJlY3Rpb24pIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcblxuICAgIC8vIFRPRE86IElzIHRoaXMgbmVjZXNzYXJ5PyBTZWVtcyBsaWtlIHRoZSBvbmx5IHJpc2sgaXMgaWYgdGhlIGNvbXBvbmVudFxuICAgIC8vIHVubW91bnRzIHdoaWxlIGhhbmRsZUl0ZW1BbmltYXRlT3V0RW5kIGZpcmVzLlxuICAgIGlmICh0aGlzLmlzVW5tb3VudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzQWN0aXZlSW5kZXggPSB0aGlzLnByb3BzLnNsaWRlID8gdGhpcy5nZXRBY3RpdmVJbmRleCgpIDogbnVsbDtcbiAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgdGhpcy5nZXREaXJlY3Rpb24ocHJldmlvdXNBY3RpdmVJbmRleCwgaW5kZXgpO1xuXG4gICAgdmFyIG9uU2VsZWN0ID0gdGhpcy5wcm9wcy5vblNlbGVjdDtcblxuXG4gICAgaWYgKG9uU2VsZWN0KSB7XG4gICAgICBpZiAob25TZWxlY3QubGVuZ3RoID4gMSkge1xuICAgICAgICAvLyBSZWFjdCBTeW50aGV0aWNFdmVudHMgYXJlIHBvb2xlZCwgc28gd2UgbmVlZCB0byByZW1vdmUgdGhpcyBldmVudFxuICAgICAgICAvLyBmcm9tIHRoZSBwb29sIHRvIGFkZCBhIGN1c3RvbSBwcm9wZXJ0eS4gVG8gYXZvaWQgdW5uZWNlc3NhcmlseVxuICAgICAgICAvLyByZW1vdmluZyBvYmplY3RzIGZyb20gdGhlIHBvb2wsIG9ubHkgZG8gdGhpcyB3aGVuIHRoZSBsaXN0ZW5lclxuICAgICAgICAvLyBhY3R1YWxseSB3YW50cyB0aGUgZXZlbnQuXG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgZS5wZXJzaXN0KCk7XG4gICAgICAgICAgZS5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZSA9IHsgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uU2VsZWN0KGluZGV4LCBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uU2VsZWN0KGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5hY3RpdmVJbmRleCA9PSBudWxsICYmIGluZGV4ICE9PSBwcmV2aW91c0FjdGl2ZUluZGV4KSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5wcmV2aW91c0FjdGl2ZUluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgLy8gSWYgY3VycmVudGx5IGFuaW1hdGluZyBkb24ndCBhY3RpdmF0ZSB0aGUgbmV3IGluZGV4LlxuICAgICAgICAvLyBUT0RPOiBsb29rIGludG8gcXVldWVpbmcgdGhpcyBjYW5jZWxlZCBjYWxsIGFuZFxuICAgICAgICAvLyBhbmltYXRpbmcgYWZ0ZXIgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIGhhcyBlbmRlZC5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYWN0aXZlSW5kZXg6IGluZGV4LFxuICAgICAgICBwcmV2aW91c0FjdGl2ZUluZGV4OiBwcmV2aW91c0FjdGl2ZUluZGV4LFxuICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIENhcm91c2VsLnByb3RvdHlwZS53YWl0Rm9yTmV4dCA9IGZ1bmN0aW9uIHdhaXRGb3JOZXh0KCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzbGlkZSA9IF9wcm9wcy5zbGlkZSxcbiAgICAgICAgaW50ZXJ2YWwgPSBfcHJvcHMuaW50ZXJ2YWwsXG4gICAgICAgIGFjdGl2ZUluZGV4UHJvcCA9IF9wcm9wcy5hY3RpdmVJbmRleDtcblxuXG4gICAgaWYgKCF0aGlzLmlzUGF1c2VkICYmIHNsaWRlICYmIGludGVydmFsICYmIGFjdGl2ZUluZGV4UHJvcCA9PSBudWxsKSB7XG4gICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuaGFuZGxlTmV4dCwgaW50ZXJ2YWwpO1xuICAgIH1cbiAgfTtcblxuICBDYXJvdXNlbC5wcm90b3R5cGUucmVuZGVyQ29udHJvbHMgPSBmdW5jdGlvbiByZW5kZXJDb250cm9scyhwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIHdyYXAgPSBwcm9wZXJ0aWVzLndyYXAsXG4gICAgICAgIGNoaWxkcmVuID0gcHJvcGVydGllcy5jaGlsZHJlbixcbiAgICAgICAgYWN0aXZlSW5kZXggPSBwcm9wZXJ0aWVzLmFjdGl2ZUluZGV4LFxuICAgICAgICBwcmV2SWNvbiA9IHByb3BlcnRpZXMucHJldkljb24sXG4gICAgICAgIG5leHRJY29uID0gcHJvcGVydGllcy5uZXh0SWNvbixcbiAgICAgICAgYnNQcm9wcyA9IHByb3BlcnRpZXMuYnNQcm9wcyxcbiAgICAgICAgcHJldkxhYmVsID0gcHJvcGVydGllcy5wcmV2TGFiZWwsXG4gICAgICAgIG5leHRMYWJlbCA9IHByb3BlcnRpZXMubmV4dExhYmVsO1xuXG4gICAgdmFyIGNvbnRyb2xDbGFzc05hbWUgPSBwcmVmaXgoYnNQcm9wcywgJ2NvbnRyb2wnKTtcbiAgICB2YXIgY291bnQgPSBWYWxpZENvbXBvbmVudENoaWxkcmVuLmNvdW50KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBbKHdyYXAgfHwgYWN0aXZlSW5kZXggIT09IDApICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTYWZlQW5jaG9yLFxuICAgICAge1xuICAgICAgICBrZXk6ICdwcmV2JyxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNvbnRyb2xDbGFzc05hbWUsICdsZWZ0JyksXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlUHJldlxuICAgICAgfSxcbiAgICAgIHByZXZJY29uLFxuICAgICAgcHJldkxhYmVsICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdzci1vbmx5JyB9LFxuICAgICAgICBwcmV2TGFiZWxcbiAgICAgIClcbiAgICApLCAod3JhcCB8fCBhY3RpdmVJbmRleCAhPT0gY291bnQgLSAxKSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU2FmZUFuY2hvcixcbiAgICAgIHtcbiAgICAgICAga2V5OiAnbmV4dCcsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjb250cm9sQ2xhc3NOYW1lLCAncmlnaHQnKSxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVOZXh0XG4gICAgICB9LFxuICAgICAgbmV4dEljb24sXG4gICAgICBuZXh0TGFiZWwgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ3NyLW9ubHknIH0sXG4gICAgICAgIG5leHRMYWJlbFxuICAgICAgKVxuICAgICldO1xuICB9O1xuXG4gIENhcm91c2VsLnByb3RvdHlwZS5yZW5kZXJJbmRpY2F0b3JzID0gZnVuY3Rpb24gcmVuZGVySW5kaWNhdG9ycyhjaGlsZHJlbiwgYWN0aXZlSW5kZXgsIGJzUHJvcHMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBpbmRpY2F0b3JzID0gW107XG5cbiAgICBWYWxpZENvbXBvbmVudENoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgIGluZGljYXRvcnMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KCdsaScsIHtcbiAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgY2xhc3NOYW1lOiBpbmRleCA9PT0gYWN0aXZlSW5kZXggPyAnYWN0aXZlJyA6IG51bGwsXG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuc2VsZWN0KGluZGV4LCBlKTtcbiAgICAgICAgfVxuICAgICAgfSksXG5cbiAgICAgIC8vIEZvcmNlIHdoaXRlc3BhY2UgYmV0d2VlbiBpbmRpY2F0b3IgZWxlbWVudHMuIEJvb3RzdHJhcCByZXF1aXJlc1xuICAgICAgLy8gdGhpcyBmb3IgY29ycmVjdCBzcGFjaW5nIG9mIGVsZW1lbnRzLlxuICAgICAgJyAnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ29sJyxcbiAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXgoYnNQcm9wcywgJ2luZGljYXRvcnMnKSB9LFxuICAgICAgaW5kaWNhdG9yc1xuICAgICk7XG4gIH07XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc2xpZGUgPSBfcHJvcHMyLnNsaWRlLFxuICAgICAgICBpbmRpY2F0b3JzID0gX3Byb3BzMi5pbmRpY2F0b3JzLFxuICAgICAgICBjb250cm9scyA9IF9wcm9wczIuY29udHJvbHMsXG4gICAgICAgIHdyYXAgPSBfcHJvcHMyLndyYXAsXG4gICAgICAgIHByZXZJY29uID0gX3Byb3BzMi5wcmV2SWNvbixcbiAgICAgICAgcHJldkxhYmVsID0gX3Byb3BzMi5wcmV2TGFiZWwsXG4gICAgICAgIG5leHRJY29uID0gX3Byb3BzMi5uZXh0SWNvbixcbiAgICAgICAgbmV4dExhYmVsID0gX3Byb3BzMi5uZXh0TGFiZWwsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsnc2xpZGUnLCAnaW5kaWNhdG9ycycsICdjb250cm9scycsICd3cmFwJywgJ3ByZXZJY29uJywgJ3ByZXZMYWJlbCcsICduZXh0SWNvbicsICduZXh0TGFiZWwnLCAnY2xhc3NOYW1lJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHByZXZpb3VzQWN0aXZlSW5kZXggPSBfc3RhdGUucHJldmlvdXNBY3RpdmVJbmRleCxcbiAgICAgICAgZGlyZWN0aW9uID0gX3N0YXRlLmRpcmVjdGlvbjtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQocHJvcHMsIFsnaW50ZXJ2YWwnLCAncGF1c2VPbkhvdmVyJywgJ29uU2VsZWN0JywgJ29uU2xpZGVFbmQnLCAnYWN0aXZlSW5kZXgnLCAvLyBBY2Nlc3NlZCB2aWEgdGhpcy5nZXRBY3RpdmVJbmRleCgpLlxuICAgICdkZWZhdWx0QWN0aXZlSW5kZXgnLCAnZGlyZWN0aW9uJ10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRBY3RpdmVJbmRleCgpO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIHtcbiAgICAgIHNsaWRlOiBzbGlkZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcyksXG4gICAgICAgIG9uTW91c2VPdmVyOiB0aGlzLmhhbmRsZU1vdXNlT3ZlcixcbiAgICAgICAgb25Nb3VzZU91dDogdGhpcy5oYW5kbGVNb3VzZU91dFxuICAgICAgfSksXG4gICAgICBpbmRpY2F0b3JzICYmIHRoaXMucmVuZGVySW5kaWNhdG9ycyhjaGlsZHJlbiwgYWN0aXZlSW5kZXgsIGJzUHJvcHMpLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXgoYnNQcm9wcywgJ2lubmVyJykgfSxcbiAgICAgICAgVmFsaWRDb21wb25lbnRDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgICAgICB2YXIgYWN0aXZlID0gaW5kZXggPT09IGFjdGl2ZUluZGV4O1xuICAgICAgICAgIHZhciBwcmV2aW91c0FjdGl2ZSA9IHNsaWRlICYmIGluZGV4ID09PSBwcmV2aW91c0FjdGl2ZUluZGV4O1xuXG4gICAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICBhbmltYXRlT3V0OiBwcmV2aW91c0FjdGl2ZSxcbiAgICAgICAgICAgIGFuaW1hdGVJbjogYWN0aXZlICYmIHByZXZpb3VzQWN0aXZlSW5kZXggIT0gbnVsbCAmJiBzbGlkZSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgICAgICAgICAgb25BbmltYXRlT3V0RW5kOiBwcmV2aW91c0FjdGl2ZSA/IF90aGlzNC5oYW5kbGVJdGVtQW5pbWF0ZU91dEVuZCA6IG51bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICBjb250cm9scyAmJiB0aGlzLnJlbmRlckNvbnRyb2xzKHtcbiAgICAgICAgd3JhcDogd3JhcCxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICBhY3RpdmVJbmRleDogYWN0aXZlSW5kZXgsXG4gICAgICAgIHByZXZJY29uOiBwcmV2SWNvbixcbiAgICAgICAgcHJldkxhYmVsOiBwcmV2TGFiZWwsXG4gICAgICAgIG5leHRJY29uOiBuZXh0SWNvbixcbiAgICAgICAgbmV4dExhYmVsOiBuZXh0TGFiZWwsXG4gICAgICAgIGJzUHJvcHM6IGJzUHJvcHNcbiAgICAgIH0pXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gQ2Fyb3VzZWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNhcm91c2VsLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNhcm91c2VsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuQ2Fyb3VzZWwuQ2FwdGlvbiA9IENhcm91c2VsQ2FwdGlvbjtcbkNhcm91c2VsLkl0ZW0gPSBDYXJvdXNlbEl0ZW07XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2Nhcm91c2VsJywgQ2Fyb3VzZWwpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvbGFiZWwtaGFzLWZvciAqL1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogT25seSB2YWxpZCBpZiBgaW5saW5lYCBpcyBub3Qgc2V0LlxuICAgKi9cbiAgdmFsaWRhdGlvblN0YXRlOiBQcm9wVHlwZXMub25lT2YoWydzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZXJyb3InLCBudWxsXSksXG4gIC8qKlxuICAgKiBBdHRhY2hlcyBhIHJlZiB0byB0aGUgYDxpbnB1dD5gIGVsZW1lbnQuIE9ubHkgZnVuY3Rpb25zIGNhbiBiZSB1c2VkIGhlcmUuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIDxDaGVja2JveCBpbnB1dFJlZj17cmVmID0+IHsgdGhpcy5pbnB1dCA9IHJlZjsgfX0gLz5cbiAgICogYGBgXG4gICAqL1xuICBpbnB1dFJlZjogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGlubGluZTogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgdGl0bGU6ICcnXG59O1xuXG52YXIgQ2hlY2tib3ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2hlY2tib3gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENoZWNrYm94KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDaGVja2JveCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIENoZWNrYm94LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlubGluZSA9IF9wcm9wcy5pbmxpbmUsXG4gICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICB2YWxpZGF0aW9uU3RhdGUgPSBfcHJvcHMudmFsaWRhdGlvblN0YXRlLFxuICAgICAgICBpbnB1dFJlZiA9IF9wcm9wcy5pbnB1dFJlZixcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgIHRpdGxlID0gX3Byb3BzLnRpdGxlLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2lubGluZScsICdkaXNhYmxlZCcsICd2YWxpZGF0aW9uU3RhdGUnLCAnaW5wdXRSZWYnLCAnY2xhc3NOYW1lJywgJ3N0eWxlJywgJ3RpdGxlJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBpbnB1dCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICB9KSk7XG5cbiAgICBpZiAoaW5saW5lKSB7XG4gICAgICB2YXIgX2NsYXNzZXMyO1xuXG4gICAgICB2YXIgX2NsYXNzZXMgPSAoX2NsYXNzZXMyID0ge30sIF9jbGFzc2VzMltwcmVmaXgoYnNQcm9wcywgJ2lubGluZScpXSA9IHRydWUsIF9jbGFzc2VzMi5kaXNhYmxlZCA9IGRpc2FibGVkLCBfY2xhc3NlczIpO1xuXG4gICAgICAvLyBVc2UgYSB3YXJuaW5nIGhlcmUgaW5zdGVhZCBvZiBpbiBwcm9wVHlwZXMgdG8gZ2V0IGJldHRlci1sb29raW5nXG4gICAgICAvLyBnZW5lcmF0ZWQgZG9jdW1lbnRhdGlvbi5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCF2YWxpZGF0aW9uU3RhdGUsICdgdmFsaWRhdGlvblN0YXRlYCBpcyBpZ25vcmVkIG9uIGA8Q2hlY2tib3ggaW5saW5lPmAuIFRvIGRpc3BsYXkgJyArICd2YWxpZGF0aW9uIHN0YXRlIG9uIGFuIGlubGluZSBjaGVja2JveCwgc2V0IGB2YWxpZGF0aW9uU3RhdGVgIG9uIGEgJyArICdwYXJlbnQgYDxGb3JtR3JvdXA+YCBvciBvdGhlciBlbGVtZW50IGluc3RlYWQuJykgOiB2b2lkIDA7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnbGFiZWwnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgX2NsYXNzZXMpLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICB0aXRsZTogdGl0bGVcbiAgICAgICAgfSxcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCB7XG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICB9KTtcbiAgICBpZiAodmFsaWRhdGlvblN0YXRlKSB7XG4gICAgICBjbGFzc2VzWydoYXMtJyArIHZhbGlkYXRpb25TdGF0ZV0gPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpLCBzdHlsZTogc3R5bGUgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdsYWJlbCcsXG4gICAgICAgIHsgdGl0bGU6IHRpdGxlIH0sXG4gICAgICAgIGlucHV0LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIENoZWNrYm94O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DaGVja2JveC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5DaGVja2JveC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2NoZWNrYm94JywgQ2hlY2tib3gpOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBcIlwiICsgc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyBERVZJQ0VfU0laRVMgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBBcHBseSBjbGVhcmZpeFxuICAgKlxuICAgKiBvbiBFeHRyYSBzbWFsbCBkZXZpY2VzIFBob25lc1xuICAgKlxuICAgKiBhZGRzIGNsYXNzIGB2aXNpYmxlLXhzLWJsb2NrYFxuICAgKi9cbiAgdmlzaWJsZVhzQmxvY2s6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQXBwbHkgY2xlYXJmaXhcbiAgICpcbiAgICogb24gU21hbGwgZGV2aWNlcyBUYWJsZXRzXG4gICAqXG4gICAqIGFkZHMgY2xhc3MgYHZpc2libGUtc20tYmxvY2tgXG4gICAqL1xuICB2aXNpYmxlU21CbG9jazogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBcHBseSBjbGVhcmZpeFxuICAgKlxuICAgKiBvbiBNZWRpdW0gZGV2aWNlcyBEZXNrdG9wc1xuICAgKlxuICAgKiBhZGRzIGNsYXNzIGB2aXNpYmxlLW1kLWJsb2NrYFxuICAgKi9cbiAgdmlzaWJsZU1kQmxvY2s6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQXBwbHkgY2xlYXJmaXhcbiAgICpcbiAgICogb24gTGFyZ2UgZGV2aWNlcyBEZXNrdG9wc1xuICAgKlxuICAgKiBhZGRzIGNsYXNzIGB2aXNpYmxlLWxnLWJsb2NrYFxuICAgKi9cbiAgdmlzaWJsZUxnQmxvY2s6IFByb3BUeXBlcy5ib29sXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2Rpdidcbn07XG5cbnZhciBDbGVhcmZpeCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDbGVhcmZpeCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2xlYXJmaXgoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsZWFyZml4KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgQ2xlYXJmaXgucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29tcG9uZW50Q2xhc3MnLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG5cbiAgICBERVZJQ0VfU0laRVMuZm9yRWFjaChmdW5jdGlvbiAoc2l6ZSkge1xuICAgICAgdmFyIHByb3BOYW1lID0gJ3Zpc2libGUnICsgY2FwaXRhbGl6ZShzaXplKSArICdCbG9jayc7XG4gICAgICBpZiAoZWxlbWVudFByb3BzW3Byb3BOYW1lXSkge1xuICAgICAgICBjbGFzc2VzWyd2aXNpYmxlLScgKyBzaXplICsgJy1ibG9jayddID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIGVsZW1lbnRQcm9wc1twcm9wTmFtZV07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDbGVhcmZpeDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ2xlYXJmaXgucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ2xlYXJmaXguZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdjbGVhcmZpeCcsIENsZWFyZml4KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVXNlcyBgY29udHJvbElkYCBmcm9tIGA8Rm9ybUdyb3VwPmAgaWYgbm90IGV4cGxpY2l0bHkgc3BlY2lmaWVkLlxuICAgKi9cbiAgaHRtbEZvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3JPbmx5OiBQcm9wVHlwZXMuYm9vbFxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgc3JPbmx5OiBmYWxzZVxufTtcblxudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX2Zvcm1Hcm91cDogUHJvcFR5cGVzLm9iamVjdFxufTtcblxudmFyIENvbnRyb2xMYWJlbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDb250cm9sTGFiZWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbnRyb2xMYWJlbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udHJvbExhYmVsKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgQ29udHJvbExhYmVsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGZvcm1Hcm91cCA9IHRoaXMuY29udGV4dC4kYnNfZm9ybUdyb3VwO1xuICAgIHZhciBjb250cm9sSWQgPSBmb3JtR3JvdXAgJiYgZm9ybUdyb3VwLmNvbnRyb2xJZDtcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfcHJvcHMkaHRtbEZvciA9IF9wcm9wcy5odG1sRm9yLFxuICAgICAgICBodG1sRm9yID0gX3Byb3BzJGh0bWxGb3IgPT09IHVuZGVmaW5lZCA/IGNvbnRyb2xJZCA6IF9wcm9wcyRodG1sRm9yLFxuICAgICAgICBzck9ubHkgPSBfcHJvcHMuc3JPbmx5LFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaHRtbEZvcicsICdzck9ubHknLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGNvbnRyb2xJZCA9PSBudWxsIHx8IGh0bWxGb3IgPT09IGNvbnRyb2xJZCwgJ2Bjb250cm9sSWRgIGlzIGlnbm9yZWQgb24gYDxDb250cm9sTGFiZWw+YCB3aGVuIGBodG1sRm9yYCBpcyBzcGVjaWZpZWQuJykgOiB2b2lkIDA7XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwge1xuICAgICAgJ3NyLW9ubHknOiBzck9ubHlcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdsYWJlbCcsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGh0bWxGb3I6IGh0bWxGb3IsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ29udHJvbExhYmVsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Db250cm9sTGFiZWwucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ29udHJvbExhYmVsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkNvbnRyb2xMYWJlbC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2NvbnRyb2wtbGFiZWwnLCBDb250cm9sTGFiZWwpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgeyBERVZJQ0VfU0laRVMgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgeW91IHdpc2ggdG8gc3BhblxuICAgKlxuICAgKiBmb3IgRXh0cmEgc21hbGwgZGV2aWNlcyBQaG9uZXMgKDw3NjhweClcbiAgICpcbiAgICogY2xhc3MtcHJlZml4IGBjb2wteHMtYFxuICAgKi9cbiAgeHM6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgeW91IHdpc2ggdG8gc3BhblxuICAgKlxuICAgKiBmb3IgU21hbGwgZGV2aWNlcyBUYWJsZXRzICjiiaU3NjhweClcbiAgICpcbiAgICogY2xhc3MtcHJlZml4IGBjb2wtc20tYFxuICAgKi9cbiAgc206IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgeW91IHdpc2ggdG8gc3BhblxuICAgKlxuICAgKiBmb3IgTWVkaXVtIGRldmljZXMgRGVza3RvcHMgKOKJpTk5MnB4KVxuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC1tZC1gXG4gICAqL1xuICBtZDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgY29sdW1ucyB5b3Ugd2lzaCB0byBzcGFuXG4gICAqXG4gICAqIGZvciBMYXJnZSBkZXZpY2VzIERlc2t0b3BzICjiiaUxMjAwcHgpXG4gICAqXG4gICAqIGNsYXNzLXByZWZpeCBgY29sLWxnLWBcbiAgICovXG4gIGxnOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogSGlkZSBjb2x1bW5cbiAgICpcbiAgICogb24gRXh0cmEgc21hbGwgZGV2aWNlcyBQaG9uZXNcbiAgICpcbiAgICogYWRkcyBjbGFzcyBgaGlkZGVuLXhzYFxuICAgKi9cbiAgeHNIaWRkZW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSGlkZSBjb2x1bW5cbiAgICpcbiAgICogb24gU21hbGwgZGV2aWNlcyBUYWJsZXRzXG4gICAqXG4gICAqIGFkZHMgY2xhc3MgYGhpZGRlbi1zbWBcbiAgICovXG4gIHNtSGlkZGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEhpZGUgY29sdW1uXG4gICAqXG4gICAqIG9uIE1lZGl1bSBkZXZpY2VzIERlc2t0b3BzXG4gICAqXG4gICAqIGFkZHMgY2xhc3MgYGhpZGRlbi1tZGBcbiAgICovXG4gIG1kSGlkZGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEhpZGUgY29sdW1uXG4gICAqXG4gICAqIG9uIExhcmdlIGRldmljZXMgRGVza3RvcHNcbiAgICpcbiAgICogYWRkcyBjbGFzcyBgaGlkZGVuLWxnYFxuICAgKi9cbiAgbGdIaWRkZW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTW92ZSBjb2x1bW5zIHRvIHRoZSByaWdodFxuICAgKlxuICAgKiBmb3IgRXh0cmEgc21hbGwgZGV2aWNlcyBQaG9uZXNcbiAgICpcbiAgICogY2xhc3MtcHJlZml4IGBjb2wteHMtb2Zmc2V0LWBcbiAgICovXG4gIHhzT2Zmc2V0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogTW92ZSBjb2x1bW5zIHRvIHRoZSByaWdodFxuICAgKlxuICAgKiBmb3IgU21hbGwgZGV2aWNlcyBUYWJsZXRzXG4gICAqXG4gICAqIGNsYXNzLXByZWZpeCBgY29sLXNtLW9mZnNldC1gXG4gICAqL1xuICBzbU9mZnNldDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIE1vdmUgY29sdW1ucyB0byB0aGUgcmlnaHRcbiAgICpcbiAgICogZm9yIE1lZGl1bSBkZXZpY2VzIERlc2t0b3BzXG4gICAqXG4gICAqIGNsYXNzLXByZWZpeCBgY29sLW1kLW9mZnNldC1gXG4gICAqL1xuICBtZE9mZnNldDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIE1vdmUgY29sdW1ucyB0byB0aGUgcmlnaHRcbiAgICpcbiAgICogZm9yIExhcmdlIGRldmljZXMgRGVza3RvcHNcbiAgICpcbiAgICogY2xhc3MtcHJlZml4IGBjb2wtbGctb2Zmc2V0LWBcbiAgICovXG4gIGxnT2Zmc2V0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBvcmRlciBvZiBncmlkIGNvbHVtbnMgdG8gdGhlIHJpZ2h0XG4gICAqXG4gICAqIGZvciBFeHRyYSBzbWFsbCBkZXZpY2VzIFBob25lc1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC14cy1wdXNoLWBcbiAgICovXG4gIHhzUHVzaDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgb3JkZXIgb2YgZ3JpZCBjb2x1bW5zIHRvIHRoZSByaWdodFxuICAgKlxuICAgKiBmb3IgU21hbGwgZGV2aWNlcyBUYWJsZXRzXG4gICAqXG4gICAqIGNsYXNzLXByZWZpeCBgY29sLXNtLXB1c2gtYFxuICAgKi9cbiAgc21QdXNoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBvcmRlciBvZiBncmlkIGNvbHVtbnMgdG8gdGhlIHJpZ2h0XG4gICAqXG4gICAqIGZvciBNZWRpdW0gZGV2aWNlcyBEZXNrdG9wc1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC1tZC1wdXNoLWBcbiAgICovXG4gIG1kUHVzaDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgb3JkZXIgb2YgZ3JpZCBjb2x1bW5zIHRvIHRoZSByaWdodFxuICAgKlxuICAgKiBmb3IgTGFyZ2UgZGV2aWNlcyBEZXNrdG9wc1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC1sZy1wdXNoLWBcbiAgICovXG4gIGxnUHVzaDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgb3JkZXIgb2YgZ3JpZCBjb2x1bW5zIHRvIHRoZSBsZWZ0XG4gICAqXG4gICAqIGZvciBFeHRyYSBzbWFsbCBkZXZpY2VzIFBob25lc1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC14cy1wdWxsLWBcbiAgICovXG4gIHhzUHVsbDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgb3JkZXIgb2YgZ3JpZCBjb2x1bW5zIHRvIHRoZSBsZWZ0XG4gICAqXG4gICAqIGZvciBTbWFsbCBkZXZpY2VzIFRhYmxldHNcbiAgICpcbiAgICogY2xhc3MtcHJlZml4IGBjb2wtc20tcHVsbC1gXG4gICAqL1xuICBzbVB1bGw6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIG9yZGVyIG9mIGdyaWQgY29sdW1ucyB0byB0aGUgbGVmdFxuICAgKlxuICAgKiBmb3IgTWVkaXVtIGRldmljZXMgRGVza3RvcHNcbiAgICpcbiAgICogY2xhc3MtcHJlZml4IGBjb2wtbWQtcHVsbC1gXG4gICAqL1xuICBtZFB1bGw6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIG9yZGVyIG9mIGdyaWQgY29sdW1ucyB0byB0aGUgbGVmdFxuICAgKlxuICAgKiBmb3IgTGFyZ2UgZGV2aWNlcyBEZXNrdG9wc1xuICAgKlxuICAgKiBjbGFzcy1wcmVmaXggYGNvbC1sZy1wdWxsLWBcbiAgICovXG4gIGxnUHVsbDogUHJvcFR5cGVzLm51bWJlclxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdkaXYnXG59O1xuXG52YXIgQ29sID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29sKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2wpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBDb2wucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29tcG9uZW50Q2xhc3MnLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gW107XG5cbiAgICBERVZJQ0VfU0laRVMuZm9yRWFjaChmdW5jdGlvbiAoc2l6ZSkge1xuICAgICAgZnVuY3Rpb24gcG9wUHJvcChwcm9wU3VmZml4LCBtb2RpZmllcikge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSAnJyArIHNpemUgKyBwcm9wU3VmZml4O1xuICAgICAgICB2YXIgcHJvcFZhbHVlID0gZWxlbWVudFByb3BzW3Byb3BOYW1lXTtcblxuICAgICAgICBpZiAocHJvcFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBjbGFzc2VzLnB1c2gocHJlZml4KGJzUHJvcHMsICcnICsgc2l6ZSArIG1vZGlmaWVyICsgJy0nICsgcHJvcFZhbHVlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgZWxlbWVudFByb3BzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgcG9wUHJvcCgnJywgJycpO1xuICAgICAgcG9wUHJvcCgnT2Zmc2V0JywgJy1vZmZzZXQnKTtcbiAgICAgIHBvcFByb3AoJ1B1c2gnLCAnLXB1c2gnKTtcbiAgICAgIHBvcFByb3AoJ1B1bGwnLCAnLXB1bGwnKTtcblxuICAgICAgdmFyIGhpZGRlblByb3BOYW1lID0gc2l6ZSArICdIaWRkZW4nO1xuICAgICAgaWYgKGVsZW1lbnRQcm9wc1toaWRkZW5Qcm9wTmFtZV0pIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKCdoaWRkZW4tJyArIHNpemUpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGVsZW1lbnRQcm9wc1toaWRkZW5Qcm9wTmFtZV07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDb2w7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNvbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Db2wuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdjb2wnLCBDb2wpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuXG52YXIgX2NvbGxhcHNlU3R5bGVzO1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBjc3MgZnJvbSAnZG9tLWhlbHBlcnMvc3R5bGUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbiwgeyBFWElURUQsIEVOVEVSRUQsIEVOVEVSSU5HLCBFWElUSU5HIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uJztcblxuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuXG52YXIgTUFSR0lOUyA9IHtcbiAgaGVpZ2h0OiBbJ21hcmdpblRvcCcsICdtYXJnaW5Cb3R0b20nXSxcbiAgd2lkdGg6IFsnbWFyZ2luTGVmdCcsICdtYXJnaW5SaWdodCddXG59O1xuXG4vLyByZWFkaW5nIGEgZGltZW5zaW9uIHByb3Agd2lsbCBjYXVzZSB0aGUgYnJvd3NlciB0byByZWNhbGN1bGF0ZSxcbi8vIHdoaWNoIHdpbGwgbGV0IG91ciBhbmltYXRpb25zIHdvcmtcbmZ1bmN0aW9uIHRyaWdnZXJCcm93c2VyUmVmbG93KG5vZGUpIHtcbiAgbm9kZS5vZmZzZXRIZWlnaHQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG59XG5cbmZ1bmN0aW9uIGdldERpbWVuc2lvblZhbHVlKGRpbWVuc2lvbiwgZWxlbSkge1xuICB2YXIgdmFsdWUgPSBlbGVtWydvZmZzZXQnICsgY2FwaXRhbGl6ZShkaW1lbnNpb24pXTtcbiAgdmFyIG1hcmdpbnMgPSBNQVJHSU5TW2RpbWVuc2lvbl07XG5cbiAgcmV0dXJuIHZhbHVlICsgcGFyc2VJbnQoY3NzKGVsZW0sIG1hcmdpbnNbMF0pLCAxMCkgKyBwYXJzZUludChjc3MoZWxlbSwgbWFyZ2luc1sxXSksIDEwKTtcbn1cblxudmFyIGNvbGxhcHNlU3R5bGVzID0gKF9jb2xsYXBzZVN0eWxlcyA9IHt9LCBfY29sbGFwc2VTdHlsZXNbRVhJVEVEXSA9ICdjb2xsYXBzZScsIF9jb2xsYXBzZVN0eWxlc1tFWElUSU5HXSA9ICdjb2xsYXBzaW5nJywgX2NvbGxhcHNlU3R5bGVzW0VOVEVSSU5HXSA9ICdjb2xsYXBzaW5nJywgX2NvbGxhcHNlU3R5bGVzW0VOVEVSRURdID0gJ2NvbGxhcHNlIGluJywgX2NvbGxhcHNlU3R5bGVzKTtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNob3cgdGhlIGNvbXBvbmVudDsgdHJpZ2dlcnMgdGhlIGV4cGFuZCBvciBjb2xsYXBzZSBhbmltYXRpb25cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2FpdCB1bnRpbCB0aGUgZmlyc3QgXCJlbnRlclwiIHRyYW5zaXRpb24gdG8gbW91bnQgdGhlIGNvbXBvbmVudCAoYWRkIGl0IHRvIHRoZSBET00pXG4gICAqL1xuICBtb3VudE9uRW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBVbm1vdW50IHRoZSBjb21wb25lbnQgKHJlbW92ZSBpdCBmcm9tIHRoZSBET00pIHdoZW4gaXQgaXMgY29sbGFwc2VkXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUnVuIHRoZSBleHBhbmQgYW5pbWF0aW9uIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHMsIGlmIGl0IGlzIGluaXRpYWxseVxuICAgKiBzaG93blxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRHVyYXRpb24gb2YgdGhlIGNvbGxhcHNlIGFuaW1hdGlvbiBpbiBtaWxsaXNlY29uZHMsIHRvIGVuc3VyZSB0aGF0XG4gICAqIGZpbmlzaGluZyBjYWxsYmFja3MgYXJlIGZpcmVkIGV2ZW4gaWYgdGhlIG9yaWdpbmFsIGJyb3dzZXIgdHJhbnNpdGlvbiBlbmRcbiAgICogZXZlbnRzIGFyZSBjYW5jZWxlZFxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgZXhwYW5kc1xuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgY29tcG9uZW50IHN0YXJ0cyB0byBleHBhbmRcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBoYXMgZXhwYW5kZWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBjb2xsYXBzZXNcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgY29tcG9uZW50IHN0YXJ0cyB0byBjb2xsYXBzZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIGNvbGxhcHNlZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgZGltZW5zaW9uIHVzZWQgd2hlbiBjb2xsYXBzaW5nLCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICogZGltZW5zaW9uXG4gICAqXG4gICAqIF9Ob3RlOiBCb290c3RyYXAgb25seSBwYXJ0aWFsbHkgc3VwcG9ydHMgJ3dpZHRoJyFcbiAgICogWW91IHdpbGwgbmVlZCB0byBzdXBwbHkgeW91ciBvd24gQ1NTIGFuaW1hdGlvbiBmb3IgdGhlIGAud2lkdGhgIENTUyBjbGFzcy5fXG4gICAqL1xuICBkaW1lbnNpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2hlaWdodCcsICd3aWR0aCddKSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBoZWlnaHQgb3Igd2lkdGggb2YgdGhlIGFuaW1hdGluZyBET00gbm9kZVxuICAgKlxuICAgKiBBbGxvd3MgZm9yIHByb3ZpZGluZyBzb21lIGN1c3RvbSBsb2dpYyBmb3IgaG93IG11Y2ggdGhlIENvbGxhcHNlIGNvbXBvbmVudFxuICAgKiBzaG91bGQgYW5pbWF0ZSBpbiBpdHMgc3BlY2lmaWVkIGRpbWVuc2lvbi4gQ2FsbGVkIHdpdGggdGhlIGN1cnJlbnRcbiAgICogZGltZW5zaW9uIHByb3AgdmFsdWUgYW5kIHRoZSBET00gbm9kZS5cbiAgICovXG4gIGdldERpbWVuc2lvblZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQVJJQSByb2xlIG9mIGNvbGxhcHNpYmxlIGVsZW1lbnRcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgdGltZW91dDogMzAwLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcblxuICBkaW1lbnNpb246ICdoZWlnaHQnLFxuICBnZXREaW1lbnNpb25WYWx1ZTogZ2V0RGltZW5zaW9uVmFsdWVcbn07XG5cbnZhciBDb2xsYXBzZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDb2xsYXBzZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29sbGFwc2UoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsYXBzZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgZWxlbS5zdHlsZVtfdGhpcy5nZXREaW1lbnNpb24oKV0gPSAnMCc7XG4gICAgfSwgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgdmFyIGRpbWVuc2lvbiA9IF90aGlzLmdldERpbWVuc2lvbigpO1xuICAgICAgZWxlbS5zdHlsZVtkaW1lbnNpb25dID0gX3RoaXMuX2dldFNjcm9sbERpbWVuc2lvblZhbHVlKGVsZW0sIGRpbWVuc2lvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlRW50ZXJlZCA9IGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICBlbGVtLnN0eWxlW190aGlzLmdldERpbWVuc2lvbigpXSA9IG51bGw7XG4gICAgfSwgX3RoaXMuaGFuZGxlRXhpdCA9IGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICB2YXIgZGltZW5zaW9uID0gX3RoaXMuZ2V0RGltZW5zaW9uKCk7XG4gICAgICBlbGVtLnN0eWxlW2RpbWVuc2lvbl0gPSBfdGhpcy5wcm9wcy5nZXREaW1lbnNpb25WYWx1ZShkaW1lbnNpb24sIGVsZW0pICsgJ3B4JztcbiAgICAgIHRyaWdnZXJCcm93c2VyUmVmbG93KGVsZW0pO1xuICAgIH0sIF90aGlzLmhhbmRsZUV4aXRpbmcgPSBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgZWxlbS5zdHlsZVtfdGhpcy5nZXREaW1lbnNpb24oKV0gPSAnMCc7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gZ2V0RGltZW5zaW9uKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wcm9wcy5kaW1lbnNpb24gPT09ICdmdW5jdGlvbicgPyB0aGlzLnByb3BzLmRpbWVuc2lvbigpIDogdGhpcy5wcm9wcy5kaW1lbnNpb247XG4gIH07XG5cbiAgLy8gZm9yIHRlc3RpbmdcblxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5fZ2V0U2Nyb2xsRGltZW5zaW9uVmFsdWUgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsRGltZW5zaW9uVmFsdWUoZWxlbSwgZGltZW5zaW9uKSB7XG4gICAgcmV0dXJuIGVsZW1bJ3Njcm9sbCcgKyBjYXBpdGFsaXplKGRpbWVuc2lvbildICsgJ3B4JztcbiAgfTtcblxuICAvKiAtLSBFeHBhbmRpbmcgLS0gKi9cblxuXG4gIC8qIC0tIENvbGxhcHNpbmcgLS0gKi9cblxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25FbnRlciA9IF9wcm9wcy5vbkVudGVyLFxuICAgICAgICBvbkVudGVyaW5nID0gX3Byb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIG9uRW50ZXJlZCA9IF9wcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIG9uRXhpdCA9IF9wcm9wcy5vbkV4aXQsXG4gICAgICAgIG9uRXhpdGluZyA9IF9wcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnb25FbnRlcicsICdvbkVudGVyaW5nJywgJ29uRW50ZXJlZCcsICdvbkV4aXQnLCAnb25FeGl0aW5nJywgJ2NsYXNzTmFtZScsICdjaGlsZHJlbiddKTtcblxuICAgIGRlbGV0ZSBwcm9wcy5kaW1lbnNpb247XG4gICAgZGVsZXRlIHByb3BzLmdldERpbWVuc2lvblZhbHVlO1xuXG4gICAgdmFyIGhhbmRsZUVudGVyID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlRW50ZXIsIG9uRW50ZXIpO1xuICAgIHZhciBoYW5kbGVFbnRlcmluZyA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyaW5nLCBvbkVudGVyaW5nKTtcbiAgICB2YXIgaGFuZGxlRW50ZXJlZCA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyZWQsIG9uRW50ZXJlZCk7XG4gICAgdmFyIGhhbmRsZUV4aXQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24odGhpcy5oYW5kbGVFeGl0LCBvbkV4aXQpO1xuICAgIHZhciBoYW5kbGVFeGl0aW5nID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlRXhpdGluZywgb25FeGl0aW5nKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVHJhbnNpdGlvbixcbiAgICAgIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IHByb3BzLnJvbGUgPyBwcm9wcy5pbiA6IG51bGwsXG4gICAgICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgICAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICAgICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgICAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZ1xuICAgICAgfSksXG4gICAgICBmdW5jdGlvbiAoc3RhdGUsIGlubmVyUHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUsIGNvbGxhcHNlU3R5bGVzW3N0YXRlXSwgX3RoaXMyLmdldERpbWVuc2lvbigpID09PSAnd2lkdGgnICYmICd3aWR0aCcpXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBDb2xsYXBzZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ29sbGFwc2UucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ29sbGFwc2UuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBDb2xsYXBzZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9BcnJheSRmcm9tIGZyb20gJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBrZXljb2RlIGZyb20gJ2tleWNvZGUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBSb290Q2xvc2VXcmFwcGVyIGZyb20gJ3JlYWN0LW92ZXJsYXlzL2xpYi9Sb290Q2xvc2VXcmFwcGVyJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzQW5kT21pdCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgVmFsaWRDb21wb25lbnRDaGlsZHJlbiBmcm9tICcuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4nO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgcHVsbFJpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGxhYmVsbGVkQnk6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICByb290Q2xvc2VFdmVudDogUHJvcFR5cGVzLm9uZU9mKFsnY2xpY2snLCAnbW91c2Vkb3duJ10pXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBic1JvbGU6ICdtZW51JyxcbiAgcHVsbFJpZ2h0OiBmYWxzZVxufTtcblxudmFyIERyb3Bkb3duTWVudSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcm9wZG93bk1lbnUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyb3Bkb3duTWVudShwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcm9wZG93bk1lbnUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5oYW5kbGVSb290Q2xvc2UgPSBfdGhpcy5oYW5kbGVSb290Q2xvc2UuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IF90aGlzLmhhbmRsZUtleURvd24uYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgRHJvcGRvd25NZW51LnByb3RvdHlwZS5nZXRGb2N1c2FibGVNZW51SXRlbXMgPSBmdW5jdGlvbiBnZXRGb2N1c2FibGVNZW51SXRlbXMoKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gX0FycmF5JGZyb20obm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbdGFiSW5kZXg9XCItMVwiXScpKTtcbiAgfTtcblxuICBEcm9wZG93bk1lbnUucHJvdG90eXBlLmdldEl0ZW1zQW5kQWN0aXZlSW5kZXggPSBmdW5jdGlvbiBnZXRJdGVtc0FuZEFjdGl2ZUluZGV4KCkge1xuICAgIHZhciBpdGVtcyA9IHRoaXMuZ2V0Rm9jdXNhYmxlTWVudUl0ZW1zKCk7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gaXRlbXMuaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcblxuICAgIHJldHVybiB7IGl0ZW1zOiBpdGVtcywgYWN0aXZlSW5kZXg6IGFjdGl2ZUluZGV4IH07XG4gIH07XG5cbiAgRHJvcGRvd25NZW51LnByb3RvdHlwZS5mb2N1c05leHQgPSBmdW5jdGlvbiBmb2N1c05leHQoKSB7XG4gICAgdmFyIF9nZXRJdGVtc0FuZEFjdGl2ZUluZCA9IHRoaXMuZ2V0SXRlbXNBbmRBY3RpdmVJbmRleCgpLFxuICAgICAgICBpdGVtcyA9IF9nZXRJdGVtc0FuZEFjdGl2ZUluZC5pdGVtcyxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBfZ2V0SXRlbXNBbmRBY3RpdmVJbmQuYWN0aXZlSW5kZXg7XG5cbiAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRJbmRleCA9IGFjdGl2ZUluZGV4ID09PSBpdGVtcy5sZW5ndGggLSAxID8gMCA6IGFjdGl2ZUluZGV4ICsgMTtcbiAgICBpdGVtc1tuZXh0SW5kZXhdLmZvY3VzKCk7XG4gIH07XG5cbiAgRHJvcGRvd25NZW51LnByb3RvdHlwZS5mb2N1c1ByZXZpb3VzID0gZnVuY3Rpb24gZm9jdXNQcmV2aW91cygpIHtcbiAgICB2YXIgX2dldEl0ZW1zQW5kQWN0aXZlSW5kMiA9IHRoaXMuZ2V0SXRlbXNBbmRBY3RpdmVJbmRleCgpLFxuICAgICAgICBpdGVtcyA9IF9nZXRJdGVtc0FuZEFjdGl2ZUluZDIuaXRlbXMsXG4gICAgICAgIGFjdGl2ZUluZGV4ID0gX2dldEl0ZW1zQW5kQWN0aXZlSW5kMi5hY3RpdmVJbmRleDtcblxuICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJldkluZGV4ID0gYWN0aXZlSW5kZXggPT09IDAgPyBpdGVtcy5sZW5ndGggLSAxIDogYWN0aXZlSW5kZXggLSAxO1xuICAgIGl0ZW1zW3ByZXZJbmRleF0uZm9jdXMoKTtcbiAgfTtcblxuICBEcm9wZG93bk1lbnUucHJvdG90eXBlLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICBjYXNlIGtleWNvZGUuY29kZXMuZG93bjpcbiAgICAgICAgdGhpcy5mb2N1c05leHQoKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGtleWNvZGUuY29kZXMudXA6XG4gICAgICAgIHRoaXMuZm9jdXNQcmV2aW91cygpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Uga2V5Y29kZS5jb2Rlcy5lc2M6XG4gICAgICBjYXNlIGtleWNvZGUuY29kZXMudGFiOlxuICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoZXZlbnQsIHsgc291cmNlOiAna2V5ZG93bicgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH07XG5cbiAgRHJvcGRvd25NZW51LnByb3RvdHlwZS5oYW5kbGVSb290Q2xvc2UgPSBmdW5jdGlvbiBoYW5kbGVSb290Q2xvc2UoZXZlbnQpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2xvc2UoZXZlbnQsIHsgc291cmNlOiAncm9vdENsb3NlJyB9KTtcbiAgfTtcblxuICBEcm9wZG93bk1lbnUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2V4dGVuZHMyLFxuICAgICAgICBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9wZW4gPSBfcHJvcHMub3BlbixcbiAgICAgICAgcHVsbFJpZ2h0ID0gX3Byb3BzLnB1bGxSaWdodCxcbiAgICAgICAgbGFiZWxsZWRCeSA9IF9wcm9wcy5sYWJlbGxlZEJ5LFxuICAgICAgICBvblNlbGVjdCA9IF9wcm9wcy5vblNlbGVjdCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcm9vdENsb3NlRXZlbnQgPSBfcHJvcHMucm9vdENsb3NlRXZlbnQsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnb3BlbicsICdwdWxsUmlnaHQnLCAnbGFiZWxsZWRCeScsICdvblNlbGVjdCcsICdjbGFzc05hbWUnLCAncm9vdENsb3NlRXZlbnQnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wc0FuZE9taXQgPSBzcGxpdEJzUHJvcHNBbmRPbWl0KHByb3BzLCBbJ29uQ2xvc2UnXSksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzQW5kT21pdFswXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdyaWdodCcpXSA9IHB1bGxSaWdodCwgX2V4dGVuZHMyKSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFJvb3RDbG9zZVdyYXBwZXIsXG4gICAgICB7XG4gICAgICAgIGRpc2FibGVkOiAhb3BlbixcbiAgICAgICAgb25Sb290Q2xvc2U6IHRoaXMuaGFuZGxlUm9vdENsb3NlLFxuICAgICAgICBldmVudDogcm9vdENsb3NlRXZlbnRcbiAgICAgIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAndWwnLFxuICAgICAgICBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICAgICAgcm9sZTogJ21lbnUnLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpLFxuICAgICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsYWJlbGxlZEJ5XG4gICAgICAgIH0pLFxuICAgICAgICBWYWxpZENvbXBvbmVudENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgICAgb25LZXlEb3duOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oY2hpbGQucHJvcHMub25LZXlEb3duLCBfdGhpczIuaGFuZGxlS2V5RG93biksXG4gICAgICAgICAgICBvblNlbGVjdDogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkLnByb3BzLm9uU2VsZWN0LCBvblNlbGVjdClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bk1lbnU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRyb3Bkb3duTWVudS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Ecm9wZG93bk1lbnUuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdkcm9wZG93bi1tZW51JywgRHJvcGRvd25NZW51KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vQnV0dG9uJztcbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG5cbmltcG9ydCB7IGJzQ2xhc3MgYXMgc2V0QnNDbGFzcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBub0NhcmV0OiBQcm9wVHlwZXMuYm9vbCxcbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB1c2VBbmNob3I6IFByb3BUeXBlcy5ib29sXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBvcGVuOiBmYWxzZSxcbiAgdXNlQW5jaG9yOiBmYWxzZSxcbiAgYnNSb2xlOiAndG9nZ2xlJ1xufTtcblxudmFyIERyb3Bkb3duVG9nZ2xlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyb3Bkb3duVG9nZ2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wZG93blRvZ2dsZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJvcGRvd25Ub2dnbGUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBEcm9wZG93blRvZ2dsZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBub0NhcmV0ID0gX3Byb3BzLm5vQ2FyZXQsXG4gICAgICAgIG9wZW4gPSBfcHJvcHMub3BlbixcbiAgICAgICAgdXNlQW5jaG9yID0gX3Byb3BzLnVzZUFuY2hvcixcbiAgICAgICAgYnNDbGFzcyA9IF9wcm9wcy5ic0NsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ25vQ2FyZXQnLCAnb3BlbicsICd1c2VBbmNob3InLCAnYnNDbGFzcycsICdjbGFzc05hbWUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICBkZWxldGUgcHJvcHMuYnNSb2xlO1xuXG4gICAgdmFyIENvbXBvbmVudCA9IHVzZUFuY2hvciA/IFNhZmVBbmNob3IgOiBCdXR0b247XG4gICAgdmFyIHVzZUNhcmV0ID0gIW5vQ2FyZXQ7XG5cbiAgICAvLyBUaGlzIGludGVudGlvbmFsbHkgZm9yd2FyZHMgYnNTaXplIGFuZCBic1N0eWxlIChpZiBzZXQpIHRvIHRoZVxuICAgIC8vIHVuZGVybHlpbmcgY29tcG9uZW50LCB0byBhbGxvdyBpdCB0byByZW5kZXIgc2l6ZSBhbmQgc3R5bGUgdmFyaWFudHMuXG5cbiAgICAvLyBGSVhNRTogU2hvdWxkIHRoaXMgcmVhbGx5IGZhbGwgYmFjayB0byBgdGl0bGVgIGFzIGNoaWxkcmVuP1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb21wb25lbnQsXG4gICAgICBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgcm9sZTogJ2J1dHRvbicsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzQ2xhc3MpLFxuICAgICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogb3BlblxuICAgICAgfSksXG4gICAgICBjaGlsZHJlbiB8fCBwcm9wcy50aXRsZSxcbiAgICAgIHVzZUNhcmV0ICYmICcgJyxcbiAgICAgIHVzZUNhcmV0ICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ2NhcmV0JyB9KVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duVG9nZ2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ecm9wZG93blRvZ2dsZS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Ecm9wZG93blRvZ2dsZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IHNldEJzQ2xhc3MoJ2Ryb3Bkb3duLXRvZ2dsZScsIERyb3Bkb3duVG9nZ2xlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGFjdGl2ZUVsZW1lbnQgZnJvbSAnZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudCc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnMnO1xuaW1wb3J0IGtleWNvZGUgZnJvbSAna2V5Y29kZSc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGFsbCBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGwnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCBpc1JlcXVpcmVkRm9yQTExeSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeSc7XG5pbXBvcnQgdW5jb250cm9sbGFibGUgZnJvbSAndW5jb250cm9sbGFibGUnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5cbmltcG9ydCBCdXR0b25Hcm91cCBmcm9tICcuL0J1dHRvbkdyb3VwJztcbmltcG9ydCBEcm9wZG93bk1lbnUgZnJvbSAnLi9Ecm9wZG93bk1lbnUnO1xuaW1wb3J0IERyb3Bkb3duVG9nZ2xlIGZyb20gJy4vRHJvcGRvd25Ub2dnbGUnO1xuaW1wb3J0IHsgYnNDbGFzcyBhcyBzZXRCc0NsYXNzLCBwcmVmaXggfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuaW1wb3J0IHsgZXhjbHVzaXZlUm9sZXMsIHJlcXVpcmVkUm9sZXMgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVmFsaWRDb21wb25lbnRDaGlsZHJlbiBmcm9tICcuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4nO1xuXG52YXIgVE9HR0xFX1JPTEUgPSBEcm9wZG93blRvZ2dsZS5kZWZhdWx0UHJvcHMuYnNSb2xlO1xudmFyIE1FTlVfUk9MRSA9IERyb3Bkb3duTWVudS5kZWZhdWx0UHJvcHMuYnNSb2xlO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIG1lbnUgd2lsbCBvcGVuIGFib3ZlIHRoZSBkcm9wZG93biBidXR0b24sIGluc3RlYWQgb2YgYmVsb3cgaXQuXG4gICAqL1xuICBkcm9wdXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBbiBodG1sIGlkIGF0dHJpYnV0ZSwgbmVjZXNzYXJ5IGZvciBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBzdWNoIGFzIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAdHlwZSB7c3RyaW5nfG51bWJlcn1cbiAgICogQHJlcXVpcmVkXG4gICAqL1xuICBpZDogaXNSZXF1aXJlZEZvckExMXkoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pKSxcblxuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBjaGlsZHJlbiBvZiBhIERyb3Bkb3duIG1heSBiZSBhIGA8RHJvcGRvd24uVG9nZ2xlPmAgb3IgYSBgPERyb3Bkb3duLk1lbnU+YC5cbiAgICogQHR5cGUge25vZGV9XG4gICAqL1xuICBjaGlsZHJlbjogYWxsKHJlcXVpcmVkUm9sZXMoVE9HR0xFX1JPTEUsIE1FTlVfUk9MRSksIGV4Y2x1c2l2ZVJvbGVzKE1FTlVfUk9MRSkpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsaWduIHRoZSBtZW51IHRvIHRoZSByaWdodCBzaWRlIG9mIHRoZSBEcm9wZG93biB0b2dnbGVcbiAgICovXG4gIHB1bGxSaWdodDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoZSBEcm9wZG93biBpcyB2aXNpYmxlLlxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIG9uVG9nZ2xlXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICBkZWZhdWx0T3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgRHJvcGRvd24gd2lzaGVzIHRvIGNoYW5nZSB2aXNpYmlsaXR5LiBDYWxsZWQgd2l0aCB0aGUgcmVxdWVzdGVkXG4gICAqIGBvcGVuYCB2YWx1ZSwgdGhlIERPTSBldmVudCwgYW5kIHRoZSBzb3VyY2UgdGhhdCBmaXJlZCBpdDogYCdjbGljaydgLGAna2V5ZG93bidgLGAncm9vdENsb3NlJ2AsIG9yIGAnc2VsZWN0J2AuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGZ1bmN0aW9uKEJvb2xlYW4gaXNPcGVuLCBPYmplY3QgZXZlbnQsIHsgU3RyaW5nIHNvdXJjZSB9KSB7fVxuICAgKiBgYGBcbiAgICogQGNvbnRyb2xsYWJsZSBvcGVuXG4gICAqL1xuICBvblRvZ2dsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogYGBganNcbiAgICogKGV2ZW50S2V5OiBhbnksIGV2ZW50OiBPYmplY3QpID0+IGFueVxuICAgKiBgYGBcbiAgICovXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYCdtZW51aXRlbSdgLCBjYXVzZXMgdGhlIGRyb3Bkb3duIHRvIGJlaGF2ZSBsaWtlIGEgbWVudSBpdGVtIHJhdGhlciB0aGFuXG4gICAqIGEgbWVudSBidXR0b24uXG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBXaGljaCBldmVudCB3aGVuIGZpcmVkIG91dHNpZGUgdGhlIGNvbXBvbmVudCB3aWxsIGNhdXNlIGl0IHRvIGJlIGNsb3NlZFxuICAgKlxuICAgKiAqTm90ZTogRm9yIGN1c3RvbSBkcm9wZG93biBjb21wb25lbnRzLCB5b3Ugd2lsbCBoYXZlIHRvIHBhc3MgdGhlXG4gICAqIGByb290Q2xvc2VFdmVudGAgdG8gYDxSb290Q2xvc2VXcmFwcGVyPmAgaW4geW91ciBjdXN0b20gZHJvcGRvd24gbWVudVxuICAgKiBjb21wb25lbnQgKFtzaW1pbGFybHkgdG8gaG93IGl0IGlzIGltcGxlbWVudGVkIGluIGA8RHJvcGRvd24uTWVudT5gXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtYm9vdHN0cmFwL3JlYWN0LWJvb3RzdHJhcC9ibG9iL3YwLjMxLjUvc3JjL0Ryb3Bkb3duTWVudS5qcyNMMTE1LUwxMTkpKS4qXG4gICAqL1xuICByb290Q2xvc2VFdmVudDogUHJvcFR5cGVzLm9uZU9mKFsnY2xpY2snLCAnbW91c2Vkb3duJ10pLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogQnV0dG9uR3JvdXBcbn07XG5cbnZhciBEcm9wZG93biA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcm9wZG93biwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJvcGRvd24pO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBfdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZUNsb3NlID0gX3RoaXMuaGFuZGxlQ2xvc2UuYmluZChfdGhpcyk7XG5cbiAgICBfdGhpcy5fZm9jdXNJbkRyb3Bkb3duID0gZmFsc2U7XG4gICAgX3RoaXMubGFzdE9wZW5FdmVudFR5cGUgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuZm9jdXNOZXh0T25PcGVuKCk7XG4gIH07XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcykge1xuICAgIGlmICghbmV4dFByb3BzLm9wZW4gJiYgdGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICB0aGlzLl9mb2N1c0luRHJvcGRvd24gPSBjb250YWlucyhSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLm1lbnUpLCBhY3RpdmVFbGVtZW50KGRvY3VtZW50KSk7XG4gICAgfVxuICB9O1xuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG9wZW4gPSB0aGlzLnByb3BzLm9wZW47XG5cbiAgICB2YXIgcHJldk9wZW4gPSBwcmV2UHJvcHMub3BlbjtcblxuICAgIGlmIChvcGVuICYmICFwcmV2T3Blbikge1xuICAgICAgdGhpcy5mb2N1c05leHRPbk9wZW4oKTtcbiAgICB9XG5cbiAgICBpZiAoIW9wZW4gJiYgcHJldk9wZW4pIHtcbiAgICAgIC8vIGlmIGZvY3VzIGhhc24ndCBhbHJlYWR5IG1vdmVkIGZyb20gdGhlIG1lbnUgbGV0J3MgcmV0dXJuIGl0XG4gICAgICAvLyB0byB0aGUgdG9nZ2xlXG4gICAgICBpZiAodGhpcy5fZm9jdXNJbkRyb3Bkb3duKSB7XG4gICAgICAgIHRoaXMuX2ZvY3VzSW5Ecm9wZG93biA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgIHZhciB0b2dnbGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLnRvZ2dsZSk7XG5cbiAgICBpZiAodG9nZ2xlICYmIHRvZ2dsZS5mb2N1cykge1xuICAgICAgdG9nZ2xlLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5mb2N1c05leHRPbk9wZW4gPSBmdW5jdGlvbiBmb2N1c05leHRPbk9wZW4oKSB7XG4gICAgdmFyIG1lbnUgPSB0aGlzLm1lbnU7XG5cbiAgICBpZiAoIW1lbnUuZm9jdXNOZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGFzdE9wZW5FdmVudFR5cGUgPT09ICdrZXlkb3duJyB8fCB0aGlzLnByb3BzLnJvbGUgPT09ICdtZW51aXRlbScpIHtcbiAgICAgIG1lbnUuZm9jdXNOZXh0KCk7XG4gICAgfVxuICB9O1xuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnRvZ2dsZU9wZW4oZXZlbnQsIHsgc291cmNlOiAnY2xpY2snIH0pO1xuICB9O1xuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5oYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIGhhbmRsZUNsb3NlKGV2ZW50LCBldmVudERldGFpbHMpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMub3Blbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudG9nZ2xlT3BlbihldmVudCwgZXZlbnREZXRhaWxzKTtcbiAgfTtcblxuICBEcm9wZG93bi5wcm90b3R5cGUuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgY2FzZSBrZXljb2RlLmNvZGVzLmRvd246XG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgICAgdGhpcy50b2dnbGVPcGVuKGV2ZW50LCB7IHNvdXJjZTogJ2tleWRvd24nIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWVudS5mb2N1c05leHQpIHtcbiAgICAgICAgICB0aGlzLm1lbnUuZm9jdXNOZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGtleWNvZGUuY29kZXMuZXNjOlxuICAgICAgY2FzZSBrZXljb2RlLmNvZGVzLnRhYjpcbiAgICAgICAgdGhpcy5oYW5kbGVDbG9zZShldmVudCwgeyBzb3VyY2U6ICdrZXlkb3duJyB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfTtcblxuICBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlT3BlbiA9IGZ1bmN0aW9uIHRvZ2dsZU9wZW4oZXZlbnQsIGV2ZW50RGV0YWlscykge1xuICAgIHZhciBvcGVuID0gIXRoaXMucHJvcHMub3BlbjtcblxuICAgIGlmIChvcGVuKSB7XG4gICAgICB0aGlzLmxhc3RPcGVuRXZlbnRUeXBlID0gZXZlbnREZXRhaWxzLnNvdXJjZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vblRvZ2dsZSkge1xuICAgICAgdGhpcy5wcm9wcy5vblRvZ2dsZShvcGVuLCBldmVudCwgZXZlbnREZXRhaWxzKTtcbiAgICB9XG4gIH07XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLnJlbmRlck1lbnUgPSBmdW5jdGlvbiByZW5kZXJNZW51KGNoaWxkLCBfcmVmKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgaWQgPSBfcmVmLmlkLFxuICAgICAgICBvblNlbGVjdCA9IF9yZWYub25TZWxlY3QsXG4gICAgICAgIHJvb3RDbG9zZUV2ZW50ID0gX3JlZi5yb290Q2xvc2VFdmVudCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydpZCcsICdvblNlbGVjdCcsICdyb290Q2xvc2VFdmVudCddKTtcblxuICAgIHZhciByZWYgPSBmdW5jdGlvbiByZWYoYykge1xuICAgICAgX3RoaXMyLm1lbnUgPSBjO1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkLnJlZiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnU3RyaW5nIHJlZnMgYXJlIG5vdCBzdXBwb3J0ZWQgb24gYDxEcm9wZG93bi5NZW51PmAgY29tcG9uZW50cy4gJyArICdUbyBhcHBseSBhIHJlZiB0byB0aGUgY29tcG9uZW50IHVzZSB0aGUgY2FsbGJhY2sgc2lnbmF0dXJlOlxcblxcbiAnICsgJ2h0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvbW9yZS1hYm91dC1yZWZzLmh0bWwjdGhlLXJlZi1jYWxsYmFjay1hdHRyaWJ1dGUnKSA6IHZvaWQgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVmID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkLnJlZiwgcmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgbGFiZWxsZWRCeTogaWQsXG4gICAgICBic0NsYXNzOiBwcmVmaXgocHJvcHMsICdtZW51JyksXG4gICAgICBvbkNsb3NlOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oY2hpbGQucHJvcHMub25DbG9zZSwgdGhpcy5oYW5kbGVDbG9zZSksXG4gICAgICBvblNlbGVjdDogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkLnByb3BzLm9uU2VsZWN0LCBvblNlbGVjdCwgZnVuY3Rpb24gKGtleSwgZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5oYW5kbGVDbG9zZShldmVudCwgeyBzb3VyY2U6ICdzZWxlY3QnIH0pO1xuICAgICAgfSksXG4gICAgICByb290Q2xvc2VFdmVudDogcm9vdENsb3NlRXZlbnRcbiAgICB9KSk7XG4gIH07XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLnJlbmRlclRvZ2dsZSA9IGZ1bmN0aW9uIHJlbmRlclRvZ2dsZShjaGlsZCwgcHJvcHMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciByZWYgPSBmdW5jdGlvbiByZWYoYykge1xuICAgICAgX3RoaXMzLnRvZ2dsZSA9IGM7XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgY2hpbGQucmVmID09PSAnc3RyaW5nJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdTdHJpbmcgcmVmcyBhcmUgbm90IHN1cHBvcnRlZCBvbiBgPERyb3Bkb3duLlRvZ2dsZT5gIGNvbXBvbmVudHMuICcgKyAnVG8gYXBwbHkgYSByZWYgdG8gdGhlIGNvbXBvbmVudCB1c2UgdGhlIGNhbGxiYWNrIHNpZ25hdHVyZTpcXG5cXG4gJyArICdodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL21vcmUtYWJvdXQtcmVmcy5odG1sI3RoZS1yZWYtY2FsbGJhY2stYXR0cmlidXRlJykgOiB2b2lkIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZiA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihjaGlsZC5yZWYsIHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGJzQ2xhc3M6IHByZWZpeChwcm9wcywgJ3RvZ2dsZScpLFxuICAgICAgb25DbGljazogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkLnByb3BzLm9uQ2xpY2ssIHRoaXMuaGFuZGxlQ2xpY2spLFxuICAgICAgb25LZXlEb3duOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oY2hpbGQucHJvcHMub25LZXlEb3duLCB0aGlzLmhhbmRsZUtleURvd24pXG4gICAgfSkpO1xuICB9O1xuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9jbGFzc2VzLFxuICAgICAgICBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgaWQgPSBfcHJvcHMuaWQsXG4gICAgICAgIGRyb3B1cCA9IF9wcm9wcy5kcm9wdXAsXG4gICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICBwdWxsUmlnaHQgPSBfcHJvcHMucHVsbFJpZ2h0LFxuICAgICAgICBvcGVuID0gX3Byb3BzLm9wZW4sXG4gICAgICAgIG9uU2VsZWN0ID0gX3Byb3BzLm9uU2VsZWN0LFxuICAgICAgICByb2xlID0gX3Byb3BzLnJvbGUsXG4gICAgICAgIGJzQ2xhc3MgPSBfcHJvcHMuYnNDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcm9vdENsb3NlRXZlbnQgPSBfcHJvcHMucm9vdENsb3NlRXZlbnQsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29tcG9uZW50Q2xhc3MnLCAnaWQnLCAnZHJvcHVwJywgJ2Rpc2FibGVkJywgJ3B1bGxSaWdodCcsICdvcGVuJywgJ29uU2VsZWN0JywgJ3JvbGUnLCAnYnNDbGFzcycsICdjbGFzc05hbWUnLCAncm9vdENsb3NlRXZlbnQnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICBkZWxldGUgcHJvcHMub25Ub2dnbGU7XG5cbiAgICB2YXIgY2xhc3NlcyA9IChfY2xhc3NlcyA9IHt9LCBfY2xhc3Nlc1tic0NsYXNzXSA9IHRydWUsIF9jbGFzc2VzLm9wZW4gPSBvcGVuLCBfY2xhc3Nlcy5kaXNhYmxlZCA9IGRpc2FibGVkLCBfY2xhc3Nlcyk7XG5cbiAgICBpZiAoZHJvcHVwKSB7XG4gICAgICBjbGFzc2VzW2JzQ2xhc3NdID0gZmFsc2U7XG4gICAgICBjbGFzc2VzLmRyb3B1cCA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpbnRlbnRpb25hbGx5IGZvcndhcmRzIGJzU2l6ZSBhbmQgYnNTdHlsZSAoaWYgc2V0KSB0byB0aGVcbiAgICAvLyB1bmRlcmx5aW5nIGNvbXBvbmVudCwgdG8gYWxsb3cgaXQgdG8gcmVuZGVyIHNpemUgYW5kIHN0eWxlIHZhcmlhbnRzLlxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb21wb25lbnQsXG4gICAgICBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSksXG4gICAgICBWYWxpZENvbXBvbmVudENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHN3aXRjaCAoY2hpbGQucHJvcHMuYnNSb2xlKSB7XG4gICAgICAgICAgY2FzZSBUT0dHTEVfUk9MRTpcbiAgICAgICAgICAgIHJldHVybiBfdGhpczQucmVuZGVyVG9nZ2xlKGNoaWxkLCB7XG4gICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICAgICAgICByb2xlOiByb2xlLFxuICAgICAgICAgICAgICBic0NsYXNzOiBic0NsYXNzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICBjYXNlIE1FTlVfUk9MRTpcbiAgICAgICAgICAgIHJldHVybiBfdGhpczQucmVuZGVyTWVudShjaGlsZCwge1xuICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgICAgICAgIHB1bGxSaWdodDogcHVsbFJpZ2h0LFxuICAgICAgICAgICAgICBic0NsYXNzOiBic0NsYXNzLFxuICAgICAgICAgICAgICBvblNlbGVjdDogb25TZWxlY3QsXG4gICAgICAgICAgICAgIHJvb3RDbG9zZUV2ZW50OiByb290Q2xvc2VFdmVudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRHJvcGRvd24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRHJvcGRvd24uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5zZXRCc0NsYXNzKCdkcm9wZG93bicsIERyb3Bkb3duKTtcblxudmFyIFVuY29udHJvbGxlZERyb3Bkb3duID0gdW5jb250cm9sbGFibGUoRHJvcGRvd24sIHsgb3BlbjogJ29uVG9nZ2xlJyB9KTtcblxuVW5jb250cm9sbGVkRHJvcGRvd24uVG9nZ2xlID0gRHJvcGRvd25Ub2dnbGU7XG5VbmNvbnRyb2xsZWREcm9wZG93bi5NZW51ID0gRHJvcGRvd25NZW51O1xuXG5leHBvcnQgZGVmYXVsdCBVbmNvbnRyb2xsZWREcm9wZG93bjsiLCJpbXBvcnQgX09iamVjdCRlbnRyaWVzIGZyb20gXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2VudHJpZXNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNwbGl0Q29tcG9uZW50UHJvcHMocHJvcHMsIENvbXBvbmVudCkge1xuICB2YXIgY29tcG9uZW50UHJvcFR5cGVzID0gQ29tcG9uZW50LnByb3BUeXBlcztcblxuICB2YXIgcGFyZW50UHJvcHMgPSB7fTtcbiAgdmFyIGNoaWxkUHJvcHMgPSB7fTtcblxuICBfT2JqZWN0JGVudHJpZXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgcHJvcE5hbWUgPSBfcmVmWzBdLFxuICAgICAgICBwcm9wVmFsdWUgPSBfcmVmWzFdO1xuXG4gICAgaWYgKGNvbXBvbmVudFByb3BUeXBlc1twcm9wTmFtZV0pIHtcbiAgICAgIHBhcmVudFByb3BzW3Byb3BOYW1lXSA9IHByb3BWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGRQcm9wc1twcm9wTmFtZV0gPSBwcm9wVmFsdWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gW3BhcmVudFByb3BzLCBjaGlsZFByb3BzXTtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi9Ecm9wZG93bic7XG5pbXBvcnQgc3BsaXRDb21wb25lbnRQcm9wcyBmcm9tICcuL3V0aWxzL3NwbGl0Q29tcG9uZW50UHJvcHMnO1xuXG52YXIgcHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIERyb3Bkb3duLnByb3BUeXBlcywge1xuXG4gIC8vIFRvZ2dsZSBwcm9wcy5cbiAgYnNTdHlsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYnNTaXplOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgbm9DYXJldDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLy8gT3ZlcnJpZGUgZ2VuZXJhdGVkIGRvY3MgZnJvbSA8RHJvcGRvd24+LlxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufSk7XG5cbnZhciBEcm9wZG93bkJ1dHRvbiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcm9wZG93bkJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd25CdXR0b24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyb3Bkb3duQnV0dG9uKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgRHJvcGRvd25CdXR0b24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNTaXplID0gX3Byb3BzLmJzU2l6ZSxcbiAgICAgICAgYnNTdHlsZSA9IF9wcm9wcy5ic1N0eWxlLFxuICAgICAgICB0aXRsZSA9IF9wcm9wcy50aXRsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydic1NpemUnLCAnYnNTdHlsZScsICd0aXRsZScsICdjaGlsZHJlbiddKTtcblxuICAgIHZhciBfc3BsaXRDb21wb25lbnRQcm9wcyA9IHNwbGl0Q29tcG9uZW50UHJvcHMocHJvcHMsIERyb3Bkb3duLkNvbnRyb2xsZWRDb21wb25lbnQpLFxuICAgICAgICBkcm9wZG93blByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMF0sXG4gICAgICAgIHRvZ2dsZVByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMV07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIERyb3Bkb3duLFxuICAgICAgX2V4dGVuZHMoe30sIGRyb3Bkb3duUHJvcHMsIHsgYnNTaXplOiBic1NpemUsIGJzU3R5bGU6IGJzU3R5bGUgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBEcm9wZG93bi5Ub2dnbGUsXG4gICAgICAgIF9leHRlbmRzKHt9LCB0b2dnbGVQcm9wcywgeyBic1NpemU6IGJzU2l6ZSwgYnNTdHlsZTogYnNTdHlsZSB9KSxcbiAgICAgICAgdGl0bGVcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBEcm9wZG93bi5NZW51LFxuICAgICAgICBudWxsLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duQnV0dG9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ecm9wZG93bkJ1dHRvbi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duQnV0dG9uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuXG52YXIgX2ZhZGVTdHlsZXM7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbiwgeyBFTlRFUkVELCBFTlRFUklORyB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbic7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBmYWRlIGluIG9yIGZhZGUgb3V0IGFuaW1hdGlvblxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXYWl0IHVudGlsIHRoZSBmaXJzdCBcImVudGVyXCIgdHJhbnNpdGlvbiB0byBtb3VudCB0aGUgY29tcG9uZW50IChhZGQgaXQgdG8gdGhlIERPTSlcbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFVubW91bnQgdGhlIGNvbXBvbmVudCAocmVtb3ZlIGl0IGZyb20gdGhlIERPTSkgd2hlbiBpdCBpcyBmYWRlZCBvdXRcbiAgICovXG4gIHVubW91bnRPbkV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSdW4gdGhlIGZhZGUgaW4gYW5pbWF0aW9uIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHMsIGlmIGl0IGlzIGluaXRpYWxseVxuICAgKiBzaG93blxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRHVyYXRpb24gb2YgdGhlIGZhZGUgYW5pbWF0aW9uIGluIG1pbGxpc2Vjb25kcywgdG8gZW5zdXJlIHRoYXQgZmluaXNoaW5nXG4gICAqIGNhbGxiYWNrcyBhcmUgZmlyZWQgZXZlbiBpZiB0aGUgb3JpZ2luYWwgYnJvd3NlciB0cmFuc2l0aW9uIGVuZCBldmVudHMgYXJlXG4gICAqIGNhbmNlbGVkXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBmYWRlcyBpblxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgY29tcG9uZW50IHN0YXJ0cyB0byBmYWRlIGluXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBoYXMgY29tcG9uZW50IGZhZGVkIGluXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgZmFkZXMgb3V0XG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBzdGFydHMgdG8gZmFkZSBvdXRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBmYWRlZCBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICB0aW1lb3V0OiAzMDAsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlXG59O1xuXG52YXIgZmFkZVN0eWxlcyA9IChfZmFkZVN0eWxlcyA9IHt9LCBfZmFkZVN0eWxlc1tFTlRFUklOR10gPSAnaW4nLCBfZmFkZVN0eWxlc1tFTlRFUkVEXSA9ICdpbicsIF9mYWRlU3R5bGVzKTtcblxudmFyIEZhZGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRmFkZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmFkZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmFkZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIEZhZGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFRyYW5zaXRpb24sXG4gICAgICBwcm9wcyxcbiAgICAgIGZ1bmN0aW9uIChzdGF0dXMsIGlubmVyUHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoJ2ZhZGUnLCBjbGFzc05hbWUsIGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSwgZmFkZVN0eWxlc1tzdGF0dXNdKVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gRmFkZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRmFkZS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5GYWRlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgRmFkZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBob3Jpem9udGFsOiBQcm9wVHlwZXMuYm9vbCxcbiAgaW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBob3Jpem9udGFsOiBmYWxzZSxcbiAgaW5saW5lOiBmYWxzZSxcbiAgY29tcG9uZW50Q2xhc3M6ICdmb3JtJ1xufTtcblxudmFyIEZvcm0gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRm9ybSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9ybSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIEZvcm0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaG9yaXpvbnRhbCA9IF9wcm9wcy5ob3Jpem9udGFsLFxuICAgICAgICBpbmxpbmUgPSBfcHJvcHMuaW5saW5lLFxuICAgICAgICBDb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydob3Jpem9udGFsJywgJ2lubGluZScsICdjb21wb25lbnRDbGFzcycsICdjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBbXTtcbiAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgY2xhc3Nlcy5wdXNoKHByZWZpeChic1Byb3BzLCAnaG9yaXpvbnRhbCcpKTtcbiAgICB9XG4gICAgaWYgKGlubGluZSkge1xuICAgICAgY2xhc3Nlcy5wdXNoKHByZWZpeChic1Byb3BzLCAnaW5saW5lJykpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZvcm0ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRm9ybS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2Zvcm0nLCBGb3JtKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBHbHlwaGljb24gZnJvbSAnLi9HbHlwaGljb24nO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBic1JvbGU6ICdmZWVkYmFjaydcbn07XG5cbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19mb3JtR3JvdXA6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbnZhciBGb3JtQ29udHJvbEZlZWRiYWNrID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEZvcm1Db250cm9sRmVlZGJhY2ssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZvcm1Db250cm9sRmVlZGJhY2soKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm1Db250cm9sRmVlZGJhY2spO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBGb3JtQ29udHJvbEZlZWRiYWNrLnByb3RvdHlwZS5nZXRHbHlwaCA9IGZ1bmN0aW9uIGdldEdseXBoKHZhbGlkYXRpb25TdGF0ZSkge1xuICAgIHN3aXRjaCAodmFsaWRhdGlvblN0YXRlKSB7XG4gICAgICBjYXNlICdzdWNjZXNzJzpcbiAgICAgICAgcmV0dXJuICdvayc7XG4gICAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgICAgcmV0dXJuICd3YXJuaW5nLXNpZ24nO1xuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICByZXR1cm4gJ3JlbW92ZSc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgRm9ybUNvbnRyb2xGZWVkYmFjay5wcm90b3R5cGUucmVuZGVyRGVmYXVsdEZlZWRiYWNrID0gZnVuY3Rpb24gcmVuZGVyRGVmYXVsdEZlZWRiYWNrKGZvcm1Hcm91cCwgY2xhc3NOYW1lLCBjbGFzc2VzLCBlbGVtZW50UHJvcHMpIHtcbiAgICB2YXIgZ2x5cGggPSB0aGlzLmdldEdseXBoKGZvcm1Hcm91cCAmJiBmb3JtR3JvdXAudmFsaWRhdGlvblN0YXRlKTtcbiAgICBpZiAoIWdseXBoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChHbHlwaGljb24sIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGdseXBoOiBnbHlwaCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIEZvcm1Db250cm9sRmVlZGJhY2sucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlZmF1bHRGZWVkYmFjayh0aGlzLmNvbnRleHQuJGJzX2Zvcm1Hcm91cCwgY2xhc3NOYW1lLCBjbGFzc2VzLCBlbGVtZW50UHJvcHMpO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjaGlsZC5wcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1Db250cm9sRmVlZGJhY2s7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZvcm1Db250cm9sRmVlZGJhY2suZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuRm9ybUNvbnRyb2xGZWVkYmFjay5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2Zvcm0tY29udHJvbC1mZWVkYmFjaycsIEZvcm1Db250cm9sRmVlZGJhY2spOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAncCdcbn07XG5cbnZhciBGb3JtQ29udHJvbFN0YXRpYyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhGb3JtQ29udHJvbFN0YXRpYywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybUNvbnRyb2xTdGF0aWMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm1Db250cm9sU3RhdGljKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgRm9ybUNvbnRyb2xTdGF0aWMucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29tcG9uZW50Q2xhc3MnLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSkpO1xuICB9O1xuXG4gIHJldHVybiBGb3JtQ29udHJvbFN0YXRpYztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRm9ybUNvbnRyb2xTdGF0aWMucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRm9ybUNvbnRyb2xTdGF0aWMuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdmb3JtLWNvbnRyb2wtc3RhdGljJywgRm9ybUNvbnRyb2xTdGF0aWMpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcblxuaW1wb3J0IEZvcm1Db250cm9sRmVlZGJhY2sgZnJvbSAnLi9Gb3JtQ29udHJvbEZlZWRiYWNrJztcbmltcG9ydCBGb3JtQ29udHJvbFN0YXRpYyBmcm9tICcuL0Zvcm1Db250cm9sU3RhdGljJztcbmltcG9ydCB7IHByZWZpeCwgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcywgYnNTaXplcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IHsgU0laRV9NQVAsIFNpemUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogT25seSByZWxldmFudCBpZiBgY29tcG9uZW50Q2xhc3NgIGlzIGAnaW5wdXQnYC5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBVc2VzIGBjb250cm9sSWRgIGZyb20gYDxGb3JtR3JvdXA+YCBpZiBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEF0dGFjaGVzIGEgcmVmIHRvIHRoZSBgPGlucHV0PmAgZWxlbWVudC4gT25seSBmdW5jdGlvbnMgY2FuIGJlIHVzZWQgaGVyZS5cbiAgICpcbiAgICogYGBganNcbiAgICogPEZvcm1Db250cm9sIGlucHV0UmVmPXtyZWYgPT4geyB0aGlzLmlucHV0ID0gcmVmOyB9fSAvPlxuICAgKiBgYGBcbiAgICovXG4gIGlucHV0UmVmOiBQcm9wVHlwZXMuZnVuY1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdpbnB1dCdcbn07XG5cbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19mb3JtR3JvdXA6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbnZhciBGb3JtQ29udHJvbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhGb3JtQ29udHJvbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybUNvbnRyb2woKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm1Db250cm9sKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgRm9ybUNvbnRyb2wucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgZm9ybUdyb3VwID0gdGhpcy5jb250ZXh0LiRic19mb3JtR3JvdXA7XG4gICAgdmFyIGNvbnRyb2xJZCA9IGZvcm1Hcm91cCAmJiBmb3JtR3JvdXAuY29udHJvbElkO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgdHlwZSA9IF9wcm9wcy50eXBlLFxuICAgICAgICBfcHJvcHMkaWQgPSBfcHJvcHMuaWQsXG4gICAgICAgIGlkID0gX3Byb3BzJGlkID09PSB1bmRlZmluZWQgPyBjb250cm9sSWQgOiBfcHJvcHMkaWQsXG4gICAgICAgIGlucHV0UmVmID0gX3Byb3BzLmlucHV0UmVmLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBic1NpemUgPSBfcHJvcHMuYnNTaXplLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29tcG9uZW50Q2xhc3MnLCAndHlwZScsICdpZCcsICdpbnB1dFJlZicsICdjbGFzc05hbWUnLCAnYnNTaXplJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGNvbnRyb2xJZCA9PSBudWxsIHx8IGlkID09PSBjb250cm9sSWQsICdgY29udHJvbElkYCBpcyBpZ25vcmVkIG9uIGA8Rm9ybUNvbnRyb2w+YCB3aGVuIGBpZGAgaXMgc3BlY2lmaWVkLicpIDogdm9pZCAwO1xuXG4gICAgLy8gaW5wdXRbdHlwZT1cImZpbGVcIl0gc2hvdWxkIG5vdCBoYXZlIC5mb3JtLWNvbnRyb2wuXG4gICAgdmFyIGNsYXNzZXMgPSB2b2lkIDA7XG4gICAgaWYgKHR5cGUgIT09ICdmaWxlJykge1xuICAgICAgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuICAgIH1cblxuICAgIC8vIElmIHVzZXIgcHJvdmlkZXMgYSBzaXplLCBtYWtlIHN1cmUgdG8gYXBwZW5kIGl0IHRvIGNsYXNzZXMgYXMgaW5wdXQtXG4gICAgLy8gZS5nLiBpZiBic1NpemUgaXMgc21hbGwsIGl0IHdpbGwgYXBwZW5kIGlucHV0LXNtXG4gICAgaWYgKGJzU2l6ZSkge1xuICAgICAgdmFyIHNpemUgPSBTSVpFX01BUFtic1NpemVdIHx8IGJzU2l6ZTtcbiAgICAgIGNsYXNzZXNbcHJlZml4KHsgYnNDbGFzczogJ2lucHV0JyB9LCBzaXplKV0gPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGlkOiBpZCxcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gRm9ybUNvbnRyb2w7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZvcm1Db250cm9sLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkZvcm1Db250cm9sLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkZvcm1Db250cm9sLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuRm9ybUNvbnRyb2wuRmVlZGJhY2sgPSBGb3JtQ29udHJvbEZlZWRiYWNrO1xuRm9ybUNvbnRyb2wuU3RhdGljID0gRm9ybUNvbnRyb2xTdGF0aWM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2Zvcm0tY29udHJvbCcsIGJzU2l6ZXMoW1NpemUuU01BTEwsIFNpemUuTEFSR0VdLCBGb3JtQ29udHJvbCkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYnNDbGFzcywgYnNTaXplcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wc0FuZE9taXQgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCB7IFNpemUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBTZXRzIGBpZGAgb24gYDxGb3JtQ29udHJvbD5gIGFuZCBgaHRtbEZvcmAgb24gYDxGb3JtR3JvdXAuTGFiZWw+YC5cbiAgICovXG4gIGNvbnRyb2xJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgdmFsaWRhdGlvblN0YXRlOiBQcm9wVHlwZXMub25lT2YoWydzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZXJyb3InLCBudWxsXSlcbn07XG5cbnZhciBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgJGJzX2Zvcm1Hcm91cDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG52YXIgRm9ybUdyb3VwID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEZvcm1Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybUdyb3VwKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtR3JvdXApO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBGb3JtR3JvdXAucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY29udHJvbElkID0gX3Byb3BzLmNvbnRyb2xJZCxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlID0gX3Byb3BzLnZhbGlkYXRpb25TdGF0ZTtcblxuXG4gICAgcmV0dXJuIHtcbiAgICAgICRic19mb3JtR3JvdXA6IHtcbiAgICAgICAgY29udHJvbElkOiBjb250cm9sSWQsXG4gICAgICAgIHZhbGlkYXRpb25TdGF0ZTogdmFsaWRhdGlvblN0YXRlXG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBGb3JtR3JvdXAucHJvdG90eXBlLmhhc0ZlZWRiYWNrID0gZnVuY3Rpb24gaGFzRmVlZGJhY2soY2hpbGRyZW4pIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiBWYWxpZENvbXBvbmVudENoaWxkcmVuLnNvbWUoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLnByb3BzLmJzUm9sZSA9PT0gJ2ZlZWRiYWNrJyB8fCBjaGlsZC5wcm9wcy5jaGlsZHJlbiAmJiBfdGhpczIuaGFzRmVlZGJhY2soY2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgIH0pO1xuICB9O1xuXG4gIEZvcm1Hcm91cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlID0gX3Byb3BzMi52YWxpZGF0aW9uU3RhdGUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsndmFsaWRhdGlvblN0YXRlJywgJ2NsYXNzTmFtZScsICdjaGlsZHJlbiddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQocHJvcHMsIFsnY29udHJvbElkJ10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIHtcbiAgICAgICdoYXMtZmVlZGJhY2snOiB0aGlzLmhhc0ZlZWRiYWNrKGNoaWxkcmVuKVxuICAgIH0pO1xuICAgIGlmICh2YWxpZGF0aW9uU3RhdGUpIHtcbiAgICAgIGNsYXNzZXNbJ2hhcy0nICsgdmFsaWRhdGlvblN0YXRlXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSksXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1Hcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRm9ybUdyb3VwLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkZvcm1Hcm91cC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdmb3JtLWdyb3VwJywgYnNTaXplcyhbU2l6ZS5MQVJHRSwgU2l6ZS5TTUFMTF0sIEZvcm1Hcm91cCkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUdXJuIGFueSBmaXhlZC13aWR0aCBncmlkIGxheW91dCBpbnRvIGEgZnVsbC13aWR0aCBsYXlvdXQgYnkgdGhpcyBwcm9wZXJ0eS5cbiAgICpcbiAgICogQWRkcyBgY29udGFpbmVyLWZsdWlkYCBjbGFzcy5cbiAgICovXG4gIGZsdWlkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFlvdSBjYW4gdXNlIGEgY3VzdG9tIGVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50XG4gICAqL1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2JyxcbiAgZmx1aWQ6IGZhbHNlXG59O1xuXG52YXIgR3JpZCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhHcmlkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBHcmlkKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHcmlkKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgR3JpZC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBmbHVpZCA9IF9wcm9wcy5mbHVpZCxcbiAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnZmx1aWQnLCAnY29tcG9uZW50Q2xhc3MnLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gcHJlZml4KGJzUHJvcHMsIGZsdWlkICYmICdmbHVpZCcpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gR3JpZDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuR3JpZC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5HcmlkLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnY29udGFpbmVyJywgR3JpZCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIEhlbHBCbG9jayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIZWxwQmxvY2ssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhlbHBCbG9jaygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGVscEJsb2NrKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgSGVscEJsb2NrLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEhlbHBCbG9jaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnaGVscC1ibG9jaycsIEhlbHBCbG9jayk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2V0cyBpbWFnZSBhcyByZXNwb25zaXZlIGltYWdlXG4gICAqL1xuICByZXNwb25zaXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU2V0cyBpbWFnZSBzaGFwZSBhcyByb3VuZGVkXG4gICAqL1xuICByb3VuZGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU2V0cyBpbWFnZSBzaGFwZSBhcyBjaXJjbGVcbiAgICovXG4gIGNpcmNsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFNldHMgaW1hZ2Ugc2hhcGUgYXMgdGh1bWJuYWlsXG4gICAqL1xuICB0aHVtYm5haWw6IFByb3BUeXBlcy5ib29sXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICByZXNwb25zaXZlOiBmYWxzZSxcbiAgcm91bmRlZDogZmFsc2UsXG4gIGNpcmNsZTogZmFsc2UsXG4gIHRodW1ibmFpbDogZmFsc2Vcbn07XG5cbnZhciBJbWFnZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJbWFnZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW1hZ2UoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEltYWdlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgSW1hZ2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2NsYXNzZXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVzcG9uc2l2ZSA9IF9wcm9wcy5yZXNwb25zaXZlLFxuICAgICAgICByb3VuZGVkID0gX3Byb3BzLnJvdW5kZWQsXG4gICAgICAgIGNpcmNsZSA9IF9wcm9wcy5jaXJjbGUsXG4gICAgICAgIHRodW1ibmFpbCA9IF9wcm9wcy50aHVtYm5haWwsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydyZXNwb25zaXZlJywgJ3JvdW5kZWQnLCAnY2lyY2xlJywgJ3RodW1ibmFpbCcsICdjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoX2NsYXNzZXMgPSB7fSwgX2NsYXNzZXNbcHJlZml4KGJzUHJvcHMsICdyZXNwb25zaXZlJyldID0gcmVzcG9uc2l2ZSwgX2NsYXNzZXNbcHJlZml4KGJzUHJvcHMsICdyb3VuZGVkJyldID0gcm91bmRlZCwgX2NsYXNzZXNbcHJlZml4KGJzUHJvcHMsICdjaXJjbGUnKV0gPSBjaXJjbGUsIF9jbGFzc2VzW3ByZWZpeChic1Byb3BzLCAndGh1bWJuYWlsJyldID0gdGh1bWJuYWlsLCBfY2xhc3Nlcyk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEltYWdlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5JbWFnZS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5JbWFnZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2ltZycsIEltYWdlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgSW5wdXRHcm91cEFkZG9uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKElucHV0R3JvdXBBZGRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5wdXRHcm91cEFkZG9uKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnB1dEdyb3VwQWRkb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBJbnB1dEdyb3VwQWRkb24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSW5wdXRHcm91cEFkZG9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdpbnB1dC1ncm91cC1hZGRvbicsIElucHV0R3JvdXBBZGRvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIElucHV0R3JvdXBCdXR0b24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSW5wdXRHcm91cEJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5wdXRHcm91cEJ1dHRvbigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXRHcm91cEJ1dHRvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIElucHV0R3JvdXBCdXR0b24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSW5wdXRHcm91cEJ1dHRvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnaW5wdXQtZ3JvdXAtYnRuJywgSW5wdXRHcm91cEJ1dHRvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBJbnB1dEdyb3VwQWRkb24gZnJvbSAnLi9JbnB1dEdyb3VwQWRkb24nO1xuaW1wb3J0IElucHV0R3JvdXBCdXR0b24gZnJvbSAnLi9JbnB1dEdyb3VwQnV0dG9uJztcbmltcG9ydCB7IGJzQ2xhc3MsIGJzU2l6ZXMsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCB7IFNpemUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcblxudmFyIElucHV0R3JvdXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSW5wdXRHcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5wdXRHcm91cCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXRHcm91cCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIElucHV0R3JvdXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSW5wdXRHcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSW5wdXRHcm91cC5BZGRvbiA9IElucHV0R3JvdXBBZGRvbjtcbklucHV0R3JvdXAuQnV0dG9uID0gSW5wdXRHcm91cEJ1dHRvbjtcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnaW5wdXQtZ3JvdXAnLCBic1NpemVzKFtTaXplLkxBUkdFLCBTaXplLlNNQUxMXSwgSW5wdXRHcm91cCkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2J1xufTtcblxudmFyIEp1bWJvdHJvbiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhKdW1ib3Ryb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEp1bWJvdHJvbigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSnVtYm90cm9uKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgSnVtYm90cm9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NvbXBvbmVudENsYXNzJywgJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSnVtYm90cm9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5KdW1ib3Ryb24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuSnVtYm90cm9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnanVtYm90cm9uJywgSnVtYm90cm9uKTsiLCJpbXBvcnQgX09iamVjdCR2YWx1ZXMgZnJvbSAnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC92YWx1ZXMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGJzU3R5bGVzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgeyBTdGF0ZSwgU3R5bGUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcblxudmFyIExhYmVsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExhYmVsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMYWJlbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGFiZWwpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBMYWJlbC5wcm90b3R5cGUuaGFzQ29udGVudCA9IGZ1bmN0aW9uIGhhc0NvbnRlbnQoY2hpbGRyZW4pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQgfHwgY2hpbGQgPT09IDApIHtcbiAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgTGFiZWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIHtcblxuICAgICAgLy8gSGFjayBmb3IgY29sbGFwc2luZyBvbiBJRTguXG4gICAgICBoaWRkZW46ICF0aGlzLmhhc0NvbnRlbnQoY2hpbGRyZW4pXG4gICAgfSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSksXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIExhYmVsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdsYWJlbCcsIGJzU3R5bGVzKFtdLmNvbmNhdChfT2JqZWN0JHZhbHVlcyhTdGF0ZSksIFtTdHlsZS5ERUZBVUxULCBTdHlsZS5QUklNQVJZXSksIFN0eWxlLkRFRkFVTFQsIExhYmVsKSk7IiwiaW1wb3J0IF9PYmplY3QkdmFsdWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvdmFsdWVzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYnNDbGFzcywgYnNTdHlsZXMsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgYWN0aXZlOiBQcm9wVHlwZXMuYW55LFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmFueSxcbiAgaGVhZGVyOiBQcm9wVHlwZXMubm9kZSxcbiAgbGlzdEl0ZW06IFByb3BUeXBlcy5ib29sLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbGlzdEl0ZW06IGZhbHNlXG59O1xuXG52YXIgTGlzdEdyb3VwSXRlbSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaXN0R3JvdXBJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaXN0R3JvdXBJdGVtKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXN0R3JvdXBJdGVtKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgTGlzdEdyb3VwSXRlbS5wcm90b3R5cGUucmVuZGVySGVhZGVyID0gZnVuY3Rpb24gcmVuZGVySGVhZGVyKGhlYWRlciwgaGVhZGluZ0NsYXNzTmFtZSkge1xuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChoZWFkZXIpKSB7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGhlYWRlciwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoaGVhZGVyLnByb3BzLmNsYXNzTmFtZSwgaGVhZGluZ0NsYXNzTmFtZSlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2g0JyxcbiAgICAgIHsgY2xhc3NOYW1lOiBoZWFkaW5nQ2xhc3NOYW1lIH0sXG4gICAgICBoZWFkZXJcbiAgICApO1xuICB9O1xuXG4gIExpc3RHcm91cEl0ZW0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWN0aXZlID0gX3Byb3BzLmFjdGl2ZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGhlYWRlciA9IF9wcm9wcy5oZWFkZXIsXG4gICAgICAgIGxpc3RJdGVtID0gX3Byb3BzLmxpc3RJdGVtLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2FjdGl2ZScsICdkaXNhYmxlZCcsICdjbGFzc05hbWUnLCAnaGVhZGVyJywgJ2xpc3RJdGVtJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCB7XG4gICAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICAgIH0pO1xuXG4gICAgdmFyIENvbXBvbmVudCA9IHZvaWQgMDtcblxuICAgIGlmIChlbGVtZW50UHJvcHMuaHJlZikge1xuICAgICAgQ29tcG9uZW50ID0gJ2EnO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFByb3BzLm9uQ2xpY2spIHtcbiAgICAgIENvbXBvbmVudCA9ICdidXR0b24nO1xuICAgICAgZWxlbWVudFByb3BzLnR5cGUgPSBlbGVtZW50UHJvcHMudHlwZSB8fCAnYnV0dG9uJztcbiAgICB9IGVsc2UgaWYgKGxpc3RJdGVtKSB7XG4gICAgICBDb21wb25lbnQgPSAnbGknO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb21wb25lbnQgPSAnc3Bhbic7XG4gICAgfVxuXG4gICAgZWxlbWVudFByb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKTtcblxuICAgIC8vIFRPRE86IERlcHJlY2F0ZSBgaGVhZGVyYCBwcm9wLlxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBDb21wb25lbnQsXG4gICAgICAgIGVsZW1lbnRQcm9wcyxcbiAgICAgICAgdGhpcy5yZW5kZXJIZWFkZXIoaGVhZGVyLCBwcmVmaXgoYnNQcm9wcywgJ2hlYWRpbmcnKSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3AnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXgoYnNQcm9wcywgJ3RleHQnKSB9LFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb21wb25lbnQsXG4gICAgICBlbGVtZW50UHJvcHMsXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIExpc3RHcm91cEl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpc3RHcm91cEl0ZW0ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTGlzdEdyb3VwSXRlbS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2xpc3QtZ3JvdXAtaXRlbScsIGJzU3R5bGVzKF9PYmplY3QkdmFsdWVzKFN0YXRlKSwgTGlzdEdyb3VwSXRlbSkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcblxuaW1wb3J0IExpc3RHcm91cEl0ZW0gZnJvbSAnLi9MaXN0R3JvdXBJdGVtJztcbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3UgY2FuIHVzZSBhIGN1c3RvbSBlbGVtZW50IHR5cGUgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKlxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCBpdCB3aWxsIGJlIHRyZWF0ZWQgYXMgYCdsaSdgIGlmIGV2ZXJ5IGNoaWxkIGlzIGFcbiAgICogbm9uLWFjdGlvbmFibGUgYDxMaXN0R3JvdXBJdGVtPmAsIGFuZCBgJ2RpdidgIG90aGVyd2lzZS5cbiAgICovXG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdENvbXBvbmVudChjaGlsZHJlbikge1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgLy8gRklYTUU6IFRoaXMgaXMgdGhlIG9sZCBiZWhhdmlvci4gSXMgdGhpcyByaWdodD9cbiAgICByZXR1cm4gJ2Rpdic7XG4gIH1cblxuICBpZiAoVmFsaWRDb21wb25lbnRDaGlsZHJlbi5zb21lKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQudHlwZSAhPT0gTGlzdEdyb3VwSXRlbSB8fCBjaGlsZC5wcm9wcy5ocmVmIHx8IGNoaWxkLnByb3BzLm9uQ2xpY2s7XG4gIH0pKSB7XG4gICAgcmV0dXJuICdkaXYnO1xuICB9XG5cbiAgcmV0dXJuICd1bCc7XG59XG5cbnZhciBMaXN0R3JvdXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTGlzdEdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaXN0R3JvdXAoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpc3RHcm91cCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIExpc3RHcm91cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX3Byb3BzJGNvbXBvbmVudENsYXNzID0gX3Byb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50Q2xhc3MgPT09IHVuZGVmaW5lZCA/IGdldERlZmF1bHRDb21wb25lbnQoY2hpbGRyZW4pIDogX3Byb3BzJGNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2hpbGRyZW4nLCAnY29tcG9uZW50Q2xhc3MnLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG5cbiAgICB2YXIgdXNlTGlzdEl0ZW0gPSBDb21wb25lbnQgPT09ICd1bCcgJiYgVmFsaWRDb21wb25lbnRDaGlsZHJlbi5ldmVyeShjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQudHlwZSA9PT0gTGlzdEdyb3VwSXRlbTtcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQ29tcG9uZW50LFxuICAgICAgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSB9KSxcbiAgICAgIHVzZUxpc3RJdGVtID8gVmFsaWRDb21wb25lbnRDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7IGxpc3RJdGVtOiB0cnVlIH0pO1xuICAgICAgfSkgOiBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIExpc3RHcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTGlzdEdyb3VwLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbGlzdC1ncm91cCcsIExpc3RHcm91cCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcblxuaW1wb3J0IE1lZGlhIGZyb20gJy4vTWVkaWEnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBbGlnbiB0aGUgbWVkaWEgdG8gdGhlIHRvcCwgbWlkZGxlLCBvciBib3R0b20gb2YgdGhlIG1lZGlhIG9iamVjdC5cbiAgICovXG4gIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnbWlkZGxlJywgJ2JvdHRvbSddKSxcblxuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2J1xufTtcblxudmFyIE1lZGlhQm9keSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZWRpYUJvZHksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lZGlhQm9keSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVkaWFCb2R5KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgTWVkaWFCb2R5LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgYWxpZ24gPSBfcHJvcHMuYWxpZ24sXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjb21wb25lbnRDbGFzcycsICdhbGlnbicsICdjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIGlmIChhbGlnbikge1xuICAgICAgLy8gVGhlIGNsYXNzIGlzIGUuZy4gYG1lZGlhLXRvcGAsIG5vdCBgbWVkaWEtbGVmdC10b3BgLlxuICAgICAgY2xhc3Nlc1twcmVmaXgoTWVkaWEuZGVmYXVsdFByb3BzLCBhbGlnbildID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNZWRpYUJvZHk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lZGlhQm9keS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5NZWRpYUJvZHkuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdtZWRpYS1ib2R5JywgTWVkaWFCb2R5KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6IGVsZW1lbnRUeXBlXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2g0J1xufTtcblxudmFyIE1lZGlhSGVhZGluZyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZWRpYUhlYWRpbmcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lZGlhSGVhZGluZygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVkaWFIZWFkaW5nKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgTWVkaWFIZWFkaW5nLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NvbXBvbmVudENsYXNzJywgJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTWVkaWFIZWFkaW5nO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZWRpYUhlYWRpbmcucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTWVkaWFIZWFkaW5nLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbWVkaWEtaGVhZGluZycsIE1lZGlhSGVhZGluZyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgTWVkaWEgZnJvbSAnLi9NZWRpYSc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFsaWduIHRoZSBtZWRpYSB0byB0aGUgdG9wLCBtaWRkbGUsIG9yIGJvdHRvbSBvZiB0aGUgbWVkaWEgb2JqZWN0LlxuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ3RvcCcsICdtaWRkbGUnLCAnYm90dG9tJ10pXG59O1xuXG52YXIgTWVkaWFMZWZ0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lZGlhTGVmdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVkaWFMZWZ0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZWRpYUxlZnQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBNZWRpYUxlZnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWxpZ24gPSBfcHJvcHMuYWxpZ24sXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydhbGlnbicsICdjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIGlmIChhbGlnbikge1xuICAgICAgLy8gVGhlIGNsYXNzIGlzIGUuZy4gYG1lZGlhLXRvcGAsIG5vdCBgbWVkaWEtbGVmdC10b3BgLlxuICAgICAgY2xhc3Nlc1twcmVmaXgoTWVkaWEuZGVmYXVsdFByb3BzLCBhbGlnbildID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lZGlhTGVmdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVkaWFMZWZ0LnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbWVkaWEtbGVmdCcsIE1lZGlhTGVmdCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIE1lZGlhTGlzdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZWRpYUxpc3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lZGlhTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVkaWFMaXN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgTWVkaWFMaXN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCd1bCcsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNZWRpYUxpc3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ21lZGlhLWxpc3QnLCBNZWRpYUxpc3QpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBNZWRpYUxpc3RJdGVtID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lZGlhTGlzdEl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lZGlhTGlzdEl0ZW0oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lZGlhTGlzdEl0ZW0pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBNZWRpYUxpc3RJdGVtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdsaScsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNZWRpYUxpc3RJdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdtZWRpYScsIE1lZGlhTGlzdEl0ZW0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IE1lZGlhIGZyb20gJy4vTWVkaWEnO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBbGlnbiB0aGUgbWVkaWEgdG8gdGhlIHRvcCwgbWlkZGxlLCBvciBib3R0b20gb2YgdGhlIG1lZGlhIG9iamVjdC5cbiAgICovXG4gIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnbWlkZGxlJywgJ2JvdHRvbSddKVxufTtcblxudmFyIE1lZGlhUmlnaHQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVkaWFSaWdodCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVkaWFSaWdodCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVkaWFSaWdodCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIE1lZGlhUmlnaHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWxpZ24gPSBfcHJvcHMuYWxpZ24sXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydhbGlnbicsICdjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIGlmIChhbGlnbikge1xuICAgICAgLy8gVGhlIGNsYXNzIGlzIGUuZy4gYG1lZGlhLXRvcGAsIG5vdCBgbWVkaWEtcmlnaHQtdG9wYC5cbiAgICAgIGNsYXNzZXNbcHJlZml4KE1lZGlhLmRlZmF1bHRQcm9wcywgYWxpZ24pXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNZWRpYVJpZ2h0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZWRpYVJpZ2h0LnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbWVkaWEtcmlnaHQnLCBNZWRpYVJpZ2h0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5cbmltcG9ydCBNZWRpYUJvZHkgZnJvbSAnLi9NZWRpYUJvZHknO1xuaW1wb3J0IE1lZGlhSGVhZGluZyBmcm9tICcuL01lZGlhSGVhZGluZyc7XG5pbXBvcnQgTWVkaWFMZWZ0IGZyb20gJy4vTWVkaWFMZWZ0JztcbmltcG9ydCBNZWRpYUxpc3QgZnJvbSAnLi9NZWRpYUxpc3QnO1xuaW1wb3J0IE1lZGlhTGlzdEl0ZW0gZnJvbSAnLi9NZWRpYUxpc3RJdGVtJztcbmltcG9ydCBNZWRpYVJpZ2h0IGZyb20gJy4vTWVkaWFSaWdodCc7XG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdkaXYnXG59O1xuXG52YXIgTWVkaWEgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVkaWEsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lZGlhKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZWRpYSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIE1lZGlhLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NvbXBvbmVudENsYXNzJywgJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTWVkaWE7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lZGlhLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1lZGlhLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuTWVkaWEuSGVhZGluZyA9IE1lZGlhSGVhZGluZztcbk1lZGlhLkJvZHkgPSBNZWRpYUJvZHk7XG5NZWRpYS5MZWZ0ID0gTWVkaWFMZWZ0O1xuTWVkaWEuUmlnaHQgPSBNZWRpYVJpZ2h0O1xuTWVkaWEuTGlzdCA9IE1lZGlhTGlzdDtcbk1lZGlhLkxpc3RJdGVtID0gTWVkaWFMaXN0SXRlbTtcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbWVkaWEnLCBNZWRpYSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGFsbCBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGwnO1xuXG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuaW1wb3J0IHsgYnNDbGFzcywgcHJlZml4LCBzcGxpdEJzUHJvcHNBbmRPbWl0IH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEhpZ2hsaWdodCB0aGUgbWVudSBpdGVtIGFzIGFjdGl2ZS5cbiAgICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIG1lbnUgaXRlbSwgbWFraW5nIGl0IHVuc2VsZWN0YWJsZS5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU3R5bGVzIHRoZSBtZW51IGl0ZW0gYXMgYSBob3Jpem9udGFsIHJ1bGUsIHByb3ZpZGluZyB2aXN1YWwgc2VwYXJhdGlvbiBiZXR3ZWVuXG4gICAqIGdyb3VwcyBvZiBtZW51IGl0ZW1zLlxuICAgKi9cbiAgZGl2aWRlcjogYWxsKFByb3BUeXBlcy5ib29sLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXZpZGVyID0gX3JlZi5kaXZpZGVyLFxuICAgICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gICAgcmV0dXJuIGRpdmlkZXIgJiYgY2hpbGRyZW4gPyBuZXcgRXJyb3IoJ0NoaWxkcmVuIHdpbGwgbm90IGJlIHJlbmRlcmVkIGZvciBkaXZpZGVycycpIDogbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFZhbHVlIHBhc3NlZCB0byB0aGUgYG9uU2VsZWN0YCBoYW5kbGVyLCB1c2VmdWwgZm9yIGlkZW50aWZ5aW5nIHRoZSBzZWxlY3RlZCBtZW51IGl0ZW0uXG4gICAqL1xuICBldmVudEtleTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogU3R5bGVzIHRoZSBtZW51IGl0ZW0gYXMgYSBoZWFkZXIgbGFiZWwsIHVzZWZ1bCBmb3IgZGVzY3JpYmluZyBhIGdyb3VwIG9mIG1lbnUgaXRlbXMuXG4gICAqL1xuICBoZWFkZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBIVE1MIGBocmVmYCBhdHRyaWJ1dGUgY29ycmVzcG9uZGluZyB0byBgYS5ocmVmYC5cbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIG1lbnUgaXRlbSBpcyBjbGlja2VkLlxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogYGBganNcbiAgICogKGV2ZW50S2V5OiBhbnksIGV2ZW50OiBPYmplY3QpID0+IGFueVxuICAgKiBgYGBcbiAgICovXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuY1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGl2aWRlcjogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgaGVhZGVyOiBmYWxzZVxufTtcblxudmFyIE1lbnVJdGVtID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbnVJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51SXRlbShwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW51SXRlbSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gX3RoaXMuaGFuZGxlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgTWVudUl0ZW0ucHJvdG90eXBlLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaHJlZiA9IF9wcm9wcy5ocmVmLFxuICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgb25TZWxlY3QgPSBfcHJvcHMub25TZWxlY3QsXG4gICAgICAgIGV2ZW50S2V5ID0gX3Byb3BzLmV2ZW50S2V5O1xuXG5cbiAgICBpZiAoIWhyZWYgfHwgZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uU2VsZWN0KSB7XG4gICAgICBvblNlbGVjdChldmVudEtleSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBNZW51SXRlbS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWN0aXZlID0gX3Byb3BzMi5hY3RpdmUsXG4gICAgICAgIGRpc2FibGVkID0gX3Byb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgZGl2aWRlciA9IF9wcm9wczIuZGl2aWRlcixcbiAgICAgICAgaGVhZGVyID0gX3Byb3BzMi5oZWFkZXIsXG4gICAgICAgIG9uQ2xpY2sgPSBfcHJvcHMyLm9uQ2xpY2ssXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF9wcm9wczIuc3R5bGUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsnYWN0aXZlJywgJ2Rpc2FibGVkJywgJ2RpdmlkZXInLCAnaGVhZGVyJywgJ29uQ2xpY2snLCAnY2xhc3NOYW1lJywgJ3N0eWxlJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHNBbmRPbWl0ID0gc3BsaXRCc1Byb3BzQW5kT21pdChwcm9wcywgWydldmVudEtleScsICdvblNlbGVjdCddKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzQW5kT21pdFsxXTtcblxuICAgIGlmIChkaXZpZGVyKSB7XG4gICAgICAvLyBGb3JjaWJseSBibGFuayBvdXQgdGhlIGNoaWxkcmVuOyBzZXBhcmF0b3JzIHNob3VsZG4ndCByZW5kZXIgYW55LlxuICAgICAgZWxlbWVudFByb3BzLmNoaWxkcmVuID0gdW5kZWZpbmVkO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnbGknLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICAgIHJvbGU6ICdzZXBhcmF0b3InLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCAnZGl2aWRlcicpLFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnbGknLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICAgIHJvbGU6ICdoZWFkaW5nJyxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcHJlZml4KGJzUHJvcHMsICdoZWFkZXInKSksXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2xpJyxcbiAgICAgIHtcbiAgICAgICAgcm9sZTogJ3ByZXNlbnRhdGlvbicsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHsgYWN0aXZlOiBhY3RpdmUsIGRpc2FibGVkOiBkaXNhYmxlZCB9KSxcbiAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICAgIHJvbGU6ICdtZW51aXRlbScsXG4gICAgICAgIHRhYkluZGV4OiAnLTEnLFxuICAgICAgICBvbkNsaWNrOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25DbGljaywgdGhpcy5oYW5kbGVDbGljaylcbiAgICAgIH0pKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbnVJdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW51SXRlbS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5NZW51SXRlbS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ2Ryb3Bkb3duJywgTWVudUl0ZW0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2J1xufTtcblxudmFyIE1vZGFsQm9keSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNb2RhbEJvZHksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsQm9keSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxCb2R5KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgTW9kYWxCb2R5LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NvbXBvbmVudENsYXNzJywgJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxCb2R5O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Nb2RhbEJvZHkucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTW9kYWxCb2R5LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbW9kYWwtYm9keScsIE1vZGFsQm9keSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBic1NpemVzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCB7IFNpemUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgY3NzIGNsYXNzIHRvIGFwcGx5IHRvIHRoZSBNb2RhbCBkaWFsb2cgRE9NIG5vZGUuXG4gICAqL1xuICBkaWFsb2dDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbnZhciBNb2RhbERpYWxvZyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNb2RhbERpYWxvZywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxEaWFsb2coKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsRGlhbG9nKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgTW9kYWxEaWFsb2cucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpYWxvZ0NsYXNzTmFtZSA9IF9wcm9wcy5kaWFsb2dDbGFzc05hbWUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2RpYWxvZ0NsYXNzTmFtZScsICdjbGFzc05hbWUnLCAnc3R5bGUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGJzQ2xhc3NOYW1lID0gcHJlZml4KGJzUHJvcHMpO1xuXG4gICAgdmFyIG1vZGFsU3R5bGUgPSBfZXh0ZW5kcyh7IGRpc3BsYXk6ICdibG9jaycgfSwgc3R5bGUpO1xuXG4gICAgdmFyIGRpYWxvZ0NsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW2JzQ2xhc3NOYW1lXSA9IGZhbHNlLCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdkaWFsb2cnKV0gPSB0cnVlLCBfZXh0ZW5kczIpKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICAgIHRhYkluZGV4OiAnLTEnLFxuICAgICAgICByb2xlOiAnZGlhbG9nJyxcbiAgICAgICAgc3R5bGU6IG1vZGFsU3R5bGUsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzQ2xhc3NOYW1lKVxuICAgICAgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoZGlhbG9nQ2xhc3NOYW1lLCBkaWFsb2dDbGFzc2VzKSB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXgoYnNQcm9wcywgJ2NvbnRlbnQnKSwgcm9sZTogJ2RvY3VtZW50JyB9LFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbERpYWxvZztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9kYWxEaWFsb2cucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdtb2RhbCcsIGJzU2l6ZXMoW1NpemUuTEFSR0UsIFNpemUuU01BTExdLCBNb2RhbERpYWxvZykpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiAnZGl2J1xufTtcblxudmFyIE1vZGFsRm9vdGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1vZGFsRm9vdGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbEZvb3RlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxGb290ZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBNb2RhbEZvb3Rlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjb21wb25lbnRDbGFzcycsICdjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsRm9vdGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Nb2RhbEZvb3Rlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Nb2RhbEZvb3Rlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ21vZGFsLWZvb3RlcicsIE1vZGFsRm9vdGVyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuaW1wb3J0IENsb3NlQnV0dG9uIGZyb20gJy4vQ2xvc2VCdXR0b24nO1xuXG4vLyBUT0RPOiBgYXJpYS1sYWJlbGAgc2hvdWxkIGJlIGBjbG9zZUxhYmVsYC5cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFByb3ZpZGVzIGFuIGFjY2Vzc2libGUgbGFiZWwgZm9yIHRoZSBjbG9zZVxuICAgKiBidXR0b24uIEl0IGlzIHVzZWQgZm9yIEFzc2lzdGl2ZSBUZWNobm9sb2d5IHdoZW4gdGhlIGxhYmVsIHRleHQgaXMgbm90XG4gICAqIHJlYWRhYmxlLlxuICAgKi9cbiAgY2xvc2VMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogU3BlY2lmeSB3aGV0aGVyIHRoZSBDb21wb25lbnQgc2hvdWxkIGNvbnRhaW4gYSBjbG9zZSBidXR0b25cbiAgICovXG4gIGNsb3NlQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjbG9zZSBidXR0b24gaXMgY2xpY2tlZC4gSWYgdXNlZCBkaXJlY3RseSBpbnNpZGVcbiAgICogYSBNb2RhbCBjb21wb25lbnQsIHRoZSBvbkhpZGUgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHByb3BhZ2F0ZWQgdXAgdG8gdGhlXG4gICAqIHBhcmVudCBNb2RhbCBgb25IaWRlYC5cbiAgICovXG4gIG9uSGlkZTogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNsb3NlTGFiZWw6ICdDbG9zZScsXG4gIGNsb3NlQnV0dG9uOiBmYWxzZVxufTtcblxudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX21vZGFsOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIG9uSGlkZTogUHJvcFR5cGVzLmZ1bmNcbiAgfSlcbn07XG5cbnZhciBNb2RhbEhlYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNb2RhbEhlYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxIZWFkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsSGVhZGVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgTW9kYWxIZWFkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xvc2VMYWJlbCA9IF9wcm9wcy5jbG9zZUxhYmVsLFxuICAgICAgICBjbG9zZUJ1dHRvbiA9IF9wcm9wcy5jbG9zZUJ1dHRvbixcbiAgICAgICAgb25IaWRlID0gX3Byb3BzLm9uSGlkZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbG9zZUxhYmVsJywgJ2Nsb3NlQnV0dG9uJywgJ29uSGlkZScsICdjbGFzc05hbWUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICB2YXIgbW9kYWwgPSB0aGlzLmNvbnRleHQuJGJzX21vZGFsO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSB9KSxcbiAgICAgIGNsb3NlQnV0dG9uICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvc2VCdXR0b24sIHtcbiAgICAgICAgbGFiZWw6IGNsb3NlTGFiZWwsXG4gICAgICAgIG9uQ2xpY2s6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihtb2RhbCAmJiBtb2RhbC5vbkhpZGUsIG9uSGlkZSlcbiAgICAgIH0pLFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbEhlYWRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9kYWxIZWFkZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTW9kYWxIZWFkZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuTW9kYWxIZWFkZXIuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdtb2RhbC1oZWFkZXInLCBNb2RhbEhlYWRlcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdoNCdcbn07XG5cbnZhciBNb2RhbFRpdGxlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1vZGFsVGl0bGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsVGl0bGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsVGl0bGUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBNb2RhbFRpdGxlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NvbXBvbmVudENsYXNzJywgJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxUaXRsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9kYWxUaXRsZS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Nb2RhbFRpdGxlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnbW9kYWwtdGl0bGUnLCBNb2RhbFRpdGxlKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICdkb20taGVscGVycy9ldmVudHMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgY2FuVXNlRE9NIGZyb20gJ2RvbS1oZWxwZXJzL3V0aWwvaW5ET00nO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgQmFzZU1vZGFsIGZyb20gJ3JlYWN0LW92ZXJsYXlzL2xpYi9Nb2RhbCc7XG5pbXBvcnQgaXNPdmVyZmxvd2luZyBmcm9tICdyZWFjdC1vdmVybGF5cy9saWIvdXRpbHMvaXNPdmVyZmxvd2luZyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuXG5pbXBvcnQgRmFkZSBmcm9tICcuL0ZhZGUnO1xuaW1wb3J0IEJvZHkgZnJvbSAnLi9Nb2RhbEJvZHknO1xuaW1wb3J0IE1vZGFsRGlhbG9nIGZyb20gJy4vTW9kYWxEaWFsb2cnO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuL01vZGFsRm9vdGVyJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9Nb2RhbEhlYWRlcic7XG5pbXBvcnQgVGl0bGUgZnJvbSAnLi9Nb2RhbFRpdGxlJztcbmltcG9ydCB7IGJzQ2xhc3MsIGJzU2l6ZXMsIHByZWZpeCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgc3BsaXRDb21wb25lbnRQcm9wcyBmcm9tICcuL3V0aWxzL3NwbGl0Q29tcG9uZW50UHJvcHMnO1xuaW1wb3J0IHsgU2l6ZSB9IGZyb20gJy4vdXRpbHMvU3R5bGVDb25maWcnO1xuXG52YXIgcHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIEJhc2VNb2RhbC5wcm9wVHlwZXMsIE1vZGFsRGlhbG9nLnByb3BUeXBlcywge1xuXG4gIC8qKlxuICAgKiBJbmNsdWRlIGEgYmFja2Ryb3AgY29tcG9uZW50LiBTcGVjaWZ5ICdzdGF0aWMnIGZvciBhIGJhY2tkcm9wIHRoYXQgZG9lc24ndFxuICAgKiB0cmlnZ2VyIGFuIFwib25IaWRlXCIgd2hlbiBjbGlja2VkLlxuICAgKi9cbiAgYmFja2Ryb3A6IFByb3BUeXBlcy5vbmVPZihbJ3N0YXRpYycsIHRydWUsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIEFkZCBhbiBvcHRpb25hbCBleHRyYSBjbGFzcyBuYW1lIHRvIC5tb2RhbC1iYWNrZHJvcFxuICAgKiBJdCBjb3VsZCBlbmQgdXAgbG9va2luZyBsaWtlIGNsYXNzPVwibW9kYWwtYmFja2Ryb3AgZm9vLW1vZGFsLWJhY2tkcm9wIGluXCIuXG4gICAqL1xuICBiYWNrZHJvcENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2xvc2UgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkXG4gICAqL1xuICBrZXlib2FyZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE9wZW4gYW5kIGNsb3NlIHRoZSBNb2RhbCB3aXRoIGEgc2xpZGUgYW5kIGZhZGUgYW5pbWF0aW9uLlxuICAgKi9cbiAgYW5pbWF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBDb21wb25lbnQgdHlwZSB0aGF0IHByb3ZpZGVzIHRoZSBtb2RhbCBjb250ZW50IE1hcmt1cC4gVGhpcyBpcyBhIHVzZWZ1bFxuICAgKiBwcm9wIHdoZW4geW91IHdhbnQgdG8gdXNlIHlvdXIgb3duIHN0eWxlcyBhbmQgbWFya3VwIHRvIGNyZWF0ZSBhIGN1c3RvbVxuICAgKiBtb2RhbCBjb21wb25lbnQuXG4gICAqL1xuICBkaWFsb2dDb21wb25lbnRDbGFzczogZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXRcbiAgICogb3BlbnMsIGFuZCByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBmYWxzZSBhcyBpdCBtYWtlcyB0aGUgTW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuLXJlYWRlcnMuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgTW9kYWwgd2hpbGVcbiAgICogb3Blbi4gQ29uc2lkZXIgbGVhdmluZyB0aGUgZGVmYXVsdCB2YWx1ZSBoZXJlLCBhcyBpdCBpcyBuZWNlc3NhcnkgdG8gbWFrZVxuICAgKiB0aGUgTW9kYWwgd29yayB3ZWxsIHdpdGggYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgc3VjaCBhcyBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW5cbiAgICovXG4gIHJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIHNob3cgaXRzZWxmLlxuICAgKi9cbiAgc2hvdzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgaGVhZGVyIGNsb3NlQnV0dG9uIG9yIG5vbi1zdGF0aWMgYmFja2Ryb3AgaXNcbiAgICogY2xpY2tlZC4gUmVxdWlyZWQgaWYgZWl0aGVyIGFyZSBzcGVjaWZpZWQuXG4gICAqL1xuICBvbkhpZGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1vZGFsIHRyYW5zaXRpb25zIGluXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE1vZGFsIGJlZ2lucyB0byB0cmFuc2l0aW9uIGluXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE1vZGFsIGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgTW9kYWwgdHJhbnNpdGlvbnMgb3V0XG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgTW9kYWwgYmVnaW5zIHRvIHRyYW5zaXRpb24gb3V0XG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgTW9kYWwgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnRhaW5lcjogQmFzZU1vZGFsLnByb3BUeXBlcy5jb250YWluZXJcbn0pO1xuXG52YXIgZGVmYXVsdFByb3BzID0gX2V4dGVuZHMoe30sIEJhc2VNb2RhbC5kZWZhdWx0UHJvcHMsIHtcbiAgYW5pbWF0aW9uOiB0cnVlLFxuICBkaWFsb2dDb21wb25lbnRDbGFzczogTW9kYWxEaWFsb2dcbn0pO1xuXG52YXIgY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICRic19tb2RhbDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBvbkhpZGU6IFByb3BUeXBlcy5mdW5jXG4gIH0pXG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSwgcmVhY3Qvbm8tbXVsdGktY29tcCAqL1xuZnVuY3Rpb24gRGlhbG9nVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgdGltZW91dDogTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTiB9KSk7XG59XG5cbmZ1bmN0aW9uIEJhY2tkcm9wVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgdGltZW91dDogTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiB9KSk7XG59XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxudmFyIE1vZGFsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1vZGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbChwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyaW5nID0gX3RoaXMuaGFuZGxlRW50ZXJpbmcuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSA9IF90aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZS5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5oYW5kbGVEaWFsb2dDbGljayA9IF90aGlzLmhhbmRsZURpYWxvZ0NsaWNrLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLnNldE1vZGFsUmVmID0gX3RoaXMuc2V0TW9kYWxSZWYuYmluZChfdGhpcyk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0eWxlOiB7fVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJGJzX21vZGFsOiB7XG4gICAgICAgIG9uSGlkZTogdGhpcy5wcm9wcy5vbkhpZGVcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIC8vIENsZWFuIHVwIHRoZSBsaXN0ZW5lciBpZiB3ZSBuZWVkIHRvLlxuICAgIHRoaXMuaGFuZGxlRXhpdGVkKCk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLnNldE1vZGFsUmVmID0gZnVuY3Rpb24gc2V0TW9kYWxSZWYocmVmKSB7XG4gICAgdGhpcy5fbW9kYWwgPSByZWY7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmhhbmRsZURpYWxvZ0NsaWNrID0gZnVuY3Rpb24gaGFuZGxlRGlhbG9nQ2xpY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkhpZGUoKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcmluZygpIHtcbiAgICAvLyBGSVhNRTogVGhpcyBzaG91bGQgd29yayBldmVuIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgIGV2ZW50cy5vbih3aW5kb3csICdyZXNpemUnLCB0aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gICAgdGhpcy51cGRhdGVTdHlsZSgpO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoKSB7XG4gICAgLy8gRklYTUU6IFRoaXMgc2hvdWxkIHdvcmsgZXZlbiB3aGVuIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICBldmVudHMub2ZmKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlV2luZG93UmVzaXplKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuaGFuZGxlV2luZG93UmVzaXplID0gZnVuY3Rpb24gaGFuZGxlV2luZG93UmVzaXplKCkge1xuICAgIHRoaXMudXBkYXRlU3R5bGUoKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUudXBkYXRlU3R5bGUgPSBmdW5jdGlvbiB1cGRhdGVTdHlsZSgpIHtcbiAgICBpZiAoIWNhblVzZURPTSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkaWFsb2dOb2RlID0gdGhpcy5fbW9kYWwuZ2V0RGlhbG9nRWxlbWVudCgpO1xuICAgIHZhciBkaWFsb2dIZWlnaHQgPSBkaWFsb2dOb2RlLnNjcm9sbEhlaWdodDtcblxuICAgIHZhciBkb2N1bWVudCA9IG93bmVyRG9jdW1lbnQoZGlhbG9nTm9kZSk7XG4gICAgdmFyIGJvZHlJc092ZXJmbG93aW5nID0gaXNPdmVyZmxvd2luZyhSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLnByb3BzLmNvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5KSk7XG4gICAgdmFyIG1vZGFsSXNPdmVyZmxvd2luZyA9IGRpYWxvZ0hlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogYm9keUlzT3ZlcmZsb3dpbmcgJiYgIW1vZGFsSXNPdmVyZmxvd2luZyA/IGdldFNjcm9sbGJhclNpemUoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICFib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyBnZXRTY3JvbGxiYXJTaXplKCkgOiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYWNrZHJvcCA9IF9wcm9wcy5iYWNrZHJvcCxcbiAgICAgICAgYmFja2Ryb3BDbGFzc05hbWUgPSBfcHJvcHMuYmFja2Ryb3BDbGFzc05hbWUsXG4gICAgICAgIGFuaW1hdGlvbiA9IF9wcm9wcy5hbmltYXRpb24sXG4gICAgICAgIHNob3cgPSBfcHJvcHMuc2hvdyxcbiAgICAgICAgRGlhbG9nID0gX3Byb3BzLmRpYWxvZ0NvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG9uRW50ZXJpbmcgPSBfcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgb25FeGl0ZWQgPSBfcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydiYWNrZHJvcCcsICdiYWNrZHJvcENsYXNzTmFtZScsICdhbmltYXRpb24nLCAnc2hvdycsICdkaWFsb2dDb21wb25lbnRDbGFzcycsICdjbGFzc05hbWUnLCAnc3R5bGUnLCAnY2hpbGRyZW4nLCAnb25FbnRlcmluZycsICdvbkV4aXRlZCddKTtcblxuICAgIHZhciBfc3BsaXRDb21wb25lbnRQcm9wcyA9IHNwbGl0Q29tcG9uZW50UHJvcHMocHJvcHMsIEJhc2VNb2RhbCksXG4gICAgICAgIGJhc2VNb2RhbFByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMF0sXG4gICAgICAgIGRpYWxvZ1Byb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMV07XG5cbiAgICB2YXIgaW5DbGFzc05hbWUgPSBzaG93ICYmICFhbmltYXRpb24gJiYgJ2luJztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQmFzZU1vZGFsLFxuICAgICAgX2V4dGVuZHMoe30sIGJhc2VNb2RhbFByb3BzLCB7XG4gICAgICAgIHJlZjogdGhpcy5zZXRNb2RhbFJlZixcbiAgICAgICAgc2hvdzogc2hvdyxcbiAgICAgICAgY29udGFpbmVyQ2xhc3NOYW1lOiBwcmVmaXgocHJvcHMsICdvcGVuJyksXG4gICAgICAgIHRyYW5zaXRpb246IGFuaW1hdGlvbiA/IERpYWxvZ1RyYW5zaXRpb24gOiB1bmRlZmluZWQsXG4gICAgICAgIGJhY2tkcm9wOiBiYWNrZHJvcCxcbiAgICAgICAgYmFja2Ryb3BUcmFuc2l0aW9uOiBhbmltYXRpb24gPyBCYWNrZHJvcFRyYW5zaXRpb24gOiB1bmRlZmluZWQsXG4gICAgICAgIGJhY2tkcm9wQ2xhc3NOYW1lOiBjbGFzc05hbWVzKHByZWZpeChwcm9wcywgJ2JhY2tkcm9wJyksIGJhY2tkcm9wQ2xhc3NOYW1lLCBpbkNsYXNzTmFtZSksXG4gICAgICAgIG9uRW50ZXJpbmc6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbkVudGVyaW5nLCB0aGlzLmhhbmRsZUVudGVyaW5nKSxcbiAgICAgICAgb25FeGl0ZWQ6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbkV4aXRlZCwgdGhpcy5oYW5kbGVFeGl0ZWQpXG4gICAgICB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIERpYWxvZyxcbiAgICAgICAgX2V4dGVuZHMoe30sIGRpYWxvZ1Byb3BzLCB7XG4gICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCB0aGlzLnN0YXRlLnN0eWxlLCBzdHlsZSksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgaW5DbGFzc05hbWUpLFxuICAgICAgICAgIG9uQ2xpY2s6IGJhY2tkcm9wID09PSB0cnVlID8gdGhpcy5oYW5kbGVEaWFsb2dDbGljayA6IG51bGxcbiAgICAgICAgfSksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk1vZGFsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbk1vZGFsLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5cbk1vZGFsLkJvZHkgPSBCb2R5O1xuTW9kYWwuSGVhZGVyID0gSGVhZGVyO1xuTW9kYWwuVGl0bGUgPSBUaXRsZTtcbk1vZGFsLkZvb3RlciA9IEZvb3RlcjtcblxuTW9kYWwuRGlhbG9nID0gTW9kYWxEaWFsb2c7XG5cbk1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDA7XG5Nb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdtb2RhbCcsIGJzU2l6ZXMoW1NpemUuTEFSR0UsIFNpemUuU01BTExdLCBNb2RhbCkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQga2V5Y29kZSBmcm9tICdrZXljb2RlJztcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgYWxsIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2FsbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcblxuaW1wb3J0IHsgYnNDbGFzcywgYnNTdHlsZXMsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgVmFsaWRDb21wb25lbnRDaGlsZHJlbiBmcm9tICcuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4nO1xuXG4vLyBUT0RPOiBTaG91bGQgd2UgZXhwb3NlIGA8TmF2SXRlbT5gIGFzIGA8TmF2Lkl0ZW0+YD9cblxuLy8gVE9ETzogVGhpcyBgYnNTdHlsZWAgaXMgdmVyeSB1bmxpa2UgdGhlIG90aGVycy4gU2hvdWxkIHdlIHJlbmFtZSBpdD9cblxuLy8gVE9ETzogYHB1bGxSaWdodGAgYW5kIGBwdWxsTGVmdGAgZG9uJ3QgcmVuZGVyIHJpZ2h0IG91dHNpZGUgb2YgYG5hdmJhcmAuXG4vLyBDb25zaWRlciByZW5hbWluZyBvciByZXBsYWNpbmcgdGhlbS5cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE1hcmtzIHRoZSBOYXZJdGVtIHdpdGggYSBtYXRjaGluZyBgZXZlbnRLZXlgIGFzIGFjdGl2ZS4gSGFzIGFcbiAgICogaGlnaGVyIHByZWNlZGVuY2Ugb3ZlciBgYWN0aXZlSHJlZmAuXG4gICAqL1xuICBhY3RpdmVLZXk6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIE1hcmtzIHRoZSBjaGlsZCBOYXZJdGVtIHdpdGggYSBtYXRjaGluZyBgaHJlZmAgcHJvcCBhcyBhY3RpdmUuXG4gICAqL1xuICBhY3RpdmVIcmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBOYXZJdGVtcyBhcmUgYmUgcG9zaXRpb25lZCB2ZXJ0aWNhbGx5LlxuICAgKi9cbiAgc3RhY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAganVzdGlmaWVkOiBhbGwoUHJvcFR5cGVzLmJvb2wsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGp1c3RpZmllZCA9IF9yZWYuanVzdGlmaWVkLFxuICAgICAgICBuYXZiYXIgPSBfcmVmLm5hdmJhcjtcbiAgICByZXR1cm4ganVzdGlmaWVkICYmIG5hdmJhciA/IEVycm9yKCdqdXN0aWZpZWQgbmF2YmFyIGBOYXZgcyBhcmUgbm90IHN1cHBvcnRlZCcpIDogbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBhIE5hdkl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGZ1bmN0aW9uIChcbiAgICogIEFueSBldmVudEtleSxcbiAgICogIFN5bnRoZXRpY0V2ZW50IGV2ZW50P1xuICAgKiApXG4gICAqIGBgYFxuICAgKi9cbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBUklBIHJvbGUgZm9yIHRoZSBOYXYsIGluIHRoZSBjb250ZXh0IG9mIGEgVGFiQ29udGFpbmVyLCB0aGUgZGVmYXVsdCB3aWxsXG4gICAqIGJlIHNldCB0byBcInRhYmxpc3RcIiwgYnV0IGNhbiBiZSBvdmVycmlkZGVuIGJ5IHRoZSBOYXYgd2hlbiBzZXQgZXhwbGljaXRseS5cbiAgICpcbiAgICogV2hlbiB0aGUgcm9sZSBpcyBzZXQgdG8gXCJ0YWJsaXN0XCIgTmF2SXRlbSBmb2N1cyBpcyBtYW5hZ2VkIGFjY29yZGluZyB0b1xuICAgKiB0aGUgQVJJQSBhdXRob3JpbmcgcHJhY3RpY2VzIGZvciB0YWJzOlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9XRC13YWktYXJpYS1wcmFjdGljZXMtMjAxMzAzMDcvI3RhYnBhbmVsXG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBcHBseSBzdHlsaW5nIGFuIGFsaWdubWVudCBmb3IgdXNlIGluIGEgTmF2YmFyLiBUaGlzIHByb3Agd2lsbCBiZSBzZXRcbiAgICogYXV0b21hdGljYWxseSB3aGVuIHRoZSBOYXYgaXMgdXNlZCBpbnNpZGUgYSBOYXZiYXIuXG4gICAqL1xuICBuYXZiYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBGbG9hdCB0aGUgTmF2IHRvIHRoZSByaWdodC4gV2hlbiBgbmF2YmFyYCBpcyBgdHJ1ZWAgdGhlIGFwcHJvcHJpYXRlXG4gICAqIGNvbnRleHR1YWwgY2xhc3NlcyBhcmUgYWRkZWQgYXMgd2VsbC5cbiAgICovXG4gIHB1bGxSaWdodDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEZsb2F0IHRoZSBOYXYgdG8gdGhlIGxlZnQuIFdoZW4gYG5hdmJhcmAgaXMgYHRydWVgIHRoZSBhcHByb3ByaWF0ZVxuICAgKiBjb250ZXh0dWFsIGNsYXNzZXMgYXJlIGFkZGVkIGFzIHdlbGwuXG4gICAqL1xuICBwdWxsTGVmdDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGp1c3RpZmllZDogZmFsc2UsXG4gIHB1bGxSaWdodDogZmFsc2UsXG4gIHB1bGxMZWZ0OiBmYWxzZSxcbiAgc3RhY2tlZDogZmFsc2Vcbn07XG5cbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19uYXZiYXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYnNDbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmNcbiAgfSksXG5cbiAgJGJzX3RhYkNvbnRhaW5lcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhY3RpdmVLZXk6IFByb3BUeXBlcy5hbnksXG4gICAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0VGFiSWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0UGFuZUlkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pXG59O1xuXG52YXIgTmF2ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE5hdiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTmF2KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYXYpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBOYXYucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmICghdGhpcy5fbmVlZHNSZWZvY3VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbmVlZHNSZWZvY3VzID0gZmFsc2U7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIF9nZXRBY3RpdmVQcm9wcyA9IHRoaXMuZ2V0QWN0aXZlUHJvcHMoKSxcbiAgICAgICAgYWN0aXZlS2V5ID0gX2dldEFjdGl2ZVByb3BzLmFjdGl2ZUtleSxcbiAgICAgICAgYWN0aXZlSHJlZiA9IF9nZXRBY3RpdmVQcm9wcy5hY3RpdmVIcmVmO1xuXG4gICAgdmFyIGFjdGl2ZUNoaWxkID0gVmFsaWRDb21wb25lbnRDaGlsZHJlbi5maW5kKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBfdGhpczIuaXNBY3RpdmUoY2hpbGQsIGFjdGl2ZUtleSwgYWN0aXZlSHJlZik7XG4gICAgfSk7XG5cbiAgICB2YXIgY2hpbGRyZW5BcnJheSA9IFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4udG9BcnJheShjaGlsZHJlbik7XG4gICAgdmFyIGFjdGl2ZUNoaWxkSW5kZXggPSBjaGlsZHJlbkFycmF5LmluZGV4T2YoYWN0aXZlQ2hpbGQpO1xuXG4gICAgdmFyIGNoaWxkTm9kZXMgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKS5jaGlsZHJlbjtcbiAgICB2YXIgYWN0aXZlTm9kZSA9IGNoaWxkTm9kZXMgJiYgY2hpbGROb2Rlc1thY3RpdmVDaGlsZEluZGV4XTtcblxuICAgIGlmICghYWN0aXZlTm9kZSB8fCAhYWN0aXZlTm9kZS5maXJzdENoaWxkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYWN0aXZlTm9kZS5maXJzdENoaWxkLmZvY3VzKCk7XG4gIH07XG5cbiAgTmF2LnByb3RvdHlwZS5nZXRBY3RpdmVQcm9wcyA9IGZ1bmN0aW9uIGdldEFjdGl2ZVByb3BzKCkge1xuICAgIHZhciB0YWJDb250YWluZXIgPSB0aGlzLmNvbnRleHQuJGJzX3RhYkNvbnRhaW5lcjtcblxuICAgIGlmICh0YWJDb250YWluZXIpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHRoaXMucHJvcHMuYWN0aXZlS2V5ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWN0aXZlSHJlZiwgJ1NwZWNpZnlpbmcgYSBgPE5hdj5gIGBhY3RpdmVLZXlgIG9yIGBhY3RpdmVIcmVmYCBpbiB0aGUgY29udGV4dCBvZiAnICsgJ2EgYDxUYWJDb250YWluZXI+YCBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkIHVzZSBgPFRhYkNvbnRhaW5lciAnICsgKCdhY3RpdmVLZXk9eycgKyB0aGlzLnByb3BzLmFjdGl2ZUtleSArICd9IC8+YC4nKSkgOiB2b2lkIDA7XG5cbiAgICAgIHJldHVybiB0YWJDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJvcHM7XG4gIH07XG5cbiAgTmF2LnByb3RvdHlwZS5nZXROZXh0QWN0aXZlQ2hpbGQgPSBmdW5jdGlvbiBnZXROZXh0QWN0aXZlQ2hpbGQob2Zmc2V0KSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIHZhbGlkQ2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQucHJvcHMuZXZlbnRLZXkgIT0gbnVsbCAmJiAhY2hpbGQucHJvcHMuZGlzYWJsZWQ7XG4gICAgfSk7XG5cbiAgICB2YXIgX2dldEFjdGl2ZVByb3BzMiA9IHRoaXMuZ2V0QWN0aXZlUHJvcHMoKSxcbiAgICAgICAgYWN0aXZlS2V5ID0gX2dldEFjdGl2ZVByb3BzMi5hY3RpdmVLZXksXG4gICAgICAgIGFjdGl2ZUhyZWYgPSBfZ2V0QWN0aXZlUHJvcHMyLmFjdGl2ZUhyZWY7XG5cbiAgICB2YXIgYWN0aXZlQ2hpbGQgPSBWYWxpZENvbXBvbmVudENoaWxkcmVuLmZpbmQoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIF90aGlzMy5pc0FjdGl2ZShjaGlsZCwgYWN0aXZlS2V5LCBhY3RpdmVIcmVmKTtcbiAgICB9KTtcblxuICAgIC8vIFRoaXMgYXNzdW1lcyB0aGUgYWN0aXZlIGNoaWxkIGlzIG5vdCBkaXNhYmxlZC5cbiAgICB2YXIgYWN0aXZlQ2hpbGRJbmRleCA9IHZhbGlkQ2hpbGRyZW4uaW5kZXhPZihhY3RpdmVDaGlsZCk7XG4gICAgaWYgKGFjdGl2ZUNoaWxkSW5kZXggPT09IC0xKSB7XG4gICAgICAvLyBTb21ldGhpbmcgaGFzIGdvbmUgd3JvbmcuIFNlbGVjdCB0aGUgZmlyc3QgdmFsaWQgY2hpbGQgd2UgY2FuIGZpbmQuXG4gICAgICByZXR1cm4gdmFsaWRDaGlsZHJlblswXTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEluZGV4ID0gYWN0aXZlQ2hpbGRJbmRleCArIG9mZnNldDtcbiAgICB2YXIgbnVtVmFsaWRDaGlsZHJlbiA9IHZhbGlkQ2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgaWYgKG5leHRJbmRleCA+PSBudW1WYWxpZENoaWxkcmVuKSB7XG4gICAgICBuZXh0SW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAobmV4dEluZGV4IDwgMCkge1xuICAgICAgbmV4dEluZGV4ID0gbnVtVmFsaWRDaGlsZHJlbiAtIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkQ2hpbGRyZW5bbmV4dEluZGV4XTtcbiAgfTtcblxuICBOYXYucHJvdG90eXBlLmdldFRhYlByb3BzID0gZnVuY3Rpb24gZ2V0VGFiUHJvcHMoY2hpbGQsIHRhYkNvbnRhaW5lciwgbmF2Um9sZSwgYWN0aXZlLCBvblNlbGVjdCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKCF0YWJDb250YWluZXIgJiYgbmF2Um9sZSAhPT0gJ3RhYmxpc3QnKSB7XG4gICAgICAvLyBObyB0YWIgcHJvcHMgaGVyZS5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcyxcbiAgICAgICAgaWQgPSBfY2hpbGQkcHJvcHMuaWQsXG4gICAgICAgIGNvbnRyb2xzID0gX2NoaWxkJHByb3BzWydhcmlhLWNvbnRyb2xzJ10sXG4gICAgICAgIGV2ZW50S2V5ID0gX2NoaWxkJHByb3BzLmV2ZW50S2V5LFxuICAgICAgICByb2xlID0gX2NoaWxkJHByb3BzLnJvbGUsXG4gICAgICAgIG9uS2V5RG93biA9IF9jaGlsZCRwcm9wcy5vbktleURvd24sXG4gICAgICAgIHRhYkluZGV4ID0gX2NoaWxkJHByb3BzLnRhYkluZGV4O1xuXG5cbiAgICBpZiAodGFiQ29udGFpbmVyKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaWQgJiYgIWNvbnRyb2xzLCAnSW4gdGhlIGNvbnRleHQgb2YgYSBgPFRhYkNvbnRhaW5lcj5gLCBgPE5hdkl0ZW0+YHMgYXJlIGdpdmVuICcgKyAnZ2VuZXJhdGVkIGBpZGAgYW5kIGBhcmlhLWNvbnRyb2xzYCBhdHRyaWJ1dGVzIGZvciB0aGUgc2FrZSBvZiAnICsgJ3Byb3BlciBjb21wb25lbnQgYWNjZXNzaWJpbGl0eS4gQW55IHByb3ZpZGVkIG9uZXMgd2lsbCBiZSBpZ25vcmVkLiAnICsgJ1RvIGNvbnRyb2wgdGhlc2UgYXR0cmlidXRlcyBkaXJlY3RseSwgcHJvdmlkZSBhIGBnZW5lcmF0ZUNoaWxkSWRgICcgKyAncHJvcCB0byB0aGUgcGFyZW50IGA8VGFiQ29udGFpbmVyPmAuJykgOiB2b2lkIDA7XG5cbiAgICAgIGlkID0gdGFiQ29udGFpbmVyLmdldFRhYklkKGV2ZW50S2V5KTtcbiAgICAgIGNvbnRyb2xzID0gdGFiQ29udGFpbmVyLmdldFBhbmVJZChldmVudEtleSk7XG4gICAgfVxuXG4gICAgaWYgKG5hdlJvbGUgPT09ICd0YWJsaXN0Jykge1xuICAgICAgcm9sZSA9IHJvbGUgfHwgJ3RhYic7XG4gICAgICBvbktleURvd24gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpczQuaGFuZGxlVGFiS2V5RG93bihvblNlbGVjdCwgZXZlbnQpO1xuICAgICAgfSwgb25LZXlEb3duKTtcbiAgICAgIHRhYkluZGV4ID0gYWN0aXZlID8gdGFiSW5kZXggOiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgcm9sZTogcm9sZSxcbiAgICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgICAgJ2FyaWEtY29udHJvbHMnOiBjb250cm9scyxcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleFxuICAgIH07XG4gIH07XG5cbiAgTmF2LnByb3RvdHlwZS5oYW5kbGVUYWJLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlVGFiS2V5RG93bihvblNlbGVjdCwgZXZlbnQpIHtcbiAgICB2YXIgbmV4dEFjdGl2ZUNoaWxkID0gdm9pZCAwO1xuXG4gICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICBjYXNlIGtleWNvZGUuY29kZXMubGVmdDpcbiAgICAgIGNhc2Uga2V5Y29kZS5jb2Rlcy51cDpcbiAgICAgICAgbmV4dEFjdGl2ZUNoaWxkID0gdGhpcy5nZXROZXh0QWN0aXZlQ2hpbGQoLTEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Uga2V5Y29kZS5jb2Rlcy5yaWdodDpcbiAgICAgIGNhc2Uga2V5Y29kZS5jb2Rlcy5kb3duOlxuICAgICAgICBuZXh0QWN0aXZlQ2hpbGQgPSB0aGlzLmdldE5leHRBY3RpdmVDaGlsZCgxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBJdCB3YXMgYSBkaWZmZXJlbnQga2V5OyBkb24ndCBoYW5kbGUgdGhpcyBrZXlwcmVzcy5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAob25TZWxlY3QgJiYgbmV4dEFjdGl2ZUNoaWxkICYmIG5leHRBY3RpdmVDaGlsZC5wcm9wcy5ldmVudEtleSAhPSBudWxsKSB7XG4gICAgICBvblNlbGVjdChuZXh0QWN0aXZlQ2hpbGQucHJvcHMuZXZlbnRLZXkpO1xuICAgIH1cblxuICAgIHRoaXMuX25lZWRzUmVmb2N1cyA9IHRydWU7XG4gIH07XG5cbiAgTmF2LnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKF9yZWYyLCBhY3RpdmVLZXksIGFjdGl2ZUhyZWYpIHtcbiAgICB2YXIgcHJvcHMgPSBfcmVmMi5wcm9wcztcblxuICAgIGlmIChwcm9wcy5hY3RpdmUgfHwgYWN0aXZlS2V5ICE9IG51bGwgJiYgcHJvcHMuZXZlbnRLZXkgPT09IGFjdGl2ZUtleSB8fCBhY3RpdmVIcmVmICYmIHByb3BzLmhyZWYgPT09IGFjdGl2ZUhyZWYpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wcy5hY3RpdmU7XG4gIH07XG5cbiAgTmF2LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMixcbiAgICAgICAgX3RoaXM1ID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFja2VkID0gX3Byb3BzLnN0YWNrZWQsXG4gICAgICAgIGp1c3RpZmllZCA9IF9wcm9wcy5qdXN0aWZpZWQsXG4gICAgICAgIG9uU2VsZWN0ID0gX3Byb3BzLm9uU2VsZWN0LFxuICAgICAgICBwcm9wc1JvbGUgPSBfcHJvcHMucm9sZSxcbiAgICAgICAgcHJvcHNOYXZiYXIgPSBfcHJvcHMubmF2YmFyLFxuICAgICAgICBwdWxsUmlnaHQgPSBfcHJvcHMucHVsbFJpZ2h0LFxuICAgICAgICBwdWxsTGVmdCA9IF9wcm9wcy5wdWxsTGVmdCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydzdGFja2VkJywgJ2p1c3RpZmllZCcsICdvblNlbGVjdCcsICdyb2xlJywgJ25hdmJhcicsICdwdWxsUmlnaHQnLCAncHVsbExlZnQnLCAnY2xhc3NOYW1lJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIHRhYkNvbnRhaW5lciA9IHRoaXMuY29udGV4dC4kYnNfdGFiQ29udGFpbmVyO1xuICAgIHZhciByb2xlID0gcHJvcHNSb2xlIHx8ICh0YWJDb250YWluZXIgPyAndGFibGlzdCcgOiBudWxsKTtcblxuICAgIHZhciBfZ2V0QWN0aXZlUHJvcHMzID0gdGhpcy5nZXRBY3RpdmVQcm9wcygpLFxuICAgICAgICBhY3RpdmVLZXkgPSBfZ2V0QWN0aXZlUHJvcHMzLmFjdGl2ZUtleSxcbiAgICAgICAgYWN0aXZlSHJlZiA9IF9nZXRBY3RpdmVQcm9wczMuYWN0aXZlSHJlZjtcblxuICAgIGRlbGV0ZSBwcm9wcy5hY3RpdmVLZXk7IC8vIEFjY2Vzc2VkIHZpYSB0aGlzLmdldEFjdGl2ZVByb3BzKCkuXG4gICAgZGVsZXRlIHByb3BzLmFjdGl2ZUhyZWY7IC8vIEFjY2Vzc2VkIHZpYSB0aGlzLmdldEFjdGl2ZVByb3BzKCkuXG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzLCAnc3RhY2tlZCcpXSA9IHN0YWNrZWQsIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJ2p1c3RpZmllZCcpXSA9IGp1c3RpZmllZCwgX2V4dGVuZHMyKSk7XG5cbiAgICB2YXIgbmF2YmFyID0gcHJvcHNOYXZiYXIgIT0gbnVsbCA/IHByb3BzTmF2YmFyIDogdGhpcy5jb250ZXh0LiRic19uYXZiYXI7XG4gICAgdmFyIHB1bGxMZWZ0Q2xhc3NOYW1lID0gdm9pZCAwO1xuICAgIHZhciBwdWxsUmlnaHRDbGFzc05hbWUgPSB2b2lkIDA7XG5cbiAgICBpZiAobmF2YmFyKSB7XG4gICAgICB2YXIgbmF2YmFyUHJvcHMgPSB0aGlzLmNvbnRleHQuJGJzX25hdmJhciB8fCB7IGJzQ2xhc3M6ICduYXZiYXInIH07XG5cbiAgICAgIGNsYXNzZXNbcHJlZml4KG5hdmJhclByb3BzLCAnbmF2JyldID0gdHJ1ZTtcblxuICAgICAgcHVsbFJpZ2h0Q2xhc3NOYW1lID0gcHJlZml4KG5hdmJhclByb3BzLCAncmlnaHQnKTtcbiAgICAgIHB1bGxMZWZ0Q2xhc3NOYW1lID0gcHJlZml4KG5hdmJhclByb3BzLCAnbGVmdCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdWxsUmlnaHRDbGFzc05hbWUgPSAncHVsbC1yaWdodCc7XG4gICAgICBwdWxsTGVmdENsYXNzTmFtZSA9ICdwdWxsLWxlZnQnO1xuICAgIH1cblxuICAgIGNsYXNzZXNbcHVsbFJpZ2h0Q2xhc3NOYW1lXSA9IHB1bGxSaWdodDtcbiAgICBjbGFzc2VzW3B1bGxMZWZ0Q2xhc3NOYW1lXSA9IHB1bGxMZWZ0O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndWwnLFxuICAgICAgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgICByb2xlOiByb2xlLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgICAgfSksXG4gICAgICBWYWxpZENvbXBvbmVudENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBhY3RpdmUgPSBfdGhpczUuaXNBY3RpdmUoY2hpbGQsIGFjdGl2ZUtleSwgYWN0aXZlSHJlZik7XG4gICAgICAgIHZhciBjaGlsZE9uU2VsZWN0ID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkLnByb3BzLm9uU2VsZWN0LCBvblNlbGVjdCwgbmF2YmFyICYmIG5hdmJhci5vblNlbGVjdCwgdGFiQ29udGFpbmVyICYmIHRhYkNvbnRhaW5lci5vblNlbGVjdCk7XG5cbiAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwgX2V4dGVuZHMoe30sIF90aGlzNS5nZXRUYWJQcm9wcyhjaGlsZCwgdGFiQ29udGFpbmVyLCByb2xlLCBhY3RpdmUsIGNoaWxkT25TZWxlY3QpLCB7XG4gICAgICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICAgICAgYWN0aXZlS2V5OiBhY3RpdmVLZXksXG4gICAgICAgICAgYWN0aXZlSHJlZjogYWN0aXZlSHJlZixcbiAgICAgICAgICBvblNlbGVjdDogY2hpbGRPblNlbGVjdFxuICAgICAgICB9KSk7XG4gICAgICB9KVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTmF2LnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk5hdi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5OYXYuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCduYXYnLCBic1N0eWxlcyhbJ3RhYnMnLCAncGlsbHMnXSwgTmF2KSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBwcmVmaXggfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX25hdmJhcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pXG59O1xuXG52YXIgTmF2YmFyQnJhbmQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTmF2YmFyQnJhbmQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdmJhckJyYW5kKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYXZiYXJCcmFuZCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIE5hdmJhckJyYW5kLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2xhc3NOYW1lJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIG5hdmJhclByb3BzID0gdGhpcy5jb250ZXh0LiRic19uYXZiYXIgfHwgeyBic0NsYXNzOiAnbmF2YmFyJyB9O1xuXG4gICAgdmFyIGJzQ2xhc3NOYW1lID0gcHJlZml4KG5hdmJhclByb3BzLCAnYnJhbmQnKTtcblxuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lLCBic0NsYXNzTmFtZSlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgX2V4dGVuZHMoe30sIHByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzQ2xhc3NOYW1lKSB9KSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gTmF2YmFyQnJhbmQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdmJhckJyYW5kLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgTmF2YmFyQnJhbmQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IENvbGxhcHNlIGZyb20gJy4vQ29sbGFwc2UnO1xuaW1wb3J0IHsgcHJlZml4IH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19uYXZiYXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYnNDbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2xcbiAgfSlcbn07XG5cbnZhciBOYXZiYXJDb2xsYXBzZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhOYXZiYXJDb2xsYXBzZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTmF2YmFyQ29sbGFwc2UoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5hdmJhckNvbGxhcHNlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgTmF2YmFyQ29sbGFwc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjaGlsZHJlbiddKTtcblxuICAgIHZhciBuYXZiYXJQcm9wcyA9IHRoaXMuY29udGV4dC4kYnNfbmF2YmFyIHx8IHsgYnNDbGFzczogJ25hdmJhcicgfTtcblxuICAgIHZhciBic0NsYXNzTmFtZSA9IHByZWZpeChuYXZiYXJQcm9wcywgJ2NvbGxhcHNlJyk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIENvbGxhcHNlLFxuICAgICAgX2V4dGVuZHMoeyAnaW4nOiBuYXZiYXJQcm9wcy5leHBhbmRlZCB9LCBwcm9wcyksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6IGJzQ2xhc3NOYW1lIH0sXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gTmF2YmFyQ29sbGFwc2U7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdmJhckNvbGxhcHNlLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgTmF2YmFyQ29sbGFwc2U7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBwcmVmaXggfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX25hdmJhcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pXG59O1xuXG52YXIgTmF2YmFySGVhZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE5hdmJhckhlYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTmF2YmFySGVhZGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYXZiYXJIZWFkZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBOYXZiYXJIZWFkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBuYXZiYXJQcm9wcyA9IHRoaXMuY29udGV4dC4kYnNfbmF2YmFyIHx8IHsgYnNDbGFzczogJ25hdmJhcicgfTtcblxuICAgIHZhciBic0NsYXNzTmFtZSA9IHByZWZpeChuYXZiYXJQcm9wcywgJ2hlYWRlcicpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic0NsYXNzTmFtZSkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBOYXZiYXJIZWFkZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdmJhckhlYWRlci5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IE5hdmJhckhlYWRlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IHByZWZpeCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHRvZ2dsZSBjb250ZW50LCBpZiBsZWZ0IGVtcHR5IGl0IHdpbGwgcmVuZGVyIHRoZSBkZWZhdWx0IHRvZ2dsZSAoc2VlbiBhYm92ZSkuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19uYXZiYXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYnNDbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25Ub2dnbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSlcbn07XG5cbnZhciBOYXZiYXJUb2dnbGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTmF2YmFyVG9nZ2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOYXZiYXJUb2dnbGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5hdmJhclRvZ2dsZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIE5hdmJhclRvZ2dsZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkNsaWNrID0gX3Byb3BzLm9uQ2xpY2ssXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnb25DbGljaycsICdjbGFzc05hbWUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICB2YXIgbmF2YmFyUHJvcHMgPSB0aGlzLmNvbnRleHQuJGJzX25hdmJhciB8fCB7IGJzQ2xhc3M6ICduYXZiYXInIH07XG5cbiAgICB2YXIgYnV0dG9uUHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICB0eXBlOiAnYnV0dG9uJ1xuICAgIH0sIHByb3BzLCB7XG4gICAgICBvbkNsaWNrOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25DbGljaywgbmF2YmFyUHJvcHMub25Ub2dnbGUpLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcHJlZml4KG5hdmJhclByb3BzLCAndG9nZ2xlJyksICFuYXZiYXJQcm9wcy5leHBhbmRlZCAmJiAnY29sbGFwc2VkJylcbiAgICB9KTtcblxuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdidXR0b24nLFxuICAgICAgICBidXR0b25Qcm9wcyxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnYnV0dG9uJyxcbiAgICAgIGJ1dHRvblByb3BzLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ3NyLW9ubHknIH0sXG4gICAgICAgICdUb2dnbGUgbmF2aWdhdGlvbidcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdpY29uLWJhcicgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdpY29uLWJhcicgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdpY29uLWJhcicgfSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBOYXZiYXJUb2dnbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdmJhclRvZ2dsZS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5OYXZiYXJUb2dnbGUuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG5leHBvcnQgZGVmYXVsdCBOYXZiYXJUb2dnbGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG4vLyBUT0RPOiBSZW1vdmUgdGhpcyBwcmFnbWEgb25jZSB3ZSB1cGdyYWRlIGVzbGludC1jb25maWctYWlyYm5iLlxuLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tbXVsdGktY29tcCAqL1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCB1bmNvbnRyb2xsYWJsZSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5cbmltcG9ydCBHcmlkIGZyb20gJy4vR3JpZCc7XG5pbXBvcnQgTmF2YmFyQnJhbmQgZnJvbSAnLi9OYXZiYXJCcmFuZCc7XG5pbXBvcnQgTmF2YmFyQ29sbGFwc2UgZnJvbSAnLi9OYXZiYXJDb2xsYXBzZSc7XG5pbXBvcnQgTmF2YmFySGVhZGVyIGZyb20gJy4vTmF2YmFySGVhZGVyJztcbmltcG9ydCBOYXZiYXJUb2dnbGUgZnJvbSAnLi9OYXZiYXJUb2dnbGUnO1xuaW1wb3J0IHsgYnNDbGFzcyBhcyBzZXRCc0NsYXNzLCBic1N0eWxlcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzQW5kT21pdCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IHsgU3R5bGUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ3JlYXRlIGEgZml4ZWQgbmF2YmFyIGFsb25nIHRoZSB0b3Agb2YgdGhlIHNjcmVlbiwgdGhhdCBzY3JvbGxzIHdpdGggdGhlXG4gICAqIHBhZ2VcbiAgICovXG4gIGZpeGVkVG9wOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIENyZWF0ZSBhIGZpeGVkIG5hdmJhciBhbG9uZyB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4sIHRoYXQgc2Nyb2xscyB3aXRoXG4gICAqIHRoZSBwYWdlXG4gICAqL1xuICBmaXhlZEJvdHRvbTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmdWxsLXdpZHRoIG5hdmJhciB0aGF0IHNjcm9sbHMgYXdheSB3aXRoIHRoZSBwYWdlXG4gICAqL1xuICBzdGF0aWNUb3A6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQW4gYWx0ZXJuYXRpdmUgZGFyayB2aXN1YWwgc3R5bGUgZm9yIHRoZSBOYXZiYXJcbiAgICovXG4gIGludmVyc2U6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQWxsb3cgdGhlIE5hdmJhciB0byBmbHVpZGx5IGFkanVzdCB0byB0aGUgcGFnZSBvciBjb250YWluZXIgd2lkdGgsIGluc3RlYWRcbiAgICogb2YgYXQgdGhlIHByZWRlZmluZWQgc2NyZWVuIGJyZWFrcG9pbnRzXG4gICAqL1xuICBmbHVpZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFNldCBhIGN1c3RvbSBlbGVtZW50IGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYDxOYXZiYXI+YCBib2R5IGNvbGxhcHNlcyBvciBleHBhbmRzLiBGaXJlZCB3aGVuXG4gICAqIGEgYDxOYXZiYXIuVG9nZ2xlPmAgaXMgY2xpY2tlZCBhbmQgY2FsbGVkIHdpdGggdGhlIG5ldyBgZXhwYW5kZWRgXG4gICAqIGJvb2xlYW4gdmFsdWUuXG4gICAqXG4gICAqIEBjb250cm9sbGFibGUgZXhwYW5kZWRcbiAgICovXG4gIG9uVG9nZ2xlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBhIGRlc2NlbmRhbnQgb2YgYSBjaGlsZCBgPE5hdj5gIGlzIHNlbGVjdGVkLiBTaG91bGRcbiAgICogYmUgdXNlZCB0byBleGVjdXRlIGNvbXBsZXggY2xvc2luZyBvciBvdGhlciBtaXNjZWxsYW5lb3VzIGFjdGlvbnMgZGVzaXJlZFxuICAgKiBhZnRlciBzZWxlY3RpbmcgYSBkZXNjZW5kYW50IG9mIGA8TmF2PmAuIERvZXMgbm90aGluZyBpZiBubyBgPE5hdj5gIG9yIGA8TmF2PmBcbiAgICogZGVzY2VuZGFudHMgZXhpc3QuIFRoZSBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBhbiBldmVudEtleSwgd2hpY2ggaXMgYVxuICAgKiBwcm9wIGZyb20gdGhlIHNlbGVjdGVkIGA8TmF2PmAgZGVzY2VuZGFudCwgYW5kIGFuIGV2ZW50LlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBmdW5jdGlvbiAoXG4gICAqICBBbnkgZXZlbnRLZXksXG4gICAqICBTeW50aGV0aWNFdmVudCBldmVudD9cbiAgICogKVxuICAgKiBgYGBcbiAgICpcbiAgICogRm9yIGJhc2ljIGNsb3NpbmcgYmVoYXZpb3IgYWZ0ZXIgYWxsIGA8TmF2PmAgZGVzY2VuZGFudCBvblNlbGVjdCBldmVudHMgaW5cbiAgICogbW9iaWxlIHZpZXdwb3J0cywgdHJ5IHVzaW5nIGNvbGxhcHNlT25TZWxlY3QuXG4gICAqXG4gICAqIE5vdGU6IElmIHlvdSBhcmUgbWFudWFsbHkgY2xvc2luZyB0aGUgbmF2YmFyIHVzaW5nIHRoaXMgYE9uU2VsZWN0YCBwcm9wLFxuICAgKiBlbnN1cmUgdGhhdCB5b3UgYXJlIHNldHRpbmcgYGV4cGFuZGVkYCB0byBmYWxzZSBhbmQgbm90ICp0b2dnbGluZyogYmV0d2VlblxuICAgKiB0cnVlIGFuZCBmYWxzZS5cbiAgICovXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFNldHMgYGV4cGFuZGVkYCB0byBgZmFsc2VgIGFmdGVyIHRoZSBvblNlbGVjdCBldmVudCBvZiBhIGRlc2NlbmRhbnQgb2YgYVxuICAgKiBjaGlsZCBgPE5hdj5gLiBEb2VzIG5vdGhpbmcgaWYgbm8gYDxOYXY+YCBvciBgPE5hdj5gIGRlc2NlbmRhbnRzIGV4aXN0LlxuICAgKlxuICAgKiBUaGUgb25TZWxlY3QgY2FsbGJhY2sgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBmb3IgbW9yZSBjb21wbGV4IG9wZXJhdGlvbnNcbiAgICogdGhhdCBuZWVkIHRvIGJlIGV4ZWN1dGVkIGFmdGVyIHRoZSBgc2VsZWN0YCBldmVudCBvZiBgPE5hdj5gIGRlc2NlbmRhbnRzLlxuICAgKi9cbiAgY29sbGFwc2VPblNlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBFeHBsaWNpdGx5IHNldCB0aGUgdmlzaWJsaXR5IG9mIHRoZSBuYXZiYXIgYm9keVxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIG9uVG9nZ2xlXG4gICAqL1xuICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICduYXYnLFxuICBmaXhlZFRvcDogZmFsc2UsXG4gIGZpeGVkQm90dG9tOiBmYWxzZSxcbiAgc3RhdGljVG9wOiBmYWxzZSxcbiAgaW52ZXJzZTogZmFsc2UsXG4gIGZsdWlkOiBmYWxzZSxcbiAgY29sbGFwc2VPblNlbGVjdDogZmFsc2Vcbn07XG5cbnZhciBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgJGJzX25hdmJhcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvblRvZ2dsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmNcbiAgfSlcbn07XG5cbnZhciBOYXZiYXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTmF2YmFyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOYXZiYXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmF2YmFyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuaGFuZGxlVG9nZ2xlID0gX3RoaXMuaGFuZGxlVG9nZ2xlLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZUNvbGxhcHNlID0gX3RoaXMuaGFuZGxlQ29sbGFwc2UuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgTmF2YmFyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzQ2xhc3MgPSBfcHJvcHMuYnNDbGFzcyxcbiAgICAgICAgZXhwYW5kZWQgPSBfcHJvcHMuZXhwYW5kZWQsXG4gICAgICAgIG9uU2VsZWN0ID0gX3Byb3BzLm9uU2VsZWN0LFxuICAgICAgICBjb2xsYXBzZU9uU2VsZWN0ID0gX3Byb3BzLmNvbGxhcHNlT25TZWxlY3Q7XG5cblxuICAgIHJldHVybiB7XG4gICAgICAkYnNfbmF2YmFyOiB7XG4gICAgICAgIGJzQ2xhc3M6IGJzQ2xhc3MsXG4gICAgICAgIGV4cGFuZGVkOiBleHBhbmRlZCxcbiAgICAgICAgb25Ub2dnbGU6IHRoaXMuaGFuZGxlVG9nZ2xlLFxuICAgICAgICBvblNlbGVjdDogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKG9uU2VsZWN0LCBjb2xsYXBzZU9uU2VsZWN0ID8gdGhpcy5oYW5kbGVDb2xsYXBzZSA6IG51bGwpXG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBOYXZiYXIucHJvdG90eXBlLmhhbmRsZUNvbGxhcHNlID0gZnVuY3Rpb24gaGFuZGxlQ29sbGFwc2UoKSB7XG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBvblRvZ2dsZSA9IF9wcm9wczIub25Ub2dnbGUsXG4gICAgICAgIGV4cGFuZGVkID0gX3Byb3BzMi5leHBhbmRlZDtcblxuXG4gICAgaWYgKGV4cGFuZGVkKSB7XG4gICAgICBvblRvZ2dsZShmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIE5hdmJhci5wcm90b3R5cGUuaGFuZGxlVG9nZ2xlID0gZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKCkge1xuICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25Ub2dnbGUgPSBfcHJvcHMzLm9uVG9nZ2xlLFxuICAgICAgICBleHBhbmRlZCA9IF9wcm9wczMuZXhwYW5kZWQ7XG5cblxuICAgIG9uVG9nZ2xlKCFleHBhbmRlZCk7XG4gIH07XG5cbiAgTmF2YmFyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzNC5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgZml4ZWRUb3AgPSBfcHJvcHM0LmZpeGVkVG9wLFxuICAgICAgICBmaXhlZEJvdHRvbSA9IF9wcm9wczQuZml4ZWRCb3R0b20sXG4gICAgICAgIHN0YXRpY1RvcCA9IF9wcm9wczQuc3RhdGljVG9wLFxuICAgICAgICBpbnZlcnNlID0gX3Byb3BzNC5pbnZlcnNlLFxuICAgICAgICBmbHVpZCA9IF9wcm9wczQuZmx1aWQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wczQuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczQuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczQsIFsnY29tcG9uZW50Q2xhc3MnLCAnZml4ZWRUb3AnLCAnZml4ZWRCb3R0b20nLCAnc3RhdGljVG9wJywgJ2ludmVyc2UnLCAnZmx1aWQnLCAnY2xhc3NOYW1lJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHNBbmRPbWl0ID0gc3BsaXRCc1Byb3BzQW5kT21pdChwcm9wcywgWydleHBhbmRlZCcsICdvblRvZ2dsZScsICdvblNlbGVjdCcsICdjb2xsYXBzZU9uU2VsZWN0J10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgLy8gd2lsbCByZXN1bHQgaW4gc29tZSBmYWxzZSBwb3NpdGl2ZXMgYnV0IHRoYXQgc2VlbXMgYmV0dGVyXG4gICAgLy8gdGhhbiBmYWxzZSBuZWdhdGl2ZXMuIHN0cmljdCBgdW5kZWZpbmVkYCBjaGVjayBhbGxvd3MgZXhwbGljaXRcbiAgICAvLyBcIm51bGxpbmdcIiBvZiB0aGUgcm9sZSBpZiB0aGUgdXNlciByZWFsbHkgZG9lc24ndCB3YW50IG9uZVxuXG5cbiAgICBpZiAoZWxlbWVudFByb3BzLnJvbGUgPT09IHVuZGVmaW5lZCAmJiBDb21wb25lbnQgIT09ICduYXYnKSB7XG4gICAgICBlbGVtZW50UHJvcHMucm9sZSA9ICduYXZpZ2F0aW9uJztcbiAgICB9XG5cbiAgICBpZiAoaW52ZXJzZSkge1xuICAgICAgYnNQcm9wcy5ic1N0eWxlID0gU3R5bGUuSU5WRVJTRTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdmaXhlZC10b3AnKV0gPSBmaXhlZFRvcCwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzLCAnZml4ZWQtYm90dG9tJyldID0gZml4ZWRCb3R0b20sIF9leHRlbmRzMltwcmVmaXgoYnNQcm9wcywgJ3N0YXRpYy10b3AnKV0gPSBzdGF0aWNUb3AsIF9leHRlbmRzMikpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb21wb25lbnQsXG4gICAgICBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgR3JpZCxcbiAgICAgICAgeyBmbHVpZDogZmx1aWQgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBOYXZiYXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdmJhci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5OYXZiYXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuTmF2YmFyLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5cbnNldEJzQ2xhc3MoJ25hdmJhcicsIE5hdmJhcik7XG5cbnZhciBVbmNvbnRyb2xsYWJsZU5hdmJhciA9IHVuY29udHJvbGxhYmxlKE5hdmJhciwgeyBleHBhbmRlZDogJ29uVG9nZ2xlJyB9KTtcblxuZnVuY3Rpb24gY3JlYXRlU2ltcGxlV3JhcHBlcih0YWcsIHN1ZmZpeCwgZGlzcGxheU5hbWUpIHtcbiAgdmFyIFdyYXBwZXIgPSBmdW5jdGlvbiBXcmFwcGVyKF9yZWYsIF9yZWYyKSB7XG4gICAgdmFyIF9yZWYyJCRic19uYXZiYXIgPSBfcmVmMi4kYnNfbmF2YmFyLFxuICAgICAgICBuYXZiYXJQcm9wcyA9IF9yZWYyJCRic19uYXZiYXIgPT09IHVuZGVmaW5lZCA/IHsgYnNDbGFzczogJ25hdmJhcicgfSA6IF9yZWYyJCRic19uYXZiYXI7XG5cbiAgICB2YXIgQ29tcG9uZW50ID0gX3JlZi5jb21wb25lbnRDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICAgIHB1bGxSaWdodCA9IF9yZWYucHVsbFJpZ2h0LFxuICAgICAgICBwdWxsTGVmdCA9IF9yZWYucHVsbExlZnQsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnY29tcG9uZW50Q2xhc3MnLCAnY2xhc3NOYW1lJywgJ3B1bGxSaWdodCcsICdwdWxsTGVmdCddKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBwcmVmaXgobmF2YmFyUHJvcHMsIHN1ZmZpeCksIHB1bGxSaWdodCAmJiBwcmVmaXgobmF2YmFyUHJvcHMsICdyaWdodCcpLCBwdWxsTGVmdCAmJiBwcmVmaXgobmF2YmFyUHJvcHMsICdsZWZ0JykpXG4gICAgfSkpO1xuICB9O1xuXG4gIFdyYXBwZXIuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICBXcmFwcGVyLnByb3BUeXBlcyA9IHtcbiAgICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGUsXG4gICAgcHVsbFJpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBwdWxsTGVmdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBXcmFwcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBjb21wb25lbnRDbGFzczogdGFnLFxuICAgIHB1bGxSaWdodDogZmFsc2UsXG4gICAgcHVsbExlZnQ6IGZhbHNlXG4gIH07XG5cbiAgV3JhcHBlci5jb250ZXh0VHlwZXMgPSB7XG4gICAgJGJzX25hdmJhcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGJzQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KVxuICB9O1xuXG4gIHJldHVybiBXcmFwcGVyO1xufVxuXG5VbmNvbnRyb2xsYWJsZU5hdmJhci5CcmFuZCA9IE5hdmJhckJyYW5kO1xuVW5jb250cm9sbGFibGVOYXZiYXIuSGVhZGVyID0gTmF2YmFySGVhZGVyO1xuVW5jb250cm9sbGFibGVOYXZiYXIuVG9nZ2xlID0gTmF2YmFyVG9nZ2xlO1xuVW5jb250cm9sbGFibGVOYXZiYXIuQ29sbGFwc2UgPSBOYXZiYXJDb2xsYXBzZTtcblxuVW5jb250cm9sbGFibGVOYXZiYXIuRm9ybSA9IGNyZWF0ZVNpbXBsZVdyYXBwZXIoJ2RpdicsICdmb3JtJywgJ05hdmJhckZvcm0nKTtcblVuY29udHJvbGxhYmxlTmF2YmFyLlRleHQgPSBjcmVhdGVTaW1wbGVXcmFwcGVyKCdwJywgJ3RleHQnLCAnTmF2YmFyVGV4dCcpO1xuVW5jb250cm9sbGFibGVOYXZiYXIuTGluayA9IGNyZWF0ZVNpbXBsZVdyYXBwZXIoJ2EnLCAnbGluaycsICdOYXZiYXJMaW5rJyk7XG5cbi8vIFNldCBic1N0eWxlcyBoZXJlIHNvIHRoZXkgY2FuIGJlIG92ZXJyaWRkZW4uXG5leHBvcnQgZGVmYXVsdCBic1N0eWxlcyhbU3R5bGUuREVGQVVMVCwgU3R5bGUuSU5WRVJTRV0sIFN0eWxlLkRFRkFVTFQsIFVuY29udHJvbGxhYmxlTmF2YmFyKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBEcm9wZG93biBmcm9tICcuL0Ryb3Bkb3duJztcbmltcG9ydCBzcGxpdENvbXBvbmVudFByb3BzIGZyb20gJy4vdXRpbHMvc3BsaXRDb21wb25lbnRQcm9wcyc7XG5pbXBvcnQgVmFsaWRDb21wb25lbnRDaGlsZHJlbiBmcm9tICcuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4nO1xuXG52YXIgcHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIERyb3Bkb3duLnByb3BUeXBlcywge1xuXG4gIC8vIFRvZ2dsZSBwcm9wcy5cbiAgdGl0bGU6IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gIG5vQ2FyZXQ6IFByb3BUeXBlcy5ib29sLFxuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBhY3RpdmVLZXk6IFByb3BUeXBlcy5hbnksXG4gIGFjdGl2ZUhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLy8gT3ZlcnJpZGUgZ2VuZXJhdGVkIGRvY3MgZnJvbSA8RHJvcGRvd24+LlxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufSk7XG5cbnZhciBOYXZEcm9wZG93biA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhOYXZEcm9wZG93biwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTmF2RHJvcGRvd24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5hdkRyb3Bkb3duKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgTmF2RHJvcGRvd24ucHJvdG90eXBlLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoX3JlZiwgYWN0aXZlS2V5LCBhY3RpdmVIcmVmKSB7XG4gICAgdmFyIHByb3BzID0gX3JlZi5wcm9wcztcblxuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKHByb3BzLmFjdGl2ZSB8fCBhY3RpdmVLZXkgIT0gbnVsbCAmJiBwcm9wcy5ldmVudEtleSA9PT0gYWN0aXZlS2V5IHx8IGFjdGl2ZUhyZWYgJiYgcHJvcHMuaHJlZiA9PT0gYWN0aXZlSHJlZikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uc29tZShwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLmlzQWN0aXZlKGNoaWxkLCBhY3RpdmVLZXksIGFjdGl2ZUhyZWYpO1xuICAgIH0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcHMuYWN0aXZlO1xuICB9O1xuXG4gIE5hdkRyb3Bkb3duLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdGl0bGUgPSBfcHJvcHMudGl0bGUsXG4gICAgICAgIGFjdGl2ZUtleSA9IF9wcm9wcy5hY3RpdmVLZXksXG4gICAgICAgIGFjdGl2ZUhyZWYgPSBfcHJvcHMuYWN0aXZlSHJlZixcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsndGl0bGUnLCAnYWN0aXZlS2V5JywgJ2FjdGl2ZUhyZWYnLCAnY2xhc3NOYW1lJywgJ3N0eWxlJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRoaXMuaXNBY3RpdmUodGhpcywgYWN0aXZlS2V5LCBhY3RpdmVIcmVmKTtcbiAgICBkZWxldGUgcHJvcHMuYWN0aXZlOyAvLyBBY2Nlc3NlZCB2aWEgdGhpcy5pc0FjdGl2ZSgpLlxuICAgIGRlbGV0ZSBwcm9wcy5ldmVudEtleTsgLy8gQWNjZXNzZWQgdmlhIHRoaXMuaXNBY3RpdmUoKS5cblxuICAgIHZhciBfc3BsaXRDb21wb25lbnRQcm9wcyA9IHNwbGl0Q29tcG9uZW50UHJvcHMocHJvcHMsIERyb3Bkb3duLkNvbnRyb2xsZWRDb21wb25lbnQpLFxuICAgICAgICBkcm9wZG93blByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMF0sXG4gICAgICAgIHRvZ2dsZVByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMV07XG5cbiAgICAvLyBVbmxpa2UgZm9yIHRoZSBvdGhlciBkcm9wZG93bnMsIHN0eWxpbmcgbmVlZHMgdG8gZ28gdG8gdGhlIGA8RHJvcGRvd24+YFxuICAgIC8vIHJhdGhlciB0aGFuIHRoZSBgPERyb3Bkb3duLlRvZ2dsZT5gLlxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBEcm9wZG93bixcbiAgICAgIF9leHRlbmRzKHt9LCBkcm9wZG93blByb3BzLCB7XG4gICAgICAgIGNvbXBvbmVudENsYXNzOiAnbGknLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCB7IGFjdGl2ZTogYWN0aXZlIH0pLFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRHJvcGRvd24uVG9nZ2xlLFxuICAgICAgICBfZXh0ZW5kcyh7fSwgdG9nZ2xlUHJvcHMsIHsgdXNlQW5jaG9yOiB0cnVlIH0pLFxuICAgICAgICB0aXRsZVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIERyb3Bkb3duLk1lbnUsXG4gICAgICAgIG51bGwsXG4gICAgICAgIFZhbGlkQ29tcG9uZW50Q2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgICBhY3RpdmU6IF90aGlzMy5pc0FjdGl2ZShjaGlsZCwgYWN0aXZlS2V5LCBhY3RpdmVIcmVmKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdkRyb3Bkb3duO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5OYXZEcm9wZG93bi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkRyb3Bkb3duOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIGV2ZW50S2V5OiBQcm9wVHlwZXMuYW55XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5cbnZhciBOYXZJdGVtID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE5hdkl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdkl0ZW0ocHJvcHMsIGNvbnRleHQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmF2SXRlbSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gX3RoaXMuaGFuZGxlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgTmF2SXRlbS5wcm90b3R5cGUuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vblNlbGVjdCkge1xuICAgICAgdGhpcy5wcm9wcy5vblNlbGVjdCh0aGlzLnByb3BzLmV2ZW50S2V5LCBlKTtcbiAgICB9XG4gIH07XG5cbiAgTmF2SXRlbS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3RpdmUgPSBfcHJvcHMuYWN0aXZlLFxuICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgb25DbGljayA9IF9wcm9wcy5vbkNsaWNrLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2FjdGl2ZScsICdkaXNhYmxlZCcsICdvbkNsaWNrJywgJ2NsYXNzTmFtZScsICdzdHlsZSddKTtcblxuICAgIGRlbGV0ZSBwcm9wcy5vblNlbGVjdDtcbiAgICBkZWxldGUgcHJvcHMuZXZlbnRLZXk7XG5cbiAgICAvLyBUaGVzZSBhcmUgaW5qZWN0ZWQgZG93biBieSBgPE5hdj5gIGZvciBidWlsZGluZyBgPFN1Yk5hdj5gcy5cbiAgICBkZWxldGUgcHJvcHMuYWN0aXZlS2V5O1xuICAgIGRlbGV0ZSBwcm9wcy5hY3RpdmVIcmVmO1xuXG4gICAgaWYgKCFwcm9wcy5yb2xlKSB7XG4gICAgICBpZiAocHJvcHMuaHJlZiA9PT0gJyMnKSB7XG4gICAgICAgIHByb3BzLnJvbGUgPSAnYnV0dG9uJztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BzLnJvbGUgPT09ICd0YWInKSB7XG4gICAgICBwcm9wc1snYXJpYS1zZWxlY3RlZCddID0gYWN0aXZlO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2xpJyxcbiAgICAgIHtcbiAgICAgICAgcm9sZTogJ3ByZXNlbnRhdGlvbicsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHsgYWN0aXZlOiBhY3RpdmUsIGRpc2FibGVkOiBkaXNhYmxlZCB9KSxcbiAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICBvbkNsaWNrOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25DbGljaywgdGhpcy5oYW5kbGVDbGljaylcbiAgICAgIH0pKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdkl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdkl0ZW0ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTmF2SXRlbS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkl0ZW07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEJhc2VPdmVybGF5IGZyb20gJ3JlYWN0LW92ZXJsYXlzL2xpYi9PdmVybGF5JztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZSc7XG5cbmltcG9ydCBGYWRlIGZyb20gJy4vRmFkZSc7XG5cbnZhciBwcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgQmFzZU92ZXJsYXkucHJvcFR5cGVzLCB7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgT3ZlcmxheVxuICAgKi9cbiAgc2hvdzogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoZXRoZXIgdGhlIG92ZXJsYXkgc2hvdWxkIHRyaWdnZXIgb25IaWRlIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG91dHNpZGUgdGhlIG92ZXJsYXlcbiAgICovXG4gIHJvb3RDbG9zZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGludm9rZWQgYnkgdGhlIG92ZXJsYXkgd2hlbiBpdCB3aXNoZXMgdG8gYmUgaGlkZGVuLiBSZXF1aXJlZCBpZlxuICAgKiBgcm9vdENsb3NlYCBpcyBzcGVjaWZpZWQuXG4gICAqL1xuICBvbkhpZGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBVc2UgYW5pbWF0aW9uXG4gICAqL1xuICBhbmltYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBlbGVtZW50VHlwZV0pLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE92ZXJsYXkgdHJhbnNpdGlvbnMgaW5cbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgT3ZlcmxheSBiZWdpbnMgdG8gdHJhbnNpdGlvbiBpblxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBPdmVybGF5IGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgT3ZlcmxheSB0cmFuc2l0aW9ucyBvdXRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBPdmVybGF5IGJlZ2lucyB0byB0cmFuc2l0aW9uIG91dFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE92ZXJsYXkgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogU2V0cyB0aGUgZGlyZWN0aW9uIG9mIHRoZSBPdmVybGF5LlxuICAgKi9cbiAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSlcbn0pO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhbmltYXRpb246IEZhZGUsXG4gIHJvb3RDbG9zZTogZmFsc2UsXG4gIHNob3c6IGZhbHNlLFxuICBwbGFjZW1lbnQ6ICdyaWdodCdcbn07XG5cbnZhciBPdmVybGF5ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE92ZXJsYXksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE92ZXJsYXkoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE92ZXJsYXkpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBPdmVybGF5LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFuaW1hdGlvbiA9IF9wcm9wcy5hbmltYXRpb24sXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnYW5pbWF0aW9uJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIHRyYW5zaXRpb24gPSBhbmltYXRpb24gPT09IHRydWUgPyBGYWRlIDogYW5pbWF0aW9uIHx8IG51bGw7XG5cbiAgICB2YXIgY2hpbGQgPSB2b2lkIDA7XG5cbiAgICBpZiAoIXRyYW5zaXRpb24pIHtcbiAgICAgIGNoaWxkID0gY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUsICdpbicpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEJhc2VPdmVybGF5LFxuICAgICAgX2V4dGVuZHMoe30sIHByb3BzLCB7IHRyYW5zaXRpb246IHRyYW5zaXRpb24gfSksXG4gICAgICBjaGlsZFxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIE92ZXJsYXk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk92ZXJsYXkucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuT3ZlcmxheS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IE92ZXJsYXk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuXG5pbXBvcnQgT3ZlcmxheSBmcm9tICcuL092ZXJsYXknO1xuXG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBvbmUgaXMgaW5zaWRlIG9yIGVxdWFsIHRvIHRoZSBvZiB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvbmVcbiAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSBvZlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzT25lT2Yob25lLCBvZikge1xuICBpZiAoQXJyYXkuaXNBcnJheShvZikpIHtcbiAgICByZXR1cm4gb2YuaW5kZXhPZihvbmUpID49IDA7XG4gIH1cbiAgcmV0dXJuIG9uZSA9PT0gb2Y7XG59XG5cbnZhciB0cmlnZ2VyVHlwZSA9IFByb3BUeXBlcy5vbmVPZihbJ2NsaWNrJywgJ2hvdmVyJywgJ2ZvY3VzJ10pO1xuXG52YXIgcHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIE92ZXJsYXkucHJvcFR5cGVzLCB7XG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hpY2ggYWN0aW9uIG9yIGFjdGlvbnMgdHJpZ2dlciBPdmVybGF5IHZpc2liaWxpdHlcbiAgICovXG4gIHRyaWdnZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW3RyaWdnZXJUeXBlLCBQcm9wVHlwZXMuYXJyYXlPZih0cmlnZ2VyVHlwZSldKSxcblxuICAvKipcbiAgICogQSBtaWxsaXNlY29uZCBkZWxheSBhbW91bnQgdG8gc2hvdyBhbmQgaGlkZSB0aGUgT3ZlcmxheSBvbmNlIHRyaWdnZXJlZFxuICAgKi9cbiAgZGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBBIG1pbGxpc2Vjb25kIGRlbGF5IGFtb3VudCBiZWZvcmUgc2hvd2luZyB0aGUgT3ZlcmxheSBvbmNlIHRyaWdnZXJlZC5cbiAgICovXG4gIGRlbGF5U2hvdzogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIEEgbWlsbGlzZWNvbmQgZGVsYXkgYW1vdW50IGJlZm9yZSBoaWRpbmcgdGhlIE92ZXJsYXkgb25jZSB0cmlnZ2VyZWQuXG4gICAqL1xuICBkZWxheUhpZGU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLy8gRklYTUU6IFRoaXMgc2hvdWxkIGJlIGBkZWZhdWx0U2hvd2AuXG4gIC8qKlxuICAgKiBUaGUgaW5pdGlhbCB2aXNpYmlsaXR5IHN0YXRlIG9mIHRoZSBPdmVybGF5LiBGb3IgbW9yZSBudWFuY2VkIHZpc2liaWxpdHlcbiAgICogY29udHJvbCwgY29uc2lkZXIgdXNpbmcgdGhlIE92ZXJsYXkgY29tcG9uZW50IGRpcmVjdGx5LlxuICAgKi9cbiAgZGVmYXVsdE92ZXJsYXlTaG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFuIGVsZW1lbnQgb3IgdGV4dCB0byBvdmVybGF5IG5leHQgdG8gdGhlIHRhcmdldC5cbiAgICovXG4gIG92ZXJsYXk6IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uTW91c2VPdXQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uTW91c2VPdmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvLyBPdmVycmlkZGVuIHByb3BzIGZyb20gYDxPdmVybGF5PmAuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGFyZ2V0OiBQcm9wVHlwZXMub25lT2YoW251bGxdKSxcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkhpZGU6IFByb3BUeXBlcy5vbmVPZihbbnVsbF0pLFxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNob3c6IFByb3BUeXBlcy5vbmVPZihbbnVsbF0pXG59KTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGVmYXVsdE92ZXJsYXlTaG93bjogZmFsc2UsXG4gIHRyaWdnZXI6IFsnaG92ZXInLCAnZm9jdXMnXVxufTtcblxudmFyIE92ZXJsYXlUcmlnZ2VyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE92ZXJsYXlUcmlnZ2VyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBPdmVybGF5VHJpZ2dlcihwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdmVybGF5VHJpZ2dlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLmhhbmRsZVRvZ2dsZSA9IF90aGlzLmhhbmRsZVRvZ2dsZS5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5oYW5kbGVEZWxheWVkU2hvdyA9IF90aGlzLmhhbmRsZURlbGF5ZWRTaG93LmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZURlbGF5ZWRIaWRlID0gX3RoaXMuaGFuZGxlRGVsYXllZEhpZGUuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuaGFuZGxlSGlkZSA9IF90aGlzLmhhbmRsZUhpZGUuYmluZChfdGhpcyk7XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZU92ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZU1vdXNlT3Zlck91dChfdGhpcy5oYW5kbGVEZWxheWVkU2hvdywgZSwgJ2Zyb21FbGVtZW50Jyk7XG4gICAgfTtcbiAgICBfdGhpcy5oYW5kbGVNb3VzZU91dCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTW91c2VPdmVyT3V0KF90aGlzLmhhbmRsZURlbGF5ZWRIaWRlLCBlLCAndG9FbGVtZW50Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLl9tb3VudE5vZGUgPSBudWxsO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93OiBwcm9wcy5kZWZhdWx0T3ZlcmxheVNob3duXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBPdmVybGF5VHJpZ2dlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9tb3VudE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLnJlbmRlck92ZXJsYXkoKTtcbiAgfTtcblxuICBPdmVybGF5VHJpZ2dlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMucmVuZGVyT3ZlcmxheSgpO1xuICB9O1xuXG4gIE92ZXJsYXlUcmlnZ2VyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUodGhpcy5fbW91bnROb2RlKTtcbiAgICB0aGlzLl9tb3VudE5vZGUgPSBudWxsO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2hvdmVyU2hvd0RlbGF5KTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5faG92ZXJIaWRlRGVsYXkpO1xuICB9O1xuXG4gIE92ZXJsYXlUcmlnZ2VyLnByb3RvdHlwZS5oYW5kbGVEZWxheWVkSGlkZSA9IGZ1bmN0aW9uIGhhbmRsZURlbGF5ZWRIaWRlKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuX2hvdmVyU2hvd0RlbGF5ICE9IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9ob3ZlclNob3dEZWxheSk7XG4gICAgICB0aGlzLl9ob3ZlclNob3dEZWxheSA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN0YXRlLnNob3cgfHwgdGhpcy5faG92ZXJIaWRlRGVsYXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZWxheSA9IHRoaXMucHJvcHMuZGVsYXlIaWRlICE9IG51bGwgPyB0aGlzLnByb3BzLmRlbGF5SGlkZSA6IHRoaXMucHJvcHMuZGVsYXk7XG5cbiAgICBpZiAoIWRlbGF5KSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9ob3ZlckhpZGVEZWxheSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLl9ob3ZlckhpZGVEZWxheSA9IG51bGw7XG4gICAgICBfdGhpczIuaGlkZSgpO1xuICAgIH0sIGRlbGF5KTtcbiAgfTtcblxuICBPdmVybGF5VHJpZ2dlci5wcm90b3R5cGUuaGFuZGxlRGVsYXllZFNob3cgPSBmdW5jdGlvbiBoYW5kbGVEZWxheWVkU2hvdygpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGlmICh0aGlzLl9ob3ZlckhpZGVEZWxheSAhPSBudWxsKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5faG92ZXJIaWRlRGVsYXkpO1xuICAgICAgdGhpcy5faG92ZXJIaWRlRGVsYXkgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXRlLnNob3cgfHwgdGhpcy5faG92ZXJTaG93RGVsYXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZWxheSA9IHRoaXMucHJvcHMuZGVsYXlTaG93ICE9IG51bGwgPyB0aGlzLnByb3BzLmRlbGF5U2hvdyA6IHRoaXMucHJvcHMuZGVsYXk7XG5cbiAgICBpZiAoIWRlbGF5KSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9ob3ZlclNob3dEZWxheSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLl9ob3ZlclNob3dEZWxheSA9IG51bGw7XG4gICAgICBfdGhpczMuc2hvdygpO1xuICAgIH0sIGRlbGF5KTtcbiAgfTtcblxuICBPdmVybGF5VHJpZ2dlci5wcm90b3R5cGUuaGFuZGxlSGlkZSA9IGZ1bmN0aW9uIGhhbmRsZUhpZGUoKSB7XG4gICAgdGhpcy5oaWRlKCk7XG4gIH07XG5cbiAgLy8gU2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIG1vdXNlRW50ZXIgYW5kIG1vdXNlTGVhdmUuXG4gIC8vIFJlYWN0J3MgYnVpbHQgdmVyc2lvbiBpcyBicm9rZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNDI1MVxuICAvLyBmb3IgY2FzZXMgd2hlbiB0aGUgdHJpZ2dlciBpcyBkaXNhYmxlZCBhbmQgbW91c2VPdXQvT3ZlciBjYW4gY2F1c2UgZmxpY2tlclxuICAvLyBtb3ZpbmcgZnJvbSBvbmUgY2hpbGQgZWxlbWVudCB0byBhbm90aGVyLlxuXG5cbiAgT3ZlcmxheVRyaWdnZXIucHJvdG90eXBlLmhhbmRsZU1vdXNlT3Zlck91dCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlT3Zlck91dChoYW5kbGVyLCBlLCByZWxhdGVkTmF0aXZlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICB2YXIgcmVsYXRlZCA9IGUucmVsYXRlZFRhcmdldCB8fCBlLm5hdGl2ZUV2ZW50W3JlbGF0ZWROYXRpdmVdO1xuXG4gICAgaWYgKCghcmVsYXRlZCB8fCByZWxhdGVkICE9PSB0YXJnZXQpICYmICFjb250YWlucyh0YXJnZXQsIHJlbGF0ZWQpKSB7XG4gICAgICBoYW5kbGVyKGUpO1xuICAgIH1cbiAgfTtcblxuICBPdmVybGF5VHJpZ2dlci5wcm90b3R5cGUuaGFuZGxlVG9nZ2xlID0gZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNob3cpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH07XG5cbiAgT3ZlcmxheVRyaWdnZXIucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93OiBmYWxzZSB9KTtcbiAgfTtcblxuICBPdmVybGF5VHJpZ2dlci5wcm90b3R5cGUubWFrZU92ZXJsYXkgPSBmdW5jdGlvbiBtYWtlT3ZlcmxheShvdmVybGF5LCBwcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgT3ZlcmxheSxcbiAgICAgIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBzaG93OiB0aGlzLnN0YXRlLnNob3csXG4gICAgICAgIG9uSGlkZTogdGhpcy5oYW5kbGVIaWRlLFxuICAgICAgICB0YXJnZXQ6IHRoaXNcbiAgICAgIH0pLFxuICAgICAgb3ZlcmxheVxuICAgICk7XG4gIH07XG5cbiAgT3ZlcmxheVRyaWdnZXIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93OiB0cnVlIH0pO1xuICB9O1xuXG4gIE92ZXJsYXlUcmlnZ2VyLnByb3RvdHlwZS5yZW5kZXJPdmVybGF5ID0gZnVuY3Rpb24gcmVuZGVyT3ZlcmxheSgpIHtcbiAgICBSZWFjdERPTS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcih0aGlzLCB0aGlzLl9vdmVybGF5LCB0aGlzLl9tb3VudE5vZGUpO1xuICB9O1xuXG4gIE92ZXJsYXlUcmlnZ2VyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHRyaWdnZXIgPSBfcHJvcHMudHJpZ2dlcixcbiAgICAgICAgb3ZlcmxheSA9IF9wcm9wcy5vdmVybGF5LFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgb25CbHVyID0gX3Byb3BzLm9uQmx1cixcbiAgICAgICAgb25DbGljayA9IF9wcm9wcy5vbkNsaWNrLFxuICAgICAgICBvbkZvY3VzID0gX3Byb3BzLm9uRm9jdXMsXG4gICAgICAgIG9uTW91c2VPdXQgPSBfcHJvcHMub25Nb3VzZU91dCxcbiAgICAgICAgb25Nb3VzZU92ZXIgPSBfcHJvcHMub25Nb3VzZU92ZXIsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWyd0cmlnZ2VyJywgJ292ZXJsYXknLCAnY2hpbGRyZW4nLCAnb25CbHVyJywgJ29uQ2xpY2snLCAnb25Gb2N1cycsICdvbk1vdXNlT3V0JywgJ29uTW91c2VPdmVyJ10pO1xuXG4gICAgZGVsZXRlIHByb3BzLmRlbGF5O1xuICAgIGRlbGV0ZSBwcm9wcy5kZWxheVNob3c7XG4gICAgZGVsZXRlIHByb3BzLmRlbGF5SGlkZTtcbiAgICBkZWxldGUgcHJvcHMuZGVmYXVsdE92ZXJsYXlTaG93bjtcblxuICAgIHZhciBjaGlsZCA9IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgIHZhciBjaGlsZFByb3BzID0gY2hpbGQucHJvcHM7XG4gICAgdmFyIHRyaWdnZXJQcm9wcyA9IHt9O1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuc2hvdykge1xuICAgICAgdHJpZ2dlclByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10gPSBvdmVybGF5LnByb3BzLmlkO1xuICAgIH1cblxuICAgIC8vIEZJWE1FOiBUaGUgbG9naWMgaGVyZSBmb3IgcGFzc2luZyB0aHJvdWdoIGhhbmRsZXJzIG9uIHRoaXMgY29tcG9uZW50IGlzXG4gICAgLy8gaW5jb25zaXN0ZW50LiBXZSBzaG91bGRuJ3QgYmUgcGFzc2luZyBhbnkgb2YgdGhlc2UgcHJvcHMgdGhyb3VnaC5cblxuICAgIHRyaWdnZXJQcm9wcy5vbkNsaWNrID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkUHJvcHMub25DbGljaywgb25DbGljayk7XG5cbiAgICBpZiAoaXNPbmVPZignY2xpY2snLCB0cmlnZ2VyKSkge1xuICAgICAgdHJpZ2dlclByb3BzLm9uQ2xpY2sgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24odHJpZ2dlclByb3BzLm9uQ2xpY2ssIHRoaXMuaGFuZGxlVG9nZ2xlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNPbmVPZignaG92ZXInLCB0cmlnZ2VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoISh0cmlnZ2VyID09PSAnaG92ZXInKSwgJ1tyZWFjdC1ib290c3RyYXBdIFNwZWNpZnlpbmcgb25seSB0aGUgYFwiaG92ZXJcImAgdHJpZ2dlciBsaW1pdHMgdGhlICcgKyAndmlzaWJpbGl0eSBvZiB0aGUgb3ZlcmxheSB0byBqdXN0IG1vdXNlIHVzZXJzLiBDb25zaWRlciBhbHNvICcgKyAnaW5jbHVkaW5nIHRoZSBgXCJmb2N1c1wiYCB0cmlnZ2VyIHNvIHRoYXQgdG91Y2ggYW5kIGtleWJvYXJkIG9ubHkgJyArICd1c2VycyBjYW4gc2VlIHRoZSBvdmVybGF5IGFzIHdlbGwuJykgOiB2b2lkIDA7XG5cbiAgICAgIHRyaWdnZXJQcm9wcy5vbk1vdXNlT3ZlciA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihjaGlsZFByb3BzLm9uTW91c2VPdmVyLCBvbk1vdXNlT3ZlciwgdGhpcy5oYW5kbGVNb3VzZU92ZXIpO1xuICAgICAgdHJpZ2dlclByb3BzLm9uTW91c2VPdXQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oY2hpbGRQcm9wcy5vbk1vdXNlT3V0LCBvbk1vdXNlT3V0LCB0aGlzLmhhbmRsZU1vdXNlT3V0KTtcbiAgICB9XG5cbiAgICBpZiAoaXNPbmVPZignZm9jdXMnLCB0cmlnZ2VyKSkge1xuICAgICAgdHJpZ2dlclByb3BzLm9uRm9jdXMgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oY2hpbGRQcm9wcy5vbkZvY3VzLCBvbkZvY3VzLCB0aGlzLmhhbmRsZURlbGF5ZWRTaG93KTtcbiAgICAgIHRyaWdnZXJQcm9wcy5vbkJsdXIgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oY2hpbGRQcm9wcy5vbkJsdXIsIG9uQmx1ciwgdGhpcy5oYW5kbGVEZWxheWVkSGlkZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fb3ZlcmxheSA9IHRoaXMubWFrZU92ZXJsYXkob3ZlcmxheSwgcHJvcHMpO1xuXG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwgdHJpZ2dlclByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gT3ZlcmxheVRyaWdnZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk92ZXJsYXlUcmlnZ2VyLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk92ZXJsYXlUcmlnZ2VyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgT3ZlcmxheVRyaWdnZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIFBhZ2VIZWFkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUGFnZUhlYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFnZUhlYWRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnZUhlYWRlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFBhZ2VIZWFkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2gxJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBQYWdlSGVhZGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdwYWdlLWhlYWRlcicsIFBhZ2VIZWFkZXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHByZXZpb3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgbmV4dDogUHJvcFR5cGVzLmJvb2wsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIGV2ZW50S2V5OiBQcm9wVHlwZXMuYW55XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIHByZXZpb3VzOiBmYWxzZSxcbiAgbmV4dDogZmFsc2Vcbn07XG5cbnZhciBQYWdlckl0ZW0gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUGFnZXJJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYWdlckl0ZW0ocHJvcHMsIGNvbnRleHQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnZXJJdGVtKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuaGFuZGxlU2VsZWN0ID0gX3RoaXMuaGFuZGxlU2VsZWN0LmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFBhZ2VySXRlbS5wcm90b3R5cGUuaGFuZGxlU2VsZWN0ID0gZnVuY3Rpb24gaGFuZGxlU2VsZWN0KGUpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIG9uU2VsZWN0ID0gX3Byb3BzLm9uU2VsZWN0LFxuICAgICAgICBldmVudEtleSA9IF9wcm9wcy5ldmVudEtleTtcblxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uU2VsZWN0KSB7XG4gICAgICBvblNlbGVjdChldmVudEtleSwgZSk7XG4gICAgfVxuICB9O1xuXG4gIFBhZ2VySXRlbS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICBwcmV2aW91cyA9IF9wcm9wczIucHJldmlvdXMsXG4gICAgICAgIG5leHQgPSBfcHJvcHMyLm5leHQsXG4gICAgICAgIG9uQ2xpY2sgPSBfcHJvcHMyLm9uQ2xpY2ssXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF9wcm9wczIuc3R5bGUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsnZGlzYWJsZWQnLCAncHJldmlvdXMnLCAnbmV4dCcsICdvbkNsaWNrJywgJ2NsYXNzTmFtZScsICdzdHlsZSddKTtcblxuICAgIGRlbGV0ZSBwcm9wcy5vblNlbGVjdDtcbiAgICBkZWxldGUgcHJvcHMuZXZlbnRLZXk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdsaScsXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHsgZGlzYWJsZWQ6IGRpc2FibGVkLCBwcmV2aW91czogcHJldmlvdXMsIG5leHQ6IG5leHQgfSksXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2FmZUFuY2hvciwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgb25DbGljazogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKG9uQ2xpY2ssIHRoaXMuaGFuZGxlU2VsZWN0KVxuICAgICAgfSkpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gUGFnZXJJdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QYWdlckl0ZW0ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUGFnZXJJdGVtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgUGFnZXJJdGVtOyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgX3R5cGVvZiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuXG52YXIgd2FybmVkID0ge307XG5cbmZ1bmN0aW9uIGRlcHJlY2F0aW9uV2FybmluZyhvbGRuYW1lLCBuZXduYW1lLCBsaW5rKSB7XG4gIHZhciBtZXNzYWdlID0gdm9pZCAwO1xuXG4gIGlmICgodHlwZW9mIG9sZG5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9sZG5hbWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBtZXNzYWdlID0gb2xkbmFtZS5tZXNzYWdlO1xuICB9IGVsc2Uge1xuICAgIG1lc3NhZ2UgPSBvbGRuYW1lICsgJyBpcyBkZXByZWNhdGVkLiBVc2UgJyArIG5ld25hbWUgKyAnIGluc3RlYWQuJztcblxuICAgIGlmIChsaW5rKSB7XG4gICAgICBtZXNzYWdlICs9ICdcXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCBpdCBhdCAnICsgbGluaztcbiAgICB9XG4gIH1cblxuICBpZiAod2FybmVkW21lc3NhZ2VdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuICB3YXJuZWRbbWVzc2FnZV0gPSB0cnVlO1xufVxuXG5kZXByZWNhdGlvbldhcm5pbmcud3JhcHBlciA9IGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoRGVwcmVjYXRlZENvbXBvbmVudCwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBEZXByZWNhdGVkQ29tcG9uZW50KCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlcHJlY2F0ZWRDb21wb25lbnQpO1xuXG4gICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBEZXByZWNhdGVkQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICBkZXByZWNhdGlvbldhcm5pbmcuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcblxuICAgICAgaWYgKF9Db21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCkge1xuICAgICAgICB2YXIgX0NvbXBvbmVudCRwcm90b3R5cGUkO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgbWV0aG9kQXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgbWV0aG9kQXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICB9XG5cbiAgICAgICAgKF9Db21wb25lbnQkcHJvdG90eXBlJCA9IF9Db21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCkuY2FsbC5hcHBseShfQ29tcG9uZW50JHByb3RvdHlwZSQsIFt0aGlzXS5jb25jYXQobWV0aG9kQXJncykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gRGVwcmVjYXRlZENvbXBvbmVudDtcbiAgfShDb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZGVwcmVjYXRpb25XYXJuaW5nO1xuXG5leHBvcnQgZnVuY3Rpb24gX3Jlc2V0V2FybmVkKCkge1xuICB3YXJuZWQgPSB7fTtcbn0iLCJpbXBvcnQgUGFnZXJJdGVtIGZyb20gJy4vUGFnZXJJdGVtJztcbmltcG9ydCBkZXByZWNhdGlvbldhcm5pbmcgZnJvbSAnLi91dGlscy9kZXByZWNhdGlvbldhcm5pbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBkZXByZWNhdGlvbldhcm5pbmcud3JhcHBlcihQYWdlckl0ZW0sICdgPFBhZ2VJdGVtPmAnLCAnYDxQYWdlci5JdGVtPmAnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBQYWdlckl0ZW0gZnJvbSAnLi9QYWdlckl0ZW0nO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgVmFsaWRDb21wb25lbnRDaGlsZHJlbiBmcm9tICcuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4nO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbnZhciBQYWdlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQYWdlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFnZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUGFnZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25TZWxlY3QgPSBfcHJvcHMub25TZWxlY3QsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnb25TZWxlY3QnLCAnY2xhc3NOYW1lJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICd1bCcsXG4gICAgICBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pLFxuICAgICAgVmFsaWRDb21wb25lbnRDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgb25TZWxlY3Q6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihjaGlsZC5wcm9wcy5vblNlbGVjdCwgb25TZWxlY3QpXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBQYWdlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUGFnZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG5QYWdlci5JdGVtID0gUGFnZXJJdGVtO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdwYWdlcicsIFBhZ2VyKTsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLW11bHRpLWNvbXAgKi9cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGV2ZW50S2V5OiBQcm9wVHlwZXMuYW55LFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBhY3RpdmVMYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIGFjdGl2ZUxhYmVsOiAnKGN1cnJlbnQpJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnaW5hdGlvbkl0ZW0oX3JlZikge1xuICB2YXIgYWN0aXZlID0gX3JlZi5hY3RpdmUsXG4gICAgICBkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGFjdGl2ZUxhYmVsID0gX3JlZi5hY3RpdmVMYWJlbCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnYWN0aXZlJywgJ2Rpc2FibGVkJywgJ2NsYXNzTmFtZScsICdzdHlsZScsICdhY3RpdmVMYWJlbCcsICdjaGlsZHJlbiddKTtcblxuICB2YXIgQ29tcG9uZW50ID0gYWN0aXZlIHx8IGRpc2FibGVkID8gJ3NwYW4nIDogU2FmZUFuY2hvcjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2xpJyxcbiAgICB7IHN0eWxlOiBzdHlsZSwgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgeyBhY3RpdmU6IGFjdGl2ZSwgZGlzYWJsZWQ6IGRpc2FibGVkIH0pIH0sXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIENvbXBvbmVudCxcbiAgICAgIF9leHRlbmRzKHsgZGlzYWJsZWQ6IGRpc2FibGVkIH0sIHByb3BzKSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgYWN0aXZlICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdzci1vbmx5JyB9LFxuICAgICAgICBhY3RpdmVMYWJlbFxuICAgICAgKVxuICAgIClcbiAgKTtcbn1cblxuUGFnaW5hdGlvbkl0ZW0ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUGFnaW5hdGlvbkl0ZW0uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5mdW5jdGlvbiBjcmVhdGVCdXR0b24obmFtZSwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHZhciBsYWJlbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbmFtZTtcblxuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhfY2xhc3MsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gX2NsYXNzKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9jbGFzcyk7XG5cbiAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIF9jbGFzcy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnZGlzYWJsZWQnLCAnY2hpbGRyZW4nLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgICB2YXIgQ29tcG9uZW50ID0gZGlzYWJsZWQgPyAnc3BhbicgOiBTYWZlQW5jaG9yO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2xpJyxcbiAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgICdhcmlhLWxhYmVsJzogbGFiZWwsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgeyBkaXNhYmxlZDogZGlzYWJsZWQgfSlcbiAgICAgICAgfSwgcHJvcHMpLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGNoaWxkcmVuIHx8IGRlZmF1bHRWYWx1ZVxuICAgICAgICApXG4gICAgICApO1xuICAgIH07XG5cbiAgICByZXR1cm4gX2NsYXNzO1xuICB9KFJlYWN0LkNvbXBvbmVudCksIF9jbGFzcy5kaXNwbGF5TmFtZSA9IG5hbWUsIF9jbGFzcy5wcm9wVHlwZXMgPSB7IGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCB9LCBfdGVtcDtcbn1cblxuZXhwb3J0IHZhciBGaXJzdCA9IGNyZWF0ZUJ1dHRvbignRmlyc3QnLCAnXFx4QUInKTtcbmV4cG9ydCB2YXIgUHJldiA9IGNyZWF0ZUJ1dHRvbignUHJldicsICdcXHUyMDM5Jyk7XG5leHBvcnQgdmFyIEVsbGlwc2lzID0gY3JlYXRlQnV0dG9uKCdFbGxpcHNpcycsICdcXHUyMDI2JywgJ01vcmUnKTtcbmV4cG9ydCB2YXIgTmV4dCA9IGNyZWF0ZUJ1dHRvbignTmV4dCcsICdcXHUyMDNBJyk7XG5leHBvcnQgdmFyIExhc3QgPSBjcmVhdGVCdXR0b24oJ0xhc3QnLCAnXFx4QkInKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFBhZ2luYXRpb25JdGVtLCB7IEZpcnN0LCBQcmV2LCBFbGxpcHNpcywgTmV4dCwgTGFzdCB9IGZyb20gJy4vUGFnaW5hdGlvbkl0ZW0nO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgUGFnaW5hdGlvbiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQYWdpbmF0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYWdpbmF0aW9uKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYWdpbmF0aW9uKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUGFnaW5hdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NsYXNzTmFtZScsICdjaGlsZHJlbiddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndWwnLFxuICAgICAgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSB9KSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gUGFnaW5hdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuYnNDbGFzcygncGFnaW5hdGlvbicsIFBhZ2luYXRpb24pO1xuXG5QYWdpbmF0aW9uLkZpcnN0ID0gRmlyc3Q7XG5QYWdpbmF0aW9uLlByZXYgPSBQcmV2O1xuUGFnaW5hdGlvbi5FbGxpcHNpcyA9IEVsbGlwc2lzO1xuUGFnaW5hdGlvbi5JdGVtID0gUGFnaW5hdGlvbkl0ZW07XG5QYWdpbmF0aW9uLk5leHQgPSBOZXh0O1xuUGFnaW5hdGlvbi5MYXN0ID0gTGFzdDtcblxuZXhwb3J0IGRlZmF1bHQgUGFnaW5hdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBwcmVmaXgsIHNwbGl0QnNQcm9wcywgYnNDbGFzcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJy4vQ29sbGFwc2UnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgZXhwYW5kc1xuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgY29tcG9uZW50IHN0YXJ0cyB0byBleHBhbmRcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBoYXMgZXhwYW5kZWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBjb2xsYXBzZXNcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgY29tcG9uZW50IHN0YXJ0cyB0byBjb2xsYXBzZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIGNvbGxhcHNlZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfcGFuZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGVhZGluZ0lkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGJvZHlJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbFxuICB9KVxufTtcblxudmFyIFBhbmVsQ29sbGFwc2UgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUGFuZWxDb2xsYXBzZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFuZWxDb2xsYXBzZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFuZWxDb2xsYXBzZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFBhbmVsQ29sbGFwc2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLmNvbnRleHQuJGJzX3BhbmVsIHx8IHt9LFxuICAgICAgICBoZWFkaW5nSWQgPSBfcmVmLmhlYWRpbmdJZCxcbiAgICAgICAgYm9keUlkID0gX3JlZi5ib2R5SWQsXG4gICAgICAgIF9ic0NsYXNzID0gX3JlZi5ic0NsYXNzLFxuICAgICAgICBleHBhbmRlZCA9IF9yZWYuZXhwYW5kZWQ7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyh0aGlzLnByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIHByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIGJzUHJvcHMuYnNDbGFzcyA9IF9ic0NsYXNzIHx8IGJzUHJvcHMuYnNDbGFzcztcblxuICAgIGlmIChoZWFkaW5nSWQgJiYgYm9keUlkKSB7XG4gICAgICBwcm9wcy5pZCA9IGJvZHlJZDtcbiAgICAgIHByb3BzLnJvbGUgPSBwcm9wcy5yb2xlIHx8ICd0YWJwYW5lbCc7XG4gICAgICBwcm9wc1snYXJpYS1sYWJlbGxlZGJ5J10gPSBoZWFkaW5nSWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb2xsYXBzZSxcbiAgICAgIF9leHRlbmRzKHsgJ2luJzogZXhwYW5kZWQgfSwgcHJvcHMpLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXgoYnNQcm9wcywgJ2NvbGxhcHNlJykgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBQYW5lbENvbGxhcHNlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QYW5lbENvbGxhcHNlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBhbmVsQ29sbGFwc2UuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdwYW5lbCcsIFBhbmVsQ29sbGFwc2UpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBwcmVmaXgsIHNwbGl0QnNQcm9wc0FuZE9taXQsIGJzQ2xhc3MgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBQYW5lbENvbGxhcHNlIGZyb20gJy4vUGFuZWxDb2xsYXBzZSc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCByZW5kZXJzIGEgQ29sbGFwc2UgY29tcG9uZW50IGFyb3VuZCB0aGUgQm9keSBmb3JcbiAgICogc2l0dWF0aW9ucyB3aGVuIHRoZSBwYXJlbnQgUGFuZWwgb25seSBjb250YWlucyBhIHNpbmdsZSBQYW5lbC5Cb2R5IGNoaWxkLlxuICAgKlxuICAgKiByZW5kZXJzOlxuICAgKiBgYGBqc3hcbiAgICogPFBhbmVsLkNvbGxhcHNlPlxuICAgKiAgPFBhbmVsLkJvZHkgLz5cbiAgICogPC9QYW5lbC5Db2xsYXBzZT5cbiAgICogYGBgXG4gICAqL1xuICBjb2xsYXBzaWJsZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29sbGFwc2libGU6IGZhbHNlXG59O1xuXG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfcGFuZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYnNDbGFzczogUHJvcFR5cGVzLnN0cmluZ1xuICB9KVxufTtcblxudmFyIFBhbmVsQm9keSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQYW5lbEJvZHksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBhbmVsQm9keSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFuZWxCb2R5KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUGFuZWxCb2R5LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjb2xsYXBzaWJsZSA9IF9wcm9wcy5jb2xsYXBzaWJsZTtcblxuICAgIHZhciBfcmVmID0gdGhpcy5jb250ZXh0LiRic19wYW5lbCB8fCB7fSxcbiAgICAgICAgX2JzQ2xhc3MgPSBfcmVmLmJzQ2xhc3M7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wc0FuZE9taXQgPSBzcGxpdEJzUHJvcHNBbmRPbWl0KHRoaXMucHJvcHMsIFsnY29sbGFwc2libGUnXSksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzQW5kT21pdFswXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMV07XG5cbiAgICBic1Byb3BzLmJzQ2xhc3MgPSBfYnNDbGFzcyB8fCBic1Byb3BzLmJzQ2xhc3M7XG5cbiAgICB2YXIgYm9keSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbihjbGFzc05hbWUsIHByZWZpeChic1Byb3BzLCAnYm9keScpKSB9KSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcblxuICAgIGlmIChjb2xsYXBzaWJsZSkge1xuICAgICAgYm9keSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFBhbmVsQ29sbGFwc2UsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGJvZHlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvZHk7XG4gIH07XG5cbiAgcmV0dXJuIFBhbmVsQm9keTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUGFuZWxCb2R5LnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBhbmVsQm9keS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5QYW5lbEJvZHkuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdwYW5lbCcsIFBhbmVsQm9keSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdyZWFjdC1wcm9wLXR5cGVzL2xpYi9lbGVtZW50VHlwZSc7XG5cbmltcG9ydCB7IHByZWZpeCwgYnNDbGFzcywgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdkaXYnXG59O1xuXG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfcGFuZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGVhZGluZ0lkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGJzQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSlcbn07XG5cbnZhciBQYW5lbEhlYWRpbmcgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUGFuZWxIZWFkaW5nLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYW5lbEhlYWRpbmcoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhbmVsSGVhZGluZyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFBhbmVsSGVhZGluZy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2hpbGRyZW4nLCAnY2xhc3NOYW1lJywgJ2NvbXBvbmVudENsYXNzJ10pO1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLmNvbnRleHQuJGJzX3BhbmVsIHx8IHt9LFxuICAgICAgICBoZWFkaW5nSWQgPSBfcmVmLmhlYWRpbmdJZCxcbiAgICAgICAgX2JzQ2xhc3MgPSBfcmVmLmJzQ2xhc3M7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgYnNQcm9wcy5ic0NsYXNzID0gX2JzQ2xhc3MgfHwgYnNQcm9wcy5ic0NsYXNzO1xuXG4gICAgaWYgKGhlYWRpbmdJZCkge1xuICAgICAgZWxlbWVudFByb3BzLnJvbGUgPSBlbGVtZW50UHJvcHMucm9sZSB8fCAndGFiJztcbiAgICAgIGVsZW1lbnRQcm9wcy5pZCA9IGhlYWRpbmdJZDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIENvbXBvbmVudCxcbiAgICAgIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbihjbGFzc05hbWUsIHByZWZpeChic1Byb3BzLCAnaGVhZGluZycpKVxuICAgICAgfSksXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFBhbmVsSGVhZGluZztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUGFuZWxIZWFkaW5nLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBhbmVsSGVhZGluZy5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5QYW5lbEhlYWRpbmcuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdwYW5lbCcsIFBhbmVsSGVhZGluZyk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncmVhY3QtcHJvcC10eXBlcy9saWIvZWxlbWVudFR5cGUnO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogb25seSBoZXJlIHRvIHNhdGlzZnkgbGludGluZywganVzdCB0aGUgaHRtbCBvbkNsaWNrIGhhbmRsZXIuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFlvdSBjYW4gdXNlIGEgY3VzdG9tIGVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50XG4gICAqL1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBTYWZlQW5jaG9yXG59O1xuXG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfcGFuZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYm9keUlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uVG9nZ2xlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2xcbiAgfSlcbn07XG5cbnZhciBQYW5lbFRvZ2dsZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQYW5lbFRvZ2dsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFuZWxUb2dnbGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhbmVsVG9nZ2xlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfdGhpcy5oYW5kbGVUb2dnbGUgPSBfdGhpcy5oYW5kbGVUb2dnbGUuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgUGFuZWxUb2dnbGUucHJvdG90eXBlLmhhbmRsZVRvZ2dsZSA9IGZ1bmN0aW9uIGhhbmRsZVRvZ2dsZShldmVudCkge1xuICAgIHZhciBfcmVmID0gdGhpcy5jb250ZXh0LiRic19wYW5lbCB8fCB7fSxcbiAgICAgICAgb25Ub2dnbGUgPSBfcmVmLm9uVG9nZ2xlO1xuXG4gICAgaWYgKG9uVG9nZ2xlKSB7XG4gICAgICBvblRvZ2dsZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIFBhbmVsVG9nZ2xlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uQ2xpY2sgPSBfcHJvcHMub25DbGljayxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY29tcG9uZW50Q2xhc3MgPSBfcHJvcHMuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydvbkNsaWNrJywgJ2NsYXNzTmFtZScsICdjb21wb25lbnRDbGFzcyddKTtcblxuICAgIHZhciBfcmVmMiA9IHRoaXMuY29udGV4dC4kYnNfcGFuZWwgfHwge30sXG4gICAgICAgIGV4cGFuZGVkID0gX3JlZjIuZXhwYW5kZWQsXG4gICAgICAgIGJvZHlJZCA9IF9yZWYyLmJvZHlJZDtcblxuICAgIHZhciBDb21wb25lbnQgPSBjb21wb25lbnRDbGFzcztcblxuICAgIHByb3BzLm9uQ2xpY2sgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25DbGljaywgdGhpcy5oYW5kbGVUb2dnbGUpO1xuXG4gICAgcHJvcHNbJ2FyaWEtZXhwYW5kZWQnXSA9IGV4cGFuZGVkO1xuICAgIHByb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCAhZXhwYW5kZWQgJiYgJ2NvbGxhcHNlZCcpO1xuXG4gICAgaWYgKGJvZHlJZCkge1xuICAgICAgcHJvcHNbJ2FyaWEtY29udHJvbHMnXSA9IGJvZHlJZDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gUGFuZWxUb2dnbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblBhbmVsVG9nZ2xlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBhbmVsVG9nZ2xlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblBhbmVsVG9nZ2xlLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgUGFuZWxUb2dnbGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBlbGVtZW50VHlwZSBmcm9tICdyZWFjdC1wcm9wLXR5cGVzL2xpYi9lbGVtZW50VHlwZSc7XG5cbmltcG9ydCB7IHByZWZpeCwgc3BsaXRCc1Byb3BzLCBic0NsYXNzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgUGFuZWxUb2dnbGUgZnJvbSAnLi9QYW5lbFRvZ2dsZSc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IHJlbmRlcnMgdGhlIFBhbmVsLlRpdGxlIGFzIGEgcGFuZWwgY29sbGFwc2UgdG9nZ2xlIGNvbXBvbmVudFxuICAgKiBmb3IgdGhlIGNvbW1vbiB1c2UtY2FzZS5cbiAgICovXG4gIHRvZ2dsZTogUHJvcFR5cGVzLmJvb2xcbn07XG5cbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19wYW5lbDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnRDbGFzczogJ2Rpdidcbn07XG5cbnZhciBQYW5lbFRpdGxlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBhbmVsVGl0bGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBhbmVsVGl0bGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhbmVsVGl0bGUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQYW5lbFRpdGxlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICB0b2dnbGUgPSBfcHJvcHMudG9nZ2xlLFxuICAgICAgICBDb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjaGlsZHJlbicsICdjbGFzc05hbWUnLCAndG9nZ2xlJywgJ2NvbXBvbmVudENsYXNzJ10pO1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLmNvbnRleHQuJGJzX3BhbmVsIHx8IHt9LFxuICAgICAgICBfYnNDbGFzcyA9IF9yZWYuYnNDbGFzcztcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICBic1Byb3BzLmJzQ2xhc3MgPSBfYnNDbGFzcyB8fCBic1Byb3BzLmJzQ2xhc3M7XG5cbiAgICBpZiAodG9nZ2xlKSB7XG4gICAgICBjaGlsZHJlbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFBhbmVsVG9nZ2xlLFxuICAgICAgICBudWxsLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIENvbXBvbmVudCxcbiAgICAgIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbihjbGFzc05hbWUsIHByZWZpeChic1Byb3BzLCAndGl0bGUnKSlcbiAgICAgIH0pLFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBQYW5lbFRpdGxlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QYW5lbFRpdGxlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblBhbmVsVGl0bGUuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuUGFuZWxUaXRsZS5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ3BhbmVsJywgUGFuZWxUaXRsZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IHByZWZpeCwgYnNDbGFzcywgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gICRic19wYW5lbDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pXG59O1xuXG52YXIgUGFuZWxGb290ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUGFuZWxGb290ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBhbmVsRm9vdGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYW5lbEZvb3Rlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFBhbmVsRm9vdGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lO1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLmNvbnRleHQuJGJzX3BhbmVsIHx8IHt9LFxuICAgICAgICBfYnNDbGFzcyA9IF9yZWYuYnNDbGFzcztcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHRoaXMucHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIGJzUHJvcHMuYnNDbGFzcyA9IF9ic0NsYXNzIHx8IGJzUHJvcHMuYnNDbGFzcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY24oY2xhc3NOYW1lLCBwcmVmaXgoYnNQcm9wcywgJ2Zvb3RlcicpKVxuICAgICAgfSksXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFBhbmVsRm9vdGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QYW5lbEZvb3Rlci5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ3BhbmVsJywgUGFuZWxGb290ZXIpOyIsImltcG9ydCBfT2JqZWN0JGFzc2lnbiBmcm9tICdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbic7XG5pbXBvcnQgX09iamVjdCR2YWx1ZXMgZnJvbSAnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC92YWx1ZXMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVuY29udHJvbGxhYmxlIGZyb20gJ3VuY29udHJvbGxhYmxlJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuXG5pbXBvcnQgeyBic1N0eWxlcywgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wc0FuZE9taXQgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCB7IFN0YXRlLCBTdHlsZSB9IGZyb20gJy4vdXRpbHMvU3R5bGVDb25maWcnO1xuaW1wb3J0IEJvZHkgZnJvbSAnLi9QYW5lbEJvZHknO1xuaW1wb3J0IEhlYWRpbmcgZnJvbSAnLi9QYW5lbEhlYWRpbmcnO1xuaW1wb3J0IFRpdGxlIGZyb20gJy4vUGFuZWxUaXRsZSc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vUGFuZWxGb290ZXInO1xuaW1wb3J0IFRvZ2dsZSBmcm9tICcuL1BhbmVsVG9nZ2xlJztcbmltcG9ydCBDb2xsYXBzZSBmcm9tICcuL1BhbmVsQ29sbGFwc2UnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGRlZmF1bHRHZXRJZCA9IGZ1bmN0aW9uIGRlZmF1bHRHZXRJZChpZCwgdHlwZSkge1xuICByZXR1cm4gaWQgPyBpZCArICctLScgKyB0eXBlIDogbnVsbDtcbn07XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDb250cm9scyB0aGUgY29sbGFwc2VkL2V4cGFuZGVkIHN0YXRlIG9mdGhlIFBhbmVsLiBSZXF1aXJlc1xuICAgKiBhIGBQYW5lbC5Db2xsYXBzZWAgb3IgYDxQYW5lbC5Cb2R5IGNvbGxhcHNpYmxlPmAgY2hpbGQgY29tcG9uZW50XG4gICAqIGluIG9yZGVyIHRvIGFjdHVhbGx5IGFuaW1hdGUgb3V0IG9yIGluLlxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIG9uVG9nZ2xlXG4gICAqL1xuICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbGxhcHNlIHN0YXRlIGNoYW5nZXMuXG4gICAqXG4gICAqIEBjb250cm9sbGFibGUgZXhwYW5kZWRcbiAgICovXG4gIG9uVG9nZ2xlOiBQcm9wVHlwZXMuZnVuYyxcbiAgZXZlbnRLZXk6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEFuIEhUTUwgYGlkYCBhdHRyaWJ1dGUgdW5pcXVlbHkgaWRlbnRpZnlpbmcgdGhlIFBhbmVsIGNvbXBvbmVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfcGFuZWxHcm91cDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBnZXRJZDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgYWN0aXZlS2V5OiBQcm9wVHlwZXMuYW55LFxuICAgIG9uVG9nZ2xlOiBQcm9wVHlwZXMuZnVuY1xuICB9KVxufTtcblxudmFyIGNoaWxkQ29udGV4dFR5cGVzID0ge1xuICAkYnNfcGFuZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGVhZGluZ0lkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGJvZHlJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uVG9nZ2xlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2xcbiAgfSlcbn07XG5cbnZhciBQYW5lbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQYW5lbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFuZWwoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYW5lbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlVG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBwYW5lbEdyb3VwID0gX3RoaXMuY29udGV4dC4kYnNfcGFuZWxHcm91cDtcbiAgICAgIHZhciBleHBhbmRlZCA9ICFfdGhpcy5nZXRFeHBhbmRlZCgpO1xuXG4gICAgICBpZiAocGFuZWxHcm91cCAmJiBwYW5lbEdyb3VwLm9uVG9nZ2xlKSB7XG4gICAgICAgIHBhbmVsR3JvdXAub25Ub2dnbGUoX3RoaXMucHJvcHMuZXZlbnRLZXksIGV4cGFuZGVkLCBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uVG9nZ2xlKGV4cGFuZGVkLCBlKTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFBhbmVsLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGV2ZW50S2V5ID0gX3Byb3BzLmV2ZW50S2V5LFxuICAgICAgICBpZCA9IF9wcm9wcy5pZDtcblxuICAgIHZhciBpZEtleSA9IGV2ZW50S2V5ID09IG51bGwgPyBpZCA6IGV2ZW50S2V5O1xuXG4gICAgdmFyIGlkcyA9IHZvaWQgMDtcblxuICAgIGlmIChpZEtleSAhPT0gbnVsbCkge1xuICAgICAgdmFyIHBhbmVsR3JvdXAgPSB0aGlzLmNvbnRleHQuJGJzX3BhbmVsR3JvdXA7XG4gICAgICB2YXIgZ2V0SWQgPSBwYW5lbEdyb3VwICYmIHBhbmVsR3JvdXAuZ2V0SWQgfHwgZGVmYXVsdEdldElkO1xuXG4gICAgICBpZHMgPSB7XG4gICAgICAgIGhlYWRpbmdJZDogZ2V0SWQoaWRLZXksICdoZWFkaW5nJyksXG4gICAgICAgIGJvZHlJZDogZ2V0SWQoaWRLZXksICdib2R5JylcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICRic19wYW5lbDogX2V4dGVuZHMoe30sIGlkcywge1xuICAgICAgICBic0NsYXNzOiB0aGlzLnByb3BzLmJzQ2xhc3MsXG4gICAgICAgIGV4cGFuZGVkOiB0aGlzLmdldEV4cGFuZGVkKCksXG4gICAgICAgIG9uVG9nZ2xlOiB0aGlzLmhhbmRsZVRvZ2dsZVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFBhbmVsLnByb3RvdHlwZS5nZXRFeHBhbmRlZCA9IGZ1bmN0aW9uIGdldEV4cGFuZGVkKCkge1xuICAgIHZhciBwYW5lbEdyb3VwID0gdGhpcy5jb250ZXh0LiRic19wYW5lbEdyb3VwO1xuXG4gICAgaWYgKHBhbmVsR3JvdXAgJiYgaGFzLmNhbGwocGFuZWxHcm91cCwgJ2FjdGl2ZUtleScpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0aGlzLnByb3BzLmV4cGFuZGVkID09IG51bGwsICdTcGVjaWZ5aW5nIGA8UGFuZWw+YCBgZXhwYW5kZWRgIGluIHRoZSBjb250ZXh0IG9mIGFuIGFjY29yZGlvbiAnICsgJ2A8UGFuZWxHcm91cD5gIGlzIG5vdCBzdXBwb3J0ZWQuIFNldCBgYWN0aXZlS2V5YCBvbiB0aGUgJyArICdgPFBhbmVsR3JvdXA+YCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuXG4gICAgICByZXR1cm4gcGFuZWxHcm91cC5hY3RpdmVLZXkgPT09IHRoaXMucHJvcHMuZXZlbnRLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhdGhpcy5wcm9wcy5leHBhbmRlZDtcbiAgfTtcblxuICBQYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzMi5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzMi5jaGlsZHJlbjtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQodGhpcy5wcm9wcywgWydvblRvZ2dsZScsICdldmVudEtleScsICdleHBhbmRlZCddKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzBdLFxuICAgICAgICBwcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBwcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBnZXRDbGFzc1NldChic1Byb3BzKSkgfSksXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFBhbmVsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5QYW5lbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cblBhbmVsLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblBhbmVsLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5cbnZhciBVbmNvbnRyb2xsZWRQYW5lbCA9IHVuY29udHJvbGxhYmxlKGJzQ2xhc3MoJ3BhbmVsJywgYnNTdHlsZXMoW10uY29uY2F0KF9PYmplY3QkdmFsdWVzKFN0YXRlKSwgW1N0eWxlLkRFRkFVTFQsIFN0eWxlLlBSSU1BUlldKSwgU3R5bGUuREVGQVVMVCwgUGFuZWwpKSwgeyBleHBhbmRlZDogJ29uVG9nZ2xlJyB9KTtcblxuX09iamVjdCRhc3NpZ24oVW5jb250cm9sbGVkUGFuZWwsIHtcbiAgSGVhZGluZzogSGVhZGluZyxcbiAgVGl0bGU6IFRpdGxlLFxuICBCb2R5OiBCb2R5LFxuICBGb290ZXI6IEZvb3RlcixcbiAgVG9nZ2xlOiBUb2dnbGUsXG4gIENvbGxhcHNlOiBDb2xsYXBzZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFVuY29udHJvbGxlZFBhbmVsOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBpc1JlcXVpcmVkRm9yQTExeSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeSc7XG5cbmltcG9ydCB7IGJzQ2xhc3MsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQW4gaHRtbCBpZCBhdHRyaWJ1dGUsIG5lY2Vzc2FyeSBmb3IgYWNjZXNzaWJpbGl0eVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcmVxdWlyZWRcbiAgICovXG4gIGlkOiBpc1JlcXVpcmVkRm9yQTExeShQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSkpLFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkaXJlY3Rpb24gdGhlIFBvcG92ZXIgaXMgcG9zaXRpb25lZCB0b3dhcmRzLlxuICAgKi9cbiAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBcInRvcFwiIHBvc2l0aW9uIHZhbHVlIGZvciB0aGUgUG9wb3Zlci5cbiAgICovXG4gIHBvc2l0aW9uVG9wOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgXCJsZWZ0XCIgcG9zaXRpb24gdmFsdWUgZm9yIHRoZSBQb3BvdmVyLlxuICAgKi9cbiAgcG9zaXRpb25MZWZ0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBcInRvcFwiIHBvc2l0aW9uIHZhbHVlIGZvciB0aGUgUG9wb3ZlciBhcnJvdy5cbiAgICovXG4gIGFycm93T2Zmc2V0VG9wOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgXCJsZWZ0XCIgcG9zaXRpb24gdmFsdWUgZm9yIHRoZSBQb3BvdmVyIGFycm93LlxuICAgKi9cbiAgYXJyb3dPZmZzZXRMZWZ0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRpdGxlIGNvbnRlbnRcbiAgICovXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZVxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgcGxhY2VtZW50OiAncmlnaHQnXG59O1xuXG52YXIgUG9wb3ZlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3BvdmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3BvdmVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BvdmVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcGxhY2VtZW50ID0gX3Byb3BzLnBsYWNlbWVudCxcbiAgICAgICAgcG9zaXRpb25Ub3AgPSBfcHJvcHMucG9zaXRpb25Ub3AsXG4gICAgICAgIHBvc2l0aW9uTGVmdCA9IF9wcm9wcy5wb3NpdGlvbkxlZnQsXG4gICAgICAgIGFycm93T2Zmc2V0VG9wID0gX3Byb3BzLmFycm93T2Zmc2V0VG9wLFxuICAgICAgICBhcnJvd09mZnNldExlZnQgPSBfcHJvcHMuYXJyb3dPZmZzZXRMZWZ0LFxuICAgICAgICB0aXRsZSA9IF9wcm9wcy50aXRsZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsncGxhY2VtZW50JywgJ3Bvc2l0aW9uVG9wJywgJ3Bvc2l0aW9uTGVmdCcsICdhcnJvd09mZnNldFRvcCcsICdhcnJvd09mZnNldExlZnQnLCAndGl0bGUnLCAnY2xhc3NOYW1lJywgJ3N0eWxlJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltwbGFjZW1lbnRdID0gdHJ1ZSwgX2V4dGVuZHMyKSk7XG5cbiAgICB2YXIgb3V0ZXJTdHlsZSA9IF9leHRlbmRzKHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB0b3A6IHBvc2l0aW9uVG9wLFxuICAgICAgbGVmdDogcG9zaXRpb25MZWZ0XG4gICAgfSwgc3R5bGUpO1xuXG4gICAgdmFyIGFycm93U3R5bGUgPSB7XG4gICAgICB0b3A6IGFycm93T2Zmc2V0VG9wLFxuICAgICAgbGVmdDogYXJyb3dPZmZzZXRMZWZ0XG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICAgIHJvbGU6ICd0b29sdGlwJyxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcyksXG4gICAgICAgIHN0eWxlOiBvdXRlclN0eWxlXG4gICAgICB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnYXJyb3cnLCBzdHlsZTogYXJyb3dTdHlsZSB9KSxcbiAgICAgIHRpdGxlICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdoMycsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXgoYnNQcm9wcywgJ3RpdGxlJykgfSxcbiAgICAgICAgdGl0bGVcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6IHByZWZpeChic1Byb3BzLCAnY29udGVudCcpIH0sXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gUG9wb3Zlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUG9wb3Zlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Qb3BvdmVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygncG9wb3ZlcicsIFBvcG92ZXIpOyIsImltcG9ydCBfT2JqZWN0JHZhbHVlcyBmcm9tICdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3ZhbHVlcyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IGJzQ2xhc3MgYXMgc2V0QnNDbGFzcywgYnNTdHlsZXMsIGdldENsYXNzU2V0LCBwcmVmaXgsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL3V0aWxzL1N0eWxlQ29uZmlnJztcbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG5cbnZhciBST1VORF9QUkVDSVNJT04gPSAxMDAwO1xuXG4vKipcbiAqIFZhbGlkYXRlIHRoYXQgY2hpbGRyZW4sIGlmIGFueSwgYXJlIGluc3RhbmNlcyBvZiBgPFByb2dyZXNzQmFyPmAuXG4gKi9cbmZ1bmN0aW9uIG9ubHlQcm9ncmVzc0Jhcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHNbcHJvcE5hbWVdO1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgIGlmIChjaGlsZC50eXBlID09PSBQcm9ncmVzc0JhcikgcmV0dXJuO1xuXG4gICAgdmFyIGNoaWxkSWRlbnRpZmllciA9IFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSA/IGNoaWxkLnR5cGUuZGlzcGxheU5hbWUgfHwgY2hpbGQudHlwZS5uYW1lIHx8IGNoaWxkLnR5cGUgOiBjaGlsZDtcbiAgICBlcnJvciA9IG5ldyBFcnJvcignQ2hpbGRyZW4gb2YgJyArIGNvbXBvbmVudE5hbWUgKyAnIGNhbiBjb250YWluIG9ubHkgUHJvZ3Jlc3NCYXIgJyArICgnY29tcG9uZW50cy4gRm91bmQgJyArIGNoaWxkSWRlbnRpZmllciArICcuJykpO1xuICB9KTtcblxuICByZXR1cm4gZXJyb3I7XG59XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIG1pbjogUHJvcFR5cGVzLm51bWJlcixcbiAgbm93OiBQcm9wVHlwZXMubnVtYmVyLFxuICBtYXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcbiAgc3JPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaXBlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNoaWxkcmVuOiBvbmx5UHJvZ3Jlc3NCYXIsXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0NoaWxkOiBQcm9wVHlwZXMuYm9vbFxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbWluOiAwLFxuICBtYXg6IDEwMCxcbiAgYWN0aXZlOiBmYWxzZSxcbiAgaXNDaGlsZDogZmFsc2UsXG4gIHNyT25seTogZmFsc2UsXG4gIHN0cmlwZWQ6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBnZXRQZXJjZW50YWdlKG5vdywgbWluLCBtYXgpIHtcbiAgdmFyIHBlcmNlbnRhZ2UgPSAobm93IC0gbWluKSAvIChtYXggLSBtaW4pICogMTAwO1xuICByZXR1cm4gTWF0aC5yb3VuZChwZXJjZW50YWdlICogUk9VTkRfUFJFQ0lTSU9OKSAvIFJPVU5EX1BSRUNJU0lPTjtcbn1cblxudmFyIFByb2dyZXNzQmFyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb2dyZXNzQmFyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm9ncmVzc0JhcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvZ3Jlc3NCYXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9ncmVzc0Jhci5wcm90b3R5cGUucmVuZGVyUHJvZ3Jlc3NCYXIgPSBmdW5jdGlvbiByZW5kZXJQcm9ncmVzc0JhcihfcmVmKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBtaW4gPSBfcmVmLm1pbixcbiAgICAgICAgbm93ID0gX3JlZi5ub3csXG4gICAgICAgIG1heCA9IF9yZWYubWF4LFxuICAgICAgICBsYWJlbCA9IF9yZWYubGFiZWwsXG4gICAgICAgIHNyT25seSA9IF9yZWYuc3JPbmx5LFxuICAgICAgICBzdHJpcGVkID0gX3JlZi5zdHJpcGVkLFxuICAgICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydtaW4nLCAnbm93JywgJ21heCcsICdsYWJlbCcsICdzck9ubHknLCAnc3RyaXBlZCcsICdhY3RpdmUnLCAnY2xhc3NOYW1lJywgJ3N0eWxlJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gX2V4dGVuZHMoe30sIGdldENsYXNzU2V0KGJzUHJvcHMpLCAoX2V4dGVuZHMyID0ge1xuICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICB9LCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdzdHJpcGVkJyldID0gYWN0aXZlIHx8IHN0cmlwZWQsIF9leHRlbmRzMikpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgICAgcm9sZTogJ3Byb2dyZXNzYmFyJyxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcyksXG4gICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7IHdpZHRoOiBnZXRQZXJjZW50YWdlKG5vdywgbWluLCBtYXgpICsgJyUnIH0sIHN0eWxlKSxcbiAgICAgICAgJ2FyaWEtdmFsdWVub3cnOiBub3csXG4gICAgICAgICdhcmlhLXZhbHVlbWluJzogbWluLFxuICAgICAgICAnYXJpYS12YWx1ZW1heCc6IG1heFxuICAgICAgfSksXG4gICAgICBzck9ubHkgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnc3Itb25seScgfSxcbiAgICAgICAgbGFiZWxcbiAgICAgICkgOiBsYWJlbFxuICAgICk7XG4gIH07XG5cbiAgUHJvZ3Jlc3NCYXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNDaGlsZCA9IF9wcm9wcy5pc0NoaWxkLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaXNDaGlsZCddKTtcblxuICAgIGlmIChpc0NoaWxkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJQcm9ncmVzc0Jhcihwcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIG1pbiA9IHByb3BzLm1pbixcbiAgICAgICAgbm93ID0gcHJvcHMubm93LFxuICAgICAgICBtYXggPSBwcm9wcy5tYXgsXG4gICAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICAgIHNyT25seSA9IHByb3BzLnNyT25seSxcbiAgICAgICAgc3RyaXBlZCA9IHByb3BzLnN0cmlwZWQsXG4gICAgICAgIGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgICAgYnNDbGFzcyA9IHByb3BzLmJzQ2xhc3MsXG4gICAgICAgIGJzU3R5bGUgPSBwcm9wcy5ic1N0eWxlLFxuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgWydtaW4nLCAnbm93JywgJ21heCcsICdsYWJlbCcsICdzck9ubHknLCAnc3RyaXBlZCcsICdhY3RpdmUnLCAnYnNDbGFzcycsICdic1N0eWxlJywgJ2NsYXNzTmFtZScsICdjaGlsZHJlbiddKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgd3JhcHBlclByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsICdwcm9ncmVzcycpIH0pLFxuICAgICAgY2hpbGRyZW4gPyBWYWxpZENvbXBvbmVudENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHsgaXNDaGlsZDogdHJ1ZSB9KTtcbiAgICAgIH0pIDogdGhpcy5yZW5kZXJQcm9ncmVzc0Jhcih7XG4gICAgICAgIG1pbjogbWluLFxuICAgICAgICBub3c6IG5vdyxcbiAgICAgICAgbWF4OiBtYXgsXG4gICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgc3JPbmx5OiBzck9ubHksXG4gICAgICAgIHN0cmlwZWQ6IHN0cmlwZWQsXG4gICAgICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICAgICBic0NsYXNzOiBic0NsYXNzLFxuICAgICAgICBic1N0eWxlOiBic1N0eWxlXG4gICAgICB9KVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFByb2dyZXNzQmFyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qcm9ncmVzc0Jhci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Qcm9ncmVzc0Jhci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IHNldEJzQ2xhc3MoJ3Byb2dyZXNzLWJhcicsIGJzU3R5bGVzKF9PYmplY3QkdmFsdWVzKFN0YXRlKSwgUHJvZ3Jlc3NCYXIpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2xhYmVsLWhhcy1mb3IgKi9cblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgaW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIE9ubHkgdmFsaWQgaWYgYGlubGluZWAgaXMgbm90IHNldC5cbiAgICovXG4gIHZhbGlkYXRpb25TdGF0ZTogUHJvcFR5cGVzLm9uZU9mKFsnc3VjY2VzcycsICd3YXJuaW5nJywgJ2Vycm9yJywgbnVsbF0pLFxuICAvKipcbiAgICogQXR0YWNoZXMgYSByZWYgdG8gdGhlIGA8aW5wdXQ+YCBlbGVtZW50LiBPbmx5IGZ1bmN0aW9ucyBjYW4gYmUgdXNlZCBoZXJlLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiA8UmFkaW8gaW5wdXRSZWY9e3JlZiA9PiB7IHRoaXMuaW5wdXQgPSByZWY7IH19IC8+XG4gICAqIGBgYFxuICAgKi9cbiAgaW5wdXRSZWY6IFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBpbmxpbmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHRpdGxlOiAnJ1xufTtcblxudmFyIFJhZGlvID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJhZGlvLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSYWRpbygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmFkaW8pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSYWRpby5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpbmxpbmUgPSBfcHJvcHMuaW5saW5lLFxuICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgdmFsaWRhdGlvblN0YXRlID0gX3Byb3BzLnZhbGlkYXRpb25TdGF0ZSxcbiAgICAgICAgaW5wdXRSZWYgPSBfcHJvcHMuaW5wdXRSZWYsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICB0aXRsZSA9IF9wcm9wcy50aXRsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydpbmxpbmUnLCAnZGlzYWJsZWQnLCAndmFsaWRhdGlvblN0YXRlJywgJ2lucHV0UmVmJywgJ2NsYXNzTmFtZScsICdzdHlsZScsICd0aXRsZScsICdjaGlsZHJlbiddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgaW5wdXQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICB0eXBlOiAncmFkaW8nLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSkpO1xuXG4gICAgaWYgKGlubGluZSkge1xuICAgICAgdmFyIF9jbGFzc2VzMjtcblxuICAgICAgdmFyIF9jbGFzc2VzID0gKF9jbGFzc2VzMiA9IHt9LCBfY2xhc3NlczJbcHJlZml4KGJzUHJvcHMsICdpbmxpbmUnKV0gPSB0cnVlLCBfY2xhc3NlczIuZGlzYWJsZWQgPSBkaXNhYmxlZCwgX2NsYXNzZXMyKTtcblxuICAgICAgLy8gVXNlIGEgd2FybmluZyBoZXJlIGluc3RlYWQgb2YgaW4gcHJvcFR5cGVzIHRvIGdldCBiZXR0ZXItbG9va2luZ1xuICAgICAgLy8gZ2VuZXJhdGVkIGRvY3VtZW50YXRpb24uXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghdmFsaWRhdGlvblN0YXRlLCAnYHZhbGlkYXRpb25TdGF0ZWAgaXMgaWdub3JlZCBvbiBgPFJhZGlvIGlubGluZT5gLiBUbyBkaXNwbGF5ICcgKyAndmFsaWRhdGlvbiBzdGF0ZSBvbiBhbiBpbmxpbmUgcmFkaW8sIHNldCBgdmFsaWRhdGlvblN0YXRlYCBvbiBhICcgKyAncGFyZW50IGA8Rm9ybUdyb3VwPmAgb3Igb3RoZXIgZWxlbWVudCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIF9jbGFzc2VzKSxcbiAgICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgICAgdGl0bGU6IHRpdGxlXG4gICAgICAgIH0sXG4gICAgICAgIGlucHV0LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwge1xuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSk7XG4gICAgaWYgKHZhbGlkYXRpb25TdGF0ZSkge1xuICAgICAgY2xhc3Nlc1snaGFzLScgKyB2YWxpZGF0aW9uU3RhdGVdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSwgc3R5bGU6IHN0eWxlIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnbGFiZWwnLFxuICAgICAgICB7IHRpdGxlOiB0aXRsZSB9LFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBSYWRpbztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmFkaW8ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUmFkaW8uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdyYWRpbycsIFJhZGlvKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbi8vIFRPRE86IFRoaXMgc2hvdWxkIHByb2JhYmx5IHRha2UgYSBzaW5nbGUgYGFzcGVjdFJhdGlvYCBwcm9wLlxuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhpcyBjb21wb25lbnQgcmVxdWlyZXMgYSBzaW5nbGUgY2hpbGQgZWxlbWVudFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiAxNmJ5OSBhc3BlY3QgcmF0aW9cbiAgICovXG4gIGExNmJ5OTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiA0YnkzIGFzcGVjdCByYXRpb1xuICAgKi9cbiAgYTRieTM6IFByb3BUeXBlcy5ib29sXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhMTZieTk6IGZhbHNlLFxuICBhNGJ5MzogZmFsc2Vcbn07XG5cbnZhciBSZXNwb25zaXZlRW1iZWQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVzcG9uc2l2ZUVtYmVkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZXNwb25zaXZlRW1iZWQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3BvbnNpdmVFbWJlZCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlc3BvbnNpdmVFbWJlZC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYTE2Ynk5ID0gX3Byb3BzLmExNmJ5OSxcbiAgICAgICAgYTRieTMgPSBfcHJvcHMuYTRieTMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnYTE2Ynk5JywgJ2E0YnkzJywgJ2NsYXNzTmFtZScsICdjaGlsZHJlbiddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhhMTZieTkgfHwgYTRieTMsICdFaXRoZXIgYGExNmJ5OWAgb3IgYGE0YnkzYCBtdXN0IGJlIHNldC4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghKGExNmJ5OSAmJiBhNGJ5MyksICdPbmx5IG9uZSBvZiBgYTE2Ynk5YCBvciBgYTRieTNgIGNhbiBiZSBzZXQuJykgOiB2b2lkIDA7XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICcxNmJ5OScpXSA9IGExNmJ5OSwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzLCAnNGJ5MycpXSA9IGE0YnkzLCBfZXh0ZW5kczIpKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc2VzKSB9LFxuICAgICAgY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeChic1Byb3BzLCAnaXRlbScpKVxuICAgICAgfSkpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gUmVzcG9uc2l2ZUVtYmVkO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5SZXNwb25zaXZlRW1iZWQucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuUmVzcG9uc2l2ZUVtYmVkLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnZW1iZWQtcmVzcG9uc2l2ZScsIFJlc3BvbnNpdmVFbWJlZCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudENsYXNzOiBlbGVtZW50VHlwZVxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdkaXYnXG59O1xuXG52YXIgUm93ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm93KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3cpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSb3cucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudENsYXNzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29tcG9uZW50Q2xhc3MnLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NTZXQoYnNQcm9wcyk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcykgfSkpO1xuICB9O1xuXG4gIHJldHVybiBSb3c7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdy5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Sb3cuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCdyb3cnLCBSb3cpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IERyb3Bkb3duVG9nZ2xlIGZyb20gJy4vRHJvcGRvd25Ub2dnbGUnO1xuXG52YXIgU3BsaXRUb2dnbGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3BsaXRUb2dnbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNwbGl0VG9nZ2xlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcGxpdFRvZ2dsZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFNwbGl0VG9nZ2xlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd25Ub2dnbGUsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7IHVzZUFuY2hvcjogZmFsc2UsIG5vQ2FyZXQ6IGZhbHNlIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3BsaXRUb2dnbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblNwbGl0VG9nZ2xlLmRlZmF1bHRQcm9wcyA9IERyb3Bkb3duVG9nZ2xlLmRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgU3BsaXRUb2dnbGU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi9Ecm9wZG93bic7XG5pbXBvcnQgU3BsaXRUb2dnbGUgZnJvbSAnLi9TcGxpdFRvZ2dsZSc7XG5pbXBvcnQgc3BsaXRDb21wb25lbnRQcm9wcyBmcm9tICcuL3V0aWxzL3NwbGl0Q29tcG9uZW50UHJvcHMnO1xuXG52YXIgcHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIERyb3Bkb3duLnByb3BUeXBlcywge1xuXG4gIC8vIFRvZ2dsZSBwcm9wcy5cbiAgYnNTdHlsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYnNTaXplOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBzcGxpdCBidXR0b24uXG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIEFjY2Vzc2libGUgbGFiZWwgZm9yIHRoZSB0b2dnbGU7IHRoZSB2YWx1ZSBvZiBgdGl0bGVgIGlmIG5vdCBzcGVjaWZpZWQuXG4gICAqL1xuICB0b2dnbGVMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvLyBPdmVycmlkZSBnZW5lcmF0ZWQgZG9jcyBmcm9tIDxEcm9wZG93bj4uXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59KTtcblxudmFyIFNwbGl0QnV0dG9uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNwbGl0QnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTcGxpdEJ1dHRvbigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3BsaXRCdXR0b24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTcGxpdEJ1dHRvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1NpemUgPSBfcHJvcHMuYnNTaXplLFxuICAgICAgICBic1N0eWxlID0gX3Byb3BzLmJzU3R5bGUsXG4gICAgICAgIHRpdGxlID0gX3Byb3BzLnRpdGxlLFxuICAgICAgICB0b2dnbGVMYWJlbCA9IF9wcm9wcy50b2dnbGVMYWJlbCxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydic1NpemUnLCAnYnNTdHlsZScsICd0aXRsZScsICd0b2dnbGVMYWJlbCcsICdjaGlsZHJlbiddKTtcblxuICAgIHZhciBfc3BsaXRDb21wb25lbnRQcm9wcyA9IHNwbGl0Q29tcG9uZW50UHJvcHMocHJvcHMsIERyb3Bkb3duLkNvbnRyb2xsZWRDb21wb25lbnQpLFxuICAgICAgICBkcm9wZG93blByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMF0sXG4gICAgICAgIGJ1dHRvblByb3BzID0gX3NwbGl0Q29tcG9uZW50UHJvcHNbMV07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIERyb3Bkb3duLFxuICAgICAgX2V4dGVuZHMoe30sIGRyb3Bkb3duUHJvcHMsIHsgYnNTaXplOiBic1NpemUsIGJzU3R5bGU6IGJzU3R5bGUgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBCdXR0b24sXG4gICAgICAgIF9leHRlbmRzKHt9LCBidXR0b25Qcm9wcywge1xuICAgICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBic1NpemU6IGJzU2l6ZSxcbiAgICAgICAgICBic1N0eWxlOiBic1N0eWxlXG4gICAgICAgIH0pLFxuICAgICAgICB0aXRsZVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3BsaXRUb2dnbGUsIHtcbiAgICAgICAgJ2FyaWEtbGFiZWwnOiB0b2dnbGVMYWJlbCB8fCB0aXRsZSxcbiAgICAgICAgYnNTaXplOiBic1NpemUsXG4gICAgICAgIGJzU3R5bGU6IGJzU3R5bGVcbiAgICAgIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRHJvcGRvd24uTWVudSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBTcGxpdEJ1dHRvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3BsaXRCdXR0b24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG5TcGxpdEJ1dHRvbi5Ub2dnbGUgPSBTcGxpdFRvZ2dsZTtcblxuZXhwb3J0IGRlZmF1bHQgU3BsaXRCdXR0b247IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHVuY29udHJvbGxhYmxlIGZyb20gJ3VuY29udHJvbGxhYmxlJztcblxudmFyIFRBQiA9ICd0YWInO1xudmFyIFBBTkUgPSAncGFuZSc7XG5cbnZhciBpZFByb3BUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSFRNTCBpZCBhdHRyaWJ1dGUsIHJlcXVpcmVkIGlmIG5vIGBnZW5lcmF0ZUNoaWxkSWRgIHByb3BcbiAgICogaXMgc3BlY2lmaWVkLlxuICAgKi9cbiAgaWQ6IGZ1bmN0aW9uIGlkKHByb3BzKSB7XG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuZ2VuZXJhdGVDaGlsZElkKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGVycm9yID0gaWRQcm9wVHlwZS5hcHBseSh1bmRlZmluZWQsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcblxuICAgICAgaWYgKCFlcnJvciAmJiAhcHJvcHMuaWQpIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ0luIG9yZGVyIHRvIHByb3Blcmx5IGluaXRpYWxpemUgVGFicyBpbiBhIHdheSB0aGF0IGlzIGFjY2Vzc2libGUgJyArICd0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzIChzdWNoIGFzIHNjcmVlbiByZWFkZXJzKSBhbiBgaWRgIG9yIGEgJyArICdgZ2VuZXJhdGVDaGlsZElkYCBwcm9wIHRvIFRhYkNvbnRhaW5lciBpcyByZXF1aXJlZCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlcnJvcjtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYW4gYGV2ZW50S2V5YCBhbmQgYHR5cGVgIGFuZCByZXR1cm5zIGEgdW5pcXVlIGlkIGZvclxuICAgKiBjaGlsZCB0YWIgYDxOYXZJdGVtPmBzIGFuZCBgPFRhYlBhbmU+YHMuIFRoZSBmdW5jdGlvbiBfbXVzdF8gYmUgYSBwdXJlXG4gICAqIGZ1bmN0aW9uLCBtZWFuaW5nIGl0IHNob3VsZCBhbHdheXMgcmV0dXJuIHRoZSBfc2FtZV8gaWQgZm9yIHRoZSBzYW1lIHNldFxuICAgKiBvZiBpbnB1dHMuIFRoZSBkZWZhdWx0IHZhbHVlIHJlcXVpcmVzIHRoYXQgYW4gYGlkYCB0byBiZSBzZXQgZm9yIHRoZVxuICAgKiBgPFRhYkNvbnRhaW5lcj5gLlxuICAgKlxuICAgKiBUaGUgYHR5cGVgIGFyZ3VtZW50IHdpbGwgZWl0aGVyIGJlIGBcInRhYlwiYCBvciBgXCJwYW5lXCJgLlxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlIChldmVudEtleSwgdHlwZSkgPT4gYCR7dGhpcy5wcm9wcy5pZH0tJHt0eXBlfS0ke2tleX1gXG4gICAqL1xuICBnZW5lcmF0ZUNoaWxkSWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gYSB0YWIgaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBjb250cm9sbGFibGUgYWN0aXZlS2V5XG4gICAqL1xuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBgZXZlbnRLZXlgIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIHRhYi5cbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBvblNlbGVjdFxuICAgKi9cbiAgYWN0aXZlS2V5OiBQcm9wVHlwZXMuYW55XG59O1xuXG52YXIgY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICRic190YWJDb250YWluZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYWN0aXZlS2V5OiBQcm9wVHlwZXMuYW55LFxuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldFRhYklkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldFBhbmVJZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9KVxufTtcblxudmFyIFRhYkNvbnRhaW5lciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUYWJDb250YWluZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYkNvbnRhaW5lcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFiQ29udGFpbmVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgVGFiQ29udGFpbmVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGl2ZUtleSA9IF9wcm9wcy5hY3RpdmVLZXksXG4gICAgICAgIG9uU2VsZWN0ID0gX3Byb3BzLm9uU2VsZWN0LFxuICAgICAgICBnZW5lcmF0ZUNoaWxkSWQgPSBfcHJvcHMuZ2VuZXJhdGVDaGlsZElkLFxuICAgICAgICBpZCA9IF9wcm9wcy5pZDtcblxuXG4gICAgdmFyIGdldElkID0gZ2VuZXJhdGVDaGlsZElkIHx8IGZ1bmN0aW9uIChrZXksIHR5cGUpIHtcbiAgICAgIHJldHVybiBpZCA/IGlkICsgJy0nICsgdHlwZSArICctJyArIGtleSA6IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAkYnNfdGFiQ29udGFpbmVyOiB7XG4gICAgICAgIGFjdGl2ZUtleTogYWN0aXZlS2V5LFxuICAgICAgICBvblNlbGVjdDogb25TZWxlY3QsXG4gICAgICAgIGdldFRhYklkOiBmdW5jdGlvbiBnZXRUYWJJZChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0SWQoa2V5LCBUQUIpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRQYW5lSWQ6IGZ1bmN0aW9uIGdldFBhbmVJZChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0SWQoa2V5LCBQQU5FKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgVGFiQ29udGFpbmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsnY2hpbGRyZW4nXSk7XG5cbiAgICBkZWxldGUgcHJvcHMuZ2VuZXJhdGVDaGlsZElkO1xuICAgIGRlbGV0ZSBwcm9wcy5vblNlbGVjdDtcbiAgICBkZWxldGUgcHJvcHMuYWN0aXZlS2V5O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgcHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBUYWJDb250YWluZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRhYkNvbnRhaW5lci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5UYWJDb250YWluZXIuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgdW5jb250cm9sbGFibGUoVGFiQ29udGFpbmVyLCB7IGFjdGl2ZUtleTogJ29uU2VsZWN0JyB9KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZWxlbWVudFR5cGUgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUnO1xuXG5pbXBvcnQgeyBic0NsYXNzIGFzIHNldEJzQ2xhc3MsIHByZWZpeCwgc3BsaXRCc1Byb3BzQW5kT21pdCB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnRDbGFzczogZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNldHMgYSBkZWZhdWx0IGFuaW1hdGlvbiBzdHJhdGVneSBmb3IgYWxsIGNoaWxkcmVuIGA8VGFiUGFuZT5gcy4gVXNlXG4gICAqIGBmYWxzZWAgdG8gZGlzYWJsZSwgYHRydWVgIHRvIGVuYWJsZSB0aGUgZGVmYXVsdCBgPEZhZGU+YCBhbmltYXRpb24gb3JcbiAgICogYSByZWFjdC10cmFuc2l0aW9uLWdyb3VwIHYyIGA8VHJhbnNpdGlvbi8+YCBjb21wb25lbnQuXG4gICAqL1xuICBhbmltYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBlbGVtZW50VHlwZV0pLFxuXG4gIC8qKlxuICAgKiBXYWl0IHVudGlsIHRoZSBmaXJzdCBcImVudGVyXCIgdHJhbnNpdGlvbiB0byBtb3VudCB0YWJzIChhZGQgdGhlbSB0byB0aGUgRE9NKVxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVW5tb3VudCB0YWJzIChyZW1vdmUgaXQgZnJvbSB0aGUgRE9NKSB3aGVuIHRoZXkgYXJlIG5vIGxvbmdlciB2aXNpYmxlXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbFxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50Q2xhc3M6ICdkaXYnLFxuICBhbmltYXRpb246IHRydWUsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlXG59O1xuXG52YXIgY29udGV4dFR5cGVzID0ge1xuICAkYnNfdGFiQ29udGFpbmVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFjdGl2ZUtleTogUHJvcFR5cGVzLmFueVxuICB9KVxufTtcblxudmFyIGNoaWxkQ29udGV4dFR5cGVzID0ge1xuICAkYnNfdGFiQ29udGVudDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFuaW1hdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIGVsZW1lbnRUeXBlXSksXG4gICAgYWN0aXZlS2V5OiBQcm9wVHlwZXMuYW55LFxuICAgIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25QYW5lRW50ZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QYW5lRXhpdGVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGV4aXRpbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbiAgfSlcbn07XG5cbnZhciBUYWJDb250ZW50ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRhYkNvbnRlbnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYkNvbnRlbnQocHJvcHMsIGNvbnRleHQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFiQ29udGVudCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLmhhbmRsZVBhbmVFbnRlciA9IF90aGlzLmhhbmRsZVBhbmVFbnRlci5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5oYW5kbGVQYW5lRXhpdGVkID0gX3RoaXMuaGFuZGxlUGFuZUV4aXRlZC5iaW5kKF90aGlzKTtcblxuICAgIC8vIEFjdGl2ZSBlbnRyaWVzIGluIHN0YXRlIHdpbGwgYmUgYG51bGxgIHVubGVzcyBgYW5pbWF0aW9uYCBpcyBzZXQuIE5lZWRcbiAgICAvLyB0byB0cmFjayBhY3RpdmUgY2hpbGQgaW4gY2FzZSBrZXlzIHN3YXAgYW5kIHRoZSBhY3RpdmUgY2hpbGQgY2hhbmdlc1xuICAgIC8vIGJ1dCB0aGUgYWN0aXZlIGtleSBkb2VzIG5vdC5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFjdGl2ZUtleTogbnVsbCxcbiAgICAgIGFjdGl2ZUNoaWxkOiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUYWJDb250ZW50LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzQ2xhc3MgPSBfcHJvcHMuYnNDbGFzcyxcbiAgICAgICAgYW5pbWF0aW9uID0gX3Byb3BzLmFuaW1hdGlvbixcbiAgICAgICAgbW91bnRPbkVudGVyID0gX3Byb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgdW5tb3VudE9uRXhpdCA9IF9wcm9wcy51bm1vdW50T25FeGl0O1xuXG5cbiAgICB2YXIgc3RhdGVBY3RpdmVLZXkgPSB0aGlzLnN0YXRlLmFjdGl2ZUtleTtcbiAgICB2YXIgY29udGFpbmVyQWN0aXZlS2V5ID0gdGhpcy5nZXRDb250YWluZXJBY3RpdmVLZXkoKTtcblxuICAgIHZhciBhY3RpdmVLZXkgPSBzdGF0ZUFjdGl2ZUtleSAhPSBudWxsID8gc3RhdGVBY3RpdmVLZXkgOiBjb250YWluZXJBY3RpdmVLZXk7XG4gICAgdmFyIGV4aXRpbmcgPSBzdGF0ZUFjdGl2ZUtleSAhPSBudWxsICYmIHN0YXRlQWN0aXZlS2V5ICE9PSBjb250YWluZXJBY3RpdmVLZXk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgJGJzX3RhYkNvbnRlbnQ6IHtcbiAgICAgICAgYnNDbGFzczogYnNDbGFzcyxcbiAgICAgICAgYW5pbWF0aW9uOiBhbmltYXRpb24sXG4gICAgICAgIGFjdGl2ZUtleTogYWN0aXZlS2V5LFxuICAgICAgICBtb3VudE9uRW50ZXI6IG1vdW50T25FbnRlcixcbiAgICAgICAgdW5tb3VudE9uRXhpdDogdW5tb3VudE9uRXhpdCxcbiAgICAgICAgb25QYW5lRW50ZXI6IHRoaXMuaGFuZGxlUGFuZUVudGVyLFxuICAgICAgICBvblBhbmVFeGl0ZWQ6IHRoaXMuaGFuZGxlUGFuZUV4aXRlZCxcbiAgICAgICAgZXhpdGluZzogZXhpdGluZ1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgVGFiQ29udGVudC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKCFuZXh0UHJvcHMuYW5pbWF0aW9uICYmIHRoaXMuc3RhdGUuYWN0aXZlQ2hpbGQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVLZXk6IG51bGwsIGFjdGl2ZUNoaWxkOiBudWxsIH0pO1xuICAgIH1cbiAgfTtcblxuICBUYWJDb250ZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuaXNVbm1vdW50ZWQgPSB0cnVlO1xuICB9O1xuXG4gIFRhYkNvbnRlbnQucHJvdG90eXBlLmdldENvbnRhaW5lckFjdGl2ZUtleSA9IGZ1bmN0aW9uIGdldENvbnRhaW5lckFjdGl2ZUtleSgpIHtcbiAgICB2YXIgdGFiQ29udGFpbmVyID0gdGhpcy5jb250ZXh0LiRic190YWJDb250YWluZXI7XG4gICAgcmV0dXJuIHRhYkNvbnRhaW5lciAmJiB0YWJDb250YWluZXIuYWN0aXZlS2V5O1xuICB9O1xuXG4gIFRhYkNvbnRlbnQucHJvdG90eXBlLmhhbmRsZVBhbmVFbnRlciA9IGZ1bmN0aW9uIGhhbmRsZVBhbmVFbnRlcihjaGlsZCwgY2hpbGRLZXkpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuYW5pbWF0aW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHRoaXMgY2hpbGQgc2hvdWxkIGJlIHRyYW5zaXRpb25pbmcgb3V0LlxuICAgIGlmIChjaGlsZEtleSAhPT0gdGhpcy5nZXRDb250YWluZXJBY3RpdmVLZXkoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYWN0aXZlS2V5OiBjaGlsZEtleSxcbiAgICAgIGFjdGl2ZUNoaWxkOiBjaGlsZFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgVGFiQ29udGVudC5wcm90b3R5cGUuaGFuZGxlUGFuZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZVBhbmVFeGl0ZWQoY2hpbGQpIHtcbiAgICAvLyBUaGlzIG1pZ2h0IGhhcHBlbiBhcyBldmVyeXRoaW5nIGlzIHVubW91bnRpbmcuXG4gICAgaWYgKHRoaXMuaXNVbm1vdW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgYWN0aXZlQ2hpbGQgPSBfcmVmLmFjdGl2ZUNoaWxkO1xuXG4gICAgICBpZiAoYWN0aXZlQ2hpbGQgIT09IGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBhY3RpdmVLZXk6IG51bGwsXG4gICAgICAgIGFjdGl2ZUNoaWxkOiBudWxsXG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIFRhYkNvbnRlbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF9wcm9wczIuY29tcG9uZW50Q2xhc3MsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMyLCBbJ2NvbXBvbmVudENsYXNzJywgJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzQW5kT21pdCA9IHNwbGl0QnNQcm9wc0FuZE9taXQocHJvcHMsIFsnYW5pbWF0aW9uJywgJ21vdW50T25FbnRlcicsICd1bm1vdW50T25FeGl0J10pLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNBbmRPbWl0WzFdO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBwcmVmaXgoYnNQcm9wcywgJ2NvbnRlbnQnKSlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFRhYkNvbnRlbnQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRhYkNvbnRlbnQucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuVGFiQ29udGVudC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5UYWJDb250ZW50LmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblRhYkNvbnRlbnQuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgc2V0QnNDbGFzcygndGFiJywgVGFiQ29udGVudCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGVsZW1lbnRUeXBlIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHNBbmRPbWl0IH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcblxuaW1wb3J0IEZhZGUgZnJvbSAnLi9GYWRlJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFVuaXF1ZWx5IGlkZW50aWZ5IHRoZSBgPFRhYlBhbmU+YCBhbW9uZyBpdHMgc2libGluZ3MuXG4gICAqL1xuICBldmVudEtleTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVXNlIGFuaW1hdGlvbiB3aGVuIHNob3dpbmcgb3IgaGlkaW5nIGA8VGFiUGFuZT5gcy4gVXNlIGBmYWxzZWAgdG8gZGlzYWJsZSxcbiAgICogYHRydWVgIHRvIGVuYWJsZSB0aGUgZGVmYXVsdCBgPEZhZGU+YCBhbmltYXRpb24gb3JcbiAgICogYSByZWFjdC10cmFuc2l0aW9uLWdyb3VwIHYyIGA8VHJhbnNpdGlvbi8+YCBjb21wb25lbnQuXG4gICAqL1xuICBhbmltYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBlbGVtZW50VHlwZV0pLFxuXG4gIC8qKiBAcHJpdmF0ZSAqICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBAcHJpdmF0ZSAqICovXG4gICdhcmlhLWxhYmVsbGVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQgYW5kIHJlbmRlcmVkIGluIHRoZSBjb250ZXh0IG9mIGFcbiAgICogYDxUYWJDb250ZW50PmAsIHRoZSBgYnNDbGFzc2Agb2YgdGhlIGA8VGFiQ29udGVudD5gIHN1ZmZpeGVkIGJ5IGAtcGFuZWAuXG4gICAqIElmIG90aGVyd2lzZSBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQsIGB0YWItcGFuZWAuXG4gICAqL1xuICBic0NsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9uIG9uRW50ZXIgY2FsbGJhY2sgd2hlbiBhbmltYXRpb24gaXMgbm90IGBmYWxzZWBcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9uIG9uRW50ZXJpbmcgY2FsbGJhY2sgd2hlbiBhbmltYXRpb24gaXMgbm90IGBmYWxzZWBcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9uIG9uRW50ZXJlZCBjYWxsYmFjayB3aGVuIGFuaW1hdGlvbiBpcyBub3QgYGZhbHNlYFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVHJhbnNpdGlvbiBvbkV4aXQgY2FsbGJhY2sgd2hlbiBhbmltYXRpb24gaXMgbm90IGBmYWxzZWBcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRyYW5zaXRpb24gb25FeGl0aW5nIGNhbGxiYWNrIHdoZW4gYW5pbWF0aW9uIGlzIG5vdCBgZmFsc2VgXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9uIG9uRXhpdGVkIGNhbGxiYWNrIHdoZW4gYW5pbWF0aW9uIGlzIG5vdCBgZmFsc2VgXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFdhaXQgdW50aWwgdGhlIGZpcnN0IFwiZW50ZXJcIiB0cmFuc2l0aW9uIHRvIG1vdW50IHRoZSB0YWIgKGFkZCBpdCB0byB0aGUgRE9NKVxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVW5tb3VudCB0aGUgdGFiIChyZW1vdmUgaXQgZnJvbSB0aGUgRE9NKSB3aGVuIGl0IGlzIG5vIGxvbmdlciB2aXNpYmxlXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbFxufTtcblxudmFyIGNvbnRleHRUeXBlcyA9IHtcbiAgJGJzX3RhYkNvbnRhaW5lcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBnZXRUYWJJZDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZ2V0UGFuZUlkOiBQcm9wVHlwZXMuZnVuY1xuICB9KSxcbiAgJGJzX3RhYkNvbnRlbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYnNDbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhbmltYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBlbGVtZW50VHlwZV0pLFxuICAgIGFjdGl2ZUtleTogUHJvcFR5cGVzLmFueSxcbiAgICBtb3VudE9uRW50ZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHVubW91bnRPbkV4aXQ6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uUGFuZUVudGVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGFuZUV4aXRlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBleGl0aW5nOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG4gIH0pXG59O1xuXG4vKipcbiAqIFdlIG92ZXJyaWRlIHRoZSBgPFRhYkNvbnRhaW5lcj5gIGNvbnRleHQgc28gYDxOYXY+YHMgaW4gYDxUYWJQYW5lPmBzIGRvbid0XG4gKiBjb25mbGljdCB3aXRoIHRoZSB0b3AgbGV2ZWwgb25lLlxuICovXG52YXIgY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICRic190YWJDb250YWluZXI6IFByb3BUeXBlcy5vbmVPZihbbnVsbF0pXG59O1xuXG52YXIgVGFiUGFuZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUYWJQYW5lLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJQYW5lKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYlBhbmUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlciA9IF90aGlzLmhhbmRsZUVudGVyLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZUV4aXRlZCA9IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKF90aGlzKTtcblxuICAgIF90aGlzLmluID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVGFiUGFuZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAkYnNfdGFiQ29udGFpbmVyOiBudWxsXG4gICAgfTtcbiAgfTtcblxuICBUYWJQYW5lLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnNob3VsZEJlSW4oKSkge1xuICAgICAgLy8gSW4gbGlldSBvZiB0aGUgYWN0aW9uIGV2ZW50IGZpcmluZy5cbiAgICAgIHRoaXMuaGFuZGxlRW50ZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgVGFiUGFuZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLmluKSB7XG4gICAgICBpZiAoIXRoaXMuc2hvdWxkQmVJbigpKSB7XG4gICAgICAgIC8vIFdlIHNob3VsZG4ndCBiZSBhY3RpdmUgYW55IG1vcmUuIE5vdGlmeSB0aGUgcGFyZW50LlxuICAgICAgICB0aGlzLmhhbmRsZUV4aXRlZCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5zaG91bGRCZUluKCkpIHtcbiAgICAgIC8vIFdlIGFyZSB0aGUgYWN0aXZlIGNoaWxkLiBOb3RpZnkgdGhlIHBhcmVudC5cbiAgICAgIHRoaXMuaGFuZGxlRW50ZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgVGFiUGFuZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5pbikge1xuICAgICAgLy8gSW4gbGlldSBvZiB0aGUgYWN0aW9uIGV2ZW50IGZpcmluZy5cbiAgICAgIHRoaXMuaGFuZGxlRXhpdGVkKCk7XG4gICAgfVxuICB9O1xuXG4gIFRhYlBhbmUucHJvdG90eXBlLmdldEFuaW1hdGlvbiA9IGZ1bmN0aW9uIGdldEFuaW1hdGlvbigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hbmltYXRpb24gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuYW5pbWF0aW9uO1xuICAgIH1cblxuICAgIHZhciB0YWJDb250ZW50ID0gdGhpcy5jb250ZXh0LiRic190YWJDb250ZW50O1xuICAgIHJldHVybiB0YWJDb250ZW50ICYmIHRhYkNvbnRlbnQuYW5pbWF0aW9uO1xuICB9O1xuXG4gIFRhYlBhbmUucHJvdG90eXBlLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIoKSB7XG4gICAgdmFyIHRhYkNvbnRlbnQgPSB0aGlzLmNvbnRleHQuJGJzX3RhYkNvbnRlbnQ7XG4gICAgaWYgKCF0YWJDb250ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pbiA9IHRhYkNvbnRlbnQub25QYW5lRW50ZXIodGhpcywgdGhpcy5wcm9wcy5ldmVudEtleSk7XG4gIH07XG5cbiAgVGFiUGFuZS5wcm90b3R5cGUuaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKCkge1xuICAgIHZhciB0YWJDb250ZW50ID0gdGhpcy5jb250ZXh0LiRic190YWJDb250ZW50O1xuICAgIGlmICghdGFiQ29udGVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRhYkNvbnRlbnQub25QYW5lRXhpdGVkKHRoaXMpO1xuICAgIHRoaXMuaW4gPSBmYWxzZTtcbiAgfTtcblxuICBUYWJQYW5lLnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciB0YWJDb250ZW50ID0gdGhpcy5jb250ZXh0LiRic190YWJDb250ZW50O1xuICAgIHZhciBhY3RpdmVLZXkgPSB0YWJDb250ZW50ICYmIHRhYkNvbnRlbnQuYWN0aXZlS2V5O1xuXG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZXZlbnRLZXkgPT09IGFjdGl2ZUtleTtcbiAgfTtcblxuICBUYWJQYW5lLnByb3RvdHlwZS5zaG91bGRCZUluID0gZnVuY3Rpb24gc2hvdWxkQmVJbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBbmltYXRpb24oKSAmJiB0aGlzLmlzQWN0aXZlKCk7XG4gIH07XG5cbiAgVGFiUGFuZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBldmVudEtleSA9IF9wcm9wcy5ldmVudEtleSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgb25FbnRlciA9IF9wcm9wcy5vbkVudGVyLFxuICAgICAgICBvbkVudGVyaW5nID0gX3Byb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIG9uRW50ZXJlZCA9IF9wcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIG9uRXhpdCA9IF9wcm9wcy5vbkV4aXQsXG4gICAgICAgIG9uRXhpdGluZyA9IF9wcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIG9uRXhpdGVkID0gX3Byb3BzLm9uRXhpdGVkLFxuICAgICAgICBwcm9wc01vdW50T25FbnRlciA9IF9wcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIHByb3BzVW5tb3VudE9uRXhpdCA9IF9wcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnZXZlbnRLZXknLCAnY2xhc3NOYW1lJywgJ29uRW50ZXInLCAnb25FbnRlcmluZycsICdvbkVudGVyZWQnLCAnb25FeGl0JywgJ29uRXhpdGluZycsICdvbkV4aXRlZCcsICdtb3VudE9uRW50ZXInLCAndW5tb3VudE9uRXhpdCddKTtcblxuICAgIHZhciBfY29udGV4dCA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgdGFiQ29udGVudCA9IF9jb250ZXh0LiRic190YWJDb250ZW50LFxuICAgICAgICB0YWJDb250YWluZXIgPSBfY29udGV4dC4kYnNfdGFiQ29udGFpbmVyO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHNBbmRPbWl0ID0gc3BsaXRCc1Byb3BzQW5kT21pdChwcm9wcywgWydhbmltYXRpb24nXSksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzQW5kT21pdFswXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc0FuZE9taXRbMV07XG5cbiAgICB2YXIgYWN0aXZlID0gdGhpcy5pc0FjdGl2ZSgpO1xuICAgIHZhciBhbmltYXRpb24gPSB0aGlzLmdldEFuaW1hdGlvbigpO1xuXG4gICAgdmFyIG1vdW50T25FbnRlciA9IHByb3BzTW91bnRPbkVudGVyICE9IG51bGwgPyBwcm9wc01vdW50T25FbnRlciA6IHRhYkNvbnRlbnQgJiYgdGFiQ29udGVudC5tb3VudE9uRW50ZXI7XG4gICAgdmFyIHVubW91bnRPbkV4aXQgPSBwcm9wc1VubW91bnRPbkV4aXQgIT0gbnVsbCA/IHByb3BzVW5tb3VudE9uRXhpdCA6IHRhYkNvbnRlbnQgJiYgdGFiQ29udGVudC51bm1vdW50T25FeGl0O1xuXG4gICAgaWYgKCFhY3RpdmUgJiYgIWFuaW1hdGlvbiAmJiB1bm1vdW50T25FeGl0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgVHJhbnNpdGlvbiA9IGFuaW1hdGlvbiA9PT0gdHJ1ZSA/IEZhZGUgOiBhbmltYXRpb24gfHwgbnVsbDtcblxuICAgIGlmICh0YWJDb250ZW50KSB7XG4gICAgICBic1Byb3BzLmJzQ2xhc3MgPSBwcmVmaXgodGFiQ29udGVudCwgJ3BhbmUnKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwge1xuICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICB9KTtcblxuICAgIGlmICh0YWJDb250YWluZXIpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFlbGVtZW50UHJvcHMuaWQgJiYgIWVsZW1lbnRQcm9wc1snYXJpYS1sYWJlbGxlZGJ5J10sICdJbiB0aGUgY29udGV4dCBvZiBhIGA8VGFiQ29udGFpbmVyPmAsIGA8VGFiUGFuZXM+YCBhcmUgZ2l2ZW4gJyArICdnZW5lcmF0ZWQgYGlkYCBhbmQgYGFyaWEtbGFiZWxsZWRieWAgYXR0cmlidXRlcyBmb3IgdGhlIHNha2Ugb2YgJyArICdwcm9wZXIgY29tcG9uZW50IGFjY2Vzc2liaWxpdHkuIEFueSBwcm92aWRlZCBvbmVzIHdpbGwgYmUgaWdub3JlZC4gJyArICdUbyBjb250cm9sIHRoZXNlIGF0dHJpYnV0ZXMgZGlyZWN0bHkgcHJvdmlkZSBhIGBnZW5lcmF0ZUNoaWxkSWRgICcgKyAncHJvcCB0byB0aGUgcGFyZW50IGA8VGFiQ29udGFpbmVyPmAuJykgOiB2b2lkIDA7XG5cbiAgICAgIGVsZW1lbnRQcm9wcy5pZCA9IHRhYkNvbnRhaW5lci5nZXRQYW5lSWQoZXZlbnRLZXkpO1xuICAgICAgZWxlbWVudFByb3BzWydhcmlhLWxhYmVsbGVkYnknXSA9IHRhYkNvbnRhaW5lci5nZXRUYWJJZChldmVudEtleSk7XG4gICAgfVxuXG4gICAgdmFyIHBhbmUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7XG4gICAgICByb2xlOiAndGFicGFuZWwnLFxuICAgICAgJ2FyaWEtaGlkZGVuJzogIWFjdGl2ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuXG4gICAgaWYgKFRyYW5zaXRpb24pIHtcbiAgICAgIHZhciBleGl0aW5nID0gdGFiQ29udGVudCAmJiB0YWJDb250ZW50LmV4aXRpbmc7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBUcmFuc2l0aW9uLFxuICAgICAgICB7XG4gICAgICAgICAgJ2luJzogYWN0aXZlICYmICFleGl0aW5nLFxuICAgICAgICAgIG9uRW50ZXI6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyLCBvbkVudGVyKSxcbiAgICAgICAgICBvbkVudGVyaW5nOiBvbkVudGVyaW5nLFxuICAgICAgICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgICAgICAgIG9uRXhpdDogb25FeGl0LFxuICAgICAgICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgICAgICAgIG9uRXhpdGVkOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24odGhpcy5oYW5kbGVFeGl0ZWQsIG9uRXhpdGVkKSxcbiAgICAgICAgICBtb3VudE9uRW50ZXI6IG1vdW50T25FbnRlcixcbiAgICAgICAgICB1bm1vdW50T25FeGl0OiB1bm1vdW50T25FeGl0XG4gICAgICAgIH0sXG4gICAgICAgIHBhbmVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhbmU7XG4gIH07XG5cbiAgcmV0dXJuIFRhYlBhbmU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRhYlBhbmUucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuVGFiUGFuZS5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5UYWJQYW5lLmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ3RhYi1wYW5lJywgVGFiUGFuZSk7IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IFRhYkNvbnRhaW5lciBmcm9tICcuL1RhYkNvbnRhaW5lcic7XG5pbXBvcnQgVGFiQ29udGVudCBmcm9tICcuL1RhYkNvbnRlbnQnO1xuaW1wb3J0IFRhYlBhbmUgZnJvbSAnLi9UYWJQYW5lJztcblxudmFyIHByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBUYWJQYW5lLnByb3BUeXBlcywge1xuXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIHRhYkNsYXNzTmFtZSBpcyB1c2VkIGFzIGNsYXNzTmFtZSBmb3IgdGhlIGFzc29jaWF0ZWQgTmF2SXRlbVxuICAgKi9cbiAgdGFiQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59KTtcblxudmFyIFRhYiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUYWIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFiKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgVGFiLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMpO1xuXG4gICAgLy8gVGhlc2UgcHJvcHMgYXJlIGZvciB0aGUgcGFyZW50IGA8VGFicz5gIHJhdGhlciB0aGFuIHRoZSBgPFRhYlBhbmU+YC5cbiAgICBkZWxldGUgcHJvcHMudGl0bGU7XG4gICAgZGVsZXRlIHByb3BzLmRpc2FibGVkO1xuICAgIGRlbGV0ZSBwcm9wcy50YWJDbGFzc05hbWU7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUYWJQYW5lLCBwcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIFRhYjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVGFiLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxuVGFiLkNvbnRhaW5lciA9IFRhYkNvbnRhaW5lcjtcblRhYi5Db250ZW50ID0gVGFiQ29udGVudDtcblRhYi5QYW5lID0gVGFiUGFuZTtcblxuZXhwb3J0IGRlZmF1bHQgVGFiOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHByZWZpeCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIHN0cmlwZWQ6IFByb3BUeXBlcy5ib29sLFxuICBib3JkZXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbmRlbnNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGhvdmVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmVzcG9uc2l2ZTogUHJvcFR5cGVzLmJvb2xcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGJvcmRlcmVkOiBmYWxzZSxcbiAgY29uZGVuc2VkOiBmYWxzZSxcbiAgaG92ZXI6IGZhbHNlLFxuICByZXNwb25zaXZlOiBmYWxzZSxcbiAgc3RyaXBlZDogZmFsc2Vcbn07XG5cbnZhciBUYWJsZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUYWJsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFibGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYmxlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgVGFibGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHN0cmlwZWQgPSBfcHJvcHMuc3RyaXBlZCxcbiAgICAgICAgYm9yZGVyZWQgPSBfcHJvcHMuYm9yZGVyZWQsXG4gICAgICAgIGNvbmRlbnNlZCA9IF9wcm9wcy5jb25kZW5zZWQsXG4gICAgICAgIGhvdmVyID0gX3Byb3BzLmhvdmVyLFxuICAgICAgICByZXNwb25zaXZlID0gX3Byb3BzLnJlc3BvbnNpdmUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydzdHJpcGVkJywgJ2JvcmRlcmVkJywgJ2NvbmRlbnNlZCcsICdob3ZlcicsICdyZXNwb25zaXZlJywgJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBfc3BsaXRCc1Byb3BzID0gc3BsaXRCc1Byb3BzKHByb3BzKSxcbiAgICAgICAgYnNQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMF0sXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF9zcGxpdEJzUHJvcHNbMV07XG5cbiAgICB2YXIgY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBnZXRDbGFzc1NldChic1Byb3BzKSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdzdHJpcGVkJyldID0gc3RyaXBlZCwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzLCAnYm9yZGVyZWQnKV0gPSBib3JkZXJlZCwgX2V4dGVuZHMyW3ByZWZpeChic1Byb3BzLCAnY29uZGVuc2VkJyldID0gY29uZGVuc2VkLCBfZXh0ZW5kczJbcHJlZml4KGJzUHJvcHMsICdob3ZlcicpXSA9IGhvdmVyLCBfZXh0ZW5kczIpKTtcblxuICAgIHZhciB0YWJsZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJywgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKSB9KSk7XG5cbiAgICBpZiAocmVzcG9uc2l2ZSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4KGJzUHJvcHMsICdyZXNwb25zaXZlJykgfSxcbiAgICAgICAgdGFibGVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhYmxlO1xuICB9O1xuXG4gIHJldHVybiBUYWJsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVGFibGUucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuVGFibGUuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBic0NsYXNzKCd0YWJsZScsIFRhYmxlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHJlcXVpcmVkRm9yQTExeSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeSc7XG5pbXBvcnQgdW5jb250cm9sbGFibGUgZnJvbSAndW5jb250cm9sbGFibGUnO1xuXG5pbXBvcnQgTmF2IGZyb20gJy4vTmF2JztcbmltcG9ydCBOYXZJdGVtIGZyb20gJy4vTmF2SXRlbSc7XG5pbXBvcnQgVW5jb250cm9sbGVkVGFiQ29udGFpbmVyIGZyb20gJy4vVGFiQ29udGFpbmVyJztcbmltcG9ydCBUYWJDb250ZW50IGZyb20gJy4vVGFiQ29udGVudCc7XG5pbXBvcnQgeyBic0NsYXNzIGFzIHNldEJzQ2xhc3MgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcbmltcG9ydCBWYWxpZENvbXBvbmVudENoaWxkcmVuIGZyb20gJy4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlbic7XG5cbnZhciBUYWJDb250YWluZXIgPSBVbmNvbnRyb2xsZWRUYWJDb250YWluZXIuQ29udHJvbGxlZENvbXBvbmVudDtcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE1hcmsgdGhlIFRhYiB3aXRoIGEgbWF0Y2hpbmcgYGV2ZW50S2V5YCBhcyBhY3RpdmUuXG4gICAqXG4gICAqIEBjb250cm9sbGFibGUgb25TZWxlY3RcbiAgICovXG4gIGFjdGl2ZUtleTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogTmF2aWdhdGlvbiBzdHlsZVxuICAgKi9cbiAgYnNTdHlsZTogUHJvcFR5cGVzLm9uZU9mKFsndGFicycsICdwaWxscyddKSxcblxuICBhbmltYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIGlkOiByZXF1aXJlZEZvckExMXkoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBhIFRhYiBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogYGBganNcbiAgICogZnVuY3Rpb24gKFxuICAgKiAgIEFueSBldmVudEtleSxcbiAgICogICBTeW50aGV0aWNFdmVudCBldmVudD9cbiAgICogKVxuICAgKiBgYGBcbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBhY3RpdmVLZXlcbiAgICovXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogV2FpdCB1bnRpbCB0aGUgZmlyc3QgXCJlbnRlclwiIHRyYW5zaXRpb24gdG8gbW91bnQgdGFicyAoYWRkIHRoZW0gdG8gdGhlIERPTSlcbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFVubW91bnQgdGFicyAocmVtb3ZlIGl0IGZyb20gdGhlIERPTSkgd2hlbiBpdCBpcyBubyBsb25nZXIgdmlzaWJsZVxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGJzU3R5bGU6ICd0YWJzJyxcbiAgYW5pbWF0aW9uOiB0cnVlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZVxufTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFjdGl2ZUtleShjaGlsZHJlbikge1xuICB2YXIgZGVmYXVsdEFjdGl2ZUtleSA9IHZvaWQgMDtcbiAgVmFsaWRDb21wb25lbnRDaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoZGVmYXVsdEFjdGl2ZUtleSA9PSBudWxsKSB7XG4gICAgICBkZWZhdWx0QWN0aXZlS2V5ID0gY2hpbGQucHJvcHMuZXZlbnRLZXk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGVmYXVsdEFjdGl2ZUtleTtcbn1cblxudmFyIFRhYnMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGFicywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFicygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFicyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFRhYnMucHJvdG90eXBlLnJlbmRlclRhYiA9IGZ1bmN0aW9uIHJlbmRlclRhYihjaGlsZCkge1xuICAgIHZhciBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcyxcbiAgICAgICAgdGl0bGUgPSBfY2hpbGQkcHJvcHMudGl0bGUsXG4gICAgICAgIGV2ZW50S2V5ID0gX2NoaWxkJHByb3BzLmV2ZW50S2V5LFxuICAgICAgICBkaXNhYmxlZCA9IF9jaGlsZCRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgdGFiQ2xhc3NOYW1lID0gX2NoaWxkJHByb3BzLnRhYkNsYXNzTmFtZTtcblxuICAgIGlmICh0aXRsZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIE5hdkl0ZW0sXG4gICAgICB7IGV2ZW50S2V5OiBldmVudEtleSwgZGlzYWJsZWQ6IGRpc2FibGVkLCBjbGFzc05hbWU6IHRhYkNsYXNzTmFtZSB9LFxuICAgICAgdGl0bGVcbiAgICApO1xuICB9O1xuXG4gIFRhYnMucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaWQgPSBfcHJvcHMuaWQsXG4gICAgICAgIG9uU2VsZWN0ID0gX3Byb3BzLm9uU2VsZWN0LFxuICAgICAgICBhbmltYXRpb24gPSBfcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgICBtb3VudE9uRW50ZXIgPSBfcHJvcHMubW91bnRPbkVudGVyLFxuICAgICAgICB1bm1vdW50T25FeGl0ID0gX3Byb3BzLnVubW91bnRPbkV4aXQsXG4gICAgICAgIGJzQ2xhc3MgPSBfcHJvcHMuYnNDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBfcHJvcHMkYWN0aXZlS2V5ID0gX3Byb3BzLmFjdGl2ZUtleSxcbiAgICAgICAgYWN0aXZlS2V5ID0gX3Byb3BzJGFjdGl2ZUtleSA9PT0gdW5kZWZpbmVkID8gZ2V0RGVmYXVsdEFjdGl2ZUtleShjaGlsZHJlbikgOiBfcHJvcHMkYWN0aXZlS2V5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaWQnLCAnb25TZWxlY3QnLCAnYW5pbWF0aW9uJywgJ21vdW50T25FbnRlcicsICd1bm1vdW50T25FeGl0JywgJ2JzQ2xhc3MnLCAnY2xhc3NOYW1lJywgJ3N0eWxlJywgJ2NoaWxkcmVuJywgJ2FjdGl2ZUtleSddKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGFiQ29udGFpbmVyLFxuICAgICAge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGFjdGl2ZUtleTogYWN0aXZlS2V5LFxuICAgICAgICBvblNlbGVjdDogb25TZWxlY3QsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBOYXYsXG4gICAgICAgICAgX2V4dGVuZHMoe30sIHByb3BzLCB7IHJvbGU6ICd0YWJsaXN0JyB9KSxcbiAgICAgICAgICBWYWxpZENvbXBvbmVudENoaWxkcmVuLm1hcChjaGlsZHJlbiwgdGhpcy5yZW5kZXJUYWIpXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgVGFiQ29udGVudCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBic0NsYXNzOiBic0NsYXNzLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBhbmltYXRpb24sXG4gICAgICAgICAgICBtb3VudE9uRW50ZXI6IG1vdW50T25FbnRlcixcbiAgICAgICAgICAgIHVubW91bnRPbkV4aXQ6IHVubW91bnRPbkV4aXRcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUYWJzO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UYWJzLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblRhYnMuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5zZXRCc0NsYXNzKCd0YWInLCBUYWJzKTtcblxuZXhwb3J0IGRlZmF1bHQgdW5jb250cm9sbGFibGUoVGFicywgeyBhY3RpdmVLZXk6ICdvblNlbGVjdCcgfSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9hbHQtdGV4dCAqL1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuaW1wb3J0IHsgYnNDbGFzcywgZ2V0Q2xhc3NTZXQsIHNwbGl0QnNQcm9wcyB9IGZyb20gJy4vdXRpbHMvYm9vdHN0cmFwVXRpbHMnO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogc3JjIHByb3BlcnR5IHRoYXQgaXMgcGFzc2VkIGRvd24gdG8gdGhlIGltYWdlIGluc2lkZSB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogYWx0IHByb3BlcnR5IHRoYXQgaXMgcGFzc2VkIGRvd24gdG8gdGhlIGltYWdlIGluc2lkZSB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgYWx0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogaHJlZiBwcm9wZXJ0eSB0aGF0IGlzIHBhc3NlZCBkb3duIHRvIHRoZSBpbWFnZSBpbnNpZGUgdGhpcyBjb21wb25lbnRcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBvbkVycm9yIGNhbGxiYWNrIHRoYXQgaXMgcGFzc2VkIGRvd24gdG8gdGhlIGltYWdlIGluc2lkZSB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgb25FcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBvbkxvYWQgY2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgZG93biB0byB0aGUgaW1hZ2UgaW5zaWRlIHRoaXMgY29tcG9uZW50XG4gICAqL1xuICBvbkxvYWQ6IFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgVGh1bWJuYWlsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRodW1ibmFpbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGh1bWJuYWlsKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaHVtYm5haWwpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBUaHVtYm5haWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3JjID0gX3Byb3BzLnNyYyxcbiAgICAgICAgYWx0ID0gX3Byb3BzLmFsdCxcbiAgICAgICAgb25FcnJvciA9IF9wcm9wcy5vbkVycm9yLFxuICAgICAgICBvbkxvYWQgPSBfcHJvcHMub25Mb2FkLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3NyYycsICdhbHQnLCAnb25FcnJvcicsICdvbkxvYWQnLCAnY2xhc3NOYW1lJywgJ2NoaWxkcmVuJ10pO1xuXG4gICAgdmFyIF9zcGxpdEJzUHJvcHMgPSBzcGxpdEJzUHJvcHMocHJvcHMpLFxuICAgICAgICBic1Byb3BzID0gX3NwbGl0QnNQcm9wc1swXSxcbiAgICAgICAgZWxlbWVudFByb3BzID0gX3NwbGl0QnNQcm9wc1sxXTtcblxuICAgIHZhciBDb21wb25lbnQgPSBlbGVtZW50UHJvcHMuaHJlZiA/IFNhZmVBbmNob3IgOiAnZGl2JztcbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzU2V0KGJzUHJvcHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb21wb25lbnQsXG4gICAgICBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyBzcmM6IHNyYywgYWx0OiBhbHQsIG9uRXJyb3I6IG9uRXJyb3IsIG9uTG9hZDogb25Mb2FkIH0pLFxuICAgICAgY2hpbGRyZW4gJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnY2FwdGlvbicgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUaHVtYm5haWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRodW1ibmFpbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGJzQ2xhc3MoJ3RodW1ibmFpbCcsIFRodW1ibmFpbCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgYDxpbnB1dD5gIGB0eXBlYFxuICAgKiBAdHlwZSB7W3R5cGVdfVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnY2hlY2tib3gnLCAncmFkaW8nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBIVE1MIGlucHV0IG5hbWUsIHVzZWQgdG8gZ3JvdXAgbGlrZSBjaGVja2JveGVzIG9yIHJhZGlvIGJ1dHRvbnMgdG9nZXRoZXJcbiAgICogc2VtYW50aWNhbGx5XG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY2hlY2tlZCBzdGF0ZSBvZiB0aGUgaW5wdXQsIG1hbmFnZWQgYnkgYDxUb2dnbGVCdXR0b25Hcm91cD5gYCBhdXRvbWF0aWNhbGx5XG4gICAqL1xuICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGRpc2FibGVkIHN0YXRlIG9mIGJvdGggdGhlIGxhYmVsIGFuZCBpbnB1dFxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBbb25DaGFuZ2UgZGVzY3JpcHRpb25dXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGlucHV0LCBhbmQgdW5pcXVlIGlkZW50aWZpZXIgaW4gdGhlIFRvZ2dsZUJ1dHRvbkdyb3VwXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkXG59O1xuXG52YXIgVG9nZ2xlQnV0dG9uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRvZ2dsZUJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG9nZ2xlQnV0dG9uKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb2dnbGVCdXR0b24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBUb2dnbGVCdXR0b24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG5hbWUgPSBfcHJvcHMubmFtZSxcbiAgICAgICAgY2hlY2tlZCA9IF9wcm9wcy5jaGVja2VkLFxuICAgICAgICB0eXBlID0gX3Byb3BzLnR5cGUsXG4gICAgICAgIG9uQ2hhbmdlID0gX3Byb3BzLm9uQ2hhbmdlLFxuICAgICAgICB2YWx1ZSA9IF9wcm9wcy52YWx1ZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ25hbWUnLCAnY2hlY2tlZCcsICd0eXBlJywgJ29uQ2hhbmdlJywgJ3ZhbHVlJ10pO1xuXG4gICAgdmFyIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQ7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEJ1dHRvbixcbiAgICAgIF9leHRlbmRzKHt9LCBwcm9wcywgeyBhY3RpdmU6ICEhY2hlY2tlZCwgY29tcG9uZW50Q2xhc3M6ICdsYWJlbCcgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgYXV0b0NvbXBsZXRlOiAnb2ZmJyxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBjaGVja2VkOiAhIWNoZWNrZWQsXG4gICAgICAgIGRpc2FibGVkOiAhIWRpc2FibGVkLFxuICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2VcbiAgICAgIH0pLFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUb2dnbGVCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRvZ2dsZUJ1dHRvbi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cbmV4cG9ydCBkZWZhdWx0IFRvZ2dsZUJ1dHRvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHVuY29udHJvbGxhYmxlIGZyb20gJ3VuY29udHJvbGxhYmxlJztcblxuaW1wb3J0IGNoYWluRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuaW1wb3J0IFZhbGlkQ2hpbGRyZW4gZnJvbSAnLi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuJztcbmltcG9ydCBCdXR0b25Hcm91cCBmcm9tICcuL0J1dHRvbkdyb3VwJztcbmltcG9ydCBUb2dnbGVCdXR0b24gZnJvbSAnLi9Ub2dnbGVCdXR0b24nO1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQW4gSFRNTCBgPGlucHV0PmAgbmFtZSBmb3IgZWFjaCBjaGlsZCBidXR0b24uXG4gICAqXG4gICAqIF9fUmVxdWlyZWQgaWYgYHR5cGVgIGlzIHNldCB0byBgJ3JhZGlvJ2BfX1xuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlLCBvciBhcnJheSBvZiB2YWx1ZXMsIG9mIHRoZSBhY3RpdmUgKHByZXNzZWQpIGJ1dHRvbnNcbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBvbkNoYW5nZVxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBidXR0b24gaXMgcHJlc3NlZCwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGB0eXBlYFxuICAgKiBpcyBgJ3JhZGlvJ2Agb3IgYCdjaGVja2JveCdgLCBgb25DaGFuZ2VgIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHZhbHVlIG9yXG4gICAqIGFycmF5IG9mIGFjdGl2ZSB2YWx1ZXNcbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSB2YWx1ZXNcbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IGB0eXBlYCBvZiB0aGUgcmVuZGVyZWQgYnV0dG9ucywgZGV0ZXJtaW5lcyB0aGUgdG9nZ2xlIGJlaGF2aW9yXG4gICAqIG9mIHRoZSBidXR0b25zXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWydjaGVja2JveCcsICdyYWRpbyddKS5pc1JlcXVpcmVkXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICB0eXBlOiAncmFkaW8nXG59O1xuXG52YXIgVG9nZ2xlQnV0dG9uR3JvdXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVG9nZ2xlQnV0dG9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRvZ2dsZUJ1dHRvbkdyb3VwKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb2dnbGVCdXR0b25Hcm91cCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFRvZ2dsZUJ1dHRvbkdyb3VwLnByb3RvdHlwZS5nZXRWYWx1ZXMgPSBmdW5jdGlvbiBnZXRWYWx1ZXMoKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcblxuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gW10gOiBbXS5jb25jYXQodmFsdWUpO1xuICB9O1xuXG4gIFRvZ2dsZUJ1dHRvbkdyb3VwLnByb3RvdHlwZS5oYW5kbGVUb2dnbGUgPSBmdW5jdGlvbiBoYW5kbGVUb2dnbGUodmFsdWUpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdHlwZSA9IF9wcm9wcy50eXBlLFxuICAgICAgICBvbkNoYW5nZSA9IF9wcm9wcy5vbkNoYW5nZTtcblxuICAgIHZhciB2YWx1ZXMgPSB0aGlzLmdldFZhbHVlcygpO1xuICAgIHZhciBpc0FjdGl2ZSA9IHZhbHVlcy5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XG5cbiAgICBpZiAodHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgICBvbkNoYW5nZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICBvbkNoYW5nZSh2YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiBuICE9PSB2YWx1ZTtcbiAgICAgIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25DaGFuZ2UoW10uY29uY2F0KHZhbHVlcywgW3ZhbHVlXSkpO1xuICAgIH1cbiAgfTtcblxuICBUb2dnbGVCdXR0b25Hcm91cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIHR5cGUgPSBfcHJvcHMyLnR5cGUsXG4gICAgICAgIG5hbWUgPSBfcHJvcHMyLm5hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsnY2hpbGRyZW4nLCAndHlwZScsICduYW1lJ10pO1xuXG4gICAgdmFyIHZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzKCk7XG5cbiAgICAhKHR5cGUgIT09ICdyYWRpbycgfHwgISFuYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdBIGBuYW1lYCBpcyByZXF1aXJlZCB0byBncm91cCB0aGUgdG9nZ2xlIGJ1dHRvbnMgd2hlbiB0aGUgYHR5cGVgICcgKyAnaXMgc2V0IHRvIFwicmFkaW9cIicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGRlbGV0ZSBwcm9wcy5vbkNoYW5nZTtcbiAgICBkZWxldGUgcHJvcHMudmFsdWU7XG5cbiAgICAvLyB0aGUgZGF0YSBhdHRyaWJ1dGUgaXMgcmVxdWlyZWQgYi9jIHR3YnMgY3NzIHVzZXMgaXQgaW4gdGhlIHNlbGVjdG9yXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBCdXR0b25Hcm91cCxcbiAgICAgIF9leHRlbmRzKHt9LCBwcm9wcywgeyAnZGF0YS10b2dnbGUnOiAnYnV0dG9ucycgfSksXG4gICAgICBWYWxpZENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcyxcbiAgICAgICAgICAgIHZhbHVlID0gX2NoaWxkJHByb3BzLnZhbHVlLFxuICAgICAgICAgICAgb25DaGFuZ2UgPSBfY2hpbGQkcHJvcHMub25DaGFuZ2U7XG5cbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlVG9nZ2xlKHZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICBuYW1lOiBjaGlsZC5uYW1lIHx8IG5hbWUsXG4gICAgICAgICAgY2hlY2tlZDogdmFsdWVzLmluZGV4T2YodmFsdWUpICE9PSAtMSxcbiAgICAgICAgICBvbkNoYW5nZTogY2hhaW5GdW5jdGlvbihvbkNoYW5nZSwgaGFuZGxlcilcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFRvZ2dsZUJ1dHRvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ub2dnbGVCdXR0b25Hcm91cC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Ub2dnbGVCdXR0b25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBVbmNvbnRyb2xsZWRUb2dnbGVCdXR0b25Hcm91cCA9IHVuY29udHJvbGxhYmxlKFRvZ2dsZUJ1dHRvbkdyb3VwLCB7XG4gIHZhbHVlOiAnb25DaGFuZ2UnXG59KTtcblxuVW5jb250cm9sbGVkVG9nZ2xlQnV0dG9uR3JvdXAuQnV0dG9uID0gVG9nZ2xlQnV0dG9uO1xuXG5leHBvcnQgZGVmYXVsdCBVbmNvbnRyb2xsZWRUb2dnbGVCdXR0b25Hcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaXNSZXF1aXJlZEZvckExMXkgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvaXNSZXF1aXJlZEZvckExMXknO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBnZXRDbGFzc1NldCwgcHJlZml4LCBzcGxpdEJzUHJvcHMgfSBmcm9tICcuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzJztcblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFuIGh0bWwgaWQgYXR0cmlidXRlLCBuZWNlc3NhcnkgZm9yIGFjY2Vzc2liaWxpdHlcbiAgICogQHR5cGUge3N0cmluZ3xudW1iZXJ9XG4gICAqIEByZXF1aXJlZFxuICAgKi9cbiAgaWQ6IGlzUmVxdWlyZWRGb3JBMTF5KFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSksXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRpcmVjdGlvbiB0aGUgVG9vbHRpcCBpcyBwb3NpdGlvbmVkIHRvd2FyZHMuXG4gICAqL1xuICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddKSxcblxuICAvKipcbiAgICogVGhlIFwidG9wXCIgcG9zaXRpb24gdmFsdWUgZm9yIHRoZSBUb29sdGlwLlxuICAgKi9cbiAgcG9zaXRpb25Ub3A6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBcImxlZnRcIiBwb3NpdGlvbiB2YWx1ZSBmb3IgdGhlIFRvb2x0aXAuXG4gICAqL1xuICBwb3NpdGlvbkxlZnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIFwidG9wXCIgcG9zaXRpb24gdmFsdWUgZm9yIHRoZSBUb29sdGlwIGFycm93LlxuICAgKi9cbiAgYXJyb3dPZmZzZXRUb3A6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBcImxlZnRcIiBwb3NpdGlvbiB2YWx1ZSBmb3IgdGhlIFRvb2x0aXAgYXJyb3cuXG4gICAqL1xuICBhcnJvd09mZnNldExlZnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKVxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgcGxhY2VtZW50OiAncmlnaHQnXG59O1xuXG52YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUb29sdGlwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb29sdGlwKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb29sdGlwKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcGxhY2VtZW50ID0gX3Byb3BzLnBsYWNlbWVudCxcbiAgICAgICAgcG9zaXRpb25Ub3AgPSBfcHJvcHMucG9zaXRpb25Ub3AsXG4gICAgICAgIHBvc2l0aW9uTGVmdCA9IF9wcm9wcy5wb3NpdGlvbkxlZnQsXG4gICAgICAgIGFycm93T2Zmc2V0VG9wID0gX3Byb3BzLmFycm93T2Zmc2V0VG9wLFxuICAgICAgICBhcnJvd09mZnNldExlZnQgPSBfcHJvcHMuYXJyb3dPZmZzZXRMZWZ0LFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydwbGFjZW1lbnQnLCAncG9zaXRpb25Ub3AnLCAncG9zaXRpb25MZWZ0JywgJ2Fycm93T2Zmc2V0VG9wJywgJ2Fycm93T2Zmc2V0TGVmdCcsICdjbGFzc05hbWUnLCAnc3R5bGUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZ2V0Q2xhc3NTZXQoYnNQcm9wcyksIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3BsYWNlbWVudF0gPSB0cnVlLCBfZXh0ZW5kczIpKTtcblxuICAgIHZhciBvdXRlclN0eWxlID0gX2V4dGVuZHMoe1xuICAgICAgdG9wOiBwb3NpdGlvblRvcCxcbiAgICAgIGxlZnQ6IHBvc2l0aW9uTGVmdFxuICAgIH0sIHN0eWxlKTtcblxuICAgIHZhciBhcnJvd1N0eWxlID0ge1xuICAgICAgdG9wOiBhcnJvd09mZnNldFRvcCxcbiAgICAgIGxlZnQ6IGFycm93T2Zmc2V0TGVmdFxuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgICByb2xlOiAndG9vbHRpcCcsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpLFxuICAgICAgICBzdHlsZTogb3V0ZXJTdHlsZVxuICAgICAgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogcHJlZml4KGJzUHJvcHMsICdhcnJvdycpLCBzdHlsZTogYXJyb3dTdHlsZSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4KGJzUHJvcHMsICdpbm5lcicpIH0sXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVG9vbHRpcDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVG9vbHRpcC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Ub29sdGlwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygndG9vbHRpcCcsIFRvb2x0aXApOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBic0NsYXNzLCBic1NpemVzLCBnZXRDbGFzc1NldCwgc3BsaXRCc1Byb3BzIH0gZnJvbSAnLi91dGlscy9ib290c3RyYXBVdGlscyc7XG5pbXBvcnQgeyBTaXplIH0gZnJvbSAnLi91dGlscy9TdHlsZUNvbmZpZyc7XG5cbnZhciBXZWxsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFdlbGwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFdlbGwoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlbGwpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBXZWxsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnXSk7XG5cbiAgICB2YXIgX3NwbGl0QnNQcm9wcyA9IHNwbGl0QnNQcm9wcyhwcm9wcyksXG4gICAgICAgIGJzUHJvcHMgPSBfc3BsaXRCc1Byb3BzWzBdLFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfc3BsaXRCc1Byb3BzWzFdO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc1NldChic1Byb3BzKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpIH0pKTtcbiAgfTtcblxuICByZXR1cm4gV2VsbDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgYnNDbGFzcygnd2VsbCcsIGJzU2l6ZXMoW1NpemUuTEFSR0UsIFNpemUuU01BTExdLCBXZWxsKSk7IiwiaW1wb3J0IF9BY2NvcmRpb24gZnJvbSAnLi9BY2NvcmRpb24nO1xuZXhwb3J0IHsgX0FjY29yZGlvbiBhcyBBY2NvcmRpb24gfTtcbmltcG9ydCBfQWxlcnQgZnJvbSAnLi9BbGVydCc7XG5leHBvcnQgeyBfQWxlcnQgYXMgQWxlcnQgfTtcbmltcG9ydCBfQmFkZ2UgZnJvbSAnLi9CYWRnZSc7XG5leHBvcnQgeyBfQmFkZ2UgYXMgQmFkZ2UgfTtcbmltcG9ydCBfQnJlYWRjcnVtYiBmcm9tICcuL0JyZWFkY3J1bWInO1xuZXhwb3J0IHsgX0JyZWFkY3J1bWIgYXMgQnJlYWRjcnVtYiB9O1xuaW1wb3J0IF9CcmVhZGNydW1iSXRlbSBmcm9tICcuL0JyZWFkY3J1bWJJdGVtJztcbmV4cG9ydCB7IF9CcmVhZGNydW1iSXRlbSBhcyBCcmVhZGNydW1iSXRlbSB9O1xuaW1wb3J0IF9CdXR0b24gZnJvbSAnLi9CdXR0b24nO1xuZXhwb3J0IHsgX0J1dHRvbiBhcyBCdXR0b24gfTtcbmltcG9ydCBfQnV0dG9uR3JvdXAgZnJvbSAnLi9CdXR0b25Hcm91cCc7XG5leHBvcnQgeyBfQnV0dG9uR3JvdXAgYXMgQnV0dG9uR3JvdXAgfTtcbmltcG9ydCBfQnV0dG9uVG9vbGJhciBmcm9tICcuL0J1dHRvblRvb2xiYXInO1xuZXhwb3J0IHsgX0J1dHRvblRvb2xiYXIgYXMgQnV0dG9uVG9vbGJhciB9O1xuaW1wb3J0IF9DYXJvdXNlbCBmcm9tICcuL0Nhcm91c2VsJztcbmV4cG9ydCB7IF9DYXJvdXNlbCBhcyBDYXJvdXNlbCB9O1xuaW1wb3J0IF9DYXJvdXNlbEl0ZW0gZnJvbSAnLi9DYXJvdXNlbEl0ZW0nO1xuZXhwb3J0IHsgX0Nhcm91c2VsSXRlbSBhcyBDYXJvdXNlbEl0ZW0gfTtcbmltcG9ydCBfQ2hlY2tib3ggZnJvbSAnLi9DaGVja2JveCc7XG5leHBvcnQgeyBfQ2hlY2tib3ggYXMgQ2hlY2tib3ggfTtcbmltcG9ydCBfQ2xlYXJmaXggZnJvbSAnLi9DbGVhcmZpeCc7XG5leHBvcnQgeyBfQ2xlYXJmaXggYXMgQ2xlYXJmaXggfTtcbmltcG9ydCBfQ2xvc2VCdXR0b24gZnJvbSAnLi9DbG9zZUJ1dHRvbic7XG5leHBvcnQgeyBfQ2xvc2VCdXR0b24gYXMgQ2xvc2VCdXR0b24gfTtcbmltcG9ydCBfQ29udHJvbExhYmVsIGZyb20gJy4vQ29udHJvbExhYmVsJztcbmV4cG9ydCB7IF9Db250cm9sTGFiZWwgYXMgQ29udHJvbExhYmVsIH07XG5pbXBvcnQgX0NvbCBmcm9tICcuL0NvbCc7XG5leHBvcnQgeyBfQ29sIGFzIENvbCB9O1xuaW1wb3J0IF9Db2xsYXBzZSBmcm9tICcuL0NvbGxhcHNlJztcbmV4cG9ydCB7IF9Db2xsYXBzZSBhcyBDb2xsYXBzZSB9O1xuaW1wb3J0IF9Ecm9wZG93biBmcm9tICcuL0Ryb3Bkb3duJztcbmV4cG9ydCB7IF9Ecm9wZG93biBhcyBEcm9wZG93biB9O1xuaW1wb3J0IF9Ecm9wZG93bkJ1dHRvbiBmcm9tICcuL0Ryb3Bkb3duQnV0dG9uJztcbmV4cG9ydCB7IF9Ecm9wZG93bkJ1dHRvbiBhcyBEcm9wZG93bkJ1dHRvbiB9O1xuaW1wb3J0IF9GYWRlIGZyb20gJy4vRmFkZSc7XG5leHBvcnQgeyBfRmFkZSBhcyBGYWRlIH07XG5pbXBvcnQgX0Zvcm0gZnJvbSAnLi9Gb3JtJztcbmV4cG9ydCB7IF9Gb3JtIGFzIEZvcm0gfTtcbmltcG9ydCBfRm9ybUNvbnRyb2wgZnJvbSAnLi9Gb3JtQ29udHJvbCc7XG5leHBvcnQgeyBfRm9ybUNvbnRyb2wgYXMgRm9ybUNvbnRyb2wgfTtcbmltcG9ydCBfRm9ybUdyb3VwIGZyb20gJy4vRm9ybUdyb3VwJztcbmV4cG9ydCB7IF9Gb3JtR3JvdXAgYXMgRm9ybUdyb3VwIH07XG5pbXBvcnQgX0dseXBoaWNvbiBmcm9tICcuL0dseXBoaWNvbic7XG5leHBvcnQgeyBfR2x5cGhpY29uIGFzIEdseXBoaWNvbiB9O1xuaW1wb3J0IF9HcmlkIGZyb20gJy4vR3JpZCc7XG5leHBvcnQgeyBfR3JpZCBhcyBHcmlkIH07XG5pbXBvcnQgX0hlbHBCbG9jayBmcm9tICcuL0hlbHBCbG9jayc7XG5leHBvcnQgeyBfSGVscEJsb2NrIGFzIEhlbHBCbG9jayB9O1xuaW1wb3J0IF9JbWFnZSBmcm9tICcuL0ltYWdlJztcbmV4cG9ydCB7IF9JbWFnZSBhcyBJbWFnZSB9O1xuaW1wb3J0IF9JbnB1dEdyb3VwIGZyb20gJy4vSW5wdXRHcm91cCc7XG5leHBvcnQgeyBfSW5wdXRHcm91cCBhcyBJbnB1dEdyb3VwIH07XG5pbXBvcnQgX0p1bWJvdHJvbiBmcm9tICcuL0p1bWJvdHJvbic7XG5leHBvcnQgeyBfSnVtYm90cm9uIGFzIEp1bWJvdHJvbiB9O1xuaW1wb3J0IF9MYWJlbCBmcm9tICcuL0xhYmVsJztcbmV4cG9ydCB7IF9MYWJlbCBhcyBMYWJlbCB9O1xuaW1wb3J0IF9MaXN0R3JvdXAgZnJvbSAnLi9MaXN0R3JvdXAnO1xuZXhwb3J0IHsgX0xpc3RHcm91cCBhcyBMaXN0R3JvdXAgfTtcbmltcG9ydCBfTGlzdEdyb3VwSXRlbSBmcm9tICcuL0xpc3RHcm91cEl0ZW0nO1xuZXhwb3J0IHsgX0xpc3RHcm91cEl0ZW0gYXMgTGlzdEdyb3VwSXRlbSB9O1xuaW1wb3J0IF9NZWRpYSBmcm9tICcuL01lZGlhJztcbmV4cG9ydCB7IF9NZWRpYSBhcyBNZWRpYSB9O1xuaW1wb3J0IF9NZW51SXRlbSBmcm9tICcuL01lbnVJdGVtJztcbmV4cG9ydCB7IF9NZW51SXRlbSBhcyBNZW51SXRlbSB9O1xuaW1wb3J0IF9Nb2RhbCBmcm9tICcuL01vZGFsJztcbmV4cG9ydCB7IF9Nb2RhbCBhcyBNb2RhbCB9O1xuaW1wb3J0IF9Nb2RhbEJvZHkgZnJvbSAnLi9Nb2RhbEJvZHknO1xuZXhwb3J0IHsgX01vZGFsQm9keSBhcyBNb2RhbEJvZHkgfTtcbmltcG9ydCBfTW9kYWxGb290ZXIgZnJvbSAnLi9Nb2RhbEZvb3Rlcic7XG5leHBvcnQgeyBfTW9kYWxGb290ZXIgYXMgTW9kYWxGb290ZXIgfTtcbmltcG9ydCBfTW9kYWxIZWFkZXIgZnJvbSAnLi9Nb2RhbEhlYWRlcic7XG5leHBvcnQgeyBfTW9kYWxIZWFkZXIgYXMgTW9kYWxIZWFkZXIgfTtcbmltcG9ydCBfTW9kYWxUaXRsZSBmcm9tICcuL01vZGFsVGl0bGUnO1xuZXhwb3J0IHsgX01vZGFsVGl0bGUgYXMgTW9kYWxUaXRsZSB9O1xuaW1wb3J0IF9OYXYgZnJvbSAnLi9OYXYnO1xuZXhwb3J0IHsgX05hdiBhcyBOYXYgfTtcbmltcG9ydCBfTmF2YmFyIGZyb20gJy4vTmF2YmFyJztcbmV4cG9ydCB7IF9OYXZiYXIgYXMgTmF2YmFyIH07XG5pbXBvcnQgX05hdmJhckJyYW5kIGZyb20gJy4vTmF2YmFyQnJhbmQnO1xuZXhwb3J0IHsgX05hdmJhckJyYW5kIGFzIE5hdmJhckJyYW5kIH07XG5pbXBvcnQgX05hdkRyb3Bkb3duIGZyb20gJy4vTmF2RHJvcGRvd24nO1xuZXhwb3J0IHsgX05hdkRyb3Bkb3duIGFzIE5hdkRyb3Bkb3duIH07XG5pbXBvcnQgX05hdkl0ZW0gZnJvbSAnLi9OYXZJdGVtJztcbmV4cG9ydCB7IF9OYXZJdGVtIGFzIE5hdkl0ZW0gfTtcbmltcG9ydCBfT3ZlcmxheSBmcm9tICcuL092ZXJsYXknO1xuZXhwb3J0IHsgX092ZXJsYXkgYXMgT3ZlcmxheSB9O1xuaW1wb3J0IF9PdmVybGF5VHJpZ2dlciBmcm9tICcuL092ZXJsYXlUcmlnZ2VyJztcbmV4cG9ydCB7IF9PdmVybGF5VHJpZ2dlciBhcyBPdmVybGF5VHJpZ2dlciB9O1xuaW1wb3J0IF9QYWdlSGVhZGVyIGZyb20gJy4vUGFnZUhlYWRlcic7XG5leHBvcnQgeyBfUGFnZUhlYWRlciBhcyBQYWdlSGVhZGVyIH07XG5pbXBvcnQgX1BhZ2VJdGVtIGZyb20gJy4vUGFnZUl0ZW0nO1xuZXhwb3J0IHsgX1BhZ2VJdGVtIGFzIFBhZ2VJdGVtIH07XG5pbXBvcnQgX1BhZ2VyIGZyb20gJy4vUGFnZXInO1xuZXhwb3J0IHsgX1BhZ2VyIGFzIFBhZ2VyIH07XG5pbXBvcnQgX1BhZ2luYXRpb24gZnJvbSAnLi9QYWdpbmF0aW9uJztcbmV4cG9ydCB7IF9QYWdpbmF0aW9uIGFzIFBhZ2luYXRpb24gfTtcbmltcG9ydCBfUGFuZWwgZnJvbSAnLi9QYW5lbCc7XG5leHBvcnQgeyBfUGFuZWwgYXMgUGFuZWwgfTtcbmltcG9ydCBfUGFuZWxHcm91cCBmcm9tICcuL1BhbmVsR3JvdXAnO1xuZXhwb3J0IHsgX1BhbmVsR3JvdXAgYXMgUGFuZWxHcm91cCB9O1xuaW1wb3J0IF9Qb3BvdmVyIGZyb20gJy4vUG9wb3Zlcic7XG5leHBvcnQgeyBfUG9wb3ZlciBhcyBQb3BvdmVyIH07XG5pbXBvcnQgX1Byb2dyZXNzQmFyIGZyb20gJy4vUHJvZ3Jlc3NCYXInO1xuZXhwb3J0IHsgX1Byb2dyZXNzQmFyIGFzIFByb2dyZXNzQmFyIH07XG5pbXBvcnQgX1JhZGlvIGZyb20gJy4vUmFkaW8nO1xuZXhwb3J0IHsgX1JhZGlvIGFzIFJhZGlvIH07XG5pbXBvcnQgX1Jlc3BvbnNpdmVFbWJlZCBmcm9tICcuL1Jlc3BvbnNpdmVFbWJlZCc7XG5leHBvcnQgeyBfUmVzcG9uc2l2ZUVtYmVkIGFzIFJlc3BvbnNpdmVFbWJlZCB9O1xuaW1wb3J0IF9Sb3cgZnJvbSAnLi9Sb3cnO1xuZXhwb3J0IHsgX1JvdyBhcyBSb3cgfTtcbmltcG9ydCBfU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuZXhwb3J0IHsgX1NhZmVBbmNob3IgYXMgU2FmZUFuY2hvciB9O1xuaW1wb3J0IF9TcGxpdEJ1dHRvbiBmcm9tICcuL1NwbGl0QnV0dG9uJztcbmV4cG9ydCB7IF9TcGxpdEJ1dHRvbiBhcyBTcGxpdEJ1dHRvbiB9O1xuaW1wb3J0IF9UYWIgZnJvbSAnLi9UYWInO1xuZXhwb3J0IHsgX1RhYiBhcyBUYWIgfTtcbmltcG9ydCBfVGFiQ29udGFpbmVyIGZyb20gJy4vVGFiQ29udGFpbmVyJztcbmV4cG9ydCB7IF9UYWJDb250YWluZXIgYXMgVGFiQ29udGFpbmVyIH07XG5pbXBvcnQgX1RhYkNvbnRlbnQgZnJvbSAnLi9UYWJDb250ZW50JztcbmV4cG9ydCB7IF9UYWJDb250ZW50IGFzIFRhYkNvbnRlbnQgfTtcbmltcG9ydCBfVGFibGUgZnJvbSAnLi9UYWJsZSc7XG5leHBvcnQgeyBfVGFibGUgYXMgVGFibGUgfTtcbmltcG9ydCBfVGFiUGFuZSBmcm9tICcuL1RhYlBhbmUnO1xuZXhwb3J0IHsgX1RhYlBhbmUgYXMgVGFiUGFuZSB9O1xuaW1wb3J0IF9UYWJzIGZyb20gJy4vVGFicyc7XG5leHBvcnQgeyBfVGFicyBhcyBUYWJzIH07XG5pbXBvcnQgX1RodW1ibmFpbCBmcm9tICcuL1RodW1ibmFpbCc7XG5leHBvcnQgeyBfVGh1bWJuYWlsIGFzIFRodW1ibmFpbCB9O1xuaW1wb3J0IF9Ub2dnbGVCdXR0b24gZnJvbSAnLi9Ub2dnbGVCdXR0b24nO1xuZXhwb3J0IHsgX1RvZ2dsZUJ1dHRvbiBhcyBUb2dnbGVCdXR0b24gfTtcbmltcG9ydCBfVG9nZ2xlQnV0dG9uR3JvdXAgZnJvbSAnLi9Ub2dnbGVCdXR0b25Hcm91cCc7XG5leHBvcnQgeyBfVG9nZ2xlQnV0dG9uR3JvdXAgYXMgVG9nZ2xlQnV0dG9uR3JvdXAgfTtcbmltcG9ydCBfVG9vbHRpcCBmcm9tICcuL1Rvb2x0aXAnO1xuZXhwb3J0IHsgX1Rvb2x0aXAgYXMgVG9vbHRpcCB9O1xuaW1wb3J0IF9XZWxsIGZyb20gJy4vV2VsbCc7XG5leHBvcnQgeyBfV2VsbCBhcyBXZWxsIH07XG5pbXBvcnQgKiBhcyBfdXRpbHMgZnJvbSAnLi91dGlscyc7XG5leHBvcnQgeyBfdXRpbHMgYXMgdXRpbHMgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZW5kID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9lbmRcIikpO1xuXG5leHBvcnRzLmVuZCA9IF9lbmQuZGVmYXVsdDtcblxudmFyIF9wcm9wZXJ0aWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wcm9wZXJ0aWVzXCIpKTtcblxuZXhwb3J0cy5wcm9wZXJ0aWVzID0gX3Byb3BlcnRpZXMuZGVmYXVsdDtcbnZhciBfZGVmYXVsdCA9IHtcbiAgZW5kOiBfZW5kLmRlZmF1bHQsXG4gIHByb3BlcnRpZXM6IF9wcm9wZXJ0aWVzLmRlZmF1bHRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBEYXRhUXVhbGl0eVN1bW1hcnkudHN4IC0gR2J0Y1xyXG4vL1xyXG4vLyAgQ29weXJpZ2h0IMKpIDIwMTgsIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZS4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vICBMaWNlbnNlZCB0byB0aGUgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlIChHUEEpIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlXHJcbi8vICB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuXHJcbi8vICBUaGUgR1BBIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCB0aGUgXCJMaWNlbnNlXCI7IHlvdSBtYXkgbm90IHVzZSB0aGlzXHJcbi8vICBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcclxuLy9cclxuLy8gICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbi8vXHJcbi8vICBVbmxlc3MgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHRoZSBzdWJqZWN0IHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXHJcbi8vICBcIkFTLUlTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBSZWZlciB0byB0aGVcclxuLy8gIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zLlxyXG4vL1xyXG4vLyAgQ29kZSBNb2RpZmljYXRpb24gSGlzdG9yeTpcclxuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gIDA4LzAyLzIwMTggLSBCaWxseSBFcm5lc3RcclxuLy8gICAgICAgR2VuZXJhdGVkIG9yaWdpbmFsIHZlcnNpb24gb2Ygc291cmNlIGNvZGUuXHJcbi8vXHJcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBjcmVhdGVIaXN0b3J5IGZyb20gXCJoaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5XCJcclxuaW1wb3J0ICogYXMgcXVlcnlTdHJpbmcgZnJvbSBcInF1ZXJ5LXN0cmluZ1wiO1xyXG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XHJcbmltcG9ydCBQUVRyZW5kaW5nV2ViUmVwb3J0U2VydmljZSBmcm9tIFwiLi8uLi9UUy9TZXJ2aWNlcy9QUVRyZW5kaW5nV2ViUmVwb3J0XCI7XHJcbmltcG9ydCBCaWdUYWJsZSBmcm9tIFwiLi9CaWdUYWJsZVwiO1xyXG5pbXBvcnQgU2VsZWN0IGZyb20gXCIuL1NlbGVjdFwiO1xyXG5pbXBvcnQgJ3JlYWN0LWRhdGV0aW1lL2Nzcy9yZWFjdC1kYXRldGltZS5jc3MnO1xyXG5pbXBvcnQgKiBhcyBEYXRlVGltZSBmcm9tIFwicmVhY3QtZGF0ZXRpbWVcIjtcclxuaW1wb3J0IHsgTW9kYWwgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xyXG5pbXBvcnQgJy4vLi4vZmxvdC9qcXVlcnkuZmxvdC5taW4uanMnO1xyXG5pbXBvcnQgJy4vLi4vZmxvdC9qcXVlcnkuZmxvdC50aW1lLm1pbi5qcyc7XHJcblxyXG5kZWNsYXJlIHZhciBwcU1lYXN1cmVtZW50czogSlNPTjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQUVRyZW5kaW5nV2ViUmVwb3J0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55PntcclxuICAgIGhpc3Rvcnk6IG9iamVjdDtcclxuICAgIHBxVHJlbmRpbmdXZWJSZXBvcnRTZXJ2aWNlOiBQUVRyZW5kaW5nV2ViUmVwb3J0U2VydmljZTtcclxuICAgIHJlc2l6ZUlkOiBhbnk7XHJcbiAgICBwcm9wczoge307XHJcbiAgICBzdGF0ZTogeyBkYXRlOiBzdHJpbmcsIHN0YXQ6IHN0cmluZywgZGF0YTogQXJyYXk8YW55Piwgc29ydEZpZWxkOiBzdHJpbmcsIGFzY2VuZGluZzogYm9vbGVhbiwgbGlzdE1vZGFsRGF0YTogYW55IH07XHJcbiAgICBjb2xzOiBBcnJheTxvYmplY3Q+O1xyXG4gICAgb3B0aW9uczogb2JqZWN0O1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoKTtcclxuICAgICAgICB0aGlzLnBxVHJlbmRpbmdXZWJSZXBvcnRTZXJ2aWNlID0gbmV3IFBRVHJlbmRpbmdXZWJSZXBvcnRTZXJ2aWNlKCk7XHJcblxyXG4gICAgICAgIHZhciBxdWVyeSA9IHF1ZXJ5U3RyaW5nLnBhcnNlKHRoaXMuaGlzdG9yeVsnbG9jYXRpb24nXS5zZWFyY2gpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBkYXRlOiAocXVlcnlbJ2RhdGUnXSAhPSB1bmRlZmluZWQgPyBxdWVyeVsnZGF0ZSddIDogbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJykpLFxyXG4gICAgICAgICAgICBzdGF0OiAocXVlcnlbJ3N0YXQnXSAhPSB1bmRlZmluZWQgPyBxdWVyeVsnc3RhdCddIDogXCJBdmdcIiksXHJcbiAgICAgICAgICAgIGRhdGE6IFtdLFxyXG4gICAgICAgICAgICBzb3J0RmllbGQ6IChxdWVyeVsnc29ydEZpZWxkJ10gIT0gdW5kZWZpbmVkID8gcXVlcnlbJ3NvcnRGaWVsZCddIDogXCJOYW1lXCIpLFxyXG4gICAgICAgICAgICBhc2NlbmRpbmc6IChxdWVyeVsnYXNjZW5kaW5nJ10gIT0gdW5kZWZpbmVkID8gcXVlcnlbJ2FzY2VuZGluZyddID09IFwidHJ1ZVwiIDogdHJ1ZSksXHJcbiAgICAgICAgICAgIGxpc3RNb2RhbERhdGE6IGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmhpc3RvcnlbJ2xpc3RlbiddKChsb2NhdGlvbiwgYWN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeSA9IHF1ZXJ5U3RyaW5nLnBhcnNlKHRoaXMuaGlzdG9yeVsnbG9jYXRpb24nXS5zZWFyY2gpO1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IChxdWVyeVsnZGF0ZSddICE9IHVuZGVmaW5lZCA/IHF1ZXJ5WydkYXRlJ10gOiBtb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSksXHJcbiAgICAgICAgICAgICAgICBzdGF0OiAocXVlcnlbJ3N0YXQnXSAhPSB1bmRlZmluZWQgPyBxdWVyeVsnc3RhdCddIDogXCJBdmdcIiksXHJcbiAgICAgICAgICAgICAgICBzb3J0RmllbGQ6IChxdWVyeVsnc29ydEZpZWxkJ10gIT0gdW5kZWZpbmVkID8gcXVlcnlbJ3NvcnRGaWVsZCddIDogXCJOYW1lXCIpLFxyXG4gICAgICAgICAgICAgICAgYXNjZW5kaW5nOiAocXVlcnlbJ2FzY2VuZGluZyddICE9IHVuZGVmaW5lZCA/IHF1ZXJ5Wydhc2NlbmRpbmcnXSA9PSBcInRydWVcIiA6IHRydWUpXHJcbiAgICAgICAgICAgIH0sdGhpcy5nZXREYXRhKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5jb2xzID0gW107XHJcbiAgICAgICAgdGhpcy5jb2xzLnB1c2goeyBrZXk6IFwiTmFtZVwiLCBsYWJlbDogXCJNZXRlclwiLCBoZWFkZXJTdHlsZTogeyBtaW5XaWR0aDogJzE1MHB4JyB9LCByb3dTdHlsZTogeyBtaW5XaWR0aDogJzE1MHB4JyB9IH0pO1xyXG4gICAgICAgIF8uZWFjaChwcU1lYXN1cmVtZW50cywgKG1lYXN1cmVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHMucHVzaCh7IGtleTogbWVhc3VyZW1lbnQuTmFtZSwgbGFiZWw6IG1lYXN1cmVtZW50Lk5hbWUsIGhlYWRlclN0eWxlOiB7IG1pbldpZHRoOiAnMjAwcHgnIH0sIHJvd1N0eWxlOiB7IG1pbldpZHRoOiAnMjAwcHgnfSB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICAgICAgICBsZWdlbmQ6IHsgc2hvdzogZmFsc2UgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIG1vZGU6IFwidGltZVwiLFxyXG4gICAgICAgICAgICAgICAgcmVzZXJ2ZVNwYWNlOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdsZWZ0JyxcclxuICAgICAgICAgICAgICAgIHRpY2tMZW5ndGg6IDMwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlVXJsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSA2MDtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzY3JlZW5cIiBzdHlsZT17eyBoZWlnaHQ6IGhlaWdodCwgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLCBwb3NpdGlvbjogJ2Fic29sdXRlJywgdG9wOiAnNjBweCcgfX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZlcnRpY2FsLW1lbnVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkRhdGU6IDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxEYXRlVGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VPblNlbGVjdD17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWREYXRlPXsoZGF0ZSkgPT4geyByZXR1cm4gZGF0ZS5pc0JlZm9yZShtb21lbnQoKSkgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXttb21lbnQodGhpcy5zdGF0ZS5kYXRlKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQ9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZUZvcm1hdD1cIk1NL0REL1lZWVlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2YWx1ZSkgPT4gdGhpcy5zZXRTdGF0ZSh7IGRhdGU6ICh2YWx1ZSBhcyBtb21lbnQuTW9tZW50KS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpIH0sIHRoaXMudXBkYXRlVXJsKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5TdGF0aXN0aWM6IDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3QgdmFsdWU9e3RoaXMuc3RhdGUuc3RhdH0gb3B0aW9ucz17W1wiTWF4XCIsIFwiQ1A5OVwiLCBcIkNQOTVcIiwgXCJBdmdcIiwgXCJDUDA1XCIsIFwiQ1AwMVwiLCBcIk1pblwiXX0gb25DaGFuZ2U9eyhvYmopID0+IHRoaXMuc2V0U3RhdGUoeyBzdGF0OiBvYmogfSwgdGhpcy51cGRhdGVVcmwpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgZmxvYXQ6ICdsZWZ0JyB9fSByZWY9eydsb2FkZXInfSBoaWRkZW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGJvcmRlcjogJzVweCBzb2xpZCAjZjNmM2YzJywgV2Via2l0QW5pbWF0aW9uOiAnc3BpbiAxcyBsaW5lYXIgaW5maW5pdGUnLCBhbmltYXRpb246ICdzcGluIDFzIGxpbmVhciBpbmZpbml0ZScsIGJvcmRlclRvcDogJzVweCBzb2xpZCAjNTU1JywgYm9yZGVyUmFkaXVzOiAnNTAlJywgd2lkdGg6ICcyNXB4JywgaGVpZ2h0OiAnMjVweCcgfX0+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Mb2FkaW5nLi4uPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3YXZlZm9ybS12aWV3ZXJcIiBzdHlsZT17eyB3aWR0aDogd2luZG93LmlubmVyV2lkdGggLSAyNTAsIGZsb2F0OiAncmlnaHQnLCAgbWF4SGVpZ2h0OiBoZWlnaHQsIG92ZXJmbG93WTogJ2F1dG8nIH19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxCaWdUYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGVhZFN0eWxlPXt7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBvdmVyZmxvd1k6ICdzY3JvbGwnLCBtYXhIZWlnaHQ6ICc1MHB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRib2R5U3R5bGU9e3sgdG9wOiAnNTBweCcsIHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBvdmVyZmxvd1k6ICdzY3JvbGwnLCBtYXhIZWlnaHQ6IGhlaWdodC02MH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHM9e3RoaXMuY29sc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YT17dGhpcy5zdGF0ZS5kYXRhfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0RmllbGQ9e3RoaXMuc3RhdGUuc29ydEZpZWxkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc2NlbmRpbmc9e3RoaXMuc3RhdGUuYXNjZW5kaW5nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVRhYmxlQ2xpY2suYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Tb3J0PXt0aGlzLmhhbmRsZVRhYmxlU29ydC5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgcmVmPXtcImxpc3RNb2RhbFwifSBjbGFzc05hbWU9XCJzdGF0aWMtbW9kYWxcIiBzdHlsZT17e2Rpc3BsYXk6ICdub25lJ319PlxyXG4gICAgICAgICAgICAgICAgICAgIDxNb2RhbC5EaWFsb2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxNb2RhbC5IZWFkZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJjbG9zZVwiIG9uQ2xpY2s9eygpID0+IHsgJCh0aGlzLnJlZnMubGlzdE1vZGFsKS5oaWRlKCkgfX0+JnRpbWVzOzwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1vZGFsLlRpdGxlPnt0aGlzLnN0YXRlLmxpc3RNb2RhbERhdGEuTmFtZX08L01vZGFsLlRpdGxlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L01vZGFsLkhlYWRlcj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtYm9keVwiIHN0eWxlPXt7IG92ZXJmbG93WTogJ2F1dG8nLCBtYXhIZWlnaHQ6IGhlaWdodC8yfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5saXN0TW9kYWxEYXRhLlRhYmxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxNb2RhbC5Gb290ZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHsgJCh0aGlzLnJlZnMubGlzdE1vZGFsKS5oaWRlKCkgfX0+Q2xvc2U8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Nb2RhbC5EaWFsb2c+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgcmVmPXtcImdyYXBoTW9kYWxcIn0gY2xhc3NOYW1lPVwic3RhdGljLW1vZGFsXCIgc3R5bGU9e3sgZGlzcGxheTogJ25vbmUnIH19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxNb2RhbC5EaWFsb2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxNb2RhbC5IZWFkZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJjbG9zZVwiIG9uQ2xpY2s9eygpID0+IHsgJCh0aGlzLnJlZnMuZ3JhcGhNb2RhbCkuaGlkZSgpIH19PiZ0aW1lczs8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNb2RhbC5UaXRsZT48c3BhbiByZWY9e1wiZ3JhcGhUaXRsZVwifT48L3NwYW4+PC9Nb2RhbC5UaXRsZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Nb2RhbC5IZWFkZXI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgcmVmPXsnZ3JhcGgnfSBzdHlsZT17eyBoZWlnaHQ6ICcyNTBweCcsIHdpZHRoOiAnNTAwcHgnIH19PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxNb2RhbC5Gb290ZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHsgJCh0aGlzLnJlZnMuZ3JhcGhNb2RhbCkuaGlkZSgpIH19PkNsb3NlPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTW9kYWwuRm9vdGVyPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvTW9kYWwuRGlhbG9nPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlVGFibGVDbGljayhkYXRhKSB7XHJcbiAgICAgICAgaWYgKGRhdGEuY29sID09IFwiTmFtZVwiKSB7XHJcbiAgICAgICAgICAgIHZhciByb3dzID0gT2JqZWN0LmtleXMoZGF0YS5yb3cpLm1hcChrZXkgPT4gPHRyIGtleT17a2V5fT48dGQ+e2tleX08L3RkPjx0ZD57ZGF0YS5yb3dba2V5XX08L3RkPjwvdHI+KVxyXG4gICAgICAgICAgICB2YXIgbGlzdE1vZGFsRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIE5hbWU6IGRhdGEuZGF0YSxcclxuICAgICAgICAgICAgICAgIFRhYmxlOiA8dGFibGUgY2xhc3NOYW1lPVwidGFibGVcIiBzdHlsZT17eyBtYXhIZWlnaHQ6ICczNTBweCcsIG92ZXJmbG93WTogJ2F1dG8nIH19Pjx0Ym9keT57cm93c308L3Rib2R5PjwvdGFibGU+XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxpc3RNb2RhbERhdGE6IGxpc3RNb2RhbERhdGEgfSwgKCkgPT4gJCh0aGlzLnJlZnMubGlzdE1vZGFsKS5zaG93KCkpXHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wcVRyZW5kaW5nV2ViUmVwb3J0U2VydmljZS5nZXRDaGFydCh0aGlzLnN0YXRlLmRhdGUsIHRoaXMuc3RhdGUuc3RhdCxkYXRhLnJvdy5OYW1lLGRhdGEuY29sKS5kb25lKGNoYXJ0RGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAoJCBhcyBhbnkpLnBsb3QoJCh0aGlzLnJlZnMuZ3JhcGgpLCBbY2hhcnREYXRhLm1hcChkID0+IFttb21lbnQoZC5EYXRlKSwgZC5WYWx1ZV0pXSwgdGhpcy5vcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICQodGhpcy5yZWZzLmdyYXBoVGl0bGUpLnRleHQoZGF0YS5yb3cuTmFtZSArICcgLSAnICsgZGF0YS5jb2wpO1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzLnJlZnMuZ3JhcGhNb2RhbCkuc2hvdygpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVUYWJsZVNvcnQoZGF0YSkge1xyXG4gICAgICAgIHZhciBhc2NlbmRpbmcgPSBkYXRhLmFzY2VuZGluZztcclxuICAgICAgICBpZiAoZGF0YS5jb2wgPT0gdGhpcy5zdGF0ZS5zb3J0RmllbGQpXHJcbiAgICAgICAgICAgIGFzY2VuZGluZyA9ICFkYXRhLmFzY2VuZGluZ1xyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgYXNjZW5kaW5nOiBhc2NlbmRpbmcsXHJcbiAgICAgICAgICAgIHNvcnRGaWVsZDogZGF0YS5jb2xcclxuICAgICAgICB9LCB0aGlzLnVwZGF0ZVVybCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgJCh0aGlzLnJlZnMubG9hZGVyKS5zaG93KCk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRhdGE6IG51bGwgfSk7XHJcbiAgICAgICAgdGhpcy5wcVRyZW5kaW5nV2ViUmVwb3J0U2VydmljZS5nZXREYXRhKHRoaXMuc3RhdGUuZGF0ZSwgdGhpcy5zdGF0ZS5zdGF0LCB0aGlzLnN0YXRlLnNvcnRGaWVsZCwgdGhpcy5zdGF0ZS5hc2NlbmRpbmcpLmRvbmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBkYXRhOiBkYXRhIH0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICQodGhpcy5yZWZzLmxvYWRlcikuaGlkZSgpO1xyXG4gICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlVXJsKCkge1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IF8uY2xvbmUodGhpcy5zdGF0ZSk7XHJcbiAgICAgICAgZGVsZXRlIHN0YXRlLmRhdGE7XHJcbiAgICAgICAgZGVsZXRlIHN0YXRlLmxpc3RNb2RhbERhdGE7XHJcblxyXG4gICAgICAgIHRoaXMuaGlzdG9yeVsncHVzaCddKCdQUVRyZW5kaW5nV2ViUmVwb3J0LmNzaHRtbD8nICsgcXVlcnlTdHJpbmcuc3RyaW5naWZ5KHN0YXRlLCB7IGVuY29kZTogZmFsc2UgfSkpO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5SZWFjdERPTS5yZW5kZXIoPFBRVHJlbmRpbmdXZWJSZXBvcnQgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdib2R5Q29udGFpbmVyJykpOyIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBQZXJpb2RpY0RhdGFEaXNwbGF5MS50cyAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDE4LCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwNS8yNS8yMDE4IC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBRVHJlbmRpbmdXZWJSZXBvcnRTZXJ2aWNlIHtcclxuICAgIHJlc3BvbnNlOiBhbnk7XHJcbiAgICBnZXREYXRhKGRhdGU6IHN0cmluZywgc3RhdDogc3RyaW5nLCBzb3J0RmllbGQ6IHN0cmluZywgYXNjZW5kaW5nOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzcG9uc2UgIT0gbnVsbCkgdGhpcy5yZXNwb25zZS5hYm9ydCgpO1xyXG5cclxuICAgICAgICB0aGlzLnJlc3BvbnNlID0gJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogXCJHRVRcIixcclxuICAgICAgICAgICAgdXJsOiBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufS9hcGkvUFFUcmVuZGluZ1dlYlJlcG9ydC9HZXREYXRhYCtcclxuICAgICAgICAgICAgICAgIGA/ZGF0ZT0ke21vbWVudChkYXRlKS5mb3JtYXQoJ1lZWVktTU0tREQnKX1gICtcclxuICAgICAgICAgICAgICAgIGAmc3RhdD0ke3N0YXR9YCArXHJcbiAgICAgICAgICAgICAgICBgJnNvcnRGaWVsZD0ke3NvcnRGaWVsZH1gICtcclxuICAgICAgICAgICAgICAgIGAmYXNjZW5kaW5nPSR7YXNjZW5kaW5nfWAsXHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgY2FjaGU6IHRydWUsXHJcbiAgICAgICAgICAgIGFzeW5jOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRDaGFydChkYXRlOiBzdHJpbmcsIHN0YXQ6IHN0cmluZywgbWV0ZXJJZDogbnVtYmVyLCBtZWFzdXJlbWVudElkOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5yZXNwb25zZSAhPSBudWxsKSB0aGlzLnJlc3BvbnNlLmFib3J0KCk7XHJcblxyXG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICB1cmw6IGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59L2FwaS9QUVRyZW5kaW5nV2ViUmVwb3J0L0dldENoYXJ0YCArXHJcbiAgICAgICAgICAgICAgICBgP2RhdGU9JHttb21lbnQoZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREJyl9YCArXHJcbiAgICAgICAgICAgICAgICBgJnN0YXQ9JHtzdGF0fWAgK1xyXG4gICAgICAgICAgICAgICAgYCZtZWFzdXJlbWVudElEPSR7bWVhc3VyZW1lbnRJZH1gICtcclxuICAgICAgICAgICAgICAgIGAmbWV0ZXJJRD0ke21ldGVySWR9YCxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICBjYWNoZTogdHJ1ZSxcclxuICAgICAgICAgICAgYXN5bmM6IHRydWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2U7XHJcblxyXG4gICAgfVxyXG5cclxufSIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBEcm9wZG93bi50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAxOCwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMDIvMDkvMjAxOCAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxlY3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LCBhbnk+e1xyXG4gICAgcHJvcHM6IHsgb3B0aW9uczogYW55OyB2YWx1ZTogYW55OyBvbkNoYW5nZTogRnVuY3Rpb247fTtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgaWYodGhpcy5wcm9wcy5vbkNoYW5nZSAhPSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLnByb3BzLm9wdGlvbnMubWFwKChvLCBpKSA9PiA8b3B0aW9uIGtleT17b30+e299PC9vcHRpb24+KTtcclxuICAgICAgICByZXR1cm4gIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfSBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAgICAgICAgICB7b3B0aW9uc31cclxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PjtcclxuXHJcbiAgICB9XHJcblxyXG59XHJcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5hc3NpZ247XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCkge1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVVbmNvbnRyb2xsYWJsZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgdXRpbHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfdXRpbHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIGNyZWF0ZVVuY29udHJvbGxhYmxlKG1peGluLCBzZXQpIHtcblxuICByZXR1cm4gdW5jb250cm9sbGFibGU7XG5cbiAgZnVuY3Rpb24gdW5jb250cm9sbGFibGUoQ29tcG9uZW50LCBjb250cm9sbGVkVmFsdWVzKSB7XG4gICAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgICB2YXIgbWV0aG9kcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcsXG4gICAgICAgIGJhc2VQcm9wVHlwZXMgPSB1dGlscy5nZXRUeXBlKENvbXBvbmVudCkucHJvcFR5cGVzLFxuICAgICAgICBpc0NvbXBvc2l0ZUNvbXBvbmVudCA9IHV0aWxzLmlzUmVhY3RDb21wb25lbnQoQ29tcG9uZW50KSxcbiAgICAgICAgY29udHJvbGxlZFByb3BzID0gT2JqZWN0LmtleXMoY29udHJvbGxlZFZhbHVlcyksXG4gICAgICAgIHByb3BUeXBlcztcblxuICAgIHZhciBPTUlUX1BST1BTID0gWyd2YWx1ZUxpbmsnLCAnY2hlY2tlZExpbmsnXS5jb25jYXQoY29udHJvbGxlZFByb3BzLm1hcCh1dGlscy5kZWZhdWx0S2V5KSk7XG5cbiAgICBwcm9wVHlwZXMgPSB1dGlscy51bmNvbnRyb2xsZWRQcm9wVHlwZXMoY29udHJvbGxlZFZhbHVlcywgYmFzZVByb3BUeXBlcywgZGlzcGxheU5hbWUpO1xuXG4gICAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGlzQ29tcG9zaXRlQ29tcG9uZW50IHx8ICFtZXRob2RzLmxlbmd0aCwgJ1t1bmNvbnRyb2xsYWJsZV0gc3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IHBhc3MgdGhyb3VnaCBtZXRob2RzICcgKyAnYmVjYXVzZSB0aGV5IGhhdmUgbm8gYXNzb2NpYXRlZCBpbnN0YW5jZXMuIENoZWNrIGNvbXBvbmVudDogJyArIGRpc3BsYXlOYW1lICsgJywgJyArICdhdHRlbXB0aW5nIHRvIHBhc3MgdGhyb3VnaCBtZXRob2RzOiAnICsgbWV0aG9kcy5qb2luKCcsICcpKTtcblxuICAgIG1ldGhvZHMgPSB1dGlscy50cmFuc2Zvcm0obWV0aG9kcywgZnVuY3Rpb24gKG9iaiwgbWV0aG9kKSB7XG4gICAgICBvYmpbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9yZWZzJGlubmVyO1xuXG4gICAgICAgIHJldHVybiAoX3JlZnMkaW5uZXIgPSB0aGlzLnJlZnMuaW5uZXIpW21ldGhvZF0uYXBwbHkoX3JlZnMkaW5uZXIsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0sIHt9KTtcblxuICAgIHZhciBjb21wb25lbnQgPSAoX3RlbXAgPSBfY2xhc3MgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKGNvbXBvbmVudCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudCgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGNvbXBvbmVudCk7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbXBvbmVudC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gIW1peGluLnNob3VsZENvbXBvbmVudFVwZGF0ZSB8fCBtaXhpbi5zaG91bGRDb21wb25lbnRVcGRhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuXG4gICAgICBjb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgICB0aGlzLl92YWx1ZXMgPSB7fTtcblxuICAgICAgICBjb250cm9sbGVkUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgX3RoaXMyLl92YWx1ZXNba2V5XSA9IHByb3BzW3V0aWxzLmRlZmF1bHRLZXkoa2V5KV07XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiBhIHByb3Agc3dpdGNoZXMgZnJvbSBjb250cm9sbGVkIHRvIFVuY29udHJvbGxlZFxuICAgICAgICogcmVzZXQgaXRzIHZhbHVlIHRvIHRoZSBkZWZhdWx0VmFsdWVcbiAgICAgICAqL1xuXG5cbiAgICAgIGNvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgaWYgKG1peGluLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMpIHtcbiAgICAgICAgICBtaXhpbi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLmNhbGwodGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRyb2xsZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBpZiAodXRpbHMuZ2V0VmFsdWUobmV4dFByb3BzLCBrZXkpID09PSB1bmRlZmluZWQgJiYgdXRpbHMuZ2V0VmFsdWUocHJvcHMsIGtleSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX3RoaXMzLl92YWx1ZXNba2V5XSA9IG5leHRQcm9wc1t1dGlscy5kZWZhdWx0S2V5KGtleSldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBjb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMudW5tb3VudGVkID0gdHJ1ZTtcbiAgICAgIH07XG5cbiAgICAgIGNvbXBvbmVudC5wcm90b3R5cGUuZ2V0Q29udHJvbGxlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0Q29udHJvbGxlZEluc3RhbmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZzLmlubmVyO1xuICAgICAgfTtcblxuICAgICAgY29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgIHZhciBuZXdQcm9wcyA9IHt9LFxuICAgICAgICAgICAgcHJvcHMgPSBvbWl0UHJvcHModGhpcy5wcm9wcyk7XG5cbiAgICAgICAgdXRpbHMuZWFjaChjb250cm9sbGVkVmFsdWVzLCBmdW5jdGlvbiAoaGFuZGxlLCBwcm9wTmFtZSkge1xuICAgICAgICAgIHZhciBsaW5rUHJvcE5hbWUgPSB1dGlscy5nZXRMaW5rTmFtZShwcm9wTmFtZSksXG4gICAgICAgICAgICAgIHByb3AgPSBfdGhpczQucHJvcHNbcHJvcE5hbWVdO1xuXG4gICAgICAgICAgaWYgKGxpbmtQcm9wTmFtZSAmJiAhaXNQcm9wKF90aGlzNC5wcm9wcywgcHJvcE5hbWUpICYmIGlzUHJvcChfdGhpczQucHJvcHMsIGxpbmtQcm9wTmFtZSkpIHtcbiAgICAgICAgICAgIHByb3AgPSBfdGhpczQucHJvcHNbbGlua1Byb3BOYW1lXS52YWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXdQcm9wc1twcm9wTmFtZV0gPSBwcm9wICE9PSB1bmRlZmluZWQgPyBwcm9wIDogX3RoaXM0Ll92YWx1ZXNbcHJvcE5hbWVdO1xuXG4gICAgICAgICAgbmV3UHJvcHNbaGFuZGxlXSA9IHNldEFuZE5vdGlmeS5iaW5kKF90aGlzNCwgcHJvcE5hbWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBuZXdQcm9wcyA9IF9leHRlbmRzKHt9LCBwcm9wcywgbmV3UHJvcHMsIHtcbiAgICAgICAgICByZWY6IGlzQ29tcG9zaXRlQ29tcG9uZW50ID8gJ2lubmVyJyA6IG51bGxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgbmV3UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSAnVW5jb250cm9sbGVkKCcgKyBkaXNwbGF5TmFtZSArICcpJywgX2NsYXNzLnByb3BUeXBlcyA9IHByb3BUeXBlcywgX3RlbXApO1xuXG4gICAgX2V4dGVuZHMoY29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kcyk7XG5cbiAgICBjb21wb25lbnQuQ29udHJvbGxlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICAgIC8qKlxuICAgICAqIHVzZWZ1bCB3aGVuIHdyYXBwaW5nIGEgQ29tcG9uZW50IGFuZCB5b3Ugd2FudCB0byBjb250cm9sXG4gICAgICogZXZlcnl0aGluZ1xuICAgICAqL1xuICAgIGNvbXBvbmVudC5kZWZlckNvbnRyb2xUbyA9IGZ1bmN0aW9uIChuZXdDb21wb25lbnQpIHtcbiAgICAgIHZhciBhZGRpdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIG5leHRNZXRob2RzID0gYXJndW1lbnRzWzJdO1xuXG4gICAgICByZXR1cm4gdW5jb250cm9sbGFibGUobmV3Q29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgY29udHJvbGxlZFZhbHVlcywgYWRkaXRpb25zKSwgbmV4dE1ldGhvZHMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gY29tcG9uZW50O1xuXG4gICAgZnVuY3Rpb24gc2V0QW5kTm90aWZ5KHByb3BOYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGxpbmtOYW1lID0gdXRpbHMuZ2V0TGlua05hbWUocHJvcE5hbWUpLFxuICAgICAgICAgIGhhbmRsZXIgPSB0aGlzLnByb3BzW2NvbnRyb2xsZWRWYWx1ZXNbcHJvcE5hbWVdXTtcblxuICAgICAgaWYgKGxpbmtOYW1lICYmIGlzUHJvcCh0aGlzLnByb3BzLCBsaW5rTmFtZSkgJiYgIWhhbmRsZXIpIHtcbiAgICAgICAgaGFuZGxlciA9IHRoaXMucHJvcHNbbGlua05hbWVdLnJlcXVlc3RDaGFuZ2U7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgc2V0KHRoaXMsIHByb3BOYW1lLCBoYW5kbGVyLCB2YWx1ZSwgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNQcm9wKHByb3BzLCBwcm9wKSB7XG4gICAgICByZXR1cm4gcHJvcHNbcHJvcF0gIT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbWl0UHJvcHMocHJvcHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcblxuICAgICAgdXRpbHMuZWFjaChwcm9wcywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKE9NSVRfUFJPUFMuaW5kZXhPZihrZXkpID09PSAtMSkgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy52ZXJzaW9uID0gdW5kZWZpbmVkO1xuZXhwb3J0cy51bmNvbnRyb2xsZWRQcm9wVHlwZXMgPSB1bmNvbnRyb2xsZWRQcm9wVHlwZXM7XG5leHBvcnRzLmdldFR5cGUgPSBnZXRUeXBlO1xuZXhwb3J0cy5nZXRWYWx1ZSA9IGdldFZhbHVlO1xuZXhwb3J0cy5nZXRMaW5rTmFtZSA9IGdldExpbmtOYW1lO1xuZXhwb3J0cy5kZWZhdWx0S2V5ID0gZGVmYXVsdEtleTtcbmV4cG9ydHMuY2hhaW4gPSBjaGFpbjtcbmV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuZXhwb3J0cy5lYWNoID0gZWFjaDtcbmV4cG9ydHMuaGFzID0gaGFzO1xuZXhwb3J0cy5pc1JlYWN0Q29tcG9uZW50ID0gaXNSZWFjdENvbXBvbmVudDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiByZWFkT25seVByb3BUeXBlKGhhbmRsZXIsIG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghcHJvcHNbaGFuZGxlcl0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignWW91IGhhdmUgcHJvdmlkZWQgYSBgJyArIHByb3BOYW1lICsgJ2AgcHJvcCB0byAnICsgJ2AnICsgbmFtZSArICdgIHdpdGhvdXQgYW4gYCcgKyBoYW5kbGVyICsgJ2AgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gJyArICdJZiB0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGAnICsgZGVmYXVsdEtleShwcm9wTmFtZSkgKyAnYC4gT3RoZXJ3aXNlLCBzZXQgYCcgKyBoYW5kbGVyICsgJ2AnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVuY29udHJvbGxlZFByb3BUeXBlcyhjb250cm9sbGVkVmFsdWVzLCBiYXNlUHJvcFR5cGVzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgcHJvcFR5cGVzID0ge307XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYmFzZVByb3BUeXBlcykge1xuICAgIHRyYW5zZm9ybShjb250cm9sbGVkVmFsdWVzLCBmdW5jdGlvbiAob2JqLCBoYW5kbGVyLCBwcm9wKSB7XG4gICAgICAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnICYmIGhhbmRsZXIudHJpbSgpLmxlbmd0aCwgJ1VuY29udHJvbGxhYmxlIC0gWyVzXTogdGhlIHByb3AgYCVzYCBuZWVkcyBhIHZhbGlkIGhhbmRsZXIga2V5IG5hbWUgaW4gb3JkZXIgdG8gbWFrZSBpdCB1bmNvbnRyb2xsYWJsZScsIGRpc3BsYXlOYW1lLCBwcm9wKTtcblxuICAgICAgb2JqW3Byb3BdID0gcmVhZE9ubHlQcm9wVHlwZShoYW5kbGVyLCBkaXNwbGF5TmFtZSk7XG4gICAgfSwgcHJvcFR5cGVzKTtcbiAgfVxuXG4gIHJldHVybiBwcm9wVHlwZXM7XG59XG5cbnZhciB2ZXJzaW9uID0gZXhwb3J0cy52ZXJzaW9uID0gX3JlYWN0Mi5kZWZhdWx0LnZlcnNpb24uc3BsaXQoJy4nKS5tYXAocGFyc2VGbG9hdCk7XG5cbmZ1bmN0aW9uIGdldFR5cGUoY29tcG9uZW50KSB7XG4gIGlmICh2ZXJzaW9uWzBdID49IDE1IHx8IHZlcnNpb25bMF0gPT09IDAgJiYgdmVyc2lvblsxXSA+PSAxMykgcmV0dXJuIGNvbXBvbmVudDtcblxuICByZXR1cm4gY29tcG9uZW50LnR5cGU7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHByb3BzLCBuYW1lKSB7XG4gIHZhciBsaW5rUHJvcE5hbWUgPSBnZXRMaW5rTmFtZShuYW1lKTtcblxuICBpZiAobGlua1Byb3BOYW1lICYmICFpc1Byb3AocHJvcHMsIG5hbWUpICYmIGlzUHJvcChwcm9wcywgbGlua1Byb3BOYW1lKSkgcmV0dXJuIHByb3BzW2xpbmtQcm9wTmFtZV0udmFsdWU7XG5cbiAgcmV0dXJuIHByb3BzW25hbWVdO1xufVxuXG5mdW5jdGlvbiBpc1Byb3AocHJvcHMsIHByb3ApIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGdldExpbmtOYW1lKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUgPT09ICd2YWx1ZScgPyAndmFsdWVMaW5rJyA6IG5hbWUgPT09ICdjaGVja2VkJyA/ICdjaGVja2VkTGluaycgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0S2V5KGtleSkge1xuICByZXR1cm4gJ2RlZmF1bHQnICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gY2hhaW4odGhpc0FyZywgYSwgYikge1xuICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGEgJiYgYS5jYWxsLmFwcGx5KGEsIFt0aGlzQXJnXS5jb25jYXQoYXJncykpO1xuICAgIGIgJiYgYi5jYWxsLmFwcGx5KGIsIFt0aGlzQXJnXS5jb25jYXQoYXJncykpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm0ob2JqLCBjYiwgc2VlZCkge1xuICBlYWNoKG9iaiwgY2IuYmluZChudWxsLCBzZWVkID0gc2VlZCB8fCAoQXJyYXkuaXNBcnJheShvYmopID8gW10gOiB7fSkpKTtcbiAgcmV0dXJuIHNlZWQ7XG59XG5cbmZ1bmN0aW9uIGVhY2gob2JqLCBjYiwgdGhpc0FyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSByZXR1cm4gb2JqLmZvckVhY2goY2IsIHRoaXNBcmcpO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaGFzKG9iaiwga2V5KSkgY2IuY2FsbCh0aGlzQXJnLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhcyhvLCBrKSB7XG4gIHJldHVybiBvID8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIGspIDogZmFsc2U7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuZnVuY3Rpb24gaXNSZWFjdENvbXBvbmVudChjb21wb25lbnQpIHtcbiAgcmV0dXJuICEhKGNvbXBvbmVudCAmJiBjb21wb25lbnQucHJvdG90eXBlICYmIGNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5lbnRyaWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4O2Z1bmN0aW9uIHgoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSB0OmNhc2UgcjpjYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiB5KGEpe3JldHVybiB4KGEpPT09bX1leHBvcnRzLnR5cGVPZj14O2V4cG9ydHMuQXN5bmNNb2RlPWw7XG5leHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09dnx8YS4kJHR5cGVvZj09PXcpfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpfHx4KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXk7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1ofTtcbmV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09dH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1wfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9wcm9wZXJ0aWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlXCIpKTtcblxuZnVuY3Rpb24gb25FbmQobm9kZSwgaGFuZGxlciwgZHVyYXRpb24pIHtcbiAgdmFyIGZha2VFdmVudCA9IHtcbiAgICB0YXJnZXQ6IG5vZGUsXG4gICAgY3VycmVudFRhcmdldDogbm9kZVxuICB9LFxuICAgICAgYmFja3VwO1xuICBpZiAoIV9wcm9wZXJ0aWVzLmRlZmF1bHQuZW5kKSBkdXJhdGlvbiA9IDA7ZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkgZHVyYXRpb24gPSBwYXJzZUR1cmF0aW9uKG5vZGUpIHx8IDA7XG5cbiAgaWYgKF9wcm9wZXJ0aWVzLmRlZmF1bHQuZW5kKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKF9wcm9wZXJ0aWVzLmRlZmF1bHQuZW5kLCBkb25lLCBmYWxzZSk7XG4gICAgYmFja3VwID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZG9uZShmYWtlRXZlbnQpO1xuICAgIH0sIChkdXJhdGlvbiB8fCAxMDApICogMS41KTtcbiAgfSBlbHNlIHNldFRpbWVvdXQoZG9uZS5iaW5kKG51bGwsIGZha2VFdmVudCksIDApO1xuXG4gIGZ1bmN0aW9uIGRvbmUoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSByZXR1cm47XG4gICAgY2xlYXJUaW1lb3V0KGJhY2t1cCk7XG4gICAgZXZlbnQudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoX3Byb3BlcnRpZXMuZGVmYXVsdC5lbmQsIGRvbmUpO1xuICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgfVxufVxuXG5vbkVuZC5fcGFyc2VEdXJhdGlvbiA9IHBhcnNlRHVyYXRpb247XG52YXIgX2RlZmF1bHQgPSBvbkVuZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG5mdW5jdGlvbiBwYXJzZUR1cmF0aW9uKG5vZGUpIHtcbiAgdmFyIHN0ciA9ICgwLCBfc3R5bGUuZGVmYXVsdCkobm9kZSwgX3Byb3BlcnRpZXMuZGVmYXVsdC5kdXJhdGlvbiksXG4gICAgICBtdWx0ID0gc3RyLmluZGV4T2YoJ21zJykgPT09IC0xID8gMTAwMCA6IDE7XG4gIHJldHVybiBwYXJzZUZsb2F0KHN0cikgKiBtdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FtZWxpemU7XG52YXIgckh5cGhlbiA9IC8tKC4pL2c7XG5cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2Uockh5cGhlbiwgZnVuY3Rpb24gKF8sIGNocikge1xuICAgIHJldHVybiBjaHIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuXG52YXIgX2h5cGhlbmF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaHlwaGVuYXRlXCIpKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzJhZWI4YTJhNmJlYjAwNjE3YTQyMTdmN2Y4Mjg0OTI0ZmEyYWQ4MTkvc3JjL3ZlbmRvci9jb3JlL2h5cGhlbmF0ZVN0eWxlTmFtZS5qc1xuICovXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiAoMCwgX2h5cGhlbmF0ZS5kZWZhdWx0KShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlO1xudmFyIHJVcHBlciA9IC8oW0EtWl0pL2c7XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJVcHBlciwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2dldENvbXB1dGVkU3R5bGU7XG5cbnZhciBfY2FtZWxpemVTdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSk7XG5cbnZhciBycG9zaXRpb24gPSAvXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC87XG52YXIgcm51bW5vbnB4ID0gL14oWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpKSg/IXB4KVthLXolXSskL2k7XG5cbmZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKG5vZGUpIHtcbiAgaWYgKCFub2RlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBFbGVtZW50IHBhc3NlZCB0byBgZ2V0Q29tcHV0ZWRTdHlsZSgpYCcpO1xuICB2YXIgZG9jID0gbm9kZS5vd25lckRvY3VtZW50O1xuICByZXR1cm4gJ2RlZmF1bHRWaWV3JyBpbiBkb2MgPyBkb2MuZGVmYXVsdFZpZXcub3BlbmVyID8gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkgOiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKSA6IHtcbiAgICAvL2llIDggXCJtYWdpY1wiIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvMS4xMS1zdGFibGUvc3JjL2Nzcy9jdXJDU1MuanMjTDcyXG4gICAgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShwcm9wKSB7XG4gICAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgICAgcHJvcCA9ICgwLCBfY2FtZWxpemVTdHlsZS5kZWZhdWx0KShwcm9wKTtcbiAgICAgIGlmIChwcm9wID09ICdmbG9hdCcpIHByb3AgPSAnc3R5bGVGbG9hdCc7XG4gICAgICB2YXIgY3VycmVudCA9IG5vZGUuY3VycmVudFN0eWxlW3Byb3BdIHx8IG51bGw7XG4gICAgICBpZiAoY3VycmVudCA9PSBudWxsICYmIHN0eWxlICYmIHN0eWxlW3Byb3BdKSBjdXJyZW50ID0gc3R5bGVbcHJvcF07XG5cbiAgICAgIGlmIChybnVtbm9ucHgudGVzdChjdXJyZW50KSAmJiAhcnBvc2l0aW9uLnRlc3QocHJvcCkpIHtcbiAgICAgICAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuICAgICAgICB2YXIgbGVmdCA9IHN0eWxlLmxlZnQ7XG4gICAgICAgIHZhciBydW5TdHlsZSA9IG5vZGUucnVudGltZVN0eWxlO1xuICAgICAgICB2YXIgcnNMZWZ0ID0gcnVuU3R5bGUgJiYgcnVuU3R5bGUubGVmdDsgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXG4gICAgICAgIGlmIChyc0xlZnQpIHJ1blN0eWxlLmxlZnQgPSBub2RlLmN1cnJlbnRTdHlsZS5sZWZ0O1xuICAgICAgICBzdHlsZS5sZWZ0ID0gcHJvcCA9PT0gJ2ZvbnRTaXplJyA/ICcxZW0nIDogY3VycmVudDtcbiAgICAgICAgY3VycmVudCA9IHN0eWxlLnBpeGVsTGVmdCArICdweCc7IC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblxuICAgICAgICBzdHlsZS5sZWZ0ID0gbGVmdDtcbiAgICAgICAgaWYgKHJzTGVmdCkgcnVuU3R5bGUubGVmdCA9IHJzTGVmdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVtb3ZlU3R5bGU7XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlKG5vZGUsIGtleSkge1xuICByZXR1cm4gJ3JlbW92ZVByb3BlcnR5JyBpbiBub2RlLnN0eWxlID8gbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShrZXkpIDogbm9kZS5zdHlsZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzVHJhbnNmb3JtO1xudmFyIHN1cHBvcnRlZFRyYW5zZm9ybXMgPSAvXigodHJhbnNsYXRlfHJvdGF0ZXxzY2FsZSkoWHxZfFp8M2QpP3xtYXRyaXgoM2QpP3xwZXJzcGVjdGl2ZXxza2V3KFh8WSk/KSQvaTtcblxuZnVuY3Rpb24gaXNUcmFuc2Zvcm0ocHJvcGVydHkpIHtcbiAgcmV0dXJuICEhKHByb3BlcnR5ICYmIHN1cHBvcnRlZFRyYW5zZm9ybXMudGVzdChwcm9wZXJ0eSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICBpZiAoc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICAvLyBVc2UgdGhlIHNldFN0YXRlKCkgdXBkYXRlciB0byBlbnN1cmUgc3RhdGUgaXNuJ3Qgc3RhbGUgaW4gY2VydGFpbiBlZGdlIGNhc2VzLlxuICBmdW5jdGlvbiB1cGRhdGVyKHByZXZTdGF0ZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCA/IHN0YXRlIDogbnVsbDtcbiAgfVxuICAvLyBCaW5kaW5nIFwidGhpc1wiIGlzIGltcG9ydGFudCBmb3Igc2hhbGxvdyByZW5kZXJlciBzdXBwb3J0LlxuICB0aGlzLnNldFN0YXRlKHVwZGF0ZXIuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcHJldlByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgcHJldlN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnByb3BzID0gbmV4dFByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgPSB0cnVlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3QgPSB0aGlzLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0aGlzLnByb3BzID0gcHJldlByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBwcmV2U3RhdGU7XG4gIH1cbn1cblxuLy8gUmVhY3QgbWF5IHdhcm4gYWJvdXQgY1dNL2NXUlAvY1dVIG1ldGhvZHMgYmVpbmcgZGVwcmVjYXRlZC5cbi8vIEFkZCBhIGZsYWcgdG8gc3VwcHJlc3MgdGhlc2Ugd2FybmluZ3MgZm9yIHRoaXMgc3BlY2lhbCBjYXNlLlxuY29tcG9uZW50V2lsbE1vdW50Ll9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxVcGRhdGUuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBpZiAoIXByb3RvdHlwZSB8fCAhcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHBvbHlmaWxsIGNsYXNzIGNvbXBvbmVudHMnKTtcbiAgfVxuXG4gIGlmIChcbiAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIC8vIElmIG5ldyBjb21wb25lbnQgQVBJcyBhcmUgZGVmaW5lZCwgXCJ1bnNhZmVcIiBsaWZlY3ljbGVzIHdvbid0IGJlIGNhbGxlZC5cbiAgLy8gRXJyb3IgaWYgYW55IG9mIHRoZXNlIGxpZmVjeWNsZXMgYXJlIHByZXNlbnQsXG4gIC8vIEJlY2F1c2UgdGhleSB3b3VsZCB3b3JrIGRpZmZlcmVudGx5IGJldHdlZW4gb2xkZXIgYW5kIG5ld2VyICgxNi4zKykgdmVyc2lvbnMgb2YgUmVhY3QuXG4gIHZhciBmb3VuZFdpbGxNb3VudE5hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxVcGRhdGVOYW1lID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsTW91bnQnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdjb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH1cbiAgaWYgKFxuICAgIGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsXG4gICkge1xuICAgIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lO1xuICAgIHZhciBuZXdBcGlOYW1lID1cbiAgICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJ1xuICAgICAgICA6ICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpJztcblxuICAgIHRocm93IEVycm9yKFxuICAgICAgJ1Vuc2FmZSBsZWdhY3kgbGlmZWN5Y2xlcyB3aWxsIG5vdCBiZSBjYWxsZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgbmV3IGNvbXBvbmVudCBBUElzLlxcblxcbicgK1xuICAgICAgICBjb21wb25lbnROYW1lICtcbiAgICAgICAgJyB1c2VzICcgK1xuICAgICAgICBuZXdBcGlOYW1lICtcbiAgICAgICAgJyBidXQgYWxzbyBjb250YWlucyB0aGUgZm9sbG93aW5nIGxlZ2FjeSBsaWZlY3ljbGVzOicgK1xuICAgICAgICAoZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbE1vdW50TmFtZSA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsXG4gICAgICAgICAgPyAnXFxuICAnICsgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZVxuICAgICAgICAgIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKSArXG4gICAgICAgICdcXG5cXG5UaGUgYWJvdmUgbGlmZWN5Y2xlcyBzaG91bGQgYmUgcmVtb3ZlZC4gTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTpcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcydcbiAgICApO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXTSBhbmQgY1dSUCB0byBpbnZva2UgdGhlIG5ldyBzdGF0aWMgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGVzZSBsaWZlY3ljbGVzIGlmIGdEU0ZQIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGNvbXBvbmVudFdpbGxNb3VudDtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXVSB0byBpbnZva2UgdGhlIG5ldyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoYXQgbGlmZWN5Y2xlIGlmIGdTQlUgZXhpc3RzLlxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHBvbHlmaWxsIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgZm9yIGNvbXBvbmVudHMgdGhhdCBkbyBub3QgZGVmaW5lIGNvbXBvbmVudERpZFVwZGF0ZSgpIG9uIHRoZSBwcm90b3R5cGUnXG4gICAgICApO1xuICAgIH1cblxuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTtcblxuICAgIHZhciBjb21wb25lbnREaWRVcGRhdGUgPSBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlO1xuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVBvbHlmaWxsKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlLFxuICAgICAgbWF5YmVTbmFwc2hvdFxuICAgICkge1xuICAgICAgLy8gMTYuMysgd2lsbCBub3QgZXhlY3V0ZSBvdXIgd2lsbC11cGRhdGUgbWV0aG9kO1xuICAgICAgLy8gSXQgd2lsbCBwYXNzIGEgc25hcHNob3QgdmFsdWUgdG8gZGlkLXVwZGF0ZSB0aG91Z2guXG4gICAgICAvLyBPbGRlciB2ZXJzaW9ucyB3aWxsIHJlcXVpcmUgb3VyIHBvbHlmaWxsZWQgd2lsbC11cGRhdGUgdmFsdWUuXG4gICAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSBib3RoIGNhc2VzLCBidXQgY2FuJ3QganVzdCBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIFwibWF5YmVTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBmb3IgPD0gMTUueCB2ZXJzaW9ucyB0aGlzIG1pZ2h0IGJlIGEgXCJwcmV2Q29udGV4dFwiIG9iamVjdC5cbiAgICAgIC8vIFdlIGFsc28gY2FuJ3QganVzdCBjaGVjayBcIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGdldC1zbmFwc2hvdCBtaWdodCByZXR1cm4gYSBmYWxzeSB2YWx1ZS5cbiAgICAgIC8vIFNvIGNoZWNrIGZvciB0aGUgZXhwbGljaXQgX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIGZsYWcgdG8gZGV0ZXJtaW5lIGJlaGF2aW9yLlxuICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWdcbiAgICAgICAgPyB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XG4gICAgICAgIDogbWF5YmVTbmFwc2hvdDtcblxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlLmNhbGwodGhpcywgcHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn1cblxuZXhwb3J0IHsgcG9seWZpbGwgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBleHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB0aW1lb3V0c1NoYXBlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICBhcHBlYXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbn0pLmlzUmVxdWlyZWRdKSA6IG51bGw7XG5leHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB0aW1lb3V0c1NoYXBlO1xudmFyIGNsYXNzTmFtZXNTaGFwZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgYWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59KSwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGVudGVyRG9uZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXREb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0QWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59KV0pIDogbnVsbDtcbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gY2xhc3NOYW1lc1NoYXBlOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZnJvbTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmlsdGVyRXZlbnRzO1xuXG52YXIgX2NvbnRhaW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcXVlcnkvY29udGFpbnNcIikpO1xuXG52YXIgX3F1ZXJ5U2VsZWN0b3JBbGwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9xdWVyeS9xdWVyeVNlbGVjdG9yQWxsXCIpKTtcblxuZnVuY3Rpb24gZmlsdGVyRXZlbnRzKHNlbGVjdG9yLCBoYW5kbGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaWx0ZXJIYW5kbGVyKGUpIHtcbiAgICB2YXIgdG9wID0gZS5jdXJyZW50VGFyZ2V0LFxuICAgICAgICB0YXJnZXQgPSBlLnRhcmdldCxcbiAgICAgICAgbWF0Y2hlcyA9ICgwLCBfcXVlcnlTZWxlY3RvckFsbC5kZWZhdWx0KSh0b3AsIHNlbGVjdG9yKTtcbiAgICBpZiAobWF0Y2hlcy5zb21lKGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgcmV0dXJuICgwLCBfY29udGFpbnMuZGVmYXVsdCkobWF0Y2gsIHRhcmdldCk7XG4gICAgfSkpIGhhbmRsZXIuY2FsbCh0aGlzLCBlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHFzYTtcbi8vIFplcHRvLmpzXG4vLyAoYykgMjAxMC0yMDE1IFRob21hcyBGdWNoc1xuLy8gWmVwdG8uanMgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG52YXIgc2ltcGxlU2VsZWN0b3JSRSA9IC9eW1xcdy1dKiQvO1xudmFyIHRvQXJyYXkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLCBbXS5zbGljZSk7XG5cbmZ1bmN0aW9uIHFzYShlbGVtZW50LCBzZWxlY3Rvcikge1xuICB2YXIgbWF5YmVJRCA9IHNlbGVjdG9yWzBdID09PSAnIycsXG4gICAgICBtYXliZUNsYXNzID0gc2VsZWN0b3JbMF0gPT09ICcuJyxcbiAgICAgIG5hbWVPbmx5ID0gbWF5YmVJRCB8fCBtYXliZUNsYXNzID8gc2VsZWN0b3Iuc2xpY2UoMSkgOiBzZWxlY3RvcixcbiAgICAgIGlzU2ltcGxlID0gc2ltcGxlU2VsZWN0b3JSRS50ZXN0KG5hbWVPbmx5KSxcbiAgICAgIGZvdW5kO1xuXG4gIGlmIChpc1NpbXBsZSkge1xuICAgIGlmIChtYXliZUlEKSB7XG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5nZXRFbGVtZW50QnlJZCA/IGVsZW1lbnQgOiBkb2N1bWVudDtcbiAgICAgIHJldHVybiAoZm91bmQgPSBlbGVtZW50LmdldEVsZW1lbnRCeUlkKG5hbWVPbmx5KSkgPyBbZm91bmRdIDogW107XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBtYXliZUNsYXNzKSByZXR1cm4gdG9BcnJheShlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobmFtZU9ubHkpKTtcbiAgICByZXR1cm4gdG9BcnJheShlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKSk7XG4gIH1cblxuICByZXR1cm4gdG9BcnJheShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2luRE9NXCIpKTtcblxudmFyIF9vbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb25cIikpO1xuXG52YXIgX29mZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb2ZmXCIpKTtcblxudmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbigpIHt9O1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSkge1xuICAgICgwLCBfb24uZGVmYXVsdCkobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgKDAsIF9vZmYuZGVmYXVsdCkobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBsaXN0ZW47XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVwcmVjYXRlZDtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB3YXJuZWQgPSB7fTtcblxuZnVuY3Rpb24gZGVwcmVjYXRlZCh2YWxpZGF0b3IsIHJlYXNvbikge1xuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdICE9IG51bGwpIHtcbiAgICAgIHZhciBtZXNzYWdlS2V5ID0gY29tcG9uZW50TmFtZSArICcuJyArIHByb3BOYW1lO1xuXG4gICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHdhcm5lZFttZXNzYWdlS2V5XSwgJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lU2FmZSArICdgIG9mICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZVNhZmUgKyAnYCBpcyBkZXByZWNhdGVkLiAnICsgcmVhc29uICsgJy4nKSk7XG5cbiAgICAgIHdhcm5lZFttZXNzYWdlS2V5XSA9IHRydWU7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gNSA/IF9sZW4gLSA1IDogMCksIF9rZXkgPSA1OyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSA1XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yLmFwcGx5KHVuZGVmaW5lZCwgW3Byb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgfTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmZ1bmN0aW9uIF9yZXNldFdhcm5lZCgpIHtcbiAgd2FybmVkID0ge307XG59XG5cbmRlcHJlY2F0ZWQuX3Jlc2V0V2FybmVkID0gX3Jlc2V0V2FybmVkO1xuLyogZXNsaW50LWVuYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfY2xhc3MgPSByZXF1aXJlKCdkb20taGVscGVycy9jbGFzcycpO1xuXG52YXIgX2NsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzKTtcblxudmFyIF9zdHlsZSA9IHJlcXVpcmUoJ2RvbS1oZWxwZXJzL3N0eWxlJyk7XG5cbnZhciBfc3R5bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3R5bGUpO1xuXG52YXIgX3Njcm9sbGJhclNpemUgPSByZXF1aXJlKCdkb20taGVscGVycy91dGlsL3Njcm9sbGJhclNpemUnKTtcblxudmFyIF9zY3JvbGxiYXJTaXplMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Njcm9sbGJhclNpemUpO1xuXG52YXIgX2lzT3ZlcmZsb3dpbmcgPSByZXF1aXJlKCcuL3V0aWxzL2lzT3ZlcmZsb3dpbmcnKTtcblxudmFyIF9pc092ZXJmbG93aW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzT3ZlcmZsb3dpbmcpO1xuXG52YXIgX21hbmFnZUFyaWFIaWRkZW4gPSByZXF1aXJlKCcuL3V0aWxzL21hbmFnZUFyaWFIaWRkZW4nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gZmluZEluZGV4T2YoYXJyLCBjYikge1xuICB2YXIgaWR4ID0gLTE7XG4gIGFyci5zb21lKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgaWYgKGNiKGQsIGkpKSB7XG4gICAgICBpZHggPSBpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gZmluZENvbnRhaW5lcihkYXRhLCBtb2RhbCkge1xuICByZXR1cm4gZmluZEluZGV4T2YoZGF0YSwgZnVuY3Rpb24gKGQpIHtcbiAgICByZXR1cm4gZC5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0Q29udGFpbmVyU3R5bGUoc3RhdGUsIGNvbnRhaW5lcikge1xuICB2YXIgc3R5bGUgPSB7IG92ZXJmbG93OiAnaGlkZGVuJyB9O1xuXG4gIC8vIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gdGhlIGFjdHVhbCBgc3R5bGVgIGhlcmVcbiAgLy8gYmVjYXN1ZSB3ZSB3aWxsIG92ZXJyaWRlIGl0XG4gIHN0YXRlLnN0eWxlID0ge1xuICAgIG92ZXJmbG93OiBjb250YWluZXIuc3R5bGUub3ZlcmZsb3csXG4gICAgcGFkZGluZ1JpZ2h0OiBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0XG4gIH07XG5cbiAgaWYgKHN0YXRlLm92ZXJmbG93aW5nKSB7XG4gICAgLy8gdXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nXG4gICAgLy8gdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGhcbiAgICBzdHlsZS5wYWRkaW5nUmlnaHQgPSBwYXJzZUludCgoMCwgX3N0eWxlMi5kZWZhdWx0KShjb250YWluZXIsICdwYWRkaW5nUmlnaHQnKSB8fCAwLCAxMCkgKyAoMCwgX3Njcm9sbGJhclNpemUyLmRlZmF1bHQpKCkgKyAncHgnO1xuICB9XG5cbiAgKDAsIF9zdHlsZTIuZGVmYXVsdCkoY29udGFpbmVyLCBzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNvbnRhaW5lclN0eWxlKF9yZWYsIGNvbnRhaW5lcikge1xuICB2YXIgc3R5bGUgPSBfcmVmLnN0eWxlO1xuXG5cbiAgT2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBjb250YWluZXIuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gIH0pO1xufVxuLyoqXG4gKiBQcm9wZXIgc3RhdGUgbWFuYWdtZW50IGZvciBjb250YWluZXJzIGFuZCB0aGUgbW9kYWxzIGluIHRob3NlIGNvbnRhaW5lcnMuXG4gKlxuICogQGludGVybmFsIFVzZWQgYnkgdGhlIE1vZGFsIHRvIGVuc3VyZSBwcm9wZXIgc3R5bGluZyBvZiBjb250YWluZXJzLlxuICovXG5cbnZhciBNb2RhbE1hbmFnZXIgPSBmdW5jdGlvbiBNb2RhbE1hbmFnZXIoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIF9yZWYyJGhpZGVTaWJsaW5nTm9kZSA9IF9yZWYyLmhpZGVTaWJsaW5nTm9kZXMsXG4gICAgICBoaWRlU2libGluZ05vZGVzID0gX3JlZjIkaGlkZVNpYmxpbmdOb2RlID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIkaGlkZVNpYmxpbmdOb2RlLFxuICAgICAgX3JlZjIkaGFuZGxlQ29udGFpbmVyID0gX3JlZjIuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3csXG4gICAgICBoYW5kbGVDb250YWluZXJPdmVyZmxvdyA9IF9yZWYyJGhhbmRsZUNvbnRhaW5lciA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYyJGhhbmRsZUNvbnRhaW5lcjtcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxNYW5hZ2VyKTtcblxuICB0aGlzLmFkZCA9IGZ1bmN0aW9uIChtb2RhbCwgY29udGFpbmVyLCBjbGFzc05hbWUpIHtcbiAgICB2YXIgbW9kYWxJZHggPSBfdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG4gICAgdmFyIGNvbnRhaW5lcklkeCA9IF90aGlzLmNvbnRhaW5lcnMuaW5kZXhPZihjb250YWluZXIpO1xuXG4gICAgaWYgKG1vZGFsSWR4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgIH1cblxuICAgIG1vZGFsSWR4ID0gX3RoaXMubW9kYWxzLmxlbmd0aDtcbiAgICBfdGhpcy5tb2RhbHMucHVzaChtb2RhbCk7XG5cbiAgICBpZiAoX3RoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLmhpZGVTaWJsaW5ncykoY29udGFpbmVyLCBtb2RhbC5tb3VudE5vZGUpO1xuICAgIH1cblxuICAgIGlmIChjb250YWluZXJJZHggIT09IC0xKSB7XG4gICAgICBfdGhpcy5kYXRhW2NvbnRhaW5lcklkeF0ubW9kYWxzLnB1c2gobW9kYWwpO1xuICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgIH1cblxuICAgIHZhciBkYXRhID0ge1xuICAgICAgbW9kYWxzOiBbbW9kYWxdLFxuICAgICAgLy9yaWdodCBub3cgb25seSB0aGUgZmlyc3QgbW9kYWwgb2YgYSBjb250YWluZXIgd2lsbCBoYXZlIGl0cyBjbGFzc2VzIGFwcGxpZWRcbiAgICAgIGNsYXNzZXM6IGNsYXNzTmFtZSA/IGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pIDogW10sXG5cbiAgICAgIG92ZXJmbG93aW5nOiAoMCwgX2lzT3ZlcmZsb3dpbmcyLmRlZmF1bHQpKGNvbnRhaW5lcilcbiAgICB9O1xuXG4gICAgaWYgKF90aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93KSB7XG4gICAgICBzZXRDb250YWluZXJTdHlsZShkYXRhLCBjb250YWluZXIpO1xuICAgIH1cblxuICAgIGRhdGEuY2xhc3Nlcy5mb3JFYWNoKF9jbGFzczIuZGVmYXVsdC5hZGRDbGFzcy5iaW5kKG51bGwsIGNvbnRhaW5lcikpO1xuXG4gICAgX3RoaXMuY29udGFpbmVycy5wdXNoKGNvbnRhaW5lcik7XG4gICAgX3RoaXMuZGF0YS5wdXNoKGRhdGEpO1xuXG4gICAgcmV0dXJuIG1vZGFsSWR4O1xuICB9O1xuXG4gIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24gKG1vZGFsKSB7XG4gICAgdmFyIG1vZGFsSWR4ID0gX3RoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgaWYgKG1vZGFsSWR4ID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjb250YWluZXJJZHggPSBmaW5kQ29udGFpbmVyKF90aGlzLmRhdGEsIG1vZGFsKTtcbiAgICB2YXIgZGF0YSA9IF90aGlzLmRhdGFbY29udGFpbmVySWR4XTtcbiAgICB2YXIgY29udGFpbmVyID0gX3RoaXMuY29udGFpbmVyc1tjb250YWluZXJJZHhdO1xuXG4gICAgZGF0YS5tb2RhbHMuc3BsaWNlKGRhdGEubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcblxuICAgIF90aGlzLm1vZGFscy5zcGxpY2UobW9kYWxJZHgsIDEpO1xuXG4gICAgLy8gaWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsXG4gICAgLy8gY2xlYW4gdXAgdGhlIGNvbnRhaW5lclxuICAgIGlmIChkYXRhLm1vZGFscy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRhdGEuY2xhc3Nlcy5mb3JFYWNoKF9jbGFzczIuZGVmYXVsdC5yZW1vdmVDbGFzcy5iaW5kKG51bGwsIGNvbnRhaW5lcikpO1xuXG4gICAgICBpZiAoX3RoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cpIHtcbiAgICAgICAgcmVtb3ZlQ29udGFpbmVyU3R5bGUoZGF0YSwgY29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmhpZGVTaWJsaW5nTm9kZXMpIHtcbiAgICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLnNob3dTaWJsaW5ncykoY29udGFpbmVyLCBtb2RhbC5tb3VudE5vZGUpO1xuICAgICAgfVxuICAgICAgX3RoaXMuY29udGFpbmVycy5zcGxpY2UoY29udGFpbmVySWR4LCAxKTtcbiAgICAgIF90aGlzLmRhdGEuc3BsaWNlKGNvbnRhaW5lcklkeCwgMSk7XG4gICAgfSBlbHNlIGlmIChfdGhpcy5oaWRlU2libGluZ05vZGVzKSB7XG4gICAgICAvL290aGVyd2lzZSBtYWtlIHN1cmUgdGhlIG5leHQgdG9wIG1vZGFsIGlzIHZpc2libGUgdG8gYSBTUlxuICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLmFyaWFIaWRkZW4pKGZhbHNlLCBkYXRhLm1vZGFsc1tkYXRhLm1vZGFscy5sZW5ndGggLSAxXS5tb3VudE5vZGUpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmlzVG9wTW9kYWwgPSBmdW5jdGlvbiAobW9kYWwpIHtcbiAgICByZXR1cm4gISFfdGhpcy5tb2RhbHMubGVuZ3RoICYmIF90aGlzLm1vZGFsc1tfdGhpcy5tb2RhbHMubGVuZ3RoIC0gMV0gPT09IG1vZGFsO1xuICB9O1xuXG4gIHRoaXMuaGlkZVNpYmxpbmdOb2RlcyA9IGhpZGVTaWJsaW5nTm9kZXM7XG4gIHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cgPSBoYW5kbGVDb250YWluZXJPdmVyZmxvdztcbiAgdGhpcy5tb2RhbHMgPSBbXTtcbiAgdGhpcy5jb250YWluZXJzID0gW107XG4gIHRoaXMuZGF0YSA9IFtdO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTW9kYWxNYW5hZ2VyO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2FkZENsYXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hZGRDbGFzc1wiKSk7XG5cbmV4cG9ydHMuYWRkQ2xhc3MgPSBfYWRkQ2xhc3MuZGVmYXVsdDtcblxudmFyIF9yZW1vdmVDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVtb3ZlQ2xhc3NcIikpO1xuXG5leHBvcnRzLnJlbW92ZUNsYXNzID0gX3JlbW92ZUNsYXNzLmRlZmF1bHQ7XG5cbnZhciBfaGFzQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpKTtcblxuZXhwb3J0cy5oYXNDbGFzcyA9IF9oYXNDbGFzcy5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0ge1xuICBhZGRDbGFzczogX2FkZENsYXNzLmRlZmF1bHQsXG4gIHJlbW92ZUNsYXNzOiBfcmVtb3ZlQ2xhc3MuZGVmYXVsdCxcbiAgaGFzQ2xhc3M6IF9oYXNDbGFzcy5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkQ2xhc3M7XG5cbnZhciBfaGFzQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpKTtcblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7ZWxzZSBpZiAoISgwLCBfaGFzQ2xhc3MuZGVmYXVsdCkoZWxlbWVudCwgY2xhc3NOYW1lKSkgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJykgKyAnICcgKyBjbGFzc05hbWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gcmVwbGFjZUNsYXNzTmFtZShvcmlnQ2xhc3MsIGNsYXNzVG9SZW1vdmUpIHtcbiAgcmV0dXJuIG9yaWdDbGFzcy5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBjbGFzc1RvUmVtb3ZlICsgJyg/OlxcXFxzfCQpJywgJ2cnKSwgJyQxJykucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSBlbGVtZW50LmNsYXNzTmFtZSA9IHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUsIGNsYXNzTmFtZSk7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCByZXBsYWNlQ2xhc3NOYW1lKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgJycsIGNsYXNzTmFtZSkpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmFyaWFIaWRkZW4gPSBhcmlhSGlkZGVuO1xuZXhwb3J0cy5oaWRlU2libGluZ3MgPSBoaWRlU2libGluZ3M7XG5leHBvcnRzLnNob3dTaWJsaW5ncyA9IHNob3dTaWJsaW5ncztcblxudmFyIEJMQUNLTElTVCA9IFsndGVtcGxhdGUnLCAnc2NyaXB0JywgJ3N0eWxlJ107XG5cbnZhciBpc0hpZGFibGUgPSBmdW5jdGlvbiBpc0hpZGFibGUoX3JlZikge1xuICB2YXIgbm9kZVR5cGUgPSBfcmVmLm5vZGVUeXBlLFxuICAgICAgdGFnTmFtZSA9IF9yZWYudGFnTmFtZTtcbiAgcmV0dXJuIG5vZGVUeXBlID09PSAxICYmIEJMQUNLTElTVC5pbmRleE9mKHRhZ05hbWUudG9Mb3dlckNhc2UoKSkgPT09IC0xO1xufTtcblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24gc2libGluZ3MoY29udGFpbmVyLCBtb3VudCwgY2IpIHtcbiAgbW91bnQgPSBbXS5jb25jYXQobW91bnQpO1xuXG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG1vdW50LmluZGV4T2Yobm9kZSkgPT09IC0xICYmIGlzSGlkYWJsZShub2RlKSkge1xuICAgICAgY2Iobm9kZSk7XG4gICAgfVxuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGFyaWFIaWRkZW4oc2hvdywgbm9kZSkge1xuICBpZiAoIW5vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHNob3cpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICB9IGVsc2Uge1xuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhpZGVTaWJsaW5ncyhjb250YWluZXIsIG1vdW50Tm9kZSkge1xuICBzaWJsaW5ncyhjb250YWluZXIsIG1vdW50Tm9kZSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gYXJpYUhpZGRlbih0cnVlLCBub2RlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNob3dTaWJsaW5ncyhjb250YWluZXIsIG1vdW50Tm9kZSkge1xuICBzaWJsaW5ncyhjb250YWluZXIsIG1vdW50Tm9kZSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gYXJpYUhpZGRlbihmYWxzZSwgbm9kZSk7XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50ID0gcmVxdWlyZSgncHJvcC10eXBlcy1leHRyYS9saWIvY29tcG9uZW50T3JFbGVtZW50Jyk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvbmVudE9yRWxlbWVudCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9nZXRDb250YWluZXIgPSByZXF1aXJlKCcuL3V0aWxzL2dldENvbnRhaW5lcicpO1xuXG52YXIgX2dldENvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDb250YWluZXIpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSByZXF1aXJlKCcuL3V0aWxzL293bmVyRG9jdW1lbnQnKTtcblxudmFyIF9vd25lckRvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIGA8UG9ydGFsLz5gIGNvbXBvbmVudCByZW5kZXJzIGl0cyBjaGlsZHJlbiBpbnRvIGEgbmV3IFwic3VidHJlZVwiIG91dHNpZGUgb2YgY3VycmVudCBjb21wb25lbnQgaGllcmFyY2h5LlxuICogWW91IGNhbiB0aGluayBvZiBpdCBhcyBhIGRlY2xhcmF0aXZlIGBhcHBlbmRDaGlsZCgpYCwgb3IgalF1ZXJ5J3MgYCQuZm4uYXBwZW5kVG8oKWAuXG4gKiBUaGUgY2hpbGRyZW4gb2YgYDxQb3J0YWwvPmAgY29tcG9uZW50IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGBjb250YWluZXJgIHNwZWNpZmllZC5cbiAqL1xudmFyIFBvcnRhbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcnRhbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuX21vdW50T3ZlcmxheVRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuX292ZXJsYXlUYXJnZXQpIHtcbiAgICAgICAgX3RoaXMuX292ZXJsYXlUYXJnZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgX3RoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUgPSAoMCwgX2dldENvbnRhaW5lcjIuZGVmYXVsdCkoX3RoaXMucHJvcHMuY29udGFpbmVyLCAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKF90aGlzKS5ib2R5KTtcbiAgICAgICAgX3RoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQoX3RoaXMuX292ZXJsYXlUYXJnZXQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLl91bm1vdW50T3ZlcmxheVRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5fb3ZlcmxheVRhcmdldCkge1xuICAgICAgICBfdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZS5yZW1vdmVDaGlsZChfdGhpcy5fb3ZlcmxheVRhcmdldCk7XG4gICAgICAgIF90aGlzLl9vdmVybGF5VGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIF90aGlzLl9wb3J0YWxDb250YWluZXJOb2RlID0gbnVsbDtcbiAgICB9LCBfdGhpcy5fcmVuZGVyT3ZlcmxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvdmVybGF5ID0gIV90aGlzLnByb3BzLmNoaWxkcmVuID8gbnVsbCA6IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KF90aGlzLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgLy8gU2F2ZSByZWZlcmVuY2UgZm9yIGZ1dHVyZSBhY2Nlc3MuXG4gICAgICBpZiAob3ZlcmxheSAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5fbW91bnRPdmVybGF5VGFyZ2V0KCk7XG5cbiAgICAgICAgdmFyIGluaXRpYWxSZW5kZXIgPSAhX3RoaXMuX292ZXJsYXlJbnN0YW5jZTtcblxuICAgICAgICBfdGhpcy5fb3ZlcmxheUluc3RhbmNlID0gX3JlYWN0RG9tMi5kZWZhdWx0LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKF90aGlzLCBvdmVybGF5LCBfdGhpcy5fb3ZlcmxheVRhcmdldCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChpbml0aWFsUmVuZGVyICYmIF90aGlzLnByb3BzLm9uUmVuZGVyZWQpIHtcbiAgICAgICAgICAgIF90aGlzLnByb3BzLm9uUmVuZGVyZWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVW5yZW5kZXIgaWYgdGhlIGNvbXBvbmVudCBpcyBudWxsIGZvciB0cmFuc2l0aW9ucyB0byBudWxsXG4gICAgICAgIF90aGlzLl91bnJlbmRlck92ZXJsYXkoKTtcbiAgICAgICAgX3RoaXMuX3VubW91bnRPdmVybGF5VGFyZ2V0KCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuX3VucmVuZGVyT3ZlcmxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5fb3ZlcmxheVRhcmdldCkge1xuICAgICAgICBfcmVhY3REb20yLmRlZmF1bHQudW5tb3VudENvbXBvbmVudEF0Tm9kZShfdGhpcy5fb3ZlcmxheVRhcmdldCk7XG4gICAgICAgIF90aGlzLl9vdmVybGF5SW5zdGFuY2UgPSBudWxsO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmdldE1vdW50Tm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5fb3ZlcmxheVRhcmdldDtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuX3JlbmRlck92ZXJsYXkoKTtcbiAgfTtcblxuICBQb3J0YWwucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLl9yZW5kZXJPdmVybGF5KCk7XG4gIH07XG5cbiAgUG9ydGFsLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAodGhpcy5fb3ZlcmxheVRhcmdldCAmJiBuZXh0UHJvcHMuY29udGFpbmVyICE9PSB0aGlzLnByb3BzLmNvbnRhaW5lcikge1xuICAgICAgdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZS5yZW1vdmVDaGlsZCh0aGlzLl9vdmVybGF5VGFyZ2V0KTtcbiAgICAgIHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUgPSAoMCwgX2dldENvbnRhaW5lcjIuZGVmYXVsdCkobmV4dFByb3BzLmNvbnRhaW5lciwgKDAsIF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KSh0aGlzKS5ib2R5KTtcbiAgICAgIHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQodGhpcy5fb3ZlcmxheVRhcmdldCk7XG4gICAgfVxuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl91bnJlbmRlck92ZXJsYXkoKTtcbiAgICB0aGlzLl91bm1vdW50T3ZlcmxheVRhcmdldCgpO1xuICB9O1xuXG4gIFBvcnRhbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQb3J0YWw7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwuZGlzcGxheU5hbWUgPSAnUG9ydGFsJztcblBvcnRhbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIE5vZGUsIENvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci4gVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgUG9ydGFsIGNoaWxkcmVuXG4gICAqIGFwcGVuZGVkIHRvIGl0LlxuICAgKi9cbiAgY29udGFpbmVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX2NvbXBvbmVudE9yRWxlbWVudDIuZGVmYXVsdCwgX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksXG5cbiAgb25SZW5kZXJlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gUG9ydGFsO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGVcbn07XG5cbi8qKlxuICogSW50ZXJuYWwgaGVscGVyIGNvbXBvbmVudCB0byBhbGxvdyBhdHRhY2hpbmcgYSBub24tY29uZmxpY3RpbmcgcmVmIHRvIGFcbiAqIGNoaWxkIGVsZW1lbnQgdGhhdCBtYXkgbm90IGFjY2VwdCByZWZzLlxuICovXG5cbnZhciBSZWZIb2xkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVmSG9sZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWZIb2xkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZkhvbGRlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlZkhvbGRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9O1xuXG4gIHJldHVybiBSZWZIb2xkZXI7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5SZWZIb2xkZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWZIb2xkZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRGb2N1c0xpc3RlbmVyO1xuLyoqXG4gKiBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBhIGZvY3VzaW4gZXZlbnQgc28gdXNpbmcgY2FwdHVyZSBpcyBlYXNpZXN0IHdheSB0byBnZXQgYnViYmxpbmdcbiAqIElFOCBjYW4ndCBkbyBhZGRFdmVudExpc3RlbmVyLCBidXQgZG9lcyBoYXZlIG9uZm9jdXNpbiwgc28gd2UgdXNlIHRoYXQgaW4gaWU4XG4gKlxuICogV2Ugb25seSBhbGxvdyBvbmUgTGlzdGVuZXIgYXQgYSB0aW1lIHRvIGF2b2lkIHN0YWNrIG92ZXJmbG93c1xuICovXG5mdW5jdGlvbiBhZGRGb2N1c0xpc3RlbmVyKGhhbmRsZXIpIHtcbiAgdmFyIHVzZUZvY3VzaW4gPSAhZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcjtcbiAgdmFyIHJlbW92ZSA9IHZvaWQgMDtcblxuICBpZiAodXNlRm9jdXNpbikge1xuICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KCdvbmZvY3VzaW4nLCBoYW5kbGVyKTtcbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuZGV0YWNoRXZlbnQoJ29uZm9jdXNpbicsIGhhbmRsZXIpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVyLCB0cnVlKTtcbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVyLCB0cnVlKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHsgcmVtb3ZlOiByZW1vdmUgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudCA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudCcpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRPckVsZW1lbnQpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfY2FsY3VsYXRlUG9zaXRpb24gPSByZXF1aXJlKCcuL3V0aWxzL2NhbGN1bGF0ZVBvc2l0aW9uJyk7XG5cbnZhciBfY2FsY3VsYXRlUG9zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FsY3VsYXRlUG9zaXRpb24pO1xuXG52YXIgX2dldENvbnRhaW5lciA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0Q29udGFpbmVyJyk7XG5cbnZhciBfZ2V0Q29udGFpbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldENvbnRhaW5lcik7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IHJlcXVpcmUoJy4vdXRpbHMvb3duZXJEb2N1bWVudCcpO1xuXG52YXIgX293bmVyRG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoZSBQb3NpdGlvbiBjb21wb25lbnQgY2FsY3VsYXRlcyB0aGUgY29vcmRpbmF0ZXMgZm9yIGl0cyBjaGlsZCwgdG8gcG9zaXRpb25cbiAqIGl0IHJlbGF0aXZlIHRvIGEgYHRhcmdldGAgY29tcG9uZW50IG9yIG5vZGUuIFVzZWZ1bCBmb3IgY3JlYXRpbmcgY2FsbG91dHNcbiAqIGFuZCB0b29sdGlwcywgdGhlIFBvc2l0aW9uIGNvbXBvbmVudCBpbmplY3RzIGEgYHN0eWxlYCBwcm9wcyB3aXRoIGBsZWZ0YCBhbmRcbiAqIGB0b3BgIHZhbHVlcyBmb3IgcG9zaXRpb25pbmcgeW91ciBjb21wb25lbnQuXG4gKlxuICogSXQgYWxzbyBpbmplY3RzIFwiYXJyb3dcIiBgbGVmdGAsIGFuZCBgdG9wYCB2YWx1ZXMgZm9yIHN0eWxpbmcgY2FsbG91dCBhcnJvd3NcbiAqIGZvciBnaXZpbmcgeW91ciBjb21wb25lbnRzIGEgc2Vuc2Ugb2YgZGlyZWN0aW9uYWxpdHkuXG4gKi9cbnZhciBQb3NpdGlvbiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3NpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9zaXRpb24pO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy5nZXRUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gX3RoaXMucHJvcHMudGFyZ2V0O1xuXG4gICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicgPyB0YXJnZXQoKSA6IHRhcmdldDtcbiAgICAgIHJldHVybiB0YXJnZXRFbGVtZW50ICYmIF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0YXJnZXRFbGVtZW50KSB8fCBudWxsO1xuICAgIH07XG5cbiAgICBfdGhpcy5tYXliZVVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKHBsYWNlbWVudENoYW5nZWQpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfdGhpcy5nZXRUYXJnZXQoKTtcblxuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5zaG91bGRVcGRhdGVQb3NpdGlvbiAmJiB0YXJnZXQgPT09IF90aGlzLl9sYXN0VGFyZ2V0ICYmICFwbGFjZW1lbnRDaGFuZ2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMudXBkYXRlUG9zaXRpb24odGFyZ2V0KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBwb3NpdGlvbkxlZnQ6IDAsXG4gICAgICBwb3NpdGlvblRvcDogMCxcbiAgICAgIGFycm93T2Zmc2V0TGVmdDogbnVsbCxcbiAgICAgIGFycm93T2Zmc2V0VG9wOiBudWxsXG4gICAgfTtcblxuICAgIF90aGlzLl9uZWVkc0ZsdXNoID0gZmFsc2U7XG4gICAgX3RoaXMuX2xhc3RUYXJnZXQgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFBvc2l0aW9uLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlUG9zaXRpb24odGhpcy5nZXRUYXJnZXQoKSk7XG4gIH07XG5cbiAgUG9zaXRpb24ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCkge1xuICAgIHRoaXMuX25lZWRzRmx1c2ggPSB0cnVlO1xuICB9O1xuXG4gIFBvc2l0aW9uLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMuX25lZWRzRmx1c2gpIHtcbiAgICAgIHRoaXMuX25lZWRzRmx1c2ggPSBmYWxzZTtcbiAgICAgIHRoaXMubWF5YmVVcGRhdGVQb3NpdGlvbih0aGlzLnByb3BzLnBsYWNlbWVudCAhPT0gcHJldlByb3BzLnBsYWNlbWVudCk7XG4gICAgfVxuICB9O1xuXG4gIFBvc2l0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2hpbGRyZW4nLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHBvc2l0aW9uTGVmdCA9IF9zdGF0ZS5wb3NpdGlvbkxlZnQsXG4gICAgICAgIHBvc2l0aW9uVG9wID0gX3N0YXRlLnBvc2l0aW9uVG9wLFxuICAgICAgICBhcnJvd1Bvc2l0aW9uID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9zdGF0ZSwgWydwb3NpdGlvbkxlZnQnLCAncG9zaXRpb25Ub3AnXSk7XG5cbiAgICAvLyBUaGVzZSBzaG91bGQgbm90IGJlIGZvcndhcmRlZCB0byB0aGUgY2hpbGQuXG5cblxuICAgIGRlbGV0ZSBwcm9wcy50YXJnZXQ7XG4gICAgZGVsZXRlIHByb3BzLmNvbnRhaW5lcjtcbiAgICBkZWxldGUgcHJvcHMuY29udGFpbmVyUGFkZGluZztcbiAgICBkZWxldGUgcHJvcHMuc2hvdWxkVXBkYXRlUG9zaXRpb247XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgcmV0dXJuICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwgX2V4dGVuZHMoe30sIHByb3BzLCBhcnJvd1Bvc2l0aW9uLCB7XG4gICAgICAvLyBGSVhNRTogRG9uJ3QgZm9yd2FyZCBgcG9zaXRpb25MZWZ0YCBhbmQgYHBvc2l0aW9uVG9wYCB2aWEgYm90aCBwcm9wc1xuICAgICAgLy8gYW5kIGBwcm9wcy5zdHlsZWAuXG4gICAgICBwb3NpdGlvbkxlZnQ6IHBvc2l0aW9uTGVmdCxcbiAgICAgIHBvc2l0aW9uVG9wOiBwb3NpdGlvblRvcCxcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KShjbGFzc05hbWUsIGNoaWxkLnByb3BzLmNsYXNzTmFtZSksXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLnN0eWxlLCB7XG4gICAgICAgIGxlZnQ6IHBvc2l0aW9uTGVmdCxcbiAgICAgICAgdG9wOiBwb3NpdGlvblRvcFxuICAgICAgfSlcbiAgICB9KSk7XG4gIH07XG5cbiAgUG9zaXRpb24ucHJvdG90eXBlLnVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24odGFyZ2V0KSB7XG4gICAgdGhpcy5fbGFzdFRhcmdldCA9IHRhcmdldDtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcG9zaXRpb25MZWZ0OiAwLFxuICAgICAgICBwb3NpdGlvblRvcDogMCxcbiAgICAgICAgYXJyb3dPZmZzZXRMZWZ0OiBudWxsLFxuICAgICAgICBhcnJvd09mZnNldFRvcDogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3ZlcmxheSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgY29udGFpbmVyID0gKDAsIF9nZXRDb250YWluZXIyLmRlZmF1bHQpKHRoaXMucHJvcHMuY29udGFpbmVyLCAoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKHRoaXMpLmJvZHkpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSgoMCwgX2NhbGN1bGF0ZVBvc2l0aW9uMi5kZWZhdWx0KSh0aGlzLnByb3BzLnBsYWNlbWVudCwgb3ZlcmxheSwgdGFyZ2V0LCBjb250YWluZXIsIHRoaXMucHJvcHMuY29udGFpbmVyUGFkZGluZykpO1xuICB9O1xuXG4gIHJldHVybiBQb3NpdGlvbjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblBvc2l0aW9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgbm9kZSwgZWxlbWVudCwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci4gVGhlIGNoaWxkIHdpbGwgYmVcbiAgICogYmUgcG9zaXRpb25lZCBuZXh0IHRvIHRoZSBgdGFyZ2V0YCBzcGVjaWZpZWQuXG4gICAqL1xuICB0YXJnZXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogXCJvZmZzZXRQYXJlbnRcIiBvZiB0aGUgY29tcG9uZW50XG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gc3BhY2luZyBpbiBwaXhlbHMgYmV0d2VlbiBjb250YWluZXIgYm9yZGVyIGFuZCBjb21wb25lbnQgYm9yZGVyXG4gICAqL1xuICBjb250YWluZXJQYWRkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgLyoqXG4gICAqIEhvdyB0byBwb3NpdGlvbiB0aGUgY29tcG9uZW50IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXRcbiAgICovXG4gIHBsYWNlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddKSxcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHBvc2l0aW9uIHNob3VsZCBiZSBjaGFuZ2VkIG9uIGVhY2ggdXBkYXRlXG4gICAqL1xuICBzaG91bGRVcGRhdGVQb3NpdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sXG59O1xuXG5Qb3NpdGlvbi5kaXNwbGF5TmFtZSA9ICdQb3NpdGlvbic7XG5cblBvc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29udGFpbmVyUGFkZGluZzogMCxcbiAgcGxhY2VtZW50OiAncmlnaHQnLFxuICBzaG91bGRVcGRhdGVQb3NpdGlvbjogZmFsc2Vcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBvc2l0aW9uO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FsY3VsYXRlUG9zaXRpb247XG5cbnZhciBfb2Zmc2V0ID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvcXVlcnkvb2Zmc2V0Jyk7XG5cbnZhciBfb2Zmc2V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29mZnNldCk7XG5cbnZhciBfcG9zaXRpb24gPSByZXF1aXJlKCdkb20taGVscGVycy9xdWVyeS9wb3NpdGlvbicpO1xuXG52YXIgX3Bvc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc2l0aW9uKTtcblxudmFyIF9zY3JvbGxUb3AgPSByZXF1aXJlKCdkb20taGVscGVycy9xdWVyeS9zY3JvbGxUb3AnKTtcblxudmFyIF9zY3JvbGxUb3AyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2Nyb2xsVG9wKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gcmVxdWlyZSgnLi9vd25lckRvY3VtZW50Jyk7XG5cbnZhciBfb3duZXJEb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyRGltZW5zaW9ucyhjb250YWluZXJOb2RlKSB7XG4gIHZhciB3aWR0aCA9IHZvaWQgMCxcbiAgICAgIGhlaWdodCA9IHZvaWQgMCxcbiAgICAgIHNjcm9sbCA9IHZvaWQgMDtcblxuICBpZiAoY29udGFpbmVyTm9kZS50YWdOYW1lID09PSAnQk9EWScpIHtcbiAgICB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIHNjcm9sbCA9ICgwLCBfc2Nyb2xsVG9wMi5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKGNvbnRhaW5lck5vZGUpLmRvY3VtZW50RWxlbWVudCkgfHwgKDAsIF9zY3JvbGxUb3AyLmRlZmF1bHQpKGNvbnRhaW5lck5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBfZ2V0T2Zmc2V0ID0gKDAsIF9vZmZzZXQyLmRlZmF1bHQpKGNvbnRhaW5lck5vZGUpO1xuXG4gICAgd2lkdGggPSBfZ2V0T2Zmc2V0LndpZHRoO1xuICAgIGhlaWdodCA9IF9nZXRPZmZzZXQuaGVpZ2h0O1xuXG4gICAgc2Nyb2xsID0gKDAsIF9zY3JvbGxUb3AyLmRlZmF1bHQpKGNvbnRhaW5lck5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgc2Nyb2xsOiBzY3JvbGwgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VG9wRGVsdGEodG9wLCBvdmVybGF5SGVpZ2h0LCBjb250YWluZXIsIHBhZGRpbmcpIHtcbiAgdmFyIGNvbnRhaW5lckRpbWVuc2lvbnMgPSBnZXRDb250YWluZXJEaW1lbnNpb25zKGNvbnRhaW5lcik7XG4gIHZhciBjb250YWluZXJTY3JvbGwgPSBjb250YWluZXJEaW1lbnNpb25zLnNjcm9sbDtcbiAgdmFyIGNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lckRpbWVuc2lvbnMuaGVpZ2h0O1xuXG4gIHZhciB0b3BFZGdlT2Zmc2V0ID0gdG9wIC0gcGFkZGluZyAtIGNvbnRhaW5lclNjcm9sbDtcbiAgdmFyIGJvdHRvbUVkZ2VPZmZzZXQgPSB0b3AgKyBwYWRkaW5nIC0gY29udGFpbmVyU2Nyb2xsICsgb3ZlcmxheUhlaWdodDtcblxuICBpZiAodG9wRWRnZU9mZnNldCA8IDApIHtcbiAgICByZXR1cm4gLXRvcEVkZ2VPZmZzZXQ7XG4gIH0gZWxzZSBpZiAoYm90dG9tRWRnZU9mZnNldCA+IGNvbnRhaW5lckhlaWdodCkge1xuICAgIHJldHVybiBjb250YWluZXJIZWlnaHQgLSBib3R0b21FZGdlT2Zmc2V0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldExlZnREZWx0YShsZWZ0LCBvdmVybGF5V2lkdGgsIGNvbnRhaW5lciwgcGFkZGluZykge1xuICB2YXIgY29udGFpbmVyRGltZW5zaW9ucyA9IGdldENvbnRhaW5lckRpbWVuc2lvbnMoY29udGFpbmVyKTtcbiAgdmFyIGNvbnRhaW5lcldpZHRoID0gY29udGFpbmVyRGltZW5zaW9ucy53aWR0aDtcblxuICB2YXIgbGVmdEVkZ2VPZmZzZXQgPSBsZWZ0IC0gcGFkZGluZztcbiAgdmFyIHJpZ2h0RWRnZU9mZnNldCA9IGxlZnQgKyBwYWRkaW5nICsgb3ZlcmxheVdpZHRoO1xuXG4gIGlmIChsZWZ0RWRnZU9mZnNldCA8IDApIHtcbiAgICByZXR1cm4gLWxlZnRFZGdlT2Zmc2V0O1xuICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IGNvbnRhaW5lcldpZHRoKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lcldpZHRoIC0gcmlnaHRFZGdlT2Zmc2V0O1xuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uKHBsYWNlbWVudCwgb3ZlcmxheU5vZGUsIHRhcmdldCwgY29udGFpbmVyLCBwYWRkaW5nKSB7XG4gIHZhciBjaGlsZE9mZnNldCA9IGNvbnRhaW5lci50YWdOYW1lID09PSAnQk9EWScgPyAoMCwgX29mZnNldDIuZGVmYXVsdCkodGFyZ2V0KSA6ICgwLCBfcG9zaXRpb24yLmRlZmF1bHQpKHRhcmdldCwgY29udGFpbmVyKTtcblxuICB2YXIgX2dldE9mZnNldDIgPSAoMCwgX29mZnNldDIuZGVmYXVsdCkob3ZlcmxheU5vZGUpLFxuICAgICAgb3ZlcmxheUhlaWdodCA9IF9nZXRPZmZzZXQyLmhlaWdodCxcbiAgICAgIG92ZXJsYXlXaWR0aCA9IF9nZXRPZmZzZXQyLndpZHRoO1xuXG4gIHZhciBwb3NpdGlvbkxlZnQgPSB2b2lkIDAsXG4gICAgICBwb3NpdGlvblRvcCA9IHZvaWQgMCxcbiAgICAgIGFycm93T2Zmc2V0TGVmdCA9IHZvaWQgMCxcbiAgICAgIGFycm93T2Zmc2V0VG9wID0gdm9pZCAwO1xuXG4gIGlmIChwbGFjZW1lbnQgPT09ICdsZWZ0JyB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3NpdGlvblRvcCA9IGNoaWxkT2Zmc2V0LnRvcCArIChjaGlsZE9mZnNldC5oZWlnaHQgLSBvdmVybGF5SGVpZ2h0KSAvIDI7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICAgIHBvc2l0aW9uTGVmdCA9IGNoaWxkT2Zmc2V0LmxlZnQgLSBvdmVybGF5V2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvc2l0aW9uTGVmdCA9IGNoaWxkT2Zmc2V0LmxlZnQgKyBjaGlsZE9mZnNldC53aWR0aDtcbiAgICB9XG5cbiAgICB2YXIgdG9wRGVsdGEgPSBnZXRUb3BEZWx0YShwb3NpdGlvblRvcCwgb3ZlcmxheUhlaWdodCwgY29udGFpbmVyLCBwYWRkaW5nKTtcblxuICAgIHBvc2l0aW9uVG9wICs9IHRvcERlbHRhO1xuICAgIGFycm93T2Zmc2V0VG9wID0gNTAgKiAoMSAtIDIgKiB0b3BEZWx0YSAvIG92ZXJsYXlIZWlnaHQpICsgJyUnO1xuICAgIGFycm93T2Zmc2V0TGVmdCA9IHZvaWQgMDtcbiAgfSBlbHNlIGlmIChwbGFjZW1lbnQgPT09ICd0b3AnIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3NpdGlvbkxlZnQgPSBjaGlsZE9mZnNldC5sZWZ0ICsgKGNoaWxkT2Zmc2V0LndpZHRoIC0gb3ZlcmxheVdpZHRoKSAvIDI7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSAndG9wJykge1xuICAgICAgcG9zaXRpb25Ub3AgPSBjaGlsZE9mZnNldC50b3AgLSBvdmVybGF5SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3NpdGlvblRvcCA9IGNoaWxkT2Zmc2V0LnRvcCArIGNoaWxkT2Zmc2V0LmhlaWdodDtcbiAgICB9XG5cbiAgICB2YXIgbGVmdERlbHRhID0gZ2V0TGVmdERlbHRhKHBvc2l0aW9uTGVmdCwgb3ZlcmxheVdpZHRoLCBjb250YWluZXIsIHBhZGRpbmcpO1xuXG4gICAgcG9zaXRpb25MZWZ0ICs9IGxlZnREZWx0YTtcbiAgICBhcnJvd09mZnNldExlZnQgPSA1MCAqICgxIC0gMiAqIGxlZnREZWx0YSAvIG92ZXJsYXlXaWR0aCkgKyAnJSc7XG4gICAgYXJyb3dPZmZzZXRUb3AgPSB2b2lkIDA7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxjT3ZlcmxheVBvc2l0aW9uKCk6IE5vIHN1Y2ggcGxhY2VtZW50IG9mIFwiJyArIHBsYWNlbWVudCArICdcIiBmb3VuZC4nKTtcbiAgfVxuXG4gIHJldHVybiB7IHBvc2l0aW9uTGVmdDogcG9zaXRpb25MZWZ0LCBwb3NpdGlvblRvcDogcG9zaXRpb25Ub3AsIGFycm93T2Zmc2V0TGVmdDogYXJyb3dPZmZzZXRMZWZ0LCBhcnJvd09mZnNldFRvcDogYXJyb3dPZmZzZXRUb3AgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBvc2l0aW9uO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vZmZzZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29mZnNldFwiKSk7XG5cbnZhciBfb2Zmc2V0UGFyZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vZmZzZXRQYXJlbnRcIikpO1xuXG52YXIgX3Njcm9sbFRvcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2Nyb2xsVG9wXCIpKTtcblxudmFyIF9zY3JvbGxMZWZ0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zY3JvbGxMZWZ0XCIpKTtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlXCIpKTtcblxuZnVuY3Rpb24gbm9kZU5hbWUobm9kZSkge1xuICByZXR1cm4gbm9kZS5ub2RlTmFtZSAmJiBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uKG5vZGUsIG9mZnNldFBhcmVudCkge1xuICB2YXIgcGFyZW50T2Zmc2V0ID0ge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwXG4gIH0sXG4gICAgICBvZmZzZXQ7IC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG4gIC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXG4gIGlmICgoMCwgX3N0eWxlLmRlZmF1bHQpKG5vZGUsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgb2Zmc2V0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQgfHwgKDAsIF9vZmZzZXRQYXJlbnQuZGVmYXVsdCkobm9kZSk7XG4gICAgb2Zmc2V0ID0gKDAsIF9vZmZzZXQuZGVmYXVsdCkobm9kZSk7XG4gICAgaWYgKG5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdodG1sJykgcGFyZW50T2Zmc2V0ID0gKDAsIF9vZmZzZXQuZGVmYXVsdCkob2Zmc2V0UGFyZW50KTtcbiAgICBwYXJlbnRPZmZzZXQudG9wICs9IHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkob2Zmc2V0UGFyZW50LCAnYm9yZGVyVG9wV2lkdGgnKSwgMTApIC0gKDAsIF9zY3JvbGxUb3AuZGVmYXVsdCkob2Zmc2V0UGFyZW50KSB8fCAwO1xuICAgIHBhcmVudE9mZnNldC5sZWZ0ICs9IHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkob2Zmc2V0UGFyZW50LCAnYm9yZGVyTGVmdFdpZHRoJyksIDEwKSAtICgwLCBfc2Nyb2xsTGVmdC5kZWZhdWx0KShvZmZzZXRQYXJlbnQpIHx8IDA7XG4gIH0gLy8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIG5vZGUgbWFyZ2luc1xuXG5cbiAgcmV0dXJuICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIG9mZnNldCwge1xuICAgIHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSAocGFyc2VJbnQoKDAsIF9zdHlsZS5kZWZhdWx0KShub2RlLCAnbWFyZ2luVG9wJyksIDEwKSB8fCAwKSxcbiAgICBsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0gKHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkobm9kZSwgJ21hcmdpbkxlZnQnKSwgMTApIHx8IDApXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kczsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBvZmZzZXRQYXJlbnQ7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX3N0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVcIikpO1xuXG5mdW5jdGlvbiBub2RlTmFtZShub2RlKSB7XG4gIHJldHVybiBub2RlLm5vZGVOYW1lICYmIG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0UGFyZW50KG5vZGUpIHtcbiAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShub2RlKSxcbiAgICAgIG9mZnNldFBhcmVudCA9IG5vZGUgJiYgbm9kZS5vZmZzZXRQYXJlbnQ7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBub2RlTmFtZShub2RlKSAhPT0gJ2h0bWwnICYmICgwLCBfc3R5bGUuZGVmYXVsdCkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbFRvcDtcblxudmFyIF9pc1dpbmRvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNXaW5kb3dcIikpO1xuXG5mdW5jdGlvbiBzY3JvbGxUb3Aobm9kZSwgdmFsKSB7XG4gIHZhciB3aW4gPSAoMCwgX2lzV2luZG93LmRlZmF1bHQpKG5vZGUpO1xuICBpZiAodmFsID09PSB1bmRlZmluZWQpIHJldHVybiB3aW4gPyAncGFnZVhPZmZzZXQnIGluIHdpbiA/IHdpbi5wYWdlWE9mZnNldCA6IHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCA6IG5vZGUuc2Nyb2xsTGVmdDtcbiAgaWYgKHdpbikgd2luLnNjcm9sbFRvKHZhbCwgJ3BhZ2VZT2Zmc2V0JyBpbiB3aW4gPyB3aW4ucGFnZVlPZmZzZXQgOiB3aW4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCk7ZWxzZSBub2RlLnNjcm9sbExlZnQgPSB2YWw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXI7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4vLyBNb3N0bHkgdGFrZW4gZnJvbSBSZWFjdFByb3BUeXBlcy5cblxuZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBjb21wb25lbnROYW1lU2FmZSA9IGNvbXBvbmVudE5hbWUgfHwgJzw8YW5vbnltb3VzPj4nO1xuICAgIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdSZXF1aXJlZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lU2FmZSArICdgIHdhcyBub3Qgc3BlY2lmaWVkICcgKyAoJ2luIGAnICsgY29tcG9uZW50TmFtZVNhZmUgKyAnYC4nKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDYgPyBfbGVuIC0gNiA6IDApLCBfa2V5ID0gNjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gNl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRlLmFwcGx5KHVuZGVmaW5lZCwgW3Byb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZVNhZmUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWVTYWZlXS5jb25jYXQoYXJncykpO1xuICB9XG5cbiAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuXG4gIHJldHVybiBjaGFpbmVkQ2hlY2tUeXBlO1xufSJdLCJzb3VyY2VSb290IjoiIn0=