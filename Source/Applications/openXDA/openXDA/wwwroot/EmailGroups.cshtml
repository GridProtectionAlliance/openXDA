@*//******************************************************************************************************
//  EmailGroups.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  09/12/2016 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@

@using System.Collections.Generic
@using System.Net.Http
@using System.Text.RegularExpressions
@using GSF.Web
@using GSF.Web.Model
@using openXDA
@using openXDA.Model
@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Layout.cshtml";
    ViewBag.Title = "Email Groups";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "EmailGroupID", "Email Group", "text-Left" },
        new[] { "EmailTypeID", "EmailType", "text-left"},

    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Email Group Type";
}

@helper BodyRows()
{
    <td width="25%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: lookupEmailGroupName(EmailGroupID), click: $parent.viewPageRecord"></button></td>
    <td width="25%" class="text-left valign-middle" data-bind="text: EmailTypeID"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddSelectField<EmailGroupType, EmailGroup>("EmailGroupID", "ID", "Name"))
    @Raw(dataContext.AddSelectField<EmailGroupType, EmailType>("EmailTypeID", "ID"))
    <div class="form-group">
        <button class="btn btn-primary" data-bind="visible: $parent.recordMode()!==RecordMode.View, click: addNewGroup">Add New Group</button>
    </div>

    <div id="textArea" class="form-group" data-bind="visible: false">
        <div class="form-group">
            <div id="xslID" style="display: none"></div>
            <label>New Group Name:</label>
            <input id="groupName" class="form-control" type="text" />
        </div>
        <button id="saveNew" class="btn btn-primary pull-right" data-bind=" click: addGroup">Add Group</button>
    </div>

}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<EmailGroupType, DataHub>(ViewBag))
        @Raw(Model.RenderAbstract<EmailGroup>("Name", "ID", "lookupEmailGroupName", "emailGroupName"))

        $(function () {
        });

        function addNewGroup() {
            $('#groupName').val('');
            $('#textArea').slideToggle();
        }

        function addGroup() {
            var record = { Name: $('#groupName').val() };

            dataHub.addNewEmailGroup(record).done(function (data) {
                dataHub.queryEmailGroup("Name", true, 1, 10000000000, '%').done(function (data2) {
                    $('#selectEmailGroupID').children().remove();
                    $.each(data2, function (i, d) {
                        $('#selectEmailGroupID').append(new Option(d.Name, d.ID));
                    });
                });

                $('#templateName').val('');
                $('#template').val('');
                $('#textArea').slideToggle();
            });
        }

        $('#addNewEditDialog').on('shown.bs.modal', function () {
            dataHub.queryEmailGroup("Name", true, 1, 10000000000, '%').done(function (data2) {
                $('#selectEmailGroupID').children().remove();
                $.each(data2, function (i, d) {
                    $('#selectEmailGroupID').append(new Option(d.Name, d.ID));
                });
            });
        });

        function viewTemplate(data) {
            window.open("@Url.Content("~/EmailTemplateHandler.ashx")?EventID=" + $("#eventID").val() + "&TemplateID=" + data.XSLTemplateID);
        }
    </script>
}
