@*//******************************************************************************************************
    //  Index.cshtml - Gbtc
    //
    //  Copyright © 2017, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
    //  not use this file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  04/27/2017 - Billy Ernest
    //       Generated original version of source code.
    //
    //*******************************************************************************************************@
@using GSF.Data.Model
@using GSF.Web.Model
@using GSF.Web
@using XDAAlarmCreationApp.Model
@using System.Text.RegularExpressions
@using Newtonsoft.Json
@using System.Net.Http
@using GSF.Web.Model

@inherits ExtendedTemplateBase<AppModel>
@{
    ViewBag.Title = "Preview";
    Layout = "Layout.cshtml";

    DataContext dataContext = ViewBag.DataContext;

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("ID"))
    {
        ViewBag.ID = int.Parse(parameters["ID"]);
    }
    if (parameters.ContainsKey("Name"))
    {
        ViewBag.Name = parameters["Name"];
    }

    IEnumerable<Result> results = dataContext.Table<Result>().QueryRecords("Name");

    var colors = dataContext.Table<ColorGradients>().QueryRecords("LoadOrder");

    ViewBag.ShowPageHeader = false;
}
@section StyleSheets{ 
<style>
    #wrapper{
        height: 100%;
        width: 100%;
    }

    #map{
        height: 100%;
        width: 100%;
    }
    #list{
        height: 100%;
        width: auto;
        float: left;
        background-color: white;
        position: fixed;
    }
    #slideBtn{
        position: absolute; 
        left:100%; 
        width: 20px;
        padding: 0;
        background: white;
        top: 40px;
    }
    .list-group, .list-group-item{
        width: 100%;
        text-align: left;
    }
    .list-group{
        overflow-y: auto;
    }

    .legend {
        line-height: 18px;
        color: #555;
    }
    .legend i {
        width: 18px;
        height: 18px;
        float: left;
        margin-right: 8px;
        opacity: 0.7;
    }
    .info {
        padding: 6px 8px;
        font: 14px/16px Arial, Helvetica, sans-serif;
        background: white;
        background: rgba(255,255,255,0.8);
        box-shadow: 0 0 15px rgba(0,0,0,0.2);
        border-radius: 5px;
    }
    .leaflet-container {
        background: #777777;
    }
</style>
}
<div id="wrapper">
    <div id="map"></div>
</div>
<script>
    var viewModel;
    var colors = @Html.Raw(JsonConvert.SerializeObject(colors)) ;
    var markerGroup = null;
    var lineGroup = null;
    var markers = [];
    var line = [];
    var mymap;
    var legend;

    $('#crumbs').append('<a style="color: #020c6f" href="/Results.cshtml" >Results</a> &gt;')
    $('#bodyContainer').removeClass('container');

    $(function () {
        $('#bodyContainer').height($(window).innerHeight() - $('#navBar').outerHeight() - $('#companySelect').outerHeight() - 50 - $($('table')[0]).outerHeight());

        mymap = L.map('map', {
            zoomControl: false
        }).setView([35.9606, -83.9207], 14);

        // Uncomment this to get map layer, if lat long can be accurately calculated
        L.tileLayer(
            'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            }).addTo(mymap);

        var minMax = L.control({position: 'topright'});
        minMax.onAdd = function (map) {
            var div = L.DomUtil.create('div', '');
            div.innerHTML = '<div><select class="form-control" id="resultSelect" onchange="showResults()" multiple="multiple">' +
            @foreach(Result result in results)
            {
                @Html.Raw("'<option value=\"" + result.ID + "\" "+ (ViewBag.ID == result.ID? "selected=\"selected\"" : "") + ">"+ result.Name + "</option>' + ");
            }

            '</select></div>';


            div.innerHTML += '<div><select class="form-control" id="minMaxSelect" onchange="showResults()"><option value="1">Min</option><option value="2">Max</option></select></div>';
            div.firstChild.onmousedown = div.firstChild.ondblclick = L.DomEvent.stopPropagation;
            return div;
        };
        minMax.addTo(mymap);

    //    var results = L.control({position: 'topleft'});
    //    results.onAdd = function (map) {
    //        var div = L.DomUtil.create('div', '');
    //    div.firstChild.onmousedown = div.firstChild.ondblclick = L.DomEvent.stopPropagation;
    //    return div;
    //};
    //results.addTo(mymap);

    $('#resultSelect').multiselect({includeSelectAllOption: true});
    $(window).one("hubConnected", function(){
        showResults();
    });

    });


    function getLeafletLocationPopup(dataPoint) {
        var popup;

        popup = "<table><tr><td>From Node:&nbsp;</td><td style='text-align: right'>&nbsp;" + dataPoint.FromNodeName+  "&nbsp;</td></tr>";
        popup += "<tr><td>To Node:&nbsp;</td><td style='text-align: right'>&nbsp;" + dataPoint.ToNodeName +  "&nbsp;</td></tr>";


        $.each(Object.keys(dataPoint.LineDataJson), function(index, key){
            popup += "<tr><td>" + key + "&nbsp;</td><td style='text-align: right'> &nbsp;" + dataPoint.LineDataJson[key] + "&nbsp;</td></tr>";
        });


        $.each(Object.keys(dataPoint.ResultDataJson), function(index, key){
            popup += "<tr><td>" + key + "&nbsp;</td><td style='text-align: right'> &nbsp;" + dataPoint.ResultDataJson[key] + "&nbsp;</td></tr>";
        });
        popup += "</table>";

        return popup;
    }

    function showResults() {
        dataHub.getLineSegmentsForMap($('#resultSelect').val(), $('#minMaxSelect').val()).done(function(data){
            updateMap(data);
        });
    }

    function updateMap(data){
        var json = JSON.parse(data);

        if(legend)
            legend.remove();
        $.each(line, function(i,l){ l.remove();});
        line = [];
        $.each(json, function (index, d) {
            // add color or weight to line with the object
            d.LineDataJson = JSON.parse(d.LineData);
            d.ResultDataJson = JSON.parse(d.ResultList);
            var width = 3;
            var color = getColor(parseFloat(d.Result));
            if(d.LineDataJson.hasOwnProperty("PhaseCount")){
                width = parseInt(d.LineDataJson["PhaseCount"])
                if(width < 3){
                    color = 'black';
                    d.Result = 0;
                }
            }
            var polyline = L.polyline([[parseFloat(d.FromLatitude), parseFloat(d.FromLongitude)], [parseFloat(d.ToLatitude), parseFloat(d.ToLongitude)]], { color:color, className: d.ID.toString(), weight: width }).addTo(mymap).bindPopup(getLeafletLocationPopup(d), {autoPan: false});
            line.push(polyline);

        });
        lineGroup = new L.featureGroup(line);
        mymap.fitBounds(lineGroup.getBounds());
        legend = L.control({ position: 'bottomright' });

        legend.onAdd = function (map) {

            var div = L.DomUtil.create('div', 'info legend');
            //    grades = [5, 4, 3, 2, 1];

            //// loop through our density intervals and generate a label with a colored square for each interval
            for (var i = 0; i < colors.length; i++) {
                div.innerHTML +=
                    '<div style="margin-bottom: 5px; vertical-align: middle"><i style="background: #' + colors[i].HexColor + '"></i><span>' + colors[i].Name + '</span></div>';
            }
            return div;
        };

        legend.addTo(mymap);
    }

    function getColor(number) {
        if(number == null || isNaN(number) || number == 0)
            return 'black';

        @foreach (var color in colors)
        {
            if (color.RangeValue.Contains("-"))
            {
                string lowerValue = color.RangeValue.Split('-')[0];
                string upperValue = color.RangeValue.Split('-')[1];
                string jscode =
                @"if(number >= " +lowerValue + @" && number < " + upperValue + @" )
                    return '#"+ color.HexColor + @"';
                ";
                @Html.Raw(jscode);

            }
            else
            {
                string jscode =
                @"if(number " + color.RangeValue + @" )
                    return '#"+ color.HexColor + @"';
                ";
                @Html.Raw(jscode);
            }
        }
    }
</script>