@*//******************************************************************************************************
//  IndividualResult.cshtml - Gbtc
//
//  Copyright © 2017, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  05/02/2017 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@
@using XDAAlarmCreationApp.Model
@using GSF.Web.Model
@using GSF.Web
@using XDAAlarmCreationApp
@using System.Net.Http

@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    int resultId = int.Parse(parameters["ResultID"] ?? "-1");
    string resultName = parameters["Title"];

    Layout = "Layout.cshtml";
    string title = ViewBag.CustomTitle = "Individual Results for " + resultName;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Node", "Node", "text-Left" }


    };

    ViewBag.AddNewEditTitle = "Result";
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.ShowSearchFilter = true;
    ViewBag.BreadCrumbText = "Individual Results".JavaScriptEncode();
    ViewBag.HideAddNewButton = true;
}

@section StyleSheets{
    <style>
        /*.modal-lg{
            width: 75%;
        }*/
    </style>    
}

@helper BodyRows()
{
    <td width="18%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Node, click: $parent.viewPageRecord"></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        @*<button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>*@
    </td>

}
@helper AddNewEditDialog(DataContext dataContext)
{
    IEnumerable<ResultsToDisplay> linesToDisplay = dataContext.Table<ResultsToDisplay>().QueryRecordsWhere("Display = 1");

    @Raw(dataContext.AddInputField<IndividualResultView>("Node", customDataBinding: "attr: {disabled: true}"))
    foreach (ResultsToDisplay lcd in linesToDisplay)
    {
            @Raw(dataContext.AddInputField<IndividualResultView>(lcd.Name, fieldLabel: lcd.Label))
    }

}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<IndividualResult, DataHub>(ViewBag, "Node", null, resultId))
        $('#crumbs').append('<a style="color: #020c6f" href="/Results.cshtml" >Results</a> &gt;')
    </script>
}