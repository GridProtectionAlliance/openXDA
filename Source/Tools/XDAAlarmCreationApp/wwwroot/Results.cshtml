@*//******************************************************************************************************
//  Results.cshtml - Gbtc
//
//  Copyright © 2017, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  05/02/2017 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@
@using XDAAlarmCreationApp.Model
@using GSF.Web.Model
@using GSF.Web
@using XDAAlarmCreationApp
@using System.IO
@using System.Text
@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;
    StringBuilder pageControlScripts = ViewBag.PageControlScripts;



    Layout = "Layout.cshtml";
    string title = ViewBag.CustomTitle = "DRIVE Runs";
    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-Left" },
        new[] { null, "", "text-Left" },
        new[] { null, "", "text-Left" },
        new[] { null, "", "text-Left" },
        new[] { "Post", "Posted", "text-Left" },

    };

    ViewBag.AddNewEditTitle = "DRIVE Run";
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.ShowSearchFilter = true;

    ViewBag.path = Directory.GetCurrentDirectory().JavaScriptEncode();
    ViewBag.DirectoryAllowCreateFolder = false;
}
@helper BodyRows()
{
    <td width="80%" class="text-left valign-middle" nowrap><a class="btn btn-link" data-bind="text: Name, attr: {href: '/Preview.cshtml?ID=' + ID + '&Name=' +Name}"></a></td>
    <td width="5%" class="text-center valign-middle"><a data-bind="attr: { href: '/NodePoint.cshtml?ResultID=' + ID + '&Title=' + Name }, enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Node Points&nbsp;&nbsp;<span class="badge" data-bind="text: getNodePointCount(ID, $($element)), attr: {id: 'nodePointCount' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle"><a data-bind="attr: { href: '/LineSegment.cshtml?ResultID=' + ID + '&Title=' + Name }, enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Line Segements&nbsp;&nbsp;<span class="badge" data-bind="text: getLineSegmentCount(ID, $($element)), attr: {id: 'lineSegmentCount' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle"><a data-bind="attr: { href: '/IndividualResult.cshtml?ResultID=' + ID + '&Title=' + Name }, enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Results&nbsp;&nbsp;<span class="badge" data-bind="text: getIndividualResultCount(ID, $($element)), attr: {id: 'individualResultCount' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle" data-bind="text: Post"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}

@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField("Name", true))
    <div data-bind="visible: RecordMode.AddNew != $parent.recordMode()">
        @Raw(dataContext.AddCheckBoxField("Post"))
    </div>

    <div data-bind="visible: RecordMode.AddNew == $parent.recordMode()">
        @Raw(dataContext.AddInputField("FilePrefix", true, fieldLabel: "File Prefix"))
        <div class="row" style="margin-top: 10px">
            <div class="col-md-12">
                <label for="directory">File Directory:</label>
                <div class="input-group">
                    <input class="form-control" type="text" id="directory" value="@Raw(ViewBag.path)" />
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-default" data-toggle="modal" data-target="#directoryBrowser" hub-dependent><span class="glyphicon glyphicon-option-horizontal"></span></button>
                    </span>
                </div>
            </div>
        </div>
    </div>
}
<div id="massImportModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Mass Import</h4>
            </div>
            <div class="modal-body">
                <div class="row" style="margin-top: 10px">
                    <div class="col-md-12">
                        <label for="directory">File Directory:</label>
                        <div class="input-group">
                            <input class="form-control" type="text" id="directory" value="@Raw(Directory.GetCurrentDirectory())" />
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-default" data-toggle="modal" data-target="#directoryBrowser" hub-dependent><span class="glyphicon glyphicon-option-horizontal"></span></button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="massImport()" data-dismiss="modal">Process</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<div id="conflictsModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Mass Import Conflicts</h4>
            </div>
            <div class="modal-body">
                <table id="conflicts">
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="updateWaitFlag()" data-dismiss="modal">Continue</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>


@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@Include("DirectoryBrowser.cshtml")
<div id="notify">
    <h4 id="name"></h4>
    <div id="progress" class="progress"></div>
</div>

@section Scripts{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<Result, DataHub>(ViewBag))

        var conflictedGroups;

        $(function () {
            $('#pageControlsRow').prepend('<button class="btn btn-sm btn-primary" data-toggle="modal" data-target="#massImportModal"><span class="glyphicon glyphicon-upload"></span>&nbsp;&nbsp;Mass&nbsp;Import</button>');
            $('#notify').puinotify({ position: 'bottom' });

            dataHubClient.updateProgressBar = function (name, update) {
                $('#name').text(name);
                $('#progress').html('<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="' + update + '" aria-valuemin="0" aria-valuemax="100" style="width:' + update + '%">' + update + '%</div>');
            }

            dataHubClient.notifyUserOfGroups = function (groups) {
                conflictedGroups = groups;
                $('#conflicts').children().remove();
                $('#conflicts').append('<tr><th style="width: 70%">Name</th><th style="width: 10%">Rename</th><th style="width: 10%">Overwrite</th><th style="width: 10%">Skip</th></tr>');
                $.each(groups, function (index, group) {
                    $('#conflicts').append('<tr id="row' + group.Name + '"><td><input class="form-control" id="name' + group.Name + '" value="' + group.Name + '"/></td><td><input class="form-control" type="radio" name="radio' + group.Name + '" id="radioEdit' + group.Name + '" checked="checked"/></td><td><input class="form-control" type="radio" name="radio' + group.Name + '" id="radioOverwrite' + group.Name + '"/></td><td><input class="form-control" type="radio" name="radio' + group.Name + '" id="radioSkip' + group.Name + '"  /></td></tr>');
                });
                $("#conflictsModal").modal({ show: true });
            }

        });

        $(viewModel).on("beforeSave", function (event, observableRecord) {
            // Get file info and save file contents
            if (viewModel.recordMode() == RecordMode.AddNew) {
                observableRecord.Directory = $('#directory').val();
            }
            else {
                observableRecord.FilePrefix = "";
                observableRecord.Directory = "";


            }

        });

        $("#addNewEditDialog").on("show.bs.modal", function () {
            $('input[id=directory]').val('@ViewBag.path');
            if (viewModel.recordMode() != RecordMode.AddNew) {
                // Hack validation if these fields are not being used.
                viewModel.currentRecord().FilePrefix('a');
                
            }

        });

        function getNodePointCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryNodePointCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

        function getLineSegmentCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryLineSegmentCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

        function getIndividualResultCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryIndividualResultCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

        function massImport() {
            $('#notify').puinotify('show');

            dataHub.massAddNewResult($('#directory').val())
                .done(function () { $('#notify').puinotify('hide'); viewModel.queryPageRecords(); })
                .fail(function (msg) { $('#notify').puinotify('update', '<span>Sync Failed - : ' + msg.message + '</span>') });
        }

        function updateWaitFlag() {
            $.each(conflictedGroups, function (index, group) {
                group.NewName = $('#name' + group.Name).val();
                group.Skip = $('#radioSkip' + group.Name).prop('checked');
                group.Overwrite = $('#radioOverwrite' + group.Name).prop('checked');
                group.Edit = $('#radioEdit' + group.Name).prop('checked');
            });
            dataHub.updateMassImportWaitFlag(true, conflictedGroups);
        }

    </script>
}