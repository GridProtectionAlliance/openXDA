@*//******************************************************************************************************
//  Settings.cshtml - Gbtc
//
//  Copyright © 2017, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  05/02/2017 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@
@using XDAAlarmCreationApp.Model
@using GSF.Web.Model
@using GSF.Web
@using XDAAlarmCreationApp
@using System.Collections.Generic;

@inherits ExtendedTemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;

    Layout = "Layout.cshtml";
    string title = ViewBag.CustomTitle = "Settings";
    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Label", "Label", "text-Left" }
    };

    ViewBag.AddNewEditTitle = "Setting";
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.ShowSearchFilter = true;
    ViewBag.HideAddNewButton = true;
    IEnumerable<Setting> settingNames = dataContext.Table<Setting>().QueryRecords();

}
@helper BodyRows()
{
    <td width="90%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Label, click: $parent.viewPageRecord"></button></td>
    <td width="5%" class="text-center valign-middle"><a data-bind="attr: { href: '/'+ Name+'.cshtml' }, enable: $parent.dataHubIsConnected" class="btn btn-default  form-control">Values&nbsp;&nbsp;<span class="badge" data-bind="text: window['get'+Name+'Count'](ID, $($element)), attr: {id: Name + 'Count' + ID}">0</span></a></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        @*<button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>*@
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<Setting>("Name"))

}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<Setting, DataHub>(ViewBag, "Label"))

        $(function () {
        });

        @foreach(Setting setting in settingNames)
        {
            string jscode = @"
                function get" + setting.Name +@"Count(sourceID, element) {
                    if (viewModel.dataHubIsConnected()) {
                        dataHub.query" + setting.Name + @"Count(null).done(function (count) {
                            $(element).text(count.toString());
                        });
                    }

                    return element.text();
                }";
            @Html.Raw(jscode);
        }


    </script>
}