@*//******************************************************************************************************
//  Index.cshtml - Gbtc
//
//  Copyright © 2017, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  05/02/2017 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@
@using System
@using System.Threading
@using GSF
@using GSF.Data
@using GSF.Identity
@using GSF.IO
@using GSF.Reflection
@using RazorEngine.Templating
@using GSF.Web
@using XDAAlarmCreationApp.Model
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Home";

    Version assemblyVersionInfo = AssemblyInfo.EntryAssembly.Version;
    string applicationVersion = assemblyVersionInfo.Major + "." + assemblyVersionInfo.Minor + "." + assemblyVersionInfo.Build;
    string databaseType;
    string databaseName;

    try
    {
        using (AdoDataConnection database = new AdoDataConnection("systemSettings"))
        {
            databaseType = database.DatabaseType.ToString();

            try
            {
                if (database.IsSqlite || database.IsJetEngine)
                {
                    // Extract database file name from connection string for file centric databases
                    databaseName = FilePath.GetFileName(database.Connection.ConnectionString.ParseKeyValuePairs()["Data Source"]);
                }
                else if (database.IsOracle)
                {
                    // Extract user name from connection string for Oracle databases
                    databaseName = database.Connection.ConnectionString.ParseKeyValuePairs()["User Id"];
                }
                else
                {
                    databaseName = database.Connection.Database;
                }
            }
            catch
            {
                // Fall back on database name if file anything fails
                databaseName = database.Connection.Database;
            }
        }
    }
    catch
    {
        databaseType = "Not Available";
        databaseName = "Not Available";
    }

}
@section StyleSheets {
    <style>
        /* Auto font resize CSS for system health window - targeting fixed 80 char width without wrap and
           allowing for responsive screen rearrangement when window is col-**-8 and on the right */
        @@media screen {
            .performance-statistics {
                font-size: 5.25px;
            }
        }

        @@media screen and (min-width: 430px) {
            .performance-statistics {
                font-size: 7px;
            }
        }

        @@media screen and (min-width: 470px) {
            .performance-statistics {
                font-size: 8px;
            }
        }

        @@media screen and (min-width: 515px) {
            .performance-statistics {
                font-size: 9px;
            }
        }

        @@media screen and (min-width: 550px) {
            .performance-statistics {
                font-size: 10px;
            }
        }

        @@media screen and (min-width: 600px) {
            .performance-statistics {
                font-size: 11px;
            }
        }

        @@media screen and (min-width: 635px) {
            .performance-statistics {
                font-size: 12px;
            }
        }

        @@media screen and (min-width: 685px) {
            .performance-statistics {
                font-size: 13px;
            }
        }

        @@media screen and (min-width: 725px) {
            .performance-statistics {
                font-size: 14px;
            }
        }

        @@media screen and (min-width: 768px) {
            .performance-statistics {
                font-size: 8px;
            }
        }

        @@media screen and (min-width: 992px) {
            .performance-statistics {
                font-size: 12px;
            }
        }

        @@media screen and (min-width: 1200px) {
            .performance-statistics {
                font-size: 14px;
            }
        }

        .badge-fixed {
            display: inline-block;
            width: 150px;
        }
    </style>
}
@section Scripts {
    <script>
        function updateTimestamps() {
            $('#localTime').html(new Date().formatDate());

            if (hubIsConnected) {
                serviceHub.getServerTime().done(function (serverTime) {
                    $('#serverTime').html(serverTime.formatDate());
                });
            }
        }

        function updatePerformanceStatistics() {
            if (hubIsConnected)
                serviceHub.getPerformanceStatistics().done(function (statistics) {
                    $("#performanceStatistics").html(statistics);
                });
        }

        $(window).on("hubConnected", function (event) {
            updatePerformanceStatistics();
            setInterval(updatePerformanceStatistics, 5000);
        });

        $("#restartButton").click(function () {
            if (hubIsConnected && confirm("Are you sure you want to restart service?"))
                serviceHub.sendCommand("restart");
        });

        $(function () {
            updateTimestamps();
            setInterval(updateTimestamps, 1000);
        });

        //$(window).resize(function () {
        //    $("#fontSizeLabel").html("Font Size: " + $("#performanceStatistics").css("font-size") + ", Window Size: " + $(window).width().toString());
        //});

    </script>
}
@functions {
    public string GetCurrentUserID()
    {
        //if (Thread.CurrentPrincipal.Identity == null)
        //    return UserInfo.CurrentUserID;

        return Thread.CurrentPrincipal.Identity.Name;
    }
}

<div class="row">
    <div class="col-lg-4 col-md-4 col-sm-5">
        @*<div class="panel panel-default">
                <div class="panel-heading">Quick Links</div>
                <div class="panel-body">
                    <div class="btn-group-vertical btn-block">
                        <a href="Meters.cshtml" role="button" class="btn btn-primary">Meters</a>
                        <a href="Status.cshtml" role="button" class="btn btn-default">Status</a>
                        <a href="ConnectionProfiles.cshtml" role="button" class="btn btn-default">Connection Profiles</a>
                        <a href="ModbusConfig.cshtml" role="button" class="btn btn-default">Add Modbus Mapping</a>
                        <a href="GraphMeasurements.cshtml" role="button" class="btn btn-default">Graph Measurements</a>
                        <button type="button" class="btn btn-default" id="restartButton" hub-dependent>Restart Service</button>
                    </div>
                </div>
            </div>*@
        <ul class="list-group">
            <li class="list-group-item">
                <span class="badge badge-fixed" id="serverTime">@DateTime.UtcNow.ToString(Model.Global.DateTimeFormat)</span>Server&nbsp;Time
                <hr class="quarter-break" />
                <span class="badge badge-fixed" id="localTime">@DateTime.UtcNow.ToString(Model.Global.DateTimeFormat)</span>Local&nbsp;Time
                <hr class="quarter-break" />
                <span class="badge badge-fixed" id="currentUser">@GetCurrentUserID()</span> Current User
            </li>
            <li class="list-group-item">
                <span class="badge badge-fixed" id="applicationVersion">@applicationVersion</span>App&nbsp;Version
                <hr class="quarter-break" />
                <span class="badge badge-fixed" id="databaseType">DB: @databaseType</span>Config&nbsp;Type
                <hr class="quarter-break" />
                <span class="badge badge-fixed" id="databaseName">@databaseName</span>Config&nbsp;Name
            </li>
        </ul>
        <p class="text-info text-center small">@ViewBag.Request.RequestUri.ToString()</p>
        <!-- label class="small" id="fontSizeLabel"></label -->
    </div>
    <div class="col-lg-8 col-md-8 col-sm-7">
        <div class="panel panel-default">
            <div class="panel-heading">System Health</div>
            <div class="panel-body">
                <pre class="performance-statistics" id="performanceStatistics">Loading&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh glyphicon-spin"></span></pre>
            </div>
        </div>
    </div>
</div>
@{
    ViewBag.StyleSheetsSection = RenderSection("StyleSheets").ToString();
    ViewBag.ScriptsSection = RenderSection("Scripts").ToString();
}